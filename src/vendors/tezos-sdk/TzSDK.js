exports.camlInit=
// Generated by js_of_ocaml 3.7.1
function camlInit
 (joo_global_object)
 {"use strict";
  var
   num_3603131=3603131,
   str_chain_validators="chain_validators",
   str_Unexpected_s_in_abr="Unexpected %s instead of %s",
   num_424=424,
   str_date="date",
   str_additionalItems="additionalItems",
   str_uniqueItems="uniqueItems",
   num_192=192,
   num_319=319,
   num_365180284=365180284,
   str_Switch_proxy="Switch_proxy",
   str_load="load",
   str$19="[]",
   str_archive="archive",
   str_block="block",
   str_answer="answer",
   str_title="title",
   str_notice="notice",
   num_122=122,
   str$36=" (",
   str_Switching_protocols="Switching_protocols",
   str_chain="chain",
   num_181=181,
   str_Wrong_padding="Wrong padding",
   num_305=305,
   num_128=128,
   str_A_date_in_second_abr="A date in seconds from epoch",
   str_An_error_occurre_abr="An error occurred while deciphering.",
   str$18=">",
   str_rolling="rolling",
   str_float="float",
   num_153=153,
   str_src_core_lwt_ml="src/core/lwt.ml",
   num_1027=1027,
   str_valid_blocks="valid_blocks",
   str_protocol_data="protocol_data",
   str_Error_while_pars_abr="Error while parsing URI: PK_URI needs a scheme",
   str_inc="inc",
   num_1027682724=-1027682724,
   num_774758938=-774758938,
   str_connection="connection",
   str_Resume_incomplete="Resume_incomplete",
   str_GET="GET",
   num_1051942420=-1051942420,
   num_14596=14596,
   str_surrogate="surrogate",
   num_2147483000=2147483000.,
   str_lone="lone",
   str_method="method",
   num_384167631=384167631,
   str_error="error",
   str_Fragment="Fragment",
   str_bigarray="_bigarray",
   str_arraybuffer="arraybuffer",
   str_Running_a_deprec_abr="Running a deprecated p2p layer version",
   num_49=-49,
   str_e="e",
   str_config="config",
   str_media_type="media_type",
   num_511=511,
   str_minProperties="minProperties",
   str_Uint8="Uint8",
   str_Unmergeable_objects="Unmergeable objects",
   num_571404121=571404121,
   str_edsk="edsk",
   str_Obj_extension_co_abr="Obj.extension_constructor",
   num_99004555=-99004555,
   str_active_chains="active_chains",
   num_43=-43,
   str_found$0="found",
   str_int32="int32",
   str_timespan="timespan",
   str$75="  ",
   str_ref="$ref",
   num_306=306,
   str_minimum_field_re_abr=
    "minimum field required when exclusiveMinimum is true",
   str_not_enough_data_abr$3="not enough data, bool expected (1 byte)",
   num_3299808=3299808,
   str_info="info",
   str_Bool="Bool",
   str_expected$0=" expected ",
   num_968575390=-968575390,
   num_111=111,
   str_msg="msg",
   str_started="started",
   str_type="type",
   str_authorization="authorization",
   str_Failed_request="Failed request",
   num_980827423=980827423,
   num_42=-42,
   str_scanf_bad_conve_abr='scanf: bad conversion "%*"',
   num_438114087=-438114087,
   num_110$0=-110,
   str_payload="payload",
   str_Rejected_peer_co_abr$1=
    "Rejected peer connection: rejected socket connection.",
   str$74=" }",
   str_infinity="infinity",
   str_Partial_content="Partial_content",
   num_395032306=-395032306,
   str_Too_many_connect_abr="Too_many_connections",
   num_720017128=-720017128,
   str_commit_hash="commit_hash",
   str_t="\\t",
   str_Node_is_in_priva_abr="Node is in private mode.",
   str_raw="raw",
   num_112=112,
   str_Basic="Basic ",
   str_history_mode="history_mode",
   str_src_encoding_ml="src/encoding.ml",
   str_phase="phase",
   str_a$1="[%a]",
   str_kind="kind",
   num_87=-87,
   num_110=110,
   num_20660969=-20660969,
   num_133=-133,
   str_at_offset="(at offset: ",
   str_Request_header_f_abr="Request_header_fields_too_large",
   str_padding="padding",
   num_17692=17692,
   str_Scheme="Scheme",
   num_32=-32,
   str_authorized_keys="authorized_keys",
   num_894980516=894980516,
   num_1023=1023,
   str_boolean="boolean",
   str$17=").",
   str_string_len_d="string (len %d)",
   str_Lwt="Lwt.",
   num_944934206=-944934206,
   str_count_while1="count_while1",
   num_117=117,
   str_header="header",
   str_s$1="%s",
   num_803994504=803994504,
   str_Str_replace_ref_abr="Str.replace: reference to unmatched group",
   str_Assert_failure="Assert_failure",
   str_s$0="/%s/",
   num_123$0=-123,
   num_308=308,
   str_accepted="accepted",
   str_an="an",
   str_size="size",
   num_994393768=994393768,
   str_filter="filter",
   num_1e14=1e14,
   str_debug="debug",
   str_Continue="Continue",
   str_failed_to_parse_abr$2="failed to parse time (epoch): %S",
   str$55=",",
   num_40653089=40653089,
   num_783416530=-783416530,
   str_o="o",
   str_network_version="network_version",
   str_X="%X",
   str_host="host",
   num_146097=146097,
   num_256=256,
   num_61643255=61643255,
   num_192584839=192584839,
   str_stats="stats",
   num_732461442=732461442,
   str_Length_required="Length_required",
   str_N_t="N.t",
   num_127343600=127343600,
   str_pipelines="pipelines",
   num_234002583=-234002583,
   str_Too_few_connections="Too_few_connections",
   str_method_b="method_b",
   str_v$0="<v>",
   num_13829438=13829438,
   str_keys="keys",
   str_Invalid_int="Invalid int",
   num_200=200,
   str_Sign_write_buff_abr$0="Sign.write: buffer length too small (%d)",
   str_information="information",
   str_List_too_long="List too long",
   str$35="\xff\xff",
   str_Too_many_requests="Too_many_requests",
   num_59604=59604,
   num_498198474=-498198474,
   num_32768=-32768,
   str_Processing="Processing",
   str_Retry_with="Retry_with",
   num_145160103=-145160103,
   str_load_passwords="load_passwords",
   num_16013212=16013212,
   str_x$0="x",
   str_String="String",
   str$54="\xe2\x88\x9e[",
   str_maxLength="maxLength",
   str_deterministic_nonce="deterministic_nonce",
   str_qvalue="qvalue ",
   str_minLength="minLength",
   str_PATCH="PATCH",
   str_last_disconnection="last_disconnection",
   str_branch_refused="branch_refused",
   str_d="%d",
   num_60220292=60220292,
   num_314=314,
   num_992790154=992790154,
   str_buffer_ml="buffer.ml",
   num_15361451=-15361451,
   str_meth="meth",
   str$73="\xe2\x9a\x8d",
   str_save_point="save_point",
   str_resource="resource",
   str_OPTIONS="OPTIONS",
   str_head="head",
   str_s="#%s",
   str_At="At ",
   num_169087453=169087453,
   num_459143713=-459143713,
   num_479410653=479410653,
   str_src_binary_reade_abr="src/binary_reader.ml",
   num_783416531=-783416531,
   str_int64="int64",
   str_2f_MiB="%.2f MiB",
   str_Z_t="Z.t",
   str_Network_connect_abr="Network_connect_timeout_error",
   str_Temporary_redirect="Temporary_redirect",
   num_10817536=10817536,
   num_451=451,
   str_resident="resident",
   str_See_other="See_other",
   num_100=100,
   str_min_date="min_date",
   str$34="*",
   num_300=300,
   str_outdated="outdated",
   str_The_announced_si_abr=
    "The announced size for the incoming ciphertext is invalid.",
   num_33=-33,
   str_s_of_bytes_wro_abr="%s.of_bytes: wrong string size (%d)",
   str_properties="properties",
   num_12825579=-12825579,
   str_uri="uri",
   str_Already_reported="Already_reported",
   str_confirmations="confirmations",
   num_558492973=558492973,
   str_Not_acceptable="Not_acceptable",
   str_Use_proxy="Use_proxy",
   str_bytes="bytes",
   str_Too_many_operati_abr="Too many operations in prevalidation context.",
   str_Unix_Unix_error="Unix.Unix_error",
   str_hv_0="<hv 0>",
   num_3997359=3997359,
   str_propertyDependen_abr="propertyDependencies",
   str_Stack_overflow="Stack_overflow",
   str_List_length_limi_abr="List length limit exceeded",
   str_last_failed_conn_abr="last_failed_connection",
   num_253=253,
   str_disconnected="disconnected",
   str_Not_found="Not_found",
   str_p2p_peer_id="p2p_peer_id",
   num_143365725=143365725,
   str_since="since",
   str_size_tag_inconsi_abr="size tag inconsistent with actual data",
   num_174=174,
   str_is_already_alia_abr=" is already aliased as ",
   str_anyOf="anyOf",
   str$33="./",
   num_1000=1000.,
   num_330714374=-330714374,
   str_Too_many_connect_abr$0="Too many connections.",
   str$16="]\xe2\x88\x9e",
   num_1026=1026,
   str_low="low",
   str_Gc_peer_ids="Gc_peer_ids",
   str_No_response="No_response",
   str_external_disconn_abr="external_disconnection",
   num_881248069=881248069,
   str_fields="fields",
   num_202=202,
   str_Json_encoding_co_abr="Json_encoding.construct: ",
   str_chain_id="chain_id",
   num_43455790=-43455790,
   str_false="false",
   str_push="push",
   str_Invalid_integer="Invalid integer: ",
   str_Forbidden="Forbidden",
   str_flush="flush",
   num_186=186,
   num_0x80=0x80,
   str_Can_be_a="\nCan be a ",
   num_18854=18854,
   str_peers="peers",
   str_base="base",
   num_508493173=508493173,
   num_303=303,
   str$72=" ]",
   str_public_key="public_key",
   str_h_0_a="@[<h 0>%a@]",
   str_expiration="expiration",
   str$71="_",
   str_compare_functio_abr="compare: functional value",
   str_Variant_also_neg_abr="Variant_also_negotiates",
   num_444=444,
   num_225181919=225181919,
   str_id="id",
   num_114=114,
   str_Locked="Locked",
   num_1020133797=1020133797,
   str_character$0="character",
   num_1055856623=-1055856623,
   num_69=-69,
   str_supports_determi_abr="supports_deterministic_nonces",
   str_content_type="content-type",
   str_stat="stat",
   str_Invalid_argument="Invalid_argument",
   str_Ended="Ended",
   str_ni="%ni",
   str_Other="Other",
   num_65414873=65414873,
   str_operation="operation",
   num_605782321=605782321,
   num_86400$0=86400.,
   str_Canceled="Canceled",
   num_45=-45,
   str_port="port",
   str_the_client_wil_abr=", the client will look for a file containing a ",
   str_lib_ezjsonm_ml="lib/ezjsonm.ml",
   num_892015045=892015045,
   str_Known_invalid="Known invalid",
   str_0="0",
   str_at_character_n_abr=": at character number ",
   str_Chunked="Chunked",
   num_443964500=443964500,
   num_884916592=884916592,
   num_248=248,
   str_sleep="sleep",
   str_unknown="unknown",
   num_826170817=-826170817,
   str_other="other",
   num_282375460=282375460,
   num_382669006=382669006,
   num_301=301,
   str_operations="operations",
   num_337249679=337249679,
   str_items="items",
   str_object="object",
   str_untrust="untrust",
   num_491839979=491839979,
   str$53="'*'",
   num_626869805=626869805,
   str$15="[ ",
   str_fitness="fitness",
   str_Upgrade_required="Upgrade_required",
   str_MiB=" MiB",
   num_784200974=-784200974,
   str_Non_increasing_t_abr="Non increasing timestamp",
   num_32767=32767,
   str_Failed_to_read_a_abr="Failed to read a b58check_encoding data (%s): %S",
   str_PUT="PUT",
   str_definitions="definitions",
   num_1024=1024,
   num_357830602=357830602,
   num_713199754=713199754,
   str_Custom="Custom",
   str_oneOf="oneOf",
   str_P256="P256",
   str_received="received",
   num_801894688=801894688,
   str_len=" len=",
   str_last_seen="last_seen",
   str_not_enough_data_abr$6="not enough data for size and terminator",
   str_Authorized_keys="Authorized_keys",
   str_yes="yes",
   str_and=" and ",
   str_bson="bson",
   num_540315116=540315116,
   str_status="status",
   str_Multi_status="Multi_status",
   num_0xffffff=0xffffff,
   str$70="::",
   num_558113336=-558113336,
   num_3455931=3455931,
   str$52="/* ",
   str_src_client_ml="src/client.ml",
   str_maximum="maximum",
   str_event="event",
   str_Error_while_pars_abr$0="Error while parsing URI: SK_URI needs a scheme",
   num_57067359=57067359,
   str_enum="enum",
   num_2147483647=2147483647,
   num_208=208,
   str_in="in",
   str_characters=", characters ",
   num_0x7F=0x7F,
   num_17724=17724,
   str_hex_conversion_abr="hex conversion: invalid hex string",
   str_none="none",
   num_463055138=-463055138,
   str_s_d$0="%s+%d",
   num_826371656=826371656,
   str_failed="failed",
   str_schemaDependencies="schemaDependencies",
   num_595188612=-595188612,
   str_Fail_to_connect_abr$0=
    "Fail to connect with a peer: a connection is already pending.",
   num_785212614=-785212614,
   str_Please_enter_pas_abr="Please enter password:",
   str_Extra_bytes="Extra bytes",
   num_224=224,
   str_Gateway_timeout="Gateway_timeout",
   str_No_motive="No motive",
   num_223=223,
   str_Time_of_notation="Time.of_notation",
   num_102779818=102779818,
   str_bootstrapped="bootstrapped",
   str_headers="headers",
   str_negative_natural="negative natural",
   str_Query_value="Query_value",
   str_Expectation_failed="Expectation_failed",
   str_Query="Query",
   num_854525125=854525125,
   str_Sign_write_buff_abr="Sign.write: buffer length too small (",
   str$14="\xe2\x9a\x8e",
   num_434236056=434236056,
   str_src_resto_ml="src/resto.ml",
   str_minimum="minimum",
   num_61693000=61693000,
   num_55=-55,
   str$32="{ ",
   str$31="@,",
   num_187=187,
   num_824773160=824773160,
   num_304=304,
   num_250086680=-250086680,
   str_array="array",
   num_65536=65536,
   str_Ref="Ref",
   num_840540685=-840540685,
   str_close="close",
   str_CONNECT="CONNECT",
   str_No_content="No_content",
   str_expected="expected",
   str_nan="nan",
   str_out_of_range=" out of range",
   num_527633381=-527633381,
   str_0123456789abcdef="0123456789abcdef",
   str_caboose="caboose",
   str_digit="digit",
   num_0xdfff=0xdfff,
   str$13="/",
   str$69="'#'",
   str_illegal="illegal",
   num_1073741823=1073741823,
   num_387970219=-387970219,
   str_Unprocessable_en_abr="Unprocessable_entity",
   str_number="number",
   str_r="\\r",
   str_a_d="[%a]:%d",
   str_Gone="Gone",
   str_Zero_width="Zero_width",
   str_JSON="JSON",
   num_255=255,
   num_1034456810=1034456810,
   str_prompt="prompt",
   str_Fixed="Fixed",
   str_0b="0b",
   str_End_of_file="End_of_file",
   str_stream="stream",
   str_allOf="allOf",
   num_852405675=852405675,
   str$12="..",
   str_Failure="Failure",
   str_sexp_conv_ml="sexp_conv.ml",
   str_chains="chains",
   str_cohttp_src_code_abr$1="cohttp/src/code.ml.status_code",
   str_member="member",
   num_247=247,
   str_Bad_gateway="Bad_gateway",
   str_Bigarray_blit_d_abr="Bigarray.blit: dimension mismatch",
   str_type_type_array_abr="type, type array or operator",
   str_Code="Code",
   str_branch_delayed="branch_delayed",
   num_980827863=980827863,
   num_0xdc00=0xdc00,
   str_max$0=", max: ",
   str_live_blocks="live_blocks",
   str_hv_2="<hv 2>",
   num_893234971=893234971,
   str_fixed="fixed",
   str_Encountered_an_e_abr="Encountered an error",
   str_Sys_error="Sys_error",
   str_found=" found ",
   num_332360020=332360020,
   str_P2P_layer_disabled="P2P layer disabled.",
   str_warning="warning",
   str_write="write",
   str_prompt_password="prompt_password",
   str_protocol="protocol",
   str_validation_pass="validation_pass",
   str_failed_request="failed_request",
   str_int_of_string="int_of_string",
   str_Checkpoint="Checkpoint",
   str_None="None",
   num_792903807=792903807,
   str_announced_version="announced_version",
   num_978086655=-978086655,
   str_Proxy_authentica_abr="Proxy_authentication_required",
   str_name="name",
   str_peers_validators="peers_validators",
   str_applied="applied",
   num_103=103,
   str_read_file="read_file",
   num_55296=55296,
   num_257=257,
   str_replacement_prot_abr="replacement_protocol",
   str_monitor="monitor",
   str_or="or",
   str$11=" ...,",
   str_Uint16="Uint16",
   num_799445793=-799445793,
   str_Unexpected="Unexpected ",
   str_Bad_request="Bad_request",
   str_Weak_create="Weak.create",
   str_incdirect="incdirect",
   str_B$0="B",
   str_no="no",
   str_Created="Created",
   str_test_chain_status="test_chain_status",
   str_end="end",
   str_failed_to_parse_abr$1="failed to parse time (epoch): ",
   str_not="not",
   str_Li="%Li",
   num_65535=65535,
   str_unban="unban",
   str_DELETE="DELETE",
   str_Dynamic="Dynamic",
   num_302=302,
   num_205=205,
   str_Query_key="Query_key",
   str$30="/*",
   str_src_resto_direct_abr="src/resto_directory.ml",
   str_lexing_empty_token="lexing: empty token",
   str_z="_z",
   str_call_service="call_service",
   str_compilation_error="compilation error",
   str_src_dll_ml="src/dll.ml",
   str_Operation_parsin_abr="Operation parsing error in prevalidation.",
   str_expected_env_ver_abr="expected_env_version",
   str$51="']')",
   num_60991774=60991774,
   str_main="main",
   num_243443684=243443684,
   num_850585938=-850585938,
   num_566851975=566851975,
   num_888960333=888960333,
   str_string_len="string (len ",
   str_Re_repn="Re.repn",
   str_a="%a",
   str$50=", ",
   str_static="static/",
   str_motive="motive",
   str_v_0="<v 0>",
   str_application="application",
   num_80=-80,
   str_trusted="trusted",
   str_Unauthorized="Unauthorized",
   num_36288910=-36288910,
   num_870828711=870828711,
   num_2047=2047,
   str_descr="descr",
   str$68="...",
   str_disconnection="disconnection",
   str_dst=" dst=",
   str_not_enough_data_abr$5="not enough data, terminator expected (0x00)",
   num_408=408,
   num_251=251,
   str_Network_authenti_abr="Network_authentication_required",
   num_858743897=858743897,
   str_Path="Path",
   str$67=" ",
   str_Not_implemented="Not_implemented",
   str_Undefined_recurs_abr="Undefined_recursive_module",
   str_Multiple_choices="Multiple_choices",
   num_806912325=806912325,
   num_508281962=-508281962,
   str_non_registered_u_abr="non-registered-uri-scheme",
   str_test_protocol="test_protocol",
   str_Not_extended="Not_extended",
   num_386853281=-386853281,
   num_646135987=-646135987,
   str_The_RPC_returned_abr=
    "The RPC returned with an error code but no associated error.",
   str_v_2="<v 2>",
   str$49="@ | ",
   str_Set_bal="Set.bal",
   str_Remote_peer="Remote peer ",
   str_DEPRECATED_use_abr="DEPRECATED: use `version` instead.",
   num_976970511=-976970511,
   str_mempool="mempool",
   str_Rejecting_request="Rejecting_request",
   str_A_span_of_time_i_abr="A span of time in seconds",
   num_15677=15677,
   str_i="%i",
   str_Failed_to_parse_abr="Failed to parse the block header.",
   str_exception="exception",
   num_732353682=-732353682,
   str_kiB=" kiB",
   str$10='\\"',
   num_684370880=684370880,
   num_178940859=-178940859,
   num_355=355,
   num_881518886=881518886,
   str_ended="ended",
   str_Error="Error:",
   str_2f_kiB="%.2f kiB",
   num_155623867=155623867,
   num_93357412=93357412,
   str_state="state",
   str_invalid_field_na_abr="invalid field names for array field",
   num_123=123,
   str_POST="POST",
   num_1006505782=1006505782,
   str_a_list="a list",
   str_pattern="pattern",
   str_context="context",
   str_satisfy_C="satisfy: %C",
   str_next_protocol="next_protocol",
   num_415233371=415233371,
   str$66=" */",
   num_0xff=0xff,
   str_Bytes="Bytes",
   str_Accepting_request="Accepting_request",
   str_src_uutf_ml="src/uutf.ml",
   str_comment="comment",
   num_191=191,
   str_hash="hash",
   str_message="message",
   str_is_banned=") is banned.",
   num_176787538=-176787538,
   str_request="request",
   str_Connection_was_r_abr="Connection was refused.",
   num_731537414=731537414,
   num_364210971=-364210971,
   str_fd="fd ",
   str_expected$1=" (expected ",
   str_int="int",
   str_The_size_of_the_abr="The size of the message to be written is invalid.",
   str_Loop_detected="Loop_detected",
   str_Non_increasing_f_abr="Non increasing fitness",
   str_0o="0o",
   str_Running="Running",
   num_409=409,
   str$29="| ",
   str_epoch="epoch",
   num_429931233=429931233,
   str_Trailing_zero_in_Z="Trailing zero in Z",
   num_57343=57343,
   str_signature="signature",
   str_workers="workers",
   str_running="running",
   str_failed_to_parse_abr$0="failed to parse timespan: ",
   str_depth="depth",
   num_108=108,
   str_heads="heads",
   num_2147483648=-2147483648,
   str_1$0="1",
   str_max_size="max_size",
   str$9="([^/]*)",
   num_891112544=891112544,
   num_229723487=229723487,
   str_not_enough_data_abr$2=
    "not enough data, subdocument size tag expected (4 bytes)",
   num_1028883702=-1028883702,
   num_807430278=807430278,
   str_b$0="b",
   str_metadata="metadata",
   num_1052164689=1052164689,
   str_Use_alias_nam_abr=
    ".\nUse 'alias:name', 'file:path' or 'text:literal' to disable autodetect.",
   str_description="description",
   num_332064784=332064784,
   str_Base58_registere_abr=
    "Base58.registered_encoding: variable length encoding.",
   str_cohttp_src_code_abr="cohttp/src/code.ml.meth",
   str_Float="Float",
   str_Out_of_memory="Out_of_memory",
   num_437335495=437335495,
   num_86400=86400,
   str_Network_read_tim_abr="Network_read_timeout_error",
   str_last_miss="last_miss",
   num_912009552=-912009552,
   str_index_out_of_bounds="index out of bounds",
   str_maximum_field_re_abr=
    "maximum field required when exclusiveMaximum is true",
   str$28="\xe2\x9a\x8c",
   str_bigarr02="_bigarr02",
   str_Not_modified="Not_modified",
   str_rejecting_request="rejecting_request",
   num_599500189=599500189,
   num_10000=10000,
   str_pushed="pushed",
   num_161957855=161957855,
   num_0xffff=0xffff,
   num_221106440=-221106440,
   num_222=222,
   num_400=400,
   str_layout="layout",
   str_force="force",
   num_911188600=-911188600,
   str_has_incorrect_n_abr=" has incorrect number of arguments",
   str_Weak_set="Weak.set",
   str_compute_path="compute_path",
   str_deterministic_no_abr="deterministic_nonce_hash",
   str_content="content",
   str_last_rejected_co_abr="last_rejected_connection",
   str_genesis="genesis",
   num_126=126,
   str_now="now",
   str_and_if_it_does_abr=
    ", and if it does not exist, the argument will be read as a raw ",
   str_int_of_hex_char="int_of_hex_char",
   str_Rejected_peer_co_abr$0=
    "Rejected peer connection: no common network protocol.",
   str_locator="locator",
   num_748543309=748543309,
   str_Precondition_req_abr="Precondition_required",
   str_1="<1>",
   num_124=124,
   num_65279=65279,
   str_Ed25519="Ed25519",
   str_Im_used="Im_used",
   str$8="): ",
   str_Invalid_state_s="Invalid state: %s",
   str_x="%x",
   str_scanning_of="scanning of ",
   num_10=-10,
   str_Bandwidth_limit_abr="Bandwidth_limit_exceeded",
   num_252=252,
   str_banned="banned",
   num_540315115=540315115,
   str$48=".",
   str_requested="requested",
   str_hov_2="<hov 2>",
   num_0xf0=0xf0,
   num_944268762=-944268762,
   str_network="network",
   num_789753444=789753444,
   str$27="]:",
   num_116=116,
   str$65=" ... ]",
   num_56320=56320,
   num_213=213,
   str_max="max",
   num_18898339=18898339,
   str_page_size="page_size",
   str_generic_json_call="generic_json_call",
   str_acceptable="acceptable",
   str_multipleOf="multipleOf",
   str_set_reference="set_reference",
   str_secret_key="secret_key",
   str_checkpoint="checkpoint",
   str_value="value",
   num_398446314=-398446314,
   str_password="password",
   str_trust="trust",
   str_format="format",
   num_803493184=803493184,
   str_null="null",
   str_src_json_schema_ml="src/json_schema.ml",
   str_not_enough_data_abr$1=
    "not enough data, string terminator expected (0x00)",
   str_additionalProper_abr="additionalProperties",
   str_patternProperties="patternProperties",
   str_The_server_answe_abr="The server answered with an empty response.",
   str$7='"',
   num_170=170,
   str$64="<",
   num_0x800=0x800,
   str_event_kind="event_kind",
   str_src_lib_crypto_s_abr="src/lib_crypto/signature.ml",
   str_prevalidators="prevalidators",
   str_file="file",
   str_Host="Host",
   str_JSON_pointer_w_o_abr="JSON pointer w/o wildcards",
   str_resize="resize",
   num_398=398,
   str_blocked="blocked",
   str_Already_connecte_abr="Already connected/connecting",
   num_0_012=0.012,
   num_88=-88,
   num_2932896=2932896,
   str_Request_entity_t_abr="Request_entity_too_large",
   str_integer="integer",
   num_331416730=331416730,
   str_terminator_expec_abr="terminator expected (0x00)",
   str_B=" B",
   num_1021446370=-1021446370,
   str_p2p_point_state_abr="p2p.point.state_filter",
   str_get_base_dir="get_base_dir",
   num_611285096=-611285096,
   str_distributed_db_v_abr="distributed_db_version",
   str_dynlinking_error="dynlinking error",
   num_0xf=0xf,
   str_src_lib_js_sdk_c_abr="src/lib_js_sdk/client_context_js.ml",
   str_errors="errors",
   str_data_kind="data_kind",
   num_498443355=498443355,
   num_125=125,
   str_cases="cases",
   num_392751220=392751220,
   num_336447077=336447077,
   str_Request_uri_too_abr="Request_uri_too_long",
   str_Division_by_zero="Division_by_zero",
   str_accepting_request="accepting_request",
   str$63=") ",
   str_protocols="protocols",
   str_satisfy="satisfy: ",
   str_not_enough_data_abr$4=
    "not enough data, field name terminator expected (0x00)",
   num_324098644=324098644,
   str_Request_timeout="Request_timeout",
   str$47=": ",
   str_not_enough_input="not enough input",
   str_request_rejected="request_rejected",
   num_795008922=795008922,
   str_No_case_matched="No case matched",
   str$46="'",
   num_119=119,
   num_247210088=-247210088,
   str_chain_id_test_fa_abr="chain_id_test failed",
   str_full="full",
   str_Int="Int",
   num_102=102,
   str_literal_If_the_abr=
    " literal. If the parameter is not the name of an existing ",
   num_207183757=-207183757,
   str_level="level",
   str_min="min",
   num_101=101,
   str_HTTP_1_0="HTTP_1_0",
   num_5495062=5495062,
   num_633954146=-633954146,
   str_Authority="Authority",
   num_1e7=1e7,
   str_lib_core_ml="lib/core.ml",
   num_254=254,
   str_scanf_ml="scanf.ml",
   str$26=" - ",
   str_addr="addr",
   num_211555818=-211555818,
   str_flags_Open_te_abr=
    " : flags Open_text and Open_binary are not compatible",
   num_1042139761=-1042139761,
   num_30214610=30214610,
   str_id_point="id_point",
   str_of_string_wron_abr=".of_string: wrong string size (",
   str$6="\\\\",
   num_211558048=-211558048,
   str_All_the_operatio_abr=
    "All the operations included in `n-th` validation pass of the block.",
   num_897427648=897427648,
   str_Generic_error="Generic error",
   str_maxProperties="maxProperties",
   num_874866960=874866960,
   num_103274127=-103274127,
   str_prompt_password_abr="prompt_password not implemented in context",
   str_count="count",
   num_153884648=153884648,
   num_659980059=659980059,
   str_HEAD="HEAD",
   num_1034287848=1034287848,
   str$5="@ ",
   str_Enhance_your_calm="Enhance_your_calm",
   str_Method_not_allowed="Method_not_allowed",
   num_97=-97,
   str_with_lock="with_lock",
   str_Unable_to_serial_abr=
    "Unable to serialize the metadata for an operation.",
   num_65599=65599,
   num_726711616=726711616,
   num_1461=1461,
   str_Fail_to_connect_abr=
    "Fail to connect with a peer: a connection is already established.",
   str_chunked="chunked",
   str_minItems="minItems",
   str_identity="identity",
   str_treated="treated",
   num_2440588=2440588,
   num_977172320=-977172320,
   str_http="http",
   str_f$0="f",
   num_0x3FFFFFFF=0x3FFFFFFF,
   num_260151748=260151748,
   str_separator="separator",
   str_g="%g",
   str_blocks="blocks",
   str_exit="exit",
   num_14610=14610,
   str_string="string",
   str_test="test",
   str_Failed_to_read_a_abr$0="Failed to read a b58check_encoding data (",
   str_single="single",
   str_accept="accept",
   str_length="length",
   str_f="%f",
   str$4=":",
   str_wait="wait",
   str_Running_a_deprec_abr$0="Running a deprecated distributed db version",
   str_Unexpected_data="Unexpected data (",
   str_point="point",
   num_869834347=869834347,
   num_641597244=641597244,
   str_version="version",
   str_refused="refused",
   str_Client_closed_re_abr="Client_closed_request",
   num_128$0=-128,
   str_s_a="/%s%a",
   str_Payment_required="Payment_required",
   str_hov_0="<hov 0>",
   str_true="true",
   str_Moved_permanently="Moved_permanently",
   num_214=214,
   str$62="(','",
   num_1014316796=-1014316796,
   str_Non_authoritativ_abr="Non_authoritative_information",
   str_is_too_large_fo_abr=" is too large for shifting.",
   str_Map_bal="Map.bal",
   str_any="any",
   str$3="@[",
   str_Invalid_log_rules="Invalid log rules",
   str$45="\\",
   str_Base58Check_en_abr=" (Base58Check-encoded)",
   str$44="'}')",
   str_at_offset_d_s="(at offset: %d) %s",
   str_ml_z_overflow="ml_z_overflow",
   str$61="\\",
   str_birth="birth",
   str_sort_operations="sort_operations",
   num_307=307,
   num_620821490=620821490,
   num_309=309,
   str_Requested_range_abr="Requested_range_not_satisfiable",
   num_598402413=-598402413,
   str_Unknown_chain_name="Unknown chain name",
   str_The_operation="The operation ",
   str_Padding="Padding",
   str_Insufficient_sto_abr="Insufficient_storage",
   num_429055472=-429055472,
   str_failed_to_parse_abr="failed to parse timespan: %S",
   str_Sys_blocked_io="Sys_blocked_io",
   num_8097=8097,
   num_450=450,
   str_invalid_format="invalid format ",
   str_active_peers="active_peers",
   num_492530731=492530731,
   str_block_hash="block_hash",
   str_name_a_file_or_abr=" name, a file or a raw ",
   str$43="@;",
   str_Not_enough_data="Not enough data",
   num_0xFF=0xFF,
   str_Generic="Generic",
   num_926224370=926224370,
   num_870035731=870035731,
   str_Service_unavailable="Service_unavailable",
   num_246=246,
   str_u="%u",
   num_719528=-719528,
   num_5395588=5395588,
   num_781960526=781960526,
   str_exclusiveMinimum="exclusiveMinimum",
   str_S="%S",
   str_Failed_dependency="Failed_dependency",
   str_text="text",
   str_Unknown_ancestor="Unknown ancestor",
   num_108$0=-108,
   str_bytes$0=" bytes)",
   num_127=127,
   str_lib_sexp_uri_sex_abr="lib_sexp/uri_sexp.ml.Derived.component",
   str$42="@{",
   num_199968061=-199968061,
   str_flags_Open_rd_abr=
    " : flags Open_rdonly and Open_wronly are not compatible",
   num_240=240,
   str$60="-",
   str_Timeout="Timeout",
   str_hv_0_a="@[<hv 0>%a@]",
   str_async="async",
   str_trace="trace",
   str_operations_for_b_abr="operations_for_block",
   num_427938126=427938126,
   num_438511779=438511779,
   num_216=216,
   str_file_already_abr=" : file already exists",
   str_Array_length_lim_abr="Array length limit exceeded",
   str_last_established_abr="last_established_connection",
   str_Rejected_peer_co_abr=
    "Rejected peer connection: invalid authentication.",
   str_Reset_content="Reset_content",
   str$41=">>>>",
   num_358247754=-358247754,
   num_106380200=106380200,
   str$2=":\n",
   str_TRACE="TRACE",
   str_empty_object="empty object",
   str_missing_uri_scheme="missing-uri-scheme",
   str_External_disconn_abr="External_disconnection",
   str_b="\\b",
   num_404=404,
   str_Started="Started",
   str_RangedFloat="RangedFloat",
   num_12520=12520,
   str_json="json",
   num_803298286=803298286,
   str_Program_not_lin_abr=
    "(Program not linked with -g, cannot print stack backtrace)\n",
   num_46=-46,
   str_stderr="stderr",
   str_Invalid_float="Invalid float",
   num_91=-91,
   str_Size_limit_exceeded="Size limit exceeded",
   str_string_terminato_abr="string terminator expected (0x00)",
   num_17732=17732,
   str_operation_hashes_abr="operation_hashes_for_block",
   num_973294248=973294248,
   str$25="' '",
   num_867418942=-867418942,
   str_bool="bool",
   num_1000$0=1000,
   str_default="default",
   str_h="<h>",
   str$59="",
   str_transfer_encoding="transfer-encoding",
   str$24="^",
   num_737456202=737456202,
   str_alias$0=" alias",
   str_Internal_server_abr="Internal_server_error",
   str_Bad_data_directory="Bad data directory.",
   num_0x3f=0x3f,
   str_connection_estab_abr="connection_established",
   str_Unknown="Unknown",
   num_17718=17718,
   str_src="src",
   str_timestamp="timestamp",
   num_672226188=672226188,
   str_Match_failure="Match_failure",
   str_Unsupported_medi_abr="Unsupported_media_type",
   str_peer_id="peer_id",
   num_0x00=0x00,
   str$23="\xe2\x9a\x8f",
   str$58="+",
   str_s_Can_be_a_s_n_abr=
    "%s\nCan be a %s name, a file or a raw %s literal. If the parameter is not the name of an existing %s, the client will look for a file containing a %s, and if it does not exist, the argument will be read as a raw %s.\nUse 'alias:name', 'file:path' or 'text:literal' to disable autodetect.",
   str$57=" : ",
   str_encoding="encoding",
   str_Json_encoding_me_abr="Json_encoding.merge_objs",
   str_data="data",
   num_1073741824=-1073741824,
   str_src_json_encodin_abr="src/json_encoding.ml",
   str_empty_array="empty array",
   str_li="%li",
   num_343364604=-343364604,
   str_Malformed_input="Malformed input",
   str_An_unspecified_e_abr=
    "An unspecified error happened, the component that threw it did not provide a specific trace. This should be reported.",
   str_Wrong_exchange_s_abr="Wrong_exchange_server",
   str_v_1="<v 1>",
   str_alias="alias",
   str_Request="Request",
   str_Lwt_s="Lwt.%s",
   str$1="\r\n",
   num_0xe0=0xe0,
   str_Unexpected_data_abr="Unexpected data (%s)",
   str_not_enough_data_abr$0=
    "not enough data, string size tag expected (4 bytes)",
   str_exclusiveMaximum="exclusiveMaximum",
   str$0="#",
   str_src_lib_error_mo_abr="src/lib_error_monad/TzTrace.ml",
   str_no_keys_for_the_abr="no keys for the source contract manager",
   num_398750242=398750242,
   num_250=250,
   num_936572018=936572018,
   str_Connection_estab_abr="Connection_established",
   num_447096405=-447096405,
   str_cohttp_src_code_abr$0="cohttp/src/code.ml.version",
   str_Missing_handshak_abr=
    "Missing handshake while initializing validation process.",
   num_800093270=800093270,
   str_s_d="%s~%d",
   str_required="required",
   str_pbkdf2sha256="pbkdf2sha256",
   str_precision="precision",
   str_RangedInt="RangedInt",
   num_1255=1255,
   str_branch="branch",
   str_tree="tree",
   num_0x8000=0x8000,
   str_of_bytes_wrong_abr=".of_bytes: wrong string size (",
   str_jsError="jsError",
   str_caml_bigstring_b_abr="caml_bigstring_blit_string_to_ba: kind mismatch",
   num_407121086=407121086,
   str_Invalid_state="Invalid state: ",
   str_Userinfo="Userinfo",
   str_XHR_Response_is_abr=
    "XHR Response is not an arrayBuffer; using responseText",
   num_8100=8100,
   str$22="//",
   str_Cannot_merge_two="Cannot merge two ",
   num_320=320,
   str_pbkdf2sha512="pbkdf2sha512",
   str_Array_too_long="Array too long",
   str_Found="Found",
   num_198771759=-198771759,
   num_414=414,
   num_351273602=-351273602,
   num_56319=56319,
   str_Enum="Enum",
   num_48=-48,
   num_815034505=815034505,
   str_camlinternalForm_abr="camlinternalFormat.ml",
   str_Invalid_bounds="Invalid bounds",
   str_s_of_string_wr_abr="%s.of_string: wrong string size (%d)",
   str_call_streamed_se_abr="call_streamed_service",
   str_Cstruct_blit_fro_abr="Cstruct.blit_from_string src=",
   str_localhost="localhost",
   str_connections="connections",
   str_character="character ",
   str_source="source ",
   str_time="time",
   str_Too_much_input="Too much input",
   str_n="\\n",
   str_block_header="block_header",
   str_IO_error_connec_abr="IO error: connection with a peer is closed.",
   num_120=120,
   str_OK="OK",
   num_957501398=-957501398,
   num_512=512,
   str_I_m_a_teapot="I_m_a_teapot",
   str_Variable="Variable",
   num_886248552=-886248552,
   num_0x7ff0=0x7ff0,
   str_Conflict="Conflict",
   str_peer="peer",
   num_144=144,
   num_1021676630=-1021676630,
   str_points="points",
   str_0x="0x",
   num_164354652=164354652,
   str_c="%c",
   str$40="\n",
   num_3546230=3546230,
   str_src_jsonm_ml="src/jsonm.ml",
   str_Gc_points="Gc_points",
   num_105=105,
   str_Http_version_not_abr="Http_version_not_supported",
   str_a$0="$%a",
   str_path="path",
   str_Precondition_failed="Precondition_failed",
   num_429=429,
   str_str_ml="str.ml",
   str$39=" ;",
   str_source$0="source",
   str_input="input",
   str_Debug="Debug",
   str_Too_many_connect_abr$1="Too many connections",
   str_log="log",
   str_timeout="timeout",
   num_364=364,
   str_instead_of=" instead of ",
   num_755617299=-755617299,
   str_Secp256k1="Secp256k1",
   num_61323482=61323482,
   str_Seq="Seq",
   str$38="'+'",
   str_pending="pending",
   str_p2p_version="p2p_version",
   num_67383738=-67383738,
   str_early_terminator="early terminator",
   num_3456159=3456159,
   num_131416682=-131416682,
   str_ban="ban",
   num_92=-92,
   num_950914574=950914574,
   num_783415859=-783415859,
   str_Disconnection="Disconnection",
   str_not_enough_data_abr="not enough data, double expected (8 bytes)",
   str$21=",@ ",
   str$20="*/*",
   str_h_0="<h 0>",
   str_closed="closed",
   num_0xFE=0xFE,
   str_src_lib_crypto_b_abr="src/lib_crypto/base58.ml",
   num_240875818=240875818,
   num_578388242=578388242,
   str_Lwt_log="Lwt_log: ",
   str_pkh="pkh",
   str_Weak_get_copy="Weak.get_copy",
   str_Blocked_by_windo_abr="Blocked_by_windows_parental_controls",
   str_sent="sent",
   str_HTTP_1_1="HTTP_1_1",
   str_fatal="fatal",
   str_filename="filename",
   num_34=-34,
   str_maxItems="maxItems",
   str_next_protocols="next_protocols",
   str_The_tag="The tag ",
   str_filters="filters",
   str_stdout="stdout",
   str_method_a="method_a",
   str_Accepted="Accepted",
   num_215364664=-215364664,
   str_v="v",
   num_783416972=-783416972,
   str$37=" <= ",
   num_176=176,
   num_919245630=919245630,
   str$56="{}";
  function caml_bytes_unsafe_get(s,i)
   {switch(s.t & 6)
     {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
      case 4:return s.c[i]
      }}
  function MlBytes2buf(MlBytes)
   {var len=MlBytes.l,buf=new Uint8Array(len),i=0;
    for(i = 0;i < len;i++)
     {var uint8=caml_bytes_unsafe_get(MlBytes,i);buf[i] = uint8}
    return buf}
  function caml_convert_bytes_to_array(s)
   {if(joo_global_object.Uint8Array)
     var a=new (joo_global_object.Uint8Array)(s.l);
    else
     var a=new Array(s.l);
    var b=s.c,l=b.length,i=0;
    for(;i < l;i++)a[i] = b.charCodeAt(i);
    for(l = s.l;i < l;i++)a[i] = 0;
    s.c = a;
    s.t = 4;
    return a}
  function caml_bytes_unsafe_set(s,i,c)
   {c &= num_0xff;
    if(s.t != 4)
     {if(i == s.c.length)
       {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
      caml_convert_bytes_to_array(s)}
    s.c[i] = c;
    return 0}
  function caml_string_unsafe_set(s,i,c){return caml_bytes_unsafe_set(s,i,c)}
  function blit_buf_onto_MlBytes(buf,MlBytes)
   {buf.forEach
     (function(uint8,index){caml_string_unsafe_set(MlBytes,index,uint8)});
    return}
  function Hacl_Blake2b_32_blake2b(key,msg,digest_len,digest)
   {var
     bkey=MlBytes2buf(key),
     bmsg=MlBytes2buf(msg),
     bret=_HACL.Blake2.blake2b(digest_len,bmsg,bkey);
    blit_buf_onto_MlBytes(bret[0],digest);
    return}
  function Hacl_HMAC_compute_sha2_256(output,key,msg)
   {var
     bkey=MlBytes2buf(key),
     bmsg=MlBytes2buf(msg),
     bret=_HACL.HMAC.sha256(bkey,bmsg);
    blit_buf_onto_MlBytes(bret[0],output);
    return}
  function Hacl_HMAC_compute_sha2_512(output,key,msg)
   {var
     bkey=MlBytes2buf(key),
     bmsg=MlBytes2buf(msg),
     bret=_HACL.HMAC.sha512(bkey,bmsg);
    blit_buf_onto_MlBytes(bret[0],output);
    return}
  function Hacl_Hash_Core_SHA2_init_256(state)
   {throw " not implemented Hacl_Hash_Core_SHA2_init_256"}
  function Hacl_Hash_Core_SHA2_init_512(state)
   {throw " not implemented Hacl_Hash_Core_SHA2_init_512"}
  function Hacl_Hash_Core_SHA2_update_256(state,bytes)
   {throw " not implemented Hacl_Hash_Core_SHA2_update_256"}
  function Hacl_Hash_Core_SHA2_update_512(state,bytes)
   {throw " not implemented Hacl_Hash_Core_SHA2_update_512"}
  function Hacl_Hash_SHA2_hash_256(msg,digest)
   {var bmsg=MlBytes2buf(msg),bret=_HACL.SHA2.hash_256(bmsg);
    blit_buf_onto_MlBytes(bret[0],digest);
    return}
  function Hacl_Hash_SHA2_hash_512(msg,digest)
   {var bmsg=MlBytes2buf(msg),bret=_HACL.SHA2.hash_512(bmsg);
    blit_buf_onto_MlBytes(bret[0],digest);
    return}
  function Hacl_NaCl_crypto_secretbox_easy(c,m,n,k)
   {var
     bm=MlBytes2buf(m),
     bn=MlBytes2buf(n),
     bk=MlBytes2buf(k),
     bret=_HACL.NaCl.secretbox_easy(bm,bn,bk);
    blit_buf_onto_MlBytes(bret[1],c);
    return bret[0] === 0}
  function Hacl_P256_compression_compressed_form()
   {return "not implemented Hacl_P256_compression_compressed_form"}
  function Hacl_P256_compression_not_compressed_form()
   {return "not implemented Hacl_P256_compression_not_compressed_form"}
  function Hacl_P256_decompression_compressed_form()
   {return "not implemented Hacl_P256_decompression_compressed_form"}
  function Hacl_P256_decompression_not_compressed_form()
   {return "not implemented Hacl_P256_decompression_not_compressed_form"}
  function Hacl_P256_ecp256dh_i()
   {return "not implemented Hacl_P256_ecp256dh_i"}
  function Hacl_P256_is_more_than_zero_less_than_order()
   {return "not implemented Hacl_P256_is_more_than_zero_less_than_order"}
  function Hacl_P256_verify_q(){return "not implemented Hacl_P256_verify_q"}
  function _1_Lib_RandomBuffer_System_randombytes(buf)
   {return (typeof self !== "undefined" && (self.crypto || self.msCrypto)
              ?function()
                {var crypto=self.crypto || self.msCrypto,QUOTA=num_65536;
                 return function(n)
                  {var result=new Uint8Array(n);
                   for(var i=0;i < n;i += QUOTA)
                    crypto.getRandomValues
                     (result.subarray(i,i + Math.min(n - i,QUOTA)));
                   blit_buf_onto_MlBytes(result,buf);
                   return true}}
              :function()
                {var result=require("crypto").randomBytes(60);
                 blit_buf_onto_MlBytes(result,buf);
                 return true})
            (buf)}
  function caml_ml_bytes_length(s){return s.l}
  function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
  function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
  function caml_str_repeat(n,s)
   {if(n == 0)return str$59;
    if(s.repeat)return s.repeat(n);
    var r=str$59,l=0;
    for(;;)
     {if(n & 1)r += s;
      n >>= 1;
      if(n == 0)return r;
      s += s;
      l++;
      if(l == 9)s.slice(0,1)}}
  function caml_subarray_to_jsbytes(a,i,len)
   {var f=String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
    var s=str$59;
    for(;0 < len;i += num_1024,len -= num_1024)
     s += f.apply(null,a.slice(i,i + Math.min(len,num_1024)));
    return s}
  function caml_convert_string_to_bytes(s)
   {if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length,"\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
    s.t = 0}
  function jsoo_is_ascii(s)
   {if(s.length < 24)
     {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > num_127)return false;
      return true}
    else
     return ! /[^\x00-\x7f]/.test(s)}
  function caml_utf16_of_utf8(s)
   {for(var b=str$59,t=str$59,c,c1,c2,v,i=0,l=s.length;i < l;i++)
     {c1 = s.charCodeAt(i);
      if(c1 < num_0x80)
       {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < num_0x80;j++);
        if(j - i > num_512)
         {t.substr(0,1);b += t;t = str$59;b += s.slice(i,j)}
        else
         t += s.slice(i,j);
        if(j == l)break;
        i = j}
      v = 1;
      if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == num_128)
       {c = c2 + (c1 << 6);
        if(c1 < num_0xe0)
         {v = c - 0x3080;if(v < num_0x80)v = 1}
        else
         {v = 2;
          if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == num_128)
           {c = c2 + (c << 6);
            if(c1 < num_0xf0)
             {v = c - 0xe2080;
              if(v < num_0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
            else
             {v = 3;
              if
               (++i
                <
                l
                &&
                ((c2 = s.charCodeAt(i)) & - 64)
                ==
                num_128
                &&
                c1
                <
                0xf5)
               {v = c2 - 0x3c82080 + (c << 6);
                if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
      if(v < 4)
       {i -= v;t += "\ufffd"}
      else
       if(v > num_0xffff)
        t += String.fromCharCode(0xd7c0 + (v >> 10),num_0xdc00 + (v & 0x3FF));
       else
        t += String.fromCharCode(v);
      if(t.length > num_1024){t.substr(0,1);b += t;t = str$59}}
    return b + t}
  function MlBytes(tag,contents,length)
   {this.t = tag;this.c = contents;this.l = length}
  MlBytes.prototype.toString
  =
  function()
   {switch(this.t)
     {case 9:return this.c;
      default:caml_convert_string_to_bytes(this);case 0:
       if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
      case 8:return this.c
      }};
  MlBytes.prototype.toUtf16
  =
  function()
   {var r=this.toString();
    if(this.t == 9)return r;
    return caml_utf16_of_utf8(r)};
  MlBytes.prototype.slice
  =
  function()
   {var content=this.t == 4?this.c.slice():this.c;
    return new MlBytes(this.t,content,this.l)};
  function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
  function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
  function caml_raise_with_string(tag,msg)
   {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
  var caml_global_data=[0];
  function caml_invalid_argument(msg)
   {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
  function caml_array_bound_error()
   {caml_invalid_argument(str_index_out_of_bounds)}
  function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
  function caml_array_of_string(s)
   {var l=caml_ml_string_length(s),a=new Array(l),i=0;
    for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
    return a}
  function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
   {if(12 != ba2.kind)caml_invalid_argument(str_caml_bigstring_b_abr);
    if(len == 0)return 0;
    var ofs2=ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
    if(ofs2 + len > ba2.data.length)caml_array_bound_error();
    var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
    ba2.data.set(slice,ofs2);
    return 0}
  function bigstringaf_blit_from_bytes(src,src_off,dst,dst_off,len)
   {return caml_bigstring_blit_string_to_ba(src,src_off,dst,dst_off,len)}
  function caml_blit_bytes(s1,i1,s2,i2,len)
   {if(len == 0)return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
     {s2.c
      =
      s1.t == 4
       ?caml_subarray_to_jsbytes(s1.c,i1,len)
       :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
      s2.t = s2.c.length == s2.l?0:2}
    else
     if(s2.t == 2 && i2 == s2.c.length)
      {s2.c
       +=
       s1.t == 4
        ?caml_subarray_to_jsbytes(s1.c,i1,len)
        :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
       s2.t = s2.c.length == s2.l?0:2}
     else
      {if(s2.t != 4)caml_convert_bytes_to_array(s2);
       var c1=s1.c,c2=s2.c;
       if(s1.t == 4)
        if(i2 <= i1)
         for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
        else
         for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
       else
        {var l=Math.min(len,c1.length - i1);
         for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
         for(;i < len;i++)c2[i2 + i] = 0}}
    return 0}
  function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
  function caml_bigstring_blit_ba_to_bytes(ba1,pos1,bytes2,pos2,len)
   {if(12 != ba1.kind)caml_invalid_argument(str_caml_bigstring_b_abr);
    if(len == 0)return 0;
    var ofs1=ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length)caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2))caml_array_bound_error();
    var slice=ba1.data.slice(ofs1,ofs1 + len);
    caml_blit_bytes(caml_bytes_of_array(slice),0,bytes2,pos2,len);
    return 0}
  function bigstringaf_blit_to_bytes(src,src_off,dst,dst_off,len)
   {return caml_bigstring_blit_ba_to_bytes(src,src_off,dst,dst_off,len)}
  function caml_array_blit(a1,i1,a2,i2,len)
   {if(i2 <= i1)
     for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
    else
     for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
    return 0}
  function caml_array_concat(l)
   {var a=[0];
    while(l !== 0)
     {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
    return a}
  function caml_array_sub(a,i,len)
   {var a2=new Array(len + 1);
    a2[0] = 0;
    for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
    return a2}
  function caml_ba_blit(src,dst)
   {if(dst.dims.length != src.dims.length)
     caml_invalid_argument(str_Bigarray_blit_d_abr);
    for(var i=0;i < dst.dims.length;i++)
     if(dst.dims[i] != src.dims[i])
      caml_invalid_argument(str_Bigarray_blit_d_abr);
    dst.data.set(src.data);
    return 0}
  function caml_ba_get_size_per_element(kind)
   {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
  function caml_ba_create_buffer(kind,size)
   {var g=joo_global_object,view;
    switch(kind)
     {case 0:view = g.Float32Array;break;
      case 1:view = g.Float64Array;break;
      case 2:view = g.Int8Array;break;
      case 3:view = g.Uint8Array;break;
      case 4:view = g.Int16Array;break;
      case 5:view = g.Uint16Array;break;
      case 6:view = g.Int32Array;break;
      case 7:view = g.Int32Array;break;
      case 8:view = g.Int32Array;break;
      case 9:view = g.Int32Array;break;
      case 10:view = g.Float32Array;break;
      case 11:view = g.Float64Array;break;
      case 12:view = g.Uint8Array;break
      }
    if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
    var data=new view(size * caml_ba_get_size_per_element(kind));
    return data}
  function caml_ba_get_size(dims)
   {var n_dims=dims.length,size=1;
    for(var i=0;i < n_dims;i++)
     {if(dims[i] < 0)
       caml_invalid_argument("Bigarray.create: negative dimension");
      size = size * dims[i]}
    return size}
  var caml_int64_offset=Math.pow(2,- 24);
  function caml_raise_constant(tag){throw tag}
  function caml_raise_zero_divide()
   {caml_raise_constant(caml_global_data.Division_by_zero)}
  function MlInt64(lo,mi,hi)
   {this.lo = lo & num_0xffffff;
    this.mi = mi & num_0xffffff;
    this.hi = hi & num_0xffff}
  MlInt64.prototype.caml_custom = "_j";
  MlInt64.prototype.copy
  =
  function(){return new MlInt64(this.lo,this.mi,this.hi)};
  MlInt64.prototype.ucompare
  =
  function(x)
   {if(this.hi > x.hi)return 1;
    if(this.hi < x.hi)return - 1;
    if(this.mi > x.mi)return 1;
    if(this.mi < x.mi)return - 1;
    if(this.lo > x.lo)return 1;
    if(this.lo < x.lo)return - 1;
    return 0};
  MlInt64.prototype.compare
  =
  function(x)
   {var hi=this.hi << 16,xhi=x.hi << 16;
    if(hi > xhi)return 1;
    if(hi < xhi)return - 1;
    if(this.mi > x.mi)return 1;
    if(this.mi < x.mi)return - 1;
    if(this.lo > x.lo)return 1;
    if(this.lo < x.lo)return - 1;
    return 0};
  MlInt64.prototype.neg
  =
  function()
   {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
    return new MlInt64(lo,mi,hi)};
  MlInt64.prototype.add
  =
  function(x)
   {var
     lo=this.lo + x.lo,
     mi=this.mi + x.mi + (lo >> 24),
     hi=this.hi + x.hi + (mi >> 24);
    return new MlInt64(lo,mi,hi)};
  MlInt64.prototype.sub
  =
  function(x)
   {var
     lo=this.lo - x.lo,
     mi=this.mi - x.mi + (lo >> 24),
     hi=this.hi - x.hi + (mi >> 24);
    return new MlInt64(lo,mi,hi)};
  MlInt64.prototype.mul
  =
  function(x)
   {var
     lo=this.lo * x.lo,
     mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
     hi=
      (mi * caml_int64_offset | 0)
      +
      this.hi
      *
      x.lo
      +
      this.mi
      *
      x.mi
      +
      this.lo
      *
      x.hi;
    return new MlInt64(lo,mi,hi)};
  MlInt64.prototype.isZero
  =
  function(){return (this.lo | this.mi | this.hi) == 0};
  MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
  MlInt64.prototype.and
  =
  function(x)
   {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
  MlInt64.prototype.or
  =
  function(x)
   {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
  MlInt64.prototype.xor
  =
  function(x)
   {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
  MlInt64.prototype.shift_left
  =
  function(s)
   {s = s & 63;
    if(s == 0)return this;
    if(s < 24)
     return new
             MlInt64
             (this.lo << s,
              this.mi << s | this.lo >> 24 - s,
              this.hi << s | this.mi >> 24 - s);
    if(s < 48)
     return new
             MlInt64
             (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
    return new MlInt64(0,0,this.lo << s - 48)};
  MlInt64.prototype.shift_right_unsigned
  =
  function(s)
   {s = s & 63;
    if(s == 0)return this;
    if(s < 24)
     return new
             MlInt64
             (this.lo >> s | this.mi << 24 - s,
              this.mi >> s | this.hi << 24 - s,
              this.hi >> s);
    if(s < 48)
     return new
             MlInt64
             (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
    return new MlInt64(this.hi >> s - 48,0,0)};
  MlInt64.prototype.shift_right
  =
  function(s)
   {s = s & 63;
    if(s == 0)return this;
    var h=this.hi << 16 >> 16;
    if(s < 24)
     return new
             MlInt64
             (this.lo >> s | this.mi << 24 - s,
              this.mi >> s | h << 24 - s,
              this.hi << 16 >> s >>> 16);
    var sign=this.hi << 16 >> 31;
    if(s < 48)
     return new
             MlInt64
             (this.mi >> s - 24 | this.hi << 48 - s,
              this.hi << 16 >> s - 24 >> 16,
              sign & num_0xffff);
    return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
  MlInt64.prototype.lsl1
  =
  function()
   {this.hi = this.hi << 1 | this.mi >> 23;
    this.mi = (this.mi << 1 | this.lo >> 23) & num_0xffffff;
    this.lo = this.lo << 1 & num_0xffffff};
  MlInt64.prototype.lsr1
  =
  function()
   {this.lo = (this.lo >>> 1 | this.mi << 23) & num_0xffffff;
    this.mi = (this.mi >>> 1 | this.hi << 23) & num_0xffffff;
    this.hi = this.hi >>> 1};
  MlInt64.prototype.udivmod
  =
  function(x)
   {var
     offset=0,
     modulus=this.copy(),
     divisor=x.copy(),
     quotient=new MlInt64(0,0,0);
    while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
    while(offset >= 0)
     {offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0)
       {quotient.lo++;modulus = modulus.sub(divisor)}
      divisor.lsr1()}
    return {quotient:quotient,modulus:modulus}};
  MlInt64.prototype.div
  =
  function(y)
   {var x=this;
    if(y.isZero())caml_raise_zero_divide();
    var sign=x.hi ^ y.hi;
    if(x.hi & num_0x8000)x = x.neg();
    if(y.hi & num_0x8000)y = y.neg();
    var q=x.udivmod(y).quotient;
    if(sign & num_0x8000)q = q.neg();
    return q};
  MlInt64.prototype.mod
  =
  function(y)
   {var x=this;
    if(y.isZero())caml_raise_zero_divide();
    var sign=x.hi;
    if(x.hi & num_0x8000)x = x.neg();
    if(y.hi & num_0x8000)y = y.neg();
    var r=x.udivmod(y).modulus;
    if(sign & num_0x8000)r = r.neg();
    return r};
  MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
  MlInt64.prototype.toFloat
  =
  function()
   {return (this.hi << 16)
           *
           Math.pow(2,32)
           +
           this.mi
           *
           Math.pow(2,24)
           +
           this.lo};
  MlInt64.prototype.toArray
  =
  function()
   {return [this.hi >> 8,
            this.hi & num_0xff,
            this.mi >> 16,
            this.mi >> 8 & num_0xff,
            this.mi & num_0xff,
            this.lo >> 16,
            this.lo >> 8 & num_0xff,
            this.lo & num_0xff]};
  MlInt64.prototype.lo32
  =
  function(){return this.lo | (this.mi & num_0xff) << 24};
  MlInt64.prototype.hi32
  =
  function(){return this.mi >>> 8 & num_0xffff | this.hi << 16};
  function caml_int64_create_lo_hi(lo,hi)
   {return new
            MlInt64
            (lo & num_0xffffff,
             lo >>> 24 & num_0xff | (hi & num_0xffff) << 8,
             hi >>> 16 & num_0xffff)}
  function caml_int64_hi32(v){return v.hi32()}
  function caml_int64_lo32(v){return v.lo32()}
  var caml_ba_custom_name=str_bigarray;
  function Ml_Bigarray(kind,layout,dims,buffer)
   {this.kind = kind;this.layout = layout;this.dims = dims;this.data = buffer}
  Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
  Ml_Bigarray.prototype.offset
  =
  function(arg)
   {var ofs=0;
    if(typeof arg === "number")arg = [arg];
    if(! (arg instanceof Array))
     caml_invalid_argument("bigarray.js: invalid offset");
    if(this.dims.length != arg.length)
     caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
    if(this.layout == 0)
     for(var i=0;i < this.dims.length;i++)
      {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i]}
    else
     for(var i=this.dims.length - 1;i >= 0;i--)
      {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1)}
    return ofs};
  Ml_Bigarray.prototype.get
  =
  function(ofs)
   {switch(this.kind)
     {case 7:
       var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
       return caml_int64_create_lo_hi(l,h);
      case 10:
      case 11:
       var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
       return [num_254,r,i];
      default:return this.data[ofs]}};
  Ml_Bigarray.prototype.set
  =
  function(ofs,v)
   {switch(this.kind)
     {case 7:
       this.data[ofs * 2 + 0] = caml_int64_lo32(v);
       this.data[ofs * 2 + 1] = caml_int64_hi32(v);
       break;
      case 10:
      case 11:
       this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
      default:this.data[ofs] = v;break}
    return 0};
  Ml_Bigarray.prototype.fill
  =
  function(v)
   {switch(this.kind)
     {case 7:
       var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
       if(a == b)
        this.data.fill(a);
       else
        for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
       break;
      case 10:
      case 11:
       var im=v[1],re=v[2];
       if(im == re)
        this.data.fill(im);
       else
        for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?im:re;
       break;
      default:this.data.fill(v);break}};
  Ml_Bigarray.prototype.compare
  =
  function(b,total)
   {if(this.layout != b.layout || this.kind != b.kind)
     {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
      return k2 - k1}
    if(this.dims.length != b.dims.length)
     return b.dims.length - this.dims.length;
    for(var i=0;i < this.dims.length;i++)
     if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
    switch(this.kind)
     {case 0:
      case 1:
      case 10:
      case 11:
       var x,y;
       for(var i=0;i < this.data.length;i++)
        {x = this.data[i];
         y = b.data[i];
         if(x < y)return - 1;
         if(x > y)return 1;
         if(x != y)
          {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
       break;
      case 7:
       for(var i=0;i < this.data.length;i += 2)
        {if(this.data[i + 1] < b.data[i + 1])return - 1;
         if(this.data[i + 1] > b.data[i + 1])return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
       break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
      case 12:
       for(var i=0;i < this.data.length;i++)
        {if(this.data[i] < b.data[i])return - 1;
         if(this.data[i] > b.data[i])return 1}
       break
      }
    return 0};
  function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
   {this.kind = kind;this.layout = layout;this.dims = dims;this.data = buffer}
  Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
  Ml_Bigarray_c_1_1.prototype.offset
  =
  function(arg)
   {if(typeof arg !== "number")
     if(arg instanceof Array && arg.length == 1)
      arg = arg[0];
     else
      caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
    if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
    return arg};
  Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
  Ml_Bigarray_c_1_1.prototype.set
  =
  function(ofs,v){this.data[ofs] = v;return 0};
  Ml_Bigarray_c_1_1.prototype.fill = function(v){this.data.fill(v);return 0};
  function caml_ba_create_unsafe(kind,layout,dims,data)
   {var size_per_element=caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
    return new Ml_Bigarray(kind,layout,dims,data)}
  function caml_js_from_array(a){return a.slice(1)}
  function caml_ba_create(kind,layout,dims_ml)
   {var
     dims=caml_js_from_array(dims_ml),
     data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind,layout,dims,data)}
  function caml_ba_dim(ba,i)
   {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
    return ba.dims[i]}
  function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
  function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
  function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
  function caml_ba_sub(ba,ofs,len)
   {var changed_dim,mul=1;
    if(ba.layout == 0)
     {for(var i=1;i < ba.dims.length;i++)mul = mul * ba.dims[i];
      changed_dim = 0}
    else
     {for(var i=0;i < ba.dims.length - 1;i++)mul = mul * ba.dims[i];
      changed_dim = ba.dims.length - 1;
      ofs = ofs - 1}
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims=[];
    for(var i=0;i < ba.dims.length;i++)new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data=ba.data.subarray(ofs * mul,(ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind,ba.layout,new_dims,new_data)}
  function caml_bytes_of_string(s){return s}
  function caml_blit_string(a,b,c,d,e)
   {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
  var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
  function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
  function caml_bytes_compare(s1,s2)
   {s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
  function caml_bytes_equal(s1,s2)
   {if(s1 === s2)return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c == s2.c?1:0}
  function caml_bytes_bound_error()
   {caml_invalid_argument(str_index_out_of_bounds)}
  function caml_bytes_get(s,i)
   {if(i >>> 0 >= s.l)caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s,i)}
  function caml_bytes_get16(s,i)
   {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
    var b1=caml_bytes_unsafe_get(s,i),b2=caml_bytes_unsafe_get(s,i + 1);
    return b2 << 8 | b1}
  function caml_bytes_get32(s,i)
   {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
    var
     b1=caml_bytes_unsafe_get(s,i),
     b2=caml_bytes_unsafe_get(s,i + 1),
     b3=caml_bytes_unsafe_get(s,i + 2),
     b4=caml_bytes_unsafe_get(s,i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1}
  function caml_int64_of_bytes(a)
   {return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8)}
  function caml_bytes_get64(s,i)
   {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
    var a=new Array(8);
    for(var j=0;j < 8;j++)a[7 - j] = caml_bytes_unsafe_get(s,i + j);
    return caml_int64_of_bytes(a)}
  function caml_bytes_set(s,i,c)
   {if(i >>> 0 >= s.l)caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s,i,c)}
  function caml_bytes_set16(s,i,i16)
   {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
    var b2=num_0xFF & i16 >> 8,b1=num_0xFF & i16;
    caml_bytes_unsafe_set(s,i + 0,b1);
    caml_bytes_unsafe_set(s,i + 1,b2);
    return 0}
  function caml_bytes_set32(s,i,i32)
   {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
    var
     b4=num_0xFF & i32 >> 24,
     b3=num_0xFF & i32 >> 16,
     b2=num_0xFF & i32 >> 8,
     b1=num_0xFF & i32;
    caml_bytes_unsafe_set(s,i + 0,b1);
    caml_bytes_unsafe_set(s,i + 1,b2);
    caml_bytes_unsafe_set(s,i + 2,b3);
    caml_bytes_unsafe_set(s,i + 3,b4);
    return 0}
  function caml_int64_to_bytes(x){return x.toArray()}
  function caml_bytes_set64(s,i,i64)
   {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
    var a=caml_int64_to_bytes(i64);
    for(var j=0;j < 8;j++)caml_bytes_unsafe_set(s,i + 7 - j,a[j]);
    return 0}
  function caml_call_gen(f,args)
   {if(f.fun)return caml_call_gen(f.fun,args);
    if(typeof f !== "function")return f;
    var n=f.length | 0;
    if(n === 0)return f.apply(null,args);
    var argsLen=args.length | 0,d=n - argsLen | 0;
    if(d == 0)
     return f.apply(null,args);
    else
     if(d < 0)
      return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
     else
      return function()
       {var
         extra_args=arguments.length == 0?1:arguments.length,
         nargs=new Array(args.length + extra_args);
        for(var i=0;i < args.length;i++)nargs[i] = args[i];
        for(var i=0;i < arguments.length;i++)
         nargs[args.length + i] = arguments[i];
        return caml_call_gen(f,nargs)}}
  function caml_check_bound(array,index)
   {if(index >>> 0 >= array.length - 1)caml_array_bound_error();return array}
  function caml_classify_float(x)
   {if(isFinite(x))
     {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
      if(x != 0)return 1;
      return 2}
    return isNaN(x)?4:3}
  function caml_jsbytes_of_string(s)
   {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
  var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
  function jsoo_floor_log2(x)
   {if(log2_ok)return Math.floor(Math.log2(x));
    var i=0;
    if(x == 0)return - Infinity;
    if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
    return i}
  function caml_int32_bits_of_float(x)
   {var float32a=new (joo_global_object.Float32Array)(1);
    float32a[0] = x;
    var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
    return int32a[0] | 0}
  function caml_int64_create_lo_mi_hi(lo,mi,hi){return new MlInt64(lo,mi,hi)}
  function caml_int64_bits_of_float(x)
   {if(! isFinite(x))
     {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,num_0x7ff0);
      return x > 0
              ?caml_int64_create_lo_mi_hi(0,0,num_0x7ff0)
              :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
    var sign=x == 0 && 1 / x == - Infinity?num_0x8000:x >= 0?0:num_0x8000;
    if(sign)x = - x;
    var exp=jsoo_floor_log2(x) + num_1023;
    if(exp <= 0)
     {exp = 0;x /= Math.pow(2,- num_1026)}
    else
     {x /= Math.pow(2,exp - num_1027);
      if(x < 16){x *= 2;exp -= 1}
      if(exp == 0)x /= 2}
    var k=Math.pow(2,24),r3=x | 0;
    x = (x - r3) * k;
    var r2=x | 0;
    x = (x - r2) * k;
    var r1=x | 0;
    r3 = r3 & num_0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1,r2,r3)}
  function caml_ba_serialize(writer,ba,sz)
   {writer.write(32,ba.dims.length);
    writer.write(32,ba.kind | ba.layout << 8);
    if(ba.caml_custom == str_bigarr02)
     for(var i=0;i < ba.dims.length;i++)
      if(ba.dims[i] < num_0xffff)
       writer.write(16,ba.dims[i]);
      else
       {writer.write(16,num_0xffff);
        writer.write(32,0);
        writer.write(32,ba.dims[i])}
    else
     for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
    switch(ba.kind)
     {case 2:
      case 3:
      case 12:
       for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
      case 4:
      case 5:
       for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
      case 6:
       for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
      case 8:
      case 9:
       writer.write(8,0);
       for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
       break;
      case 7:
       for(var i=0;i < ba.data.length / 2;i++)
        {var b=caml_int64_to_bytes(ba.get(i));
         for(var j=0;j < 8;j++)writer.write(8,b[j])}
       break;
      case 1:
       for(var i=0;i < ba.data.length;i++)
        {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
         for(var j=0;j < 8;j++)writer.write(8,b[j])}
       break;
      case 0:
       for(var i=0;i < ba.data.length;i++)
        {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
       break;
      case 10:
       for(var i=0;i < ba.data.length / 2;i++)
        {var j=ba.get(i);
         writer.write(32,caml_int32_bits_of_float(j[1]));
         writer.write(32,caml_int32_bits_of_float(j[2]))}
       break;
      case 11:
       for(var i=0;i < ba.data.length / 2;i++)
        {var
          complex=ba.get(i),
          b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
         for(var j=0;j < 8;j++)writer.write(8,b[j]);
         var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
         for(var j=0;j < 8;j++)writer.write(8,b[j])}
       break
      }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8}
  function caml_int32_float_of_bits(x)
   {var int32a=new (joo_global_object.Int32Array)(1);
    int32a[0] = x;
    var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
    return float32a[0]}
  function caml_int64_float_of_bits(x)
   {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
    if(exp == num_2047)
     return (lo | mi | hi & num_0xf) == 0
             ?hi & num_0x8000?- Infinity:Infinity
             :NaN;
    var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & num_0xf);
    if(exp > 0)
     {res += 16;res *= Math.pow(2,exp - num_1027)}
    else
     res *= Math.pow(2,- num_1026);
    if(hi & num_0x8000)res = - res;
    return res}
  function caml_failwith(msg)
   {caml_raise_with_string(caml_global_data.Failure,msg)}
  function caml_ba_deserialize(reader,sz,name)
   {var num_dims=reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var tag=reader.read32s(),kind=tag & num_0xff,layout=tag >> 8 & 1,dims=[];
    if(name == str_bigarr02)
     for(var i=0;i < num_dims;i++)
      {var size_dim=reader.read16u();
       if(size_dim == num_0xffff)
        {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
         if(size_dim_hi != 0)
          caml_failwith("input_value: bigarray dimension overflow in 32bit");
         size_dim = size_dim_lo}
       dims.push(size_dim)}
    else
     for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
    var
     size=caml_ba_get_size(dims),
     data=caml_ba_create_buffer(kind,size),
     ba=caml_ba_create_unsafe(kind,layout,dims,data);
    switch(kind)
     {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
      case 3:
      case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
      case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
      case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
      case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
      case 8:
      case 9:
       var sixty=reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i=0;i < size;i++)data[i] = reader.read32s();
       break;
      case 7:
       var t=new Array(8);
       for(var i=0;i < size;i++)
        {for(var j=0;j < 8;j++)t[j] = reader.read8u();
         var int64=caml_int64_of_bytes(t);
         ba.set(i,int64)}
       break;
      case 1:
       var t=new Array(8);
       for(var i=0;i < size;i++)
        {for(var j=0;j < 8;j++)t[j] = reader.read8u();
         var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
         ba.set(i,f)}
       break;
      case 0:
       for(var i=0;i < size;i++)
        {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
       break;
      case 10:
       for(var i=0;i < size;i++)
        {var
          re=caml_int32_float_of_bits(reader.read32s()),
          im=caml_int32_float_of_bits(reader.read32s());
         ba.set(i,[num_254,re,im])}
       break;
      case 11:
       var t=new Array(8);
       for(var i=0;i < size;i++)
        {for(var j=0;j < 8;j++)t[j] = reader.read8u();
         var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
         for(var j=0;j < 8;j++)t[j] = reader.read8u();
         var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
         ba.set(i,[num_254,re,im])}
       break
      }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind,layout,dims,data)}
  function caml_ba_compare(a,b,total){return a.compare(b,total)}
  function caml_mul(a,b){return Math.imul(a,b)}
  function caml_hash_mix_int(h,d)
   {d = caml_mul(d,0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d,0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
  function caml_hash_mix_int64(h,v)
   {h = caml_hash_mix_int(h,caml_int64_lo32(v));
    h = caml_hash_mix_int(h,caml_int64_hi32(v));
    return h}
  function caml_hash_mix_float(h,v0)
   {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
  function caml_ba_hash(ba)
   {var num_elts=caml_ba_get_size(ba.dims),h=0;
    switch(ba.kind)
     {case 2:
      case 3:
      case 12:
       if(num_elts > num_256)num_elts = num_256;
       var w=0,i=0;
       for(i = 0;i + 4 <= ba.data.length;i += 4)
        {w
         =
         ba.data[i + 0]
         |
         ba.data[i + 1]
         <<
         8
         |
         ba.data[i + 2]
         <<
         16
         |
         ba.data[i + 3]
         <<
         24;
         h = caml_hash_mix_int(h,w)}
       w = 0;
       switch(num_elts & 3)
        {case 3:w = ba.data[i + 2] << 16;
         case 2:w |= ba.data[i + 1] << 8;
         case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
         }
       break;
      case 4:
      case 5:
       if(num_elts > num_128)num_elts = num_128;
       var w=0,i=0;
       for(i = 0;i + 2 <= ba.data.length;i += 2)
        {w = ba.data[i + 0] | ba.data[i + 1] << 16;h = caml_hash_mix_int(h,w)}
       if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
       break;
      case 6:
       if(num_elts > 64)num_elts = 64;
       for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64)num_elts = 64;
       for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
       break;
      case 7:
       if(num_elts > 32)num_elts = 32;
       num_elts *= 2;
       for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
       break;
      case 10:num_elts *= 2;
      case 0:
       if(num_elts > 64)num_elts = 64;
       for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
       break;
      case 11:num_elts *= 2;
      case 1:
       if(num_elts > 32)num_elts = 32;
       for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
       break
      }
    return h}
  function caml_int32_unmarshal(reader,size)
   {size[0] = 4;return reader.read32s()}
  function caml_nativeint_unmarshal(reader,size)
   {switch(reader.read8u())
     {case 1:size[0] = 4;return reader.read32s();
      case 2:caml_failwith("input_value: native integer value too large");
      default:caml_failwith("input_value: ill-formed native integer")}}
  function caml_int64_unmarshal(reader,size)
   {var t=new Array(8);
    for(var j=0;j < 8;j++)t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t)}
  function caml_int64_marshal(writer,v,sizes)
   {var b=caml_int64_to_bytes(v);
    for(var i=0;i < 8;i++)writer.write(8,b[i]);
    sizes[0] = 8;
    sizes[1] = 8}
  function caml_int64_compare(x,y,total){return x.compare(y)}
  function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
  var
   caml_custom_ops=
    {"_j":
     {deserialize:caml_int64_unmarshal,
      serialize:caml_int64_marshal,
      fixed_length:8,
      compare:caml_int64_compare,
      hash:caml_int64_hash},
     "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
     "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
     "_bigarray":
     {deserialize:
      function(reader,sz){return caml_ba_deserialize(reader,sz,str_bigarray)},
      serialize:caml_ba_serialize,
      compare:caml_ba_compare,
      hash:caml_ba_hash},
     "_bigarr02":
     {deserialize:
      function(reader,sz){return caml_ba_deserialize(reader,sz,str_bigarr02)},
      serialize:caml_ba_serialize,
      compare:caml_ba_compare,
      hash:caml_ba_hash}};
  function caml_compare_val_get_custom(a)
   {return caml_custom_ops[a.caml_custom]
           &&
           caml_custom_ops[a.caml_custom].compare}
  function caml_compare_val_number_custom(num,custom,swap,total)
   {var comp=caml_compare_val_get_custom(custom);
    if(comp)
     {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
      if(total && x != x)return swap;
      if(+ x != + x)return + x;
      if((x | 0) != 0)return x | 0}
    return swap}
  function caml_is_ml_bytes(s){return s instanceof MlBytes}
  function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
  function caml_compare_val_tag(a)
   {if(typeof a === "number")
     return num_1000$0;
    else
     if(caml_is_ml_bytes(a))
      return num_252;
     else
      if(caml_is_ml_string(a))
       return 1252;
      else
       if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= num_255)
        {var tag=a[0] | 0;return tag == num_254?0:tag}
       else
        if(a instanceof String)
         return num_12520;
        else
         if(typeof a == "string")
          return num_12520;
         else
          if(a instanceof Number)
           return num_1000$0;
          else
           if(a && a.caml_custom)
            return num_1255;
           else
            if(a && a.compare)
             return 1256;
            else
             if(typeof a == "function")
              return 1247;
             else
              if(typeof a == "symbol")return 1251;
    return 1001}
  function caml_int_compare(a,b)
   {if(a < b)return - 1;if(a == b)return 0;return 1}
  function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
  function caml_compare_val(a,b,total)
   {var stack=[];
    for(;;)
     {if(! (total && a === b))
       {var tag_a=caml_compare_val_tag(a);
        if(tag_a == num_250){a = a[1];continue}
        var tag_b=caml_compare_val_tag(b);
        if(tag_b == num_250){b = b[1];continue}
        if(tag_a !== tag_b)
         {if(tag_a == num_1000$0)
           {if(tag_b == num_1255)
             return caml_compare_val_number_custom(a,b,- 1,total);
            return - 1}
          if(tag_b == num_1000$0)
           {if(tag_a == num_1255)
             return caml_compare_val_number_custom(b,a,1,total);
            return 1}
          return tag_a < tag_b?- 1:1}
        switch(tag_a)
         {case 247:caml_invalid_argument(str_compare_functio_abr);break;
          case 248:
           var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
          case 249:caml_invalid_argument(str_compare_functio_abr);break;
          case 250:
           caml_invalid_argument("equal: got Forward_tag, should not happen");
           break;
          case 251:caml_invalid_argument("equal: abstract value");break;
          case 252:
           if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
           break;
          case 253:
           caml_invalid_argument("equal: got Double_tag, should not happen");
           break;
          case 254:
           caml_invalid_argument
            ("equal: got Double_array_tag, should not happen");
           break;
          case 255:
           caml_invalid_argument("equal: got Custom_tag, should not happen");
           break;
          case 1247:caml_invalid_argument(str_compare_functio_abr);break;
          case 1255:
           var comp=caml_compare_val_get_custom(a);
           if(comp != caml_compare_val_get_custom(b))
            return a.caml_custom < b.caml_custom?- 1:1;
           if(! comp)caml_invalid_argument("compare: abstract value");
           var x=comp(a,b,total);
           if(x != x)return total?- 1:x;
           if(x !== (x | 0))return - 1;
           if(x != 0)return x | 0;
           break;
          case 1256:
           var x=a.compare(b,total);
           if(x != x)return total?- 1:x;
           if(x !== (x | 0))return - 1;
           if(x != 0)return x | 0;
           break;
          case 1000:
           a = + a;
           b = + b;
           if(a < b)return - 1;
           if(a > b)return 1;
           if(a != b)
            {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
           break;
          case 1001:
           if(a < b)return - 1;
           if(a > b)return 1;
           if(a != b)
            {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
           break;
          case 1251:if(a !== b){if(! total)return NaN;return 1}break;
          case 1252:
           var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
           if(a !== b){if(a < b)return - 1;if(a > b)return 1}
           break;
          case 12520:
           var a=a.toString(),b=b.toString();
           if(a !== b){if(a < b)return - 1;if(a > b)return 1}
           break;
          case 246:
          case 254:
          default:
           if(a.length != b.length)return a.length < b.length?- 1:1;
           if(a.length > 1)stack.push(a,b,1);
           break}}
      if(stack.length == 0)return 0;
      var i=stack.pop();
      b = stack.pop();
      a = stack.pop();
      if(i + 1 < a.length)stack.push(a,b,i + 1);
      a = a[i];
      b = b[i]}}
  function caml_compare(a,b){return caml_compare_val(a,b,true)}
  function caml_convert_raw_backtrace(){return [0]}
  function caml_create_bytes(len)
   {if(len < 0)caml_invalid_argument("Bytes.create");
    return new MlBytes(len?2:9,str$59,len)}
  function caml_div(x,y){if(y == 0)caml_raise_zero_divide();return x / y | 0}
  var caml_ephe_key_offset=3;
  function caml_weak_check(x,i)
   {return x[caml_ephe_key_offset + i]
            !==
            undefined
            &&
            x[caml_ephe_key_offset + i]
            !==
            0
            ?1
            :0}
  var caml_ephe_check_key=caml_weak_check;
  function caml_weak_create(n)
   {if(n < 0)caml_invalid_argument(str_Weak_create);
    var x=[num_251,"caml_ephe_list_head"];
    x.length = caml_ephe_key_offset + n;
    return x}
  var caml_ephe_create=caml_weak_create,caml_ephe_data_offset=2;
  function caml_ephe_get_data(x)
   {return x[caml_ephe_data_offset] === undefined
            ?0
            :[0,x[caml_ephe_data_offset]]}
  function caml_weak_get(x,i)
   {if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument("Weak.get_key");
    return x[caml_ephe_key_offset + i] === undefined
            ?0
            :x[caml_ephe_key_offset + i]}
  var caml_ephe_get_key=caml_weak_get;
  function caml_ephe_set_data(x,data)
   {x[caml_ephe_data_offset] = data;return 0}
  function caml_weak_set(x,i,v)
   {if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument(str_Weak_set);
    x[caml_ephe_key_offset + i] = v;
    return 0}
  function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
  function caml_ephe_unset_data(x,data)
   {x[caml_ephe_data_offset] = undefined;return 0}
  function caml_ephe_unset_key(x,i){return caml_weak_set(x,i,0)}
  function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
  function caml_fill_bytes(s,i,l,c)
   {if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0)
       {s.c = str$59;s.t = 2}
      else
       {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
     else
      {if(s.t != 4)caml_convert_bytes_to_array(s);
       for(l += i;i < l;i++)s.c[i] = c}
    return 0}
  function caml_final_register(){return 0}
  function caml_float_of_string(s)
   {var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res)return res;
    s = s.replace(/_/g,str$59);
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
    var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
    if(m)
     {var
       m3=m[3].replace(/0+$/,str$59),
       mantissa=parseInt(m[1] + m[2] + m3,16),
       exponent=(m[4] | 0) - 4 * m3.length;
      res = mantissa * Math.pow(2,exponent);
      return res}
    if(/^\+?inf(inity)?$/i.test(s))return Infinity;
    if(/^-inf(inity)?$/i.test(s))return - Infinity;
    caml_failwith("float_of_string")}
  function caml_parse_format(fmt)
   {fmt = caml_jsbytes_of_string(fmt);
    var len=fmt.length;
    if(len > 31)caml_invalid_argument("format_int: format too long");
    var
     f=
      {justify:str$58,
       signstyle:str$60,
       filler:str$67,
       alternate:false,
       base:0,
       signedconv:false,
       width:0,
       uppercase:false,
       sign:1,
       prec:- 1,
       conv:str_f$0};
    for(var i=0;i < len;i++)
     {var c=fmt.charAt(i);
      switch(c)
       {case "-":f.justify = str$60;break;
        case "+":
        case " ":f.signstyle = c;break;
        case "0":f.filler = str_0;break;
        case "#":f.alternate = true;break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         f.width = 0;
         while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
          {f.width = f.width * 10 + c;i++}
         i--;
         break;
        case ".":
         f.prec = 0;
         i++;
         while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
          {f.prec = f.prec * 10 + c;i++}
         i--;
        case "d":
        case "i":f.signedconv = true;
        case "u":f.base = 10;break;
        case "x":f.base = 16;break;
        case "X":f.base = 16;f.uppercase = true;break;
        case "o":f.base = 8;break;
        case "e":
        case "f":
        case "g":f.signedconv = true;f.conv = c;break;
        case "E":
        case "F":
        case "G":
         f.signedconv = true;f.uppercase = true;f.conv = c.toLowerCase();break
        }}
    return f}
  function caml_finish_formatting(f,rawbuffer)
   {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
    var len=rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != str$60))len++;
    if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
    var buffer=str$59;
    if(f.justify == str$58 && f.filler == str$67)
     for(var i=len;i < f.width;i++)buffer += str$67;
    if(f.signedconv)
     if(f.sign < 0)
      buffer += str$60;
     else
      if(f.signstyle != str$60)buffer += f.signstyle;
    if(f.alternate && f.base == 8)buffer += str_0;
    if(f.alternate && f.base == 16)buffer += str_0x;
    if(f.justify == str$58 && f.filler == str_0)
     for(var i=len;i < f.width;i++)buffer += str_0;
    buffer += rawbuffer;
    if(f.justify == str$60)for(var i=len;i < f.width;i++)buffer += str$67;
    return caml_string_of_jsbytes(buffer)}
  function caml_format_float(fmt,x)
   {function toFixed(x,dp)
     {if(Math.abs(x) < 1.0)
       return x.toFixed(dp);
      else
       {var e=parseInt(x.toString().split(str$58)[1]);
        if(e > 20)
         {e -= 20;
          x /= Math.pow(10,e);
          x += new Array(e + 1).join(str_0);
          if(dp > 0)x = x + str$48 + new Array(dp + 1).join(str_0);
          return x}
        else
         return x.toFixed(dp)}}
    var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
    if(isNaN(x))
     {s = str_nan;f.filler = str$67}
    else
     if(! isFinite(x))
      {s = "inf";f.filler = str$67}
     else
      switch(f.conv)
       {case "e":
         var s=x.toExponential(prec),i=s.length;
         if(s.charAt(i - 3) == str_e)
          s = s.slice(0,i - 1) + str_0 + s.slice(i - 1);
         break;
        case "f":s = toFixed(x,prec);break;
        case "g":
         prec = prec?prec:1;
         s = x.toExponential(prec - 1);
         var j=s.indexOf(str_e),exp=+ s.slice(j + 1);
         if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
          {var i=j - 1;
           while(s.charAt(i) == str_0)i--;
           if(s.charAt(i) == str$48)i--;
           s = s.slice(0,i + 1) + s.slice(j);
           i = s.length;
           if(s.charAt(i - 3) == str_e)
            s = s.slice(0,i - 1) + str_0 + s.slice(i - 1);
           break}
         else
          {var p=prec;
           if(exp < 0)
            {p -= exp + 1;s = x.toFixed(p)}
           else
            while(s = x.toFixed(p),s.length > prec + 1)p--;
           if(p)
            {var i=s.length - 1;
             while(s.charAt(i) == str_0)i--;
             if(s.charAt(i) == str$48)i--;
             s = s.slice(0,i + 1)}}
         break
        }
    return caml_finish_formatting(f,s)}
  function caml_format_int(fmt,i)
   {if(caml_jsbytes_of_string(fmt) == str_d)
     return caml_string_of_jsbytes(str$59 + i);
    var f=caml_parse_format(fmt);
    if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
    var s=i.toString(f.base);
    if(f.prec >= 0)
     {f.filler = str$67;
      var n=f.prec - s.length;
      if(n > 0)s = caml_str_repeat(n,str_0) + s}
    return caml_finish_formatting(f,s)}
  var caml_oo_last_id=0;
  function caml_fresh_oo_id(){return caml_oo_last_id++}
  function caml_jsstring_of_string(s){return s.toUtf16()}
  if(joo_global_object.process && joo_global_object.process.cwd)
   var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,str$13);
  else
   var caml_current_dir="/static";
  if(caml_current_dir.slice(- 1) !== str$13)caml_current_dir += str$13;
  function caml_make_path(name)
   {name = caml_jsstring_of_string(name);
    if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
    var comp=name.split(str$13),ncomp=[];
    for(var i=0;i < comp.length;i++)
     switch(comp[i])
      {case "..":if(ncomp.length > 1)ncomp.pop();break;
       case ".":break;
       case "":if(ncomp.length == 0)ncomp.push(str$59);break;
       default:ncomp.push(comp[i]);break}
    ncomp.orig = name;
    return ncomp}
  function caml_utf8_of_utf16(s)
   {for(var b=str$59,t=b,c,d,i=0,l=s.length;i < l;i++)
     {c = s.charCodeAt(i);
      if(c < num_0x80)
       {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < num_0x80;j++);
        if(j - i > num_512)
         {t.substr(0,1);b += t;t = str$59;b += s.slice(i,j)}
        else
         t += s.slice(i,j);
        if(j == l)break;
        i = j}
      if(c < num_0x800)
       {t += String.fromCharCode(0xc0 | c >> 6);
        t += String.fromCharCode(num_0x80 | c & num_0x3f)}
      else
       if(c < 0xd800 || c >= num_0xdfff)
        t
        +=
        String.fromCharCode
         (num_0xe0 | c >> 12,
          num_0x80 | c >> 6 & num_0x3f,
          num_0x80 | c & num_0x3f);
       else
        if
         (c
          >=
          0xdbff
          ||
          i
          +
          1
          ==
          l
          ||
          (d = s.charCodeAt(i + 1))
          <
          num_0xdc00
          ||
          d
          >
          num_0xdfff)
         t += "\xef\xbf\xbd";
        else
         {i++;
          c = (c << 10) + d - 0x35fdc00;
          t
          +=
          String.fromCharCode
           (num_0xf0 | c >> 18,
            num_0x80 | c >> 12 & num_0x3f,
            num_0x80 | c >> 6 & num_0x3f,
            num_0x80 | c & num_0x3f)}
      if(t.length > num_1024){t.substr(0,1);b += t;t = str$59}}
    return b + t}
  function caml_bytes_of_utf16_jsstring(s)
   {var tag=9;
    if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
    return new MlBytes(tag,s,s.length)}
  function caml_string_of_jsstring(s){return caml_bytes_of_utf16_jsstring(s)}
  function caml_raise_sys_error(msg)
   {caml_raise_with_string(caml_global_data.Sys_error,msg)}
  function caml_raise_no_such_file(name)
   {name = caml_jsbytes_of_string(name);
    caml_raise_sys_error(name + ": No such file or directory")}
  function MlFile(){}
  function MlFakeFile(content){this.data = content}
  MlFakeFile.prototype = new MlFile();
  MlFakeFile.prototype.truncate
  =
  function(len)
   {var old=this.data;
    this.data = caml_create_bytes(len | 0);
    caml_blit_bytes(old,0,this.data,0,len)};
  MlFakeFile.prototype.length
  =
  function(){return caml_ml_bytes_length(this.data)};
  MlFakeFile.prototype.write
  =
  function(offset,buf,pos,len)
   {var clen=this.length();
    if(offset + len >= clen)
     {var new_str=caml_create_bytes(offset + len),old_data=this.data;
      this.data = new_str;
      caml_blit_bytes(old_data,0,this.data,0,clen)}
    caml_blit_string(buf,pos,this.data,offset,len);
    return 0};
  MlFakeFile.prototype.read
  =
  function(offset,buf,pos,len)
   {var clen=this.length();
    caml_blit_bytes(this.data,offset,buf,pos,len);
    return 0};
  MlFakeFile.prototype.read_one
  =
  function(offset){return caml_bytes_get(this.data,offset)};
  MlFakeFile.prototype.close = function(){};
  MlFakeFile.prototype.constructor = MlFakeFile;
  function MlFakeDevice(root,f)
   {this.content = {};this.root = root;this.lookupFun = f}
  MlFakeDevice.prototype.nm = function(name){return this.root + name};
  MlFakeDevice.prototype.lookup
  =
  function(name)
   {if(! this.content[name] && this.lookupFun)
     {var
       res=
        this.lookupFun
         (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
      if(res !== 0)
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
  MlFakeDevice.prototype.exists
  =
  function(name)
   {if(name == str$59)return 1;
    var name_slash=name + str$13,r=new RegExp(str$24 + name_slash);
    for(var n in this.content)if(n.match(r))return 1;
    this.lookup(name);
    return this.content[name]?1:0};
  MlFakeDevice.prototype.readdir
  =
  function(name)
   {var
     name_slash=name == str$59?str$59:name + str$13,
     r=new RegExp(str$24 + name_slash + str$9),
     seen={},
     a=[];
    for(var n in this.content)
     {var m=n.match(r);if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
    return a};
  MlFakeDevice.prototype.is_dir
  =
  function(name)
   {var
     name_slash=name == str$59?str$59:name + str$13,
     r=new RegExp(str$24 + name_slash + str$9),
     a=[];
    for(var n in this.content){var m=n.match(r);if(m)return 1}
    return 0};
  MlFakeDevice.prototype.unlink
  =
  function(name)
   {var ok=this.content[name]?true:false;delete this.content[name];return ok};
  MlFakeDevice.prototype.open
  =
  function(name,f)
   {if(f.rdonly && f.wronly)
     caml_raise_sys_error(this.nm(name) + str_flags_Open_rd_abr);
    if(f.text && f.binary)
     caml_raise_sys_error(this.nm(name) + str_flags_Open_te_abr);
    this.lookup(name);
    if(this.content[name])
     {if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + str_file_already_abr);
      var file=this.content[name];
      if(f.truncate)file.truncate();
      return file}
    else
     if(f.create)
      {this.content[name] = new MlFakeFile(caml_create_bytes(0));
       return this.content[name]}
     else
      caml_raise_no_such_file(this.nm(name))};
  MlFakeDevice.prototype.register
  =
  function(name,content)
   {if(this.content[name])
     caml_raise_sys_error(this.nm(name) + str_file_already_abr);
    if(caml_is_ml_bytes(content))this.content[name] = new MlFakeFile(content);
    if(caml_is_ml_string(content))
     this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
    else
     if(content instanceof Array)
      this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
     else
      if(typeof content === "string")
       this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
      else
       if(content.toString)
        {var
          bytes=
           caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
         this.content[name] = new MlFakeFile(bytes)}
       else
        caml_raise_sys_error
         (this.nm(name) + " : registering file with invalid content type")};
  MlFakeDevice.prototype.constructor = MlFakeDevice;
  function caml_array_of_bytes(s)
   {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
  function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
  MlNodeFile.prototype = new MlFile();
  MlNodeFile.prototype.truncate
  =
  function(len)
   {try
     {this.fs.ftruncateSync(this.fd,len | 0)}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeFile.prototype.length
  =
  function()
   {try
     {return this.fs.fstatSync(this.fd).size}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeFile.prototype.write
  =
  function(offset,buf,buf_offset,len)
   {var a=caml_array_of_string(buf);
    if(! (a instanceof joo_global_object.Uint8Array))
     a = new (joo_global_object.Uint8Array)(a);
    var buffer=joo_global_object.Buffer.from(a);
    try
     {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
    catch(err){caml_raise_sys_error(err.toString())}
    return 0};
  MlNodeFile.prototype.read
  =
  function(offset,buf,buf_offset,len)
   {var a=caml_array_of_bytes(buf);
    if(! (a instanceof joo_global_object.Uint8Array))
     a = new (joo_global_object.Uint8Array)(a);
    var buffer=joo_global_object.Buffer.from(a);
    try
     {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
    catch(err){caml_raise_sys_error(err.toString())}
    for(var i=0;i < len;i++)
     caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
    return 0};
  MlNodeFile.prototype.read_one
  =
  function(offset)
   {var
     a=new (joo_global_object.Uint8Array)(1),
     buffer=joo_global_object.Buffer.from(a);
    try
     {this.fs.readSync(this.fd,buffer,0,1,offset)}
    catch(err){caml_raise_sys_error(err.toString())}
    return buffer[0]};
  MlNodeFile.prototype.close
  =
  function()
   {try
     {this.fs.closeSync(this.fd)}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeFile.prototype.constructor = MlNodeFile;
  function MlNodeDevice(root){this.fs = require("fs");this.root = root}
  MlNodeDevice.prototype.nm = function(name){return this.root + name};
  MlNodeDevice.prototype.exists
  =
  function(name)
   {try
     {return this.fs.existsSync(this.nm(name))?1:0}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeDevice.prototype.readdir
  =
  function(name)
   {try
     {return this.fs.readdirSync(this.nm(name))}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeDevice.prototype.is_dir
  =
  function(name)
   {try
     {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeDevice.prototype.unlink
  =
  function(name)
   {try
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name))}
    catch(err){caml_raise_sys_error(err.toString())}
    return b};
  MlNodeDevice.prototype.open
  =
  function(name,f)
   {var consts=require("constants"),res=0;
    for(var key in f)
     switch(key)
      {case "rdonly":res |= consts.O_RDONLY;break;
       case "wronly":res |= consts.O_WRONLY;break;
       case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
       case "create":res |= consts.O_CREAT;break;
       case "truncate":res |= consts.O_TRUNC;break;
       case "excl":res |= consts.O_EXCL;break;
       case "binary":res |= consts.O_BINARY;break;
       case "text":res |= consts.O_TEXT;break;
       case "nonblock":res |= consts.O_NONBLOCK;break
       }
    try
     {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeDevice.prototype.rename
  =
  function(o,n)
   {try
     {this.fs.renameSync(this.nm(o),this.nm(n))}
    catch(err){caml_raise_sys_error(err.toString())}};
  MlNodeDevice.prototype.constructor = MlNodeDevice;
  var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
  function fs_node_supported()
   {return typeof joo_global_object.process
           !==
           "undefined"
           &&
           typeof joo_global_object.process.versions
           !==
           "undefined"
           &&
           typeof joo_global_object.process.versions.node
           !==
           "undefined"
           &&
           joo_global_object.process.platform
           !==
           "browser"}
  var jsoo_mount_point=[];
  if(fs_node_supported())
   jsoo_mount_point.push({path:caml_root,device:new MlNodeDevice(caml_root)});
  else
   jsoo_mount_point.push({path:caml_root,device:new MlFakeDevice(caml_root)});
  jsoo_mount_point.push
   ({path:caml_root + str_static,
     device:new MlFakeDevice(caml_root + str_static)});
  function resolve_fs_device(name)
   {var
     path=caml_make_path(name),
     name=path.join(str$13),
     name_slash=name + str$13,
     res;
    for(var i=0;i < jsoo_mount_point.length;i++)
     {var m=jsoo_mount_point[i];
      if
       (name_slash.search(m.path)
        ==
        0
        &&
        (! res || res.path.length < m.path.length))
       res
       =
       {path:m.path,
        device:m.device,
        rest:name.substring(m.path.length,name.length)}}
    return res}
  function caml_create_file(name,content)
   {var
     name=typeof name == "string"?caml_string_of_jsbytes(name):name,
     content=
      typeof content == "string"?caml_string_of_jsbytes(content):content,
     root=resolve_fs_device(name);
    if(! root.device.register)caml_failwith("cannot register file");
    root.device.register(root.rest,content);
    return 0}
  function caml_fs_init()
   {var tmp=joo_global_object.caml_fs_tmp;
    if(tmp)
     for(var i=0;i < tmp.length;i++)
      caml_create_file(tmp[i].name,tmp[i].content);
    joo_global_object.caml_create_file = caml_create_file;
    joo_global_object.caml_fs_tmp = [];
    return 0}
  function caml_get_exception_raw_backtrace(){return [0]}
  var caml_method_cache=[];
  function caml_get_public_method(obj,tag,cacheid)
   {var meths=obj[1],ofs=caml_method_cache[cacheid];
    if(ofs === null)
     for(var i=caml_method_cache.length;i < cacheid;i++)
      caml_method_cache[i] = 0;
    else
     if(meths[ofs] === tag)return meths[ofs - 1];
    var li=3,hi=meths[1] * 2 + 1,mi;
    while(li < hi)
     {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
    caml_method_cache[cacheid] = li + 1;
    return tag == meths[li + 1]?meths[li]:0}
  function caml_greaterequal(x,y){return + (caml_compare_val(x,y,false) >= 0)}
  function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
  function caml_hash_mix_jsbytes(h,s)
   {var len=s.length,i,w;
    for(i = 0;i + 4 <= len;i += 4)
     {w
      =
      s.charCodeAt(i)
      |
      s.charCodeAt(i + 1)
      <<
      8
      |
      s.charCodeAt(i + 2)
      <<
      16
      |
      s.charCodeAt(i + 3)
      <<
      24;
      h = caml_hash_mix_int(h,w)}
    w = 0;
    switch(len & 3)
     {case 3:w = s.charCodeAt(i + 2) << 16;
      case 2:w |= s.charCodeAt(i + 1) << 8;
      case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
      }
    h ^= len;
    return h}
  function caml_hash_mix_string(h,v)
   {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
  function caml_hash_mix_bytes_arr(h,s)
   {var len=s.length,i,w;
    for(i = 0;i + 4 <= len;i += 4)
     {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
      h = caml_hash_mix_int(h,w)}
    w = 0;
    switch(len & 3)
     {case 3:w = s[i + 2] << 16;
      case 2:w |= s[i + 1] << 8;
      case 1:w |= s[i];h = caml_hash_mix_int(h,w)
      }
    h ^= len;
    return h}
  function caml_hash_mix_bytes(h,v)
   {switch(v.t & 6)
     {default:caml_convert_string_to_bytes(v);case 0:
       h = caml_hash_mix_jsbytes(h,v.c);break;
      case 2:h = caml_hash_mix_bytes_arr(h,v.c)
      }
    return h}
  function caml_hash_mix_final(h)
   {h ^= h >>> 16;
    h = caml_mul(h,0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h,0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h}
  function caml_hash(count,limit,seed,obj)
   {var queue,rd,wr,sz,num,h,v,i,len;
    sz = limit;
    if(sz < 0 || sz > num_256)sz = num_256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0)
     {v = queue[rd++];
      if(v && v.caml_custom)
       {if
         (caml_custom_ops[v.caml_custom]
          &&
          caml_custom_ops[v.caml_custom].hash)
         {var hh=caml_custom_ops[v.caml_custom].hash(v);
          h = caml_hash_mix_int(h,hh);
          num--}}
      else
       if(v instanceof Array && v[0] === (v[0] | 0))
        switch(v[0])
         {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
          case 250:queue[--rd] = v[1];break;
          default:
           var tag=v.length - 1 << 10 | v[0];
           h = caml_hash_mix_int(h,tag);
           for(i = 1,len = v.length;i < len;i++)
            {if(wr >= sz)break;queue[wr++] = v[i]}
           break}
       else
        if(caml_is_ml_bytes(v))
         {h = caml_hash_mix_bytes(h,v);num--}
        else
         if(caml_is_ml_string(v))
          {h = caml_hash_mix_string(h,v);num--}
         else
          if(typeof v === "string")
           {h = caml_hash_mix_jsbytes(h,v);num--}
          else
           if(v === (v | 0))
            {h = caml_hash_mix_int(h,v + v + 1);num--}
           else
            if(v === + v){h = caml_hash_mix_float(h,v);num--}}
    h = caml_hash_mix_final(h);
    return h & num_0x3FFFFFFF}
  function caml_hash_univ_param(count,limit,obj)
   {var hash_accu=0;
    function hash_aux(obj)
     {limit--;
      if(count < 0 || limit < 0)return;
      if(obj instanceof Array && obj[0] === (obj[0] | 0))
       switch(obj[0])
        {case 248:
          count--;hash_accu = hash_accu * num_65599 + obj[2] | 0;break;
         case 250:limit++;hash_aux(obj);break;
         default:
          count--;
          hash_accu = hash_accu * 19 + obj[0] | 0;
          for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
      else
       if(caml_is_ml_bytes(obj))
        {count--;
         switch(obj.t & 6)
          {default:caml_convert_string_to_bytes(obj);case 0:
            for(var b=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
            break;
           case 2:
            for(var a=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
             hash_accu = hash_accu * 19 + a[i] | 0
           }}
       else
        if(caml_is_ml_string(obj))
         {var jsbytes=caml_jsbytes_of_string(obj);
          for(var b=jsbytes,l=jsbytes.length,i=0;i < l;i++)
           hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0}
        else
         if(typeof obj === "string")
          for(var b=obj,l=obj.length,i=0;i < l;i++)
           hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
         else
          if(obj === (obj | 0))
           {count--;hash_accu = hash_accu * num_65599 + obj | 0}
          else
           if(obj === + obj)
            {count--;
             var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
             for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
           else
            if(obj && obj.caml_custom)
             if
              (caml_custom_ops[obj.caml_custom]
               &&
               caml_custom_ops[obj.caml_custom].hash)
              {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
               hash_accu = hash_accu * num_65599 + h | 0}}
    hash_aux(obj);
    return hash_accu & num_0x3FFFFFFF}
  function caml_hexstring_of_float(x,prec,style)
   {if(! isFinite(x))
     {if(isNaN(x))return caml_string_of_jsstring(str_nan);
      return caml_string_of_jsstring(x > 0?str_infinity:"-infinity")}
    var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
    if(sign)x = - x;
    var exp=0;
    if(x == 0)
     ;
    else
     if(x < 1)
      while(x < 1 && exp > - 1022){x *= 2;exp--}
     else
      while(x >= 2){x /= 2;exp++}
    var exp_sign=exp < 0?str$59:str$58,sign_str=str$59;
    if(sign)
     sign_str = str$60;
    else
     switch(style)
      {case 43:sign_str = str$58;break;
       case 32:sign_str = str$67;break;
       default:break}
    if(prec >= 0 && prec < 13)
     {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
    var x_str=x.toString(16);
    if(prec >= 0)
     {var idx=x_str.indexOf(str$48);
      if(idx < 0)
       x_str += str$48 + caml_str_repeat(prec,str_0);
      else
       {var size=idx + 1 + prec;
        if(x_str.length < size)
         x_str += caml_str_repeat(size - x_str.length,str_0);
        else
         x_str = x_str.substr(0,size)}}
    return caml_string_of_jsstring
            (sign_str + str_0x + x_str + "p" + exp_sign + exp.toString(10))}
  function caml_int32_bswap(x)
   {return (x & 0x000000FF)
           <<
           24
           |
           (x & 0x0000FF00)
           <<
           8
           |
           (x & 0x00FF0000)
           >>>
           8
           |
           (x & 0xFF000000)
           >>>
           24}
  function caml_int64_add(x,y){return x.add(y)}
  function caml_int64_bswap(x)
   {var y=caml_int64_to_bytes(x);
    return caml_int64_of_bytes([y[7],y[6],y[5],y[4],y[3],y[2],y[1],y[0]])}
  function caml_int64_div(x,y){return x.div(y)}
  function caml_int64_is_zero(x){return + x.isZero()}
  function caml_int64_of_int32(x)
   {return new
            MlInt64
            (x & num_0xffffff,x >> 24 & num_0xffffff,x >> 31 & num_0xffff)}
  function caml_int64_to_int32(x){return x.toInt()}
  function caml_int64_is_negative(x){return + x.isNeg()}
  function caml_int64_neg(x){return x.neg()}
  function caml_int64_format(fmt,x)
   {var f=caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x))
     {f.sign = - 1;x = caml_int64_neg(x)}
    var
     buffer=str$59,
     wbase=caml_int64_of_int32(f.base),
     cvtbl=str_0123456789abcdef;
    do
     {var p=x.udivmod(wbase);
      x = p.quotient;
      buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0)
     {f.filler = str$67;
      var n=f.prec - buffer.length;
      if(n > 0)buffer = caml_str_repeat(n,str_0) + buffer}
    return caml_finish_formatting(f,buffer)}
  function caml_int64_mod(x,y){return x.mod(y)}
  function caml_int64_mul(x,y){return x.mul(y)}
  function caml_int64_of_float(x)
   {if(x < 0)x = Math.ceil(x);
    return new
            MlInt64
            (x & num_0xffffff,
             Math.floor(x * caml_int64_offset) & num_0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset)
             &
             num_0xffff)}
  function caml_int64_ult(x,y){return x.ucompare(y) < 0}
  function caml_parse_sign_and_base(s)
   {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
    if(len > 0)
     switch(caml_string_unsafe_get(s,i))
      {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
    if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
     switch(caml_string_unsafe_get(s,i + 1))
      {case 120:
       case 88:base = 16;i += 2;break;
       case 111:
       case 79:base = 8;i += 2;break;
       case 98:
       case 66:base = 2;i += 2;break;
       case 117:
       case 85:i += 2;break
       }
    return [i,sign,base]}
  function caml_parse_digit(c)
   {if(c >= 48 && c <= 57)return c - 48;
    if(c >= 65 && c <= 90)return c - 55;
    if(c >= 97 && c <= num_122)return c - 87;
    return - 1}
  function caml_int64_of_string(s)
   {var
     r=caml_parse_sign_and_base(s),
     i=r[0],
     sign=r[1],
     base=r[2],
     base64=caml_int64_of_int32(base),
     threshold=
      new MlInt64(num_0xffffff,0xfffffff,num_0xffff).udivmod(base64).quotient,
     c=caml_string_unsafe_get(s,i),
     d=caml_parse_digit(c);
    if(d < 0 || d >= base)caml_failwith(str_int_of_string);
    var res=caml_int64_of_int32(d);
    for(;;)
     {i++;
      c = caml_string_unsafe_get(s,i);
      if(c == 95)continue;
      d = caml_parse_digit(c);
      if(d < 0 || d >= base)break;
      if(caml_int64_ult(threshold,res))caml_failwith(str_int_of_string);
      d = caml_int64_of_int32(d);
      res = caml_int64_add(caml_int64_mul(base64,res),d);
      if(caml_int64_ult(res,d))caml_failwith(str_int_of_string)}
    if(i != caml_ml_string_length(s))caml_failwith(str_int_of_string);
    if(base == 10 && caml_int64_ult(new MlInt64(0,0,num_0x8000),res))
     caml_failwith(str_int_of_string);
    if(sign < 0)res = caml_int64_neg(res);
    return res}
  function caml_int64_shift_left(x,s){return x.shift_left(s)}
  function caml_int64_sub(x,y){return x.sub(y)}
  function caml_int64_to_float(x){return x.toFloat()}
  function caml_int_of_string(s)
   {var
     r=caml_parse_sign_and_base(s),
     i=r[0],
     sign=r[1],
     base=r[2],
     len=caml_ml_string_length(s),
     threshold=- 1 >>> 0,
     c=i < len?caml_string_unsafe_get(s,i):0,
     d=caml_parse_digit(c);
    if(d < 0 || d >= base)caml_failwith(str_int_of_string);
    var res=d;
    for(i++;i < len;i++)
     {c = caml_string_unsafe_get(s,i);
      if(c == 95)continue;
      d = caml_parse_digit(c);
      if(d < 0 || d >= base)break;
      res = base * res + d;
      if(res > threshold)caml_failwith(str_int_of_string)}
    if(i != len)caml_failwith(str_int_of_string);
    res = sign * res;
    if(base == 10 && (res | 0) != res)caml_failwith(str_int_of_string);
    return res | 0}
  function caml_js_export_var()
   {return typeof module !== "undefined" && module && module.exports
            ?module.exports
            :joo_global_object}
  function caml_js_get_console()
   {var
     c=joo_global_object.console?joo_global_object.console:{},
     m=
      [str_log,
       str_debug,
       str_info,
       "warn",
       str_error,
       "assert",
       "dir",
       "dirxml",
       str_trace,
       "group",
       "groupCollapsed",
       "groupEnd",
       str_time,
       "timeEnd"];
    function f(){}
    for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
    return c}
  function caml_js_wrap_callback(f)
   {return function()
     {var len=arguments.length;
      if(len > 0)
       {var args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,args)}
      else
       return caml_call_gen(f,[undefined])}}
  function caml_js_wrap_meth_callback(f)
   {return function()
     {var len=arguments.length,args=new Array(len + 1);
      args[0] = this;
      for(var i=0;i < len;i++)args[i + 1] = arguments[i];
      return caml_call_gen(f,args)}}
  function caml_lazy_make_forward(v){return [num_250,v]}
  function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
  function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
  function caml_lex_array(s)
   {s = caml_jsbytes_of_string(s);
    var l=s.length / 2,a=new Array(l);
    for(var i=0;i < l;i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a}
  function caml_lex_engine(tbl,start_state,lexbuf)
   {var
     lex_buffer=2,
     lex_buffer_len=3,
     lex_start_pos=5,
     lex_curr_pos=6,
     lex_last_pos=7,
     lex_last_action=8,
     lex_eof_reached=9,
     lex_base=1,
     lex_backtrk=2,
     lex_default=3,
     lex_trans=4,
     lex_check=5;
    if(! tbl.lex_default)
     {tbl.lex_base = caml_lex_array(tbl[lex_base]);
      tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
      tbl.lex_check = caml_lex_array(tbl[lex_check]);
      tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
      tbl.lex_default = caml_lex_array(tbl[lex_default])}
    var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0)
     {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = - 1}
    else
     state = - state - 1;
    for(;;)
     {var base=tbl.lex_base[state];
      if(base < 0)return - base - 1;
      var backtrk=tbl.lex_backtrk[state];
      if(backtrk >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = backtrk}
      if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
       if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = num_256;
      else
       {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
      if(tbl.lex_check[base + c] == state)
       state = tbl.lex_trans[base + c];
      else
       state = tbl.lex_default[state];
      if(state < 0)
       {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
        if(lexbuf[lex_last_action] == - 1)
         caml_failwith(str_lexing_empty_token);
        else
         return lexbuf[lex_last_action]}
      else
       if(c == num_256)lexbuf[lex_eof_reached] = 0}}
  function caml_list_of_js_array(a)
   {var l=0;
    for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
    return l}
  function caml_make_vect(len,init)
   {if(len < 0)caml_array_bound_error();
    var len=len + 1 | 0,b=new Array(len);
    b[0] = 0;
    for(var i=1;i < len;i++)b[i] = init;
    return b}
  function caml_string_of_array(a)
   {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
  var
   caml_md5_bytes=
    function()
      {function add(x,y){return x + y | 0}
       function xx(q,a,b,x,s,t)
        {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
       function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
       function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
       function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
       function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
       function md5(buffer,length)
        {var i=length;
         buffer[i >> 2] |= num_0x80 << 8 * (i & 3);
         for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
          buffer[(i >> 2) - 1] = 0;
         buffer[(i >> 2) - 1] = length << 3;
         buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
         var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
         for(i = 0;i < buffer.length;i += 16)
          {var a=w[0],b=w[1],c=w[2],d=w[3];
           a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
           d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
           c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
           b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
           a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
           d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
           c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
           b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
           a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
           d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
           c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
           b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
           a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
           d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
           c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
           b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
           a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
           d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
           c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
           b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
           a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
           d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
           c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
           b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
           a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
           d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
           c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
           b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
           a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
           d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
           c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
           b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
           a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
           d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
           c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
           b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
           a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
           d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
           c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
           b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
           a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
           d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
           c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
           b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
           a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
           d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
           c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
           b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
           a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
           d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
           c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
           b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
           a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
           d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
           c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
           b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
           a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
           d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
           c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
           b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
           a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
           d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
           c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
           b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
           w[0] = add(a,w[0]);
           w[1] = add(b,w[1]);
           w[2] = add(c,w[2]);
           w[3] = add(d,w[3])}
         var t=new Array(16);
         for(var i=0;i < 4;i++)
          for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & num_0xFF;
         return t}
       return function(s,ofs,len)
        {var buf=[];
         switch(s.t & 6)
          {default:caml_convert_string_to_bytes(s);case 0:
            var b=s.c;
            for(var i=0;i < len;i += 4)
             {var j=i + ofs;
              buf[i >> 2]
              =
              b.charCodeAt(j)
              |
              b.charCodeAt(j + 1)
              <<
              8
              |
              b.charCodeAt(j + 2)
              <<
              16
              |
              b.charCodeAt(j + 3)
              <<
              24}
            for(;i < len;i++)
             buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
            break;
           case 4:
            var a=s.c;
            for(var i=0;i < len;i += 4)
             {var j=i + ofs;
              buf[i >> 2]
              =
              a[j]
              |
              a[j + 1]
              <<
              8
              |
              a[j + 2]
              <<
              16
              |
              a[j + 3]
              <<
              24}
            for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
           }
         return caml_string_of_array(md5(buf,len))}}
     ();
  function caml_md5_string(s,ofs,len)
   {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
  var caml_ml_channels=new Array();
  function caml_ml_flush(chanid)
   {var chan=caml_ml_channels[chanid];
    if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer == str$59)return 0;
    if
     (chan.fd
      &&
      caml_global_data.fds[chan.fd]
      &&
      caml_global_data.fds[chan.fd].output)
     {var output=caml_global_data.fds[chan.fd].output;
      switch(output.length)
       {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
    chan.buffer = str$59;
    return 0}
  function caml_ml_refill_input(chan)
   {var str=chan.refill(),str_len=caml_ml_string_length(str);
    if(str_len == 0)chan.refill = null;
    chan.file.write(chan.file.length(),str,0,str_len);
    return str_len}
  function caml_ml_input(chanid,s,i,l)
   {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
    if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
    if(l2 < l)l = l2;
    chan.file.read(chan.offset,s,i,l);
    chan.offset += l;
    return l}
  function caml_std_output(chanid,s)
   {var
     chan=caml_ml_channels[chanid],
     str=caml_string_of_jsbytes(s),
     slen=caml_ml_string_length(str);
    chan.file.write(chan.offset,str,0,slen);
    chan.offset += slen;
    return 0}
  function js_print_stderr(s)
   {var s=caml_utf16_of_utf8(s),g=joo_global_object;
    if(g.process && g.process.stdout && g.process.stdout.write)
     g.process.stderr.write(s);
    else
     {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
      var v=g.console;
      v && v.error && v.error(s)}}
  function js_print_stdout(s)
   {var s=caml_utf16_of_utf8(s),g=joo_global_object;
    if(g.process && g.process.stdout && g.process.stdout.write)
     g.process.stdout.write(s);
    else
     {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
      var v=g.console;
      v && v.log && v.log(s)}}
  function caml_sys_open_internal(idx,output,file,flags)
   {if(caml_global_data.fds === undefined)caml_global_data.fds = new Array();
    flags = flags?flags:{};
    var info={};
    info.file = file;
    info.offset = flags.append?file.length():0;
    info.flags = flags;
    info.output = output;
    caml_global_data.fds[idx] = info;
    if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
     caml_global_data.fd_last_idx = idx;
    return idx}
  function caml_sys_open(name,flags,_perms)
   {var f={};
    while(flags)
     {switch(flags[1])
       {case 0:f.rdonly = 1;break;
        case 1:f.wronly = 1;break;
        case 2:f.append = 1;break;
        case 3:f.create = 1;break;
        case 4:f.truncate = 1;break;
        case 5:f.excl = 1;break;
        case 6:f.binary = 1;break;
        case 7:f.text = 1;break;
        case 8:f.nonblock = 1;break
        }
      flags = flags[2]}
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name) + str_flags_Open_rd_abr);
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name) + str_flags_Open_te_abr);
    var
     root=resolve_fs_device(name),
     file=root.device.open(root.rest,f),
     idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
    return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
  caml_sys_open_internal
   (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
  caml_sys_open_internal
   (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
  caml_sys_open_internal
   (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
  function caml_ml_open_descriptor_in(fd)
   {var data=caml_global_data.fds[fd];
    if(data.flags.wronly)caml_raise_sys_error(str_fd + fd + " is writeonly");
    var
     channel=
      {file:data.file,
       offset:data.offset,
       fd:fd,
       opened:true,
       out:false,
       refill:null};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd}
  function caml_ml_open_descriptor_out(fd)
   {var data=caml_global_data.fds[fd];
    if(data.flags.rdonly)caml_raise_sys_error(str_fd + fd + " is readonly");
    var
     channel=
      {file:data.file,
       offset:data.offset,
       fd:fd,
       opened:true,
       out:true,
       buffer:str$59};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd}
  function caml_ml_out_channels_list()
   {var l=0;
    for(var c=0;c < caml_ml_channels.length;c++)
     if
      (caml_ml_channels[c]
       &&
       caml_ml_channels[c].opened
       &&
       caml_ml_channels[c].out)
      l = [0,caml_ml_channels[c].fd,l];
    return l}
  function caml_string_of_bytes(s){return s}
  function caml_ml_output_bytes(chanid,buffer,offset,len)
   {var chan=caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    var bytes;
    if(offset == 0 && caml_ml_bytes_length(buffer) == len)
     bytes = buffer;
    else
     {bytes = caml_create_bytes(len);
      caml_blit_bytes(buffer,offset,bytes,0,len)}
    var
     string=caml_string_of_bytes(bytes),
     jsstring=caml_jsbytes_of_string(string),
     id=jsstring.lastIndexOf("\n");
    if(id < 0)
     chan.buffer += jsstring;
    else
     {chan.buffer += jsstring.substr(0,id + 1);
      caml_ml_flush(chanid);
      chan.buffer += jsstring.substr(id + 1)}
    return 0}
  function caml_ml_output(chanid,buffer,offset,len)
   {return caml_ml_output_bytes
            (chanid,caml_bytes_of_string(buffer),offset,len)}
  function caml_ml_output_char(chanid,c)
   {var s=caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid,s,0,1);
    return 0}
  function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
  function caml_modf_float(x)
   {if(isFinite(x))
     {var neg=1 / x < 0;
      x = Math.abs(x);
      var i=Math.floor(x),f=x - i;
      if(neg){i = - i;f = - f}
      return [0,f,i]}
    if(isNaN(x))return [0,NaN,NaN];
    return [0,1 / x,x]}
  function caml_lex_run_mem(s,i,mem,curr_pos)
   {for(;;)
     {var dst=s.charCodeAt(i);
      i++;
      if(dst == num_0xff)return;
      var src=s.charCodeAt(i);
      i++;
      if(src == num_0xff)
       mem[dst + 1] = curr_pos;
      else
       mem[dst + 1] = mem[src + 1]}}
  function caml_lex_run_tag(s,i,mem)
   {for(;;)
     {var dst=s.charCodeAt(i);
      i++;
      if(dst == num_0xff)return;
      var src=s.charCodeAt(i);
      i++;
      if(src == num_0xff)mem[dst + 1] = - 1;else mem[dst + 1] = mem[src + 1]}}
  function caml_new_lex_engine(tbl,start_state,lexbuf)
   {var
     lex_buffer=2,
     lex_buffer_len=3,
     lex_start_pos=5,
     lex_curr_pos=6,
     lex_last_pos=7,
     lex_last_action=8,
     lex_eof_reached=9,
     lex_mem=10,
     lex_base=1,
     lex_backtrk=2,
     lex_default=3,
     lex_trans=4,
     lex_check=5,
     lex_base_code=6,
     lex_backtrk_code=7,
     lex_default_code=8,
     lex_trans_code=9,
     lex_check_code=10,
     lex_code=11;
    if(! tbl.lex_default)
     {tbl.lex_base = caml_lex_array(tbl[lex_base]);
      tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
      tbl.lex_check = caml_lex_array(tbl[lex_check]);
      tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
      tbl.lex_default = caml_lex_array(tbl[lex_default])}
    if(! tbl.lex_default_code)
     {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
      tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
      tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
      tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
      tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0)
     {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = - 1}
    else
     state = - state - 1;
    for(;;)
     {var base=tbl.lex_base[state];
      if(base < 0)
       {var pc_off=tbl.lex_base_code[state];
        caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
        return - base - 1}
      var backtrk=tbl.lex_backtrk[state];
      if(backtrk >= 0)
       {var pc_off=tbl.lex_backtrk_code[state];
        caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
        lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = backtrk}
      if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
       if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = num_256;
      else
       {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
      var pstate=state;
      if(tbl.lex_check[base + c] == state)
       state = tbl.lex_trans[base + c];
      else
       state = tbl.lex_default[state];
      if(state < 0)
       {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
        if(lexbuf[lex_last_action] == - 1)
         caml_failwith(str_lexing_empty_token);
        else
         return lexbuf[lex_last_action]}
      else
       {var base_code=tbl.lex_base_code[pstate],pc_off;
        if(tbl.lex_check_code[base_code + c] == pstate)
         pc_off = tbl.lex_trans_code[base_code + c];
        else
         pc_off = tbl.lex_default_code[pstate];
        if(pc_off > 0)
         caml_lex_run_mem
          (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
        if(c == num_256)lexbuf[lex_eof_reached] = 0}}}
  function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
  function caml_obj_block(tag,size)
   {var o=new Array(size + 1);
    o[0] = tag;
    for(var i=1;i <= size;i++)o[i] = 0;
    return o}
  function caml_obj_make_forward(b,v){b[0] = num_250;b[1] = v;return 0}
  function caml_obj_tag(x)
   {if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else
     if(caml_is_ml_bytes(x))
      return num_252;
     else
      if(caml_is_ml_string(x))
       return num_252;
      else
       if(x instanceof Function || typeof x == "function")
        return num_247;
       else
        if(x && x.caml_custom)return num_255;else return num_1000$0}
  function caml_parse_engine(tables,env,cmd,arg)
   {var
     ERRCODE=num_256,
     loop=6,
     testshift=7,
     shift=8,
     shift_recover=9,
     reduce=10,
     READ_TOKEN=0,
     RAISE_PARSE_ERROR=1,
     GROW_STACKS_1=2,
     GROW_STACKS_2=3,
     COMPUTE_SEMANTIC_ACTION=4,
     CALL_ERROR_FUNCTION=5,
     env_s_stack=1,
     env_v_stack=2,
     env_symb_start_stack=3,
     env_symb_end_stack=4,
     env_stacksize=5,
     env_stackbase=6,
     env_curr_char=7,
     env_lval=8,
     env_symb_start=9,
     env_symb_end=10,
     env_asp=11,
     env_rule_len=12,
     env_rule_number=13,
     env_sp=14,
     env_state=15,
     env_errflag=16,
     tbl_transl_const=2,
     tbl_transl_block=3,
     tbl_lhs=4,
     tbl_len=5,
     tbl_defred=6,
     tbl_dgoto=7,
     tbl_sindex=8,
     tbl_rindex=9,
     tbl_gindex=10,
     tbl_tablesize=11,
     tbl_table=12,
     tbl_check=13;
    if(! tables.dgoto)
     {tables.defred = caml_lex_array(tables[tbl_defred]);
      tables.sindex = caml_lex_array(tables[tbl_sindex]);
      tables.check = caml_lex_array(tables[tbl_check]);
      tables.rindex = caml_lex_array(tables[tbl_rindex]);
      tables.table = caml_lex_array(tables[tbl_table]);
      tables.len = caml_lex_array(tables[tbl_len]);
      tables.lhs = caml_lex_array(tables[tbl_lhs]);
      tables.gindex = caml_lex_array(tables[tbl_gindex]);
      tables.dgoto = caml_lex_array(tables[tbl_dgoto])}
    var
     res=0,
     n,
     n1,
     n2,
     state1,
     sp=env[env_sp],
     state=env[env_state],
     errflag=env[env_errflag];
    exit:
    for(;;)
     switch(cmd)
      {case 0:state = 0;errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n != 0){cmd = reduce;break}
        if(env[env_curr_char] >= 0){cmd = testshift;break}
        res = READ_TOKEN;
        break exit;
       case 1:
        if(arg instanceof Array)
         {env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
          env[env_lval] = arg[1]}
        else
         {env[env_curr_char] = tables[tbl_transl_const][arg + 1];
          env[env_lval] = 0}
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1
          !=
          0
          &&
          n2
          >=
          0
          &&
          n2
          <=
          tables[tbl_tablesize]
          &&
          tables.check[n2]
          ==
          env[env_curr_char])
         {cmd = shift;break}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1
          !=
          0
          &&
          n2
          >=
          0
          &&
          n2
          <=
          tables[tbl_tablesize]
          &&
          tables.check[n2]
          ==
          env[env_curr_char])
         {n = tables.table[n2];cmd = reduce;break}
        if(errflag <= 0){res = CALL_ERROR_FUNCTION;break exit}
       case 5:
        if(errflag < 3)
         {errflag = 3;
          for(;;)
           {state1 = env[env_s_stack][sp + 1];
            n1 = tables.sindex[state1];
            n2 = n1 + ERRCODE;
            if
             (n1
              !=
              0
              &&
              n2
              >=
              0
              &&
              n2
              <=
              tables[tbl_tablesize]
              &&
              tables.check[n2]
              ==
              ERRCODE)
             {cmd = shift_recover;break}
            else
             {if(sp <= env[env_stackbase])return RAISE_PARSE_ERROR;sp--}}}
        else
         {if(env[env_curr_char] == 0)return RAISE_PARSE_ERROR;
          env[env_curr_char] = - 1;
          cmd = loop;
          break}
       case 8:env[env_curr_char] = - 1;if(errflag > 0)errflag--;
       case 9:
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1;break exit}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        break;
       case 10:
        var m=tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1
          !=
          0
          &&
          n2
          >=
          0
          &&
          n2
          <=
          tables[tbl_tablesize]
          &&
          tables.check[n2]
          ==
          state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2;break exit}
       case 3:res = COMPUTE_SEMANTIC_ACTION;break exit;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp=env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        break;
       default:return RAISE_PARSE_ERROR}
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res}
  function caml_register_global(n,v,name_opt)
   {if(name_opt && joo_global_object.toplevelReloc)
     n = joo_global_object.toplevelReloc(name_opt);
    caml_global_data[n + 1] = v;
    if(name_opt)caml_global_data[name_opt] = v}
  var caml_named_values={};
  function caml_register_named_value(nm,v)
   {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
  function caml_secp256k1_context_create(flags)
   {return _SECP256K1._secp256k1_context_create(flags)}
  function secp256k1_ml_obj_len(x){return x.data.length}
  function secp256k1_ml_obj_bpe(x){return x.data.BYTES_PER_ELEMENT}
  function secp256k1_ml_obj_data(x){return x.data}
  function secp256k1_wasm_allocate_u8(ml_obj)
   {var
     ptr=
      _SECP256K1._malloc
       (secp256k1_ml_obj_len(ml_obj) * secp256k1_ml_obj_bpe(ml_obj));
    _SECP256K1.HEAPU8.set
     (secp256k1_ml_obj_data(ml_obj),ptr / secp256k1_ml_obj_bpe(ml_obj));
    return ptr}
  function secp256k1_wasm_free(ptr){return _SECP256K1._free(ptr)}
  function secp256k1_wasm_update_u8(dest_ml_obj,src_ptr)
   {var
     data=
      new
       Uint8Array
       (_SECP256K1.HEAPU8.buffer,src_ptr,secp256k1_ml_obj_len(dest_ml_obj));
    for(var i=0;i < secp256k1_ml_obj_len(dest_ml_obj);i++)
     dest_ml_obj.data[i] = data[i];
    secp256k1_wasm_free(src_ptr);
    return 0}
  function caml_secp256k1_context_randomize(ctx,seed32)
   {var
     seed32_ptr=secp256k1_wasm_allocate_u8(seed32),
     ret=_SECP256K1._secp256k1_context_randomize(ctx,seed32);
    _SECP256K1._free(seed32_ptr);
    return ret}
  function caml_secp256k1_ec_pubkey_create(ctx,pk,sk)
   {var
     pk_ptr=secp256k1_wasm_allocate_u8(pk),
     sk_ptr=secp256k1_wasm_allocate_u8(sk),
     ret=_SECP256K1._secp256k1_ec_pubkey_create(ctx,pk_ptr,sk_ptr);
    secp256k1_wasm_update_u8(pk,pk_ptr);
    _SECP256K1._free(sk_ptr);
    return ret}
  function caml_secp256k1_ec_pubkey_parse(ctx,pubkey,input)
   {var
     pubkey_ptr=secp256k1_wasm_allocate_u8(pubkey),
     input_ptr=secp256k1_wasm_allocate_u8(input),
     ret=_SECP256K1._secp256k1_ec_pubkey_parse(ctx,pubkey,input,input.length);
    _SECP256K1._free(pubkey_ptr);
    _SECP256K1._free(input_ptr);
    return ret}
  function caml_secp256k1_ec_pubkey_serialize
   (ctx,output,outputlen,pubkey,flags)
   {return _SECP256K1._secp256k1_ec_pubkey_serialize
            (ctx,output,outputlen,pubkey,flags)}
  function caml_secp256k1_ec_seckey_verify(ctx,buf)
   {var
     sk_ptr=secp256k1_wasm_allocate_u8(buf),
     ret=_SECP256K1._secp256k1_ec_seckey_verify(ctx,sk_ptr);
    _SECP256K1._free(sk_ptr);
    return ret}
  function caml_secp256k1_ecdsa_recoverable_signature_serialize_compact
   (ctx,output64,recid,sig)
   {return _SECP256K1._secp256k1_ecdsa_recoverable_signature_serialize_compact
            (ctx,output64,recid,sig)}
  function caml_secp256k1_ecdsa_signature_parse_compact(ctx,sig,input64)
   {return _SECP256K1._secp256k1_ecdsa_signature_parse_compact
            (ctx,sig,input64)}
  function caml_secp256k1_ecdsa_signature_serialize_compact(ctx,output64,sig)
   {return _SECP256K1._secp256k1_ecdsa_signature_serialize_compact
            (ctx,output64,sig)}
  function caml_secp256k1_ecdsa_signature_serialize_der
   (ctx,output,outputlen,sig)
   {return _SECP256K1._secp256k1_ecdsa_signature_serialize_der
            (ctx,output,outputlen,sig)}
  function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
  function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
  function caml_string_bound_error()
   {caml_invalid_argument(str_index_out_of_bounds)}
  function caml_string_get(s,i)
   {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
    return caml_string_unsafe_get(s,i)}
  function caml_string_get16(s,i)
   {if(i >>> 0 >= caml_ml_string_length(s) - 1)caml_string_bound_error();
    var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
    return b2 << 8 | b1}
  function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
  function caml_sys_const_backend_type()
   {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
  function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
  function caml_sys_exit(code)
   {var g=joo_global_object;
    if(g.quit)g.quit(code);
    if(g.process && g.process.exit)g.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented")}
  function caml_sys_get_config()
   {return [0,caml_string_of_jsbytes("Unix"),32,0]}
  function caml_raise_not_found()
   {caml_raise_constant(caml_global_data.Not_found)}
  function caml_sys_getenv(name)
   {var g=joo_global_object,n=caml_jsstring_of_string(name);
    if(g.process && g.process.env && g.process.env[n] != undefined)
     return caml_string_of_jsstring(g.process.env[n]);
    if
     (joo_global_object.jsoo_static_env
      &&
      joo_global_object.jsoo_static_env[n])
     return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n]);
    caml_raise_not_found()}
  function caml_sys_random_seed()
   {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
    return [0,x]}
  function caml_trampoline(res)
   {var c=1;
    while(res && res.joo_tramp)
     {res = res.joo_tramp.apply(null,res.joo_args);c++}
    return res}
  function caml_trampoline_return(f,args){return {joo_tramp:f,joo_args:args}}
  function caml_update_dummy(x,y)
   {if(typeof y === "function"){x.fun = y;return 0}
    if(y.fun){x.fun = y.fun;return 0}
    var i=y.length;
    while(i--)x[i] = y[i];
    return 0}
  function caml_weak_blit(a1,i1,a2,i2,len)
   {caml_array_blit
     (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
    return 0}
  function caml_obj_dup(x)
   {var l=x.length,a=new Array(l);for(var i=0;i < l;i++)a[i] = x[i];return a}
  function caml_weak_get_copy(x,i)
   {if(i < 0 || caml_ephe_key_offset + i >= x.length)
     caml_invalid_argument(str_Weak_get_copy);
    var y=caml_weak_get(x,i);
    if(y === 0)return y;
    var z=y[1];
    if(z instanceof Array)return [0,caml_obj_dup(z)];
    return y}
  function caml_return_exn_constant(tag){return tag}
  function caml_named_value(nm){return caml_named_values[nm]}
  function caml_wrap_exception(e)
   {if(e instanceof Array)return e;
    if
     (joo_global_object.RangeError
      &&
      e instanceof joo_global_object.RangeError
      &&
      e.message
      &&
      e.message.match(/maximum call stack/i))
     return caml_return_exn_constant(caml_global_data.Stack_overflow);
    if
     (joo_global_object.InternalError
      &&
      e instanceof joo_global_object.InternalError
      &&
      e.message
      &&
      e.message.match(/too much recursion/i))
     return caml_return_exn_constant(caml_global_data.Stack_overflow);
    if(e instanceof joo_global_object.Error && caml_named_value(str_jsError))
     return [0,caml_named_value(str_jsError),e];
    return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
  function caml_xmlhttprequest_create(unit)
   {var g=joo_global_object;
    if(typeof g.XMLHttpRequest !== "undefined")
     try {return new (g.XMLHttpRequest)()}catch(e){}
    if(typeof g.activeXObject !== "undefined")
     {try {return new (g.activeXObject)("Msxml2.XMLHTTP")}catch(e){}
      try {return new (g.activeXObject)("Msxml3.XMLHTTP")}catch(e){}
      try {return new (g.activeXObject)("Microsoft.XMLHTTP")}catch(e){}}
    caml_failwith("Cannot create a XMLHttpRequest")}
  var
   bigInt=
    function(undefined)
      {"use strict";
       var
        BASE=num_1e7,
        LOG_BASE=7,
        MAX_INT=9007199254740992,
        MAX_INT_ARR=smallToArray(MAX_INT),
        DEFAULT_ALPHABET="0123456789abcdefghijklmnopqrstuvwxyz",
        BigInt=joo_global_object.BigInt,
        supportsNativeBigInt=typeof BigInt === "function";
       function Integer(v,radix,alphabet,caseSensitive)
        {if(typeof v === "undefined")return Integer[0];
         if(typeof radix !== "undefined")
          return + radix === 10 && ! alphabet
                  ?parseValue(v)
                  :parseBase(v,radix,alphabet,caseSensitive);
         return parseValue(v)}
       function BigInteger(value,sign)
        {this.value = value;
         this.sign = sign;
         this.isSmall = false;
         this.caml_custom = str_z}
       BigInteger.prototype = Object.create(Integer.prototype);
       function SmallInteger(value)
        {this.value = value;
         this.sign = value < 0;
         this.isSmall = true;
         this.caml_custom = str_z}
       SmallInteger.prototype = Object.create(Integer.prototype);
       function NativeBigInt(value)
        {this.value = value;this.caml_custom = str_z}
       NativeBigInt.prototype = Object.create(Integer.prototype);
       function isPrecise(n){return - MAX_INT < n && n < MAX_INT}
       function smallToArray(n)
        {if(n < num_1e7)return [n];
         if(n < num_1e14)return [n % num_1e7,Math.floor(n / num_1e7)];
         return [n % num_1e7,
                 Math.floor(n / num_1e7) % num_1e7,
                 Math.floor(n / num_1e14)]}
       function arrayToSmall(arr)
        {trim(arr);
         var length=arr.length;
         if(length < 4 && compareAbs(arr,MAX_INT_ARR) < 0)
          switch(length)
           {case 0:return 0;
            case 1:return arr[0];
            case 2:return arr[0] + arr[1] * BASE;
            default:return arr[0] + (arr[1] + arr[2] * BASE) * BASE}
         return arr}
       function trim(v){var i=v.length;while(v[--i] === 0);v.length = i + 1}
       function createArray(length)
        {var x=new Array(length),i=- 1;while(++i < length)x[i] = 0;return x}
       function truncate(n){if(n > 0)return Math.floor(n);return Math.ceil(n)}
       function add(a,b)
        {var
          l_a=a.length,
          l_b=b.length,
          r=new Array(l_a),
          carry=0,
          base=BASE,
          sum,
          i;
         for(i = 0;i < l_b;i++)
          {sum = a[i] + b[i] + carry;
           carry = sum >= base?1:0;
           r[i] = sum - carry * base}
         while(i < l_a)
          {sum = a[i] + carry;
           carry = sum === base?1:0;
           r[i++] = sum - carry * base}
         if(carry > 0)r.push(carry);
         return r}
       function addAny(a,b)
        {if(a.length >= b.length)return add(a,b);return add(b,a)}
       function addSmall(a,carry)
        {var l=a.length,r=new Array(l),base=BASE,sum,i;
         for(i = 0;i < l;i++)
          {sum = a[i] - base + carry;
           carry = Math.floor(sum / base);
           r[i] = sum - carry * base;
           carry += 1}
         while(carry > 0)
          {r[i++] = carry % base;carry = Math.floor(carry / base)}
         return r}
       BigInteger.prototype.add
       =
       function(v)
        {var n=parseValue(v);
         if(this.sign !== n.sign)return this.subtract(n.negate());
         var a=this.value,b=n.value;
         if(n.isSmall)
          return new BigInteger(addSmall(a,Math.abs(b)),this.sign);
         return new BigInteger(addAny(a,b),this.sign)};
       BigInteger.prototype.plus = BigInteger.prototype.add;
       SmallInteger.prototype.add
       =
       function(v)
        {var n=parseValue(v),a=this.value;
         if(a < 0 !== n.sign)return this.subtract(n.negate());
         var b=n.value;
         if(n.isSmall)
          {if(isPrecise(a + b))return new SmallInteger(a + b);
           b = smallToArray(Math.abs(b))}
         return new BigInteger(addSmall(b,Math.abs(a)),a < 0)};
       SmallInteger.prototype.plus = SmallInteger.prototype.add;
       NativeBigInt.prototype.add
       =
       function(v){return new NativeBigInt(this.value + parseValue(v).value)};
       NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
       function subtract(a,b)
        {var
          a_l=a.length,
          b_l=b.length,
          r=new Array(a_l),
          borrow=0,
          base=BASE,
          i,
          difference;
         for(i = 0;i < b_l;i++)
          {difference = a[i] - borrow - b[i];
           if(difference < 0){difference += base;borrow = 1}else borrow = 0;
           r[i] = difference}
         for(i = b_l;i < a_l;i++)
          {difference = a[i] - borrow;
           if(difference < 0)
            difference += base;
           else
            {r[i++] = difference;break}
           r[i] = difference}
         for(;i < a_l;i++)r[i] = a[i];
         trim(r);
         return r}
       function subtractAny(a,b,sign)
        {var value;
         if(compareAbs(a,b) >= 0)
          value = subtract(a,b);
         else
          {value = subtract(b,a);sign = ! sign}
         value = arrayToSmall(value);
         if(typeof value === "number")
          {if(sign)value = - value;return new SmallInteger(value)}
         return new BigInteger(value,sign)}
       function subtractSmall(a,b,sign)
        {var l=a.length,r=new Array(l),carry=- b,base=BASE,i,difference;
         for(i = 0;i < l;i++)
          {difference = a[i] + carry;
           carry = Math.floor(difference / base);
           difference %= base;
           r[i] = difference < 0?difference + base:difference}
         r = arrayToSmall(r);
         if(typeof r === "number"){if(sign)r = - r;return new SmallInteger(r)}
         return new BigInteger(r,sign)}
       BigInteger.prototype.subtract
       =
       function(v)
        {var n=parseValue(v);
         if(this.sign !== n.sign)return this.add(n.negate());
         var a=this.value,b=n.value;
         if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);
         return subtractAny(a,b,this.sign)};
       BigInteger.prototype.minus = BigInteger.prototype.subtract;
       SmallInteger.prototype.subtract
       =
       function(v)
        {var n=parseValue(v),a=this.value;
         if(a < 0 !== n.sign)return this.add(n.negate());
         var b=n.value;
         if(n.isSmall)return new SmallInteger(a - b);
         return subtractSmall(b,Math.abs(a),a >= 0)};
       SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
       NativeBigInt.prototype.subtract
       =
       function(v){return new NativeBigInt(this.value - parseValue(v).value)};
       NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
       BigInteger.prototype.negate
       =
       function(){return new BigInteger(this.value,! this.sign)};
       SmallInteger.prototype.negate
       =
       function()
        {var sign=this.sign,small=new SmallInteger(- this.value);
         small.sign = ! sign;
         return small};
       NativeBigInt.prototype.negate
       =
       function(){return new NativeBigInt(- this.value)};
       BigInteger.prototype.abs
       =
       function(){return new BigInteger(this.value,false)};
       SmallInteger.prototype.abs
       =
       function(){return new SmallInteger(Math.abs(this.value))};
       NativeBigInt.prototype.abs
       =
       function()
        {return new NativeBigInt(this.value >= 0?this.value:- this.value)};
       function multiplyLong(a,b)
        {var
          a_l=a.length,
          b_l=b.length,
          l=a_l + b_l,
          r=createArray(l),
          base=BASE,
          product,
          carry,
          i,
          a_i,
          b_j;
         for(i = 0;i < a_l;++i)
          {a_i = a[i];
           for(var j=0;j < b_l;++j)
            {b_j = b[j];
             product = a_i * b_j + r[i + j];
             carry = Math.floor(product / base);
             r[i + j] = product - carry * base;
             r[i + j + 1] += carry}}
         trim(r);
         return r}
       function multiplySmall(a,b)
        {var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;
         for(i = 0;i < l;i++)
          {product = a[i] * b + carry;
           carry = Math.floor(product / base);
           r[i] = product - carry * base}
         while(carry > 0)
          {r[i++] = carry % base;carry = Math.floor(carry / base)}
         return r}
       function shiftLeft(x,n)
        {var r=[];while(n-- > 0)r.push(0);return r.concat(x)}
       function multiplyKaratsuba(x,y)
        {var n=Math.max(x.length,y.length);
         if(n <= 30)return multiplyLong(x,y);
         n = Math.ceil(n / 2);
         var
          b=x.slice(n),
          a=x.slice(0,n),
          d=y.slice(n),
          c=y.slice(0,n),
          ac=multiplyKaratsuba(a,c),
          bd=multiplyKaratsuba(b,d),
          abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d)),
          product=
           addAny
            (addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),
             shiftLeft(bd,2 * n));
         trim(product);
         return product}
       function useKaratsuba(l1,l2)
        {return - (num_0_012 * l1) - num_0_012 * l2 + 0.000015 * l1 * l2 > 0}
       BigInteger.prototype.multiply
       =
       function(v)
        {var
          n=parseValue(v),
          a=this.value,
          b=n.value,
          sign=this.sign !== n.sign,
          abs;
         if(n.isSmall)
          {if(b === 0)return Integer[0];
           if(b === 1)return this;
           if(b === - 1)return this.negate();
           abs = Math.abs(b);
           if(abs < BASE)return new BigInteger(multiplySmall(a,abs),sign);
           b = smallToArray(abs)}
         if(useKaratsuba(a.length,b.length))
          return new BigInteger(multiplyKaratsuba(a,b),sign);
         return new BigInteger(multiplyLong(a,b),sign)};
       BigInteger.prototype.times = BigInteger.prototype.multiply;
       function multiplySmallAndArray(a,b,sign)
        {if(a < BASE)return new BigInteger(multiplySmall(b,a),sign);
         return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}
       SmallInteger.prototype._multiplyBySmall
       =
       function(a)
        {if(isPrecise(a.value * this.value))
          return new SmallInteger(a.value * this.value);
         return multiplySmallAndArray
                 (Math.abs(a.value),
                  smallToArray(Math.abs(this.value)),
                  this.sign !== a.sign)};
       BigInteger.prototype._multiplyBySmall
       =
       function(a)
        {if(a.value === 0)return Integer[0];
         if(a.value === 1)return this;
         if(a.value === - 1)return this.negate();
         return multiplySmallAndArray
                 (Math.abs(a.value),this.value,this.sign !== a.sign)};
       SmallInteger.prototype.multiply
       =
       function(v){return parseValue(v)._multiplyBySmall(this)};
       SmallInteger.prototype.times = SmallInteger.prototype.multiply;
       NativeBigInt.prototype.multiply
       =
       function(v){return new NativeBigInt(this.value * parseValue(v).value)};
       NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
       function square(a)
        {var
          l=a.length,
          r=createArray(l + l),
          base=BASE,
          product,
          carry,
          i,
          a_i,
          a_j;
         for(i = 0;i < l;i++)
          {a_i = a[i];
           carry = 0 - a_i * a_i;
           for(var j=i;j < l;j++)
            {a_j = a[j];
             product = 2 * (a_i * a_j) + r[i + j] + carry;
             carry = Math.floor(product / base);
             r[i + j] = product - carry * base}
           r[i + l] = carry}
         trim(r);
         return r}
       BigInteger.prototype.square
       =
       function(){return new BigInteger(square(this.value),false)};
       SmallInteger.prototype.square
       =
       function()
        {var value=this.value * this.value;
         if(isPrecise(value))return new SmallInteger(value);
         return new
                 BigInteger
                 (square(smallToArray(Math.abs(this.value))),false)};
       NativeBigInt.prototype.square
       =
       function(v){return new NativeBigInt(this.value * this.value)};
       function divMod1(a,b)
        {var
          a_l=a.length,
          b_l=b.length,
          base=BASE,
          result=createArray(b.length),
          divisorMostSignificantDigit=b[b_l - 1],
          lambda=Math.ceil(base / (2 * divisorMostSignificantDigit)),
          remainder=multiplySmall(a,lambda),
          divisor=multiplySmall(b,lambda),
          quotientDigit,
          shift,
          carry,
          borrow,
          i,
          l,
          q;
         if(remainder.length <= a_l)remainder.push(0);
         divisor.push(0);
         divisorMostSignificantDigit = divisor[b_l - 1];
         for(shift = a_l - b_l;shift >= 0;shift--)
          {quotientDigit = base - 1;
           if(remainder[shift + b_l] !== divisorMostSignificantDigit)
            quotientDigit
            =
            Math.floor
             ((remainder[shift + b_l] * base + remainder[shift + b_l - 1])
              /
              divisorMostSignificantDigit);
           carry = 0;
           borrow = 0;
           l = divisor.length;
           for(i = 0;i < l;i++)
            {carry += quotientDigit * divisor[i];
             q = Math.floor(carry / base);
             borrow += remainder[shift + i] - (carry - q * base);
             carry = q;
             if(borrow < 0)
              {remainder[shift + i] = borrow + base;borrow = - 1}
             else
              {remainder[shift + i] = borrow;borrow = 0}}
           while(borrow !== 0)
            {quotientDigit -= 1;
             carry = 0;
             for(i = 0;i < l;i++)
              {carry += remainder[shift + i] - base + divisor[i];
               if(carry < 0)
                {remainder[shift + i] = carry + base;carry = 0}
               else
                {remainder[shift + i] = carry;carry = 1}}
             borrow += carry}
           result[shift] = quotientDigit}
         remainder = divModSmall(remainder,lambda)[0];
         return [arrayToSmall(result),arrayToSmall(remainder)]}
       function divMod2(a,b)
        {var
          a_l=a.length,
          b_l=b.length,
          result=[],
          part=[],
          base=BASE,
          guess,
          xlen,
          highx,
          highy,
          check;
         while(a_l)
          {part.unshift(a[--a_l]);
           trim(part);
           if(compareAbs(part,b) < 0){result.push(0);continue}
           xlen = part.length;
           highx = part[xlen - 1] * base + part[xlen - 2];
           highy = b[b_l - 1] * base + b[b_l - 2];
           if(xlen > b_l)highx = (highx + 1) * base;
           guess = Math.ceil(highx / highy);
           do
            {check = multiplySmall(b,guess);
             if(compareAbs(check,part) <= 0)break;
             guess--}
           while
            (guess);
           result.push(guess);
           part = subtract(part,check)}
         result.reverse();
         return [arrayToSmall(result),arrayToSmall(part)]}
       function divModSmall(value,lambda)
        {var
          length=value.length,
          quotient=createArray(length),
          base=BASE,
          i,
          q,
          remainder,
          divisor;
         remainder = 0;
         for(i = length - 1;i >= 0;--i)
          {divisor = remainder * base + value[i];
           q = truncate(divisor / lambda);
           remainder = divisor - q * lambda;
           quotient[i] = q | 0}
         return [quotient,remainder | 0]}
       function divModAny(self,v)
        {var value,n=parseValue(v);
         if(supportsNativeBigInt)
          return [new NativeBigInt(self.value / n.value),
                  new NativeBigInt(self.value % n.value)];
         var a=self.value,b=n.value,quotient;
         if(b === 0)throw new Error("Cannot divide by zero");
         if(self.isSmall)
          {if(n.isSmall)
            return [new SmallInteger(truncate(a / b)),new SmallInteger(a % b)];
           return [Integer[0],self]}
         if(n.isSmall)
          {if(b === 1)return [self,Integer[0]];
           if(b == - 1)return [self.negate(),Integer[0]];
           var abs=Math.abs(b);
           if(abs < BASE)
            {value = divModSmall(a,abs);
             quotient = arrayToSmall(value[0]);
             var remainder=value[1];
             if(self.sign)remainder = - remainder;
             if(typeof quotient === "number")
              {if(self.sign !== n.sign)quotient = - quotient;
               return [new SmallInteger(quotient),new SmallInteger(remainder)]}
             return [new BigInteger(quotient,self.sign !== n.sign),
                     new SmallInteger(remainder)]}
           b = smallToArray(abs)}
         var comparison=compareAbs(a,b);
         if(comparison === - 1)return [Integer[0],self];
         if(comparison === 0)
          return [Integer[self.sign === n.sign?1:- 1],Integer[0]];
         if(a.length + b.length <= num_200)
          value = divMod1(a,b);
         else
          value = divMod2(a,b);
         quotient = value[0];
         var qSign=self.sign !== n.sign,mod=value[1],mSign=self.sign;
         if(typeof quotient === "number")
          {if(qSign)quotient = - quotient;
           quotient = new SmallInteger(quotient)}
         else
          quotient = new BigInteger(quotient,qSign);
         if(typeof mod === "number")
          {if(mSign)mod = - mod;mod = new SmallInteger(mod)}
         else
          mod = new BigInteger(mod,mSign);
         return [quotient,mod]}
       BigInteger.prototype.divmod
       =
       function(v)
        {var result=divModAny(this,v);
         return {quotient:result[0],remainder:result[1]}};
       NativeBigInt.prototype.divmod
       =
       SmallInteger.prototype.divmod
       =
       BigInteger.prototype.divmod;
       BigInteger.prototype.divide = function(v){return divModAny(this,v)[0]};
       NativeBigInt.prototype.over
       =
       NativeBigInt.prototype.divide
       =
       function(v){return new NativeBigInt(this.value / parseValue(v).value)};
       SmallInteger.prototype.over
       =
       SmallInteger.prototype.divide
       =
       BigInteger.prototype.over
       =
       BigInteger.prototype.divide;
       BigInteger.prototype.mod = function(v){return divModAny(this,v)[1]};
       NativeBigInt.prototype.mod
       =
       NativeBigInt.prototype.remainder
       =
       function(v){return new NativeBigInt(this.value % parseValue(v).value)};
       SmallInteger.prototype.remainder
       =
       SmallInteger.prototype.mod
       =
       BigInteger.prototype.remainder
       =
       BigInteger.prototype.mod;
       BigInteger.prototype.pow
       =
       function(v)
        {var n=parseValue(v),a=this.value,b=n.value,value,x,y;
         if(b === 0)return Integer[1];
         if(a === 0)return Integer[0];
         if(a === 1)return Integer[1];
         if(a === - 1)return n.isEven()?Integer[1]:Integer[- 1];
         if(n.sign)return Integer[0];
         if(! n.isSmall)
          throw new Error("The exponent " + n.toString() + " is too large.");
         if(this.isSmall)
          if(isPrecise(value = Math.pow(a,b)))
           return new SmallInteger(truncate(value));
         x = this;
         y = Integer[1];
         while(true)
          {if(b & 1 === 1){y = y.times(x);--b}
           if(b === 0)break;
           b /= 2;
           x = x.square()}
         return y};
       SmallInteger.prototype.pow = BigInteger.prototype.pow;
       NativeBigInt.prototype.pow
       =
       function(v)
        {var
          n=parseValue(v),
          a=this.value,
          b=n.value,
          _0=BigInt(0),
          _1=BigInt(1),
          _2=BigInt(2);
         if(b === _0)return Integer[1];
         if(a === _0)return Integer[0];
         if(a === _1)return Integer[1];
         if(a === BigInt(- 1))return n.isEven()?Integer[1]:Integer[- 1];
         if(n.isNegative())return new NativeBigInt(_0);
         var x=this,y=Integer[1];
         while(true)
          {if((b & _1) === _1){y = y.times(x);--b}
           if(b === _0)break;
           b /= _2;
           x = x.square()}
         return y};
       BigInteger.prototype.modPow
       =
       function(exp,mod)
        {exp = parseValue(exp);
         mod = parseValue(mod);
         if(mod.isZero())throw new Error("Cannot take modPow with modulus 0");
         var r=Integer[1],base=this.mod(mod);
         if(exp.isNegative())
          {exp = exp.multiply(Integer[- 1]);base = base.modInv(mod)}
         while(exp.isPositive())
          {if(base.isZero())return Integer[0];
           if(exp.isOdd())r = r.multiply(base).mod(mod);
           exp = exp.divide(2);
           base = base.square().mod(mod)}
         return r};
       NativeBigInt.prototype.modPow
       =
       SmallInteger.prototype.modPow
       =
       BigInteger.prototype.modPow;
       function compareAbs(a,b)
        {if(a.length !== b.length)return a.length > b.length?1:- 1;
         for(var i=a.length - 1;i >= 0;i--)
          if(a[i] !== b[i])return a[i] > b[i]?1:- 1;
         return 0}
       BigInteger.prototype.compareAbs
       =
       function(v)
        {var n=parseValue(v),a=this.value,b=n.value;
         if(n.isSmall)return 1;
         return compareAbs(a,b)};
       SmallInteger.prototype.compareAbs
       =
       function(v)
        {var n=parseValue(v),a=Math.abs(this.value),b=n.value;
         if(n.isSmall){b = Math.abs(b);return a === b?0:a > b?1:- 1}
         return - 1};
       NativeBigInt.prototype.compareAbs
       =
       function(v)
        {var a=this.value,b=parseValue(v).value;
         a = a >= 0?a:- a;
         b = b >= 0?b:- b;
         return a === b?0:a > b?1:- 1};
       BigInteger.prototype.compare
       =
       function(v)
        {if(v === Infinity)return - 1;
         if(v === - Infinity)return 1;
         var n=parseValue(v),a=this.value,b=n.value;
         if(this.sign !== n.sign)return n.sign?1:- 1;
         if(n.isSmall)return this.sign?- 1:1;
         return compareAbs(a,b) * (this.sign?- 1:1)};
       BigInteger.prototype.compareTo = BigInteger.prototype.compare;
       SmallInteger.prototype.compare
       =
       function(v)
        {if(v === Infinity)return - 1;
         if(v === - Infinity)return 1;
         var n=parseValue(v),a=this.value,b=n.value;
         if(n.isSmall)return a == b?0:a > b?1:- 1;
         if(a < 0 !== n.sign)return a < 0?- 1:1;
         return a < 0?1:- 1};
       SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
       NativeBigInt.prototype.compare
       =
       function(v)
        {if(v === Infinity)return - 1;
         if(v === - Infinity)return 1;
         var a=this.value,b=parseValue(v).value;
         return a === b?0:a > b?1:- 1};
       NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
       BigInteger.prototype.equals
       =
       function(v){return this.compare(v) === 0};
       NativeBigInt.prototype.eq
       =
       NativeBigInt.prototype.equals
       =
       SmallInteger.prototype.eq
       =
       SmallInteger.prototype.equals
       =
       BigInteger.prototype.eq
       =
       BigInteger.prototype.equals;
       BigInteger.prototype.notEquals
       =
       function(v){return this.compare(v) !== 0};
       NativeBigInt.prototype.neq
       =
       NativeBigInt.prototype.notEquals
       =
       SmallInteger.prototype.neq
       =
       SmallInteger.prototype.notEquals
       =
       BigInteger.prototype.neq
       =
       BigInteger.prototype.notEquals;
       BigInteger.prototype.greater = function(v){return this.compare(v) > 0};
       NativeBigInt.prototype.gt
       =
       NativeBigInt.prototype.greater
       =
       SmallInteger.prototype.gt
       =
       SmallInteger.prototype.greater
       =
       BigInteger.prototype.gt
       =
       BigInteger.prototype.greater;
       BigInteger.prototype.lesser = function(v){return this.compare(v) < 0};
       NativeBigInt.prototype.lt
       =
       NativeBigInt.prototype.lesser
       =
       SmallInteger.prototype.lt
       =
       SmallInteger.prototype.lesser
       =
       BigInteger.prototype.lt
       =
       BigInteger.prototype.lesser;
       BigInteger.prototype.greaterOrEquals
       =
       function(v){return this.compare(v) >= 0};
       NativeBigInt.prototype.geq
       =
       NativeBigInt.prototype.greaterOrEquals
       =
       SmallInteger.prototype.geq
       =
       SmallInteger.prototype.greaterOrEquals
       =
       BigInteger.prototype.geq
       =
       BigInteger.prototype.greaterOrEquals;
       BigInteger.prototype.lesserOrEquals
       =
       function(v){return this.compare(v) <= 0};
       NativeBigInt.prototype.leq
       =
       NativeBigInt.prototype.lesserOrEquals
       =
       SmallInteger.prototype.leq
       =
       SmallInteger.prototype.lesserOrEquals
       =
       BigInteger.prototype.leq
       =
       BigInteger.prototype.lesserOrEquals;
       BigInteger.prototype.isEven
       =
       function(){return (this.value[0] & 1) === 0};
       SmallInteger.prototype.isEven
       =
       function(){return (this.value & 1) === 0};
       NativeBigInt.prototype.isEven
       =
       function(){return (this.value & BigInt(1)) === BigInt(0)};
       BigInteger.prototype.isOdd
       =
       function(){return (this.value[0] & 1) === 1};
       SmallInteger.prototype.isOdd
       =
       function(){return (this.value & 1) === 1};
       NativeBigInt.prototype.isOdd
       =
       function(){return (this.value & BigInt(1)) === BigInt(1)};
       BigInteger.prototype.isPositive = function(){return ! this.sign};
       SmallInteger.prototype.isPositive = function(){return this.value > 0};
       NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
       BigInteger.prototype.isNegative = function(){return this.sign};
       SmallInteger.prototype.isNegative = function(){return this.value < 0};
       NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
       BigInteger.prototype.isUnit = function(){return false};
       SmallInteger.prototype.isUnit
       =
       function(){return Math.abs(this.value) === 1};
       NativeBigInt.prototype.isUnit
       =
       function(){return this.abs().value === BigInt(1)};
       BigInteger.prototype.isZero = function(){return false};
       SmallInteger.prototype.isZero = function(){return this.value === 0};
       NativeBigInt.prototype.isZero
       =
       function(){return this.value === BigInt(0)};
       BigInteger.prototype.isDivisibleBy
       =
       function(v)
        {var n=parseValue(v);
         if(n.isZero())return false;
         if(n.isUnit())return true;
         if(n.compareAbs(2) === 0)return this.isEven();
         return this.mod(n).isZero()};
       NativeBigInt.prototype.isDivisibleBy
       =
       SmallInteger.prototype.isDivisibleBy
       =
       BigInteger.prototype.isDivisibleBy;
       function isBasicPrime(v)
        {var n=v.abs();
         if(n.isUnit())return false;
         if(n.equals(2) || n.equals(3) || n.equals(5))return true;
         if(n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))
          return false;
         if(n.lesser(49))return true}
       function millerRabinTest(n,a)
        {var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;
         while(b.isEven())b = b.divide(2),r++;
         next:
         for(i = 0;i < a.length;i++)
          {if(n.lesser(a[i]))continue;
           x = bigInt(a[i]).modPow(b,n);
           if(x.isUnit() || x.equals(nPrev))continue;
           for(d = r - 1;d != 0;d--)
            {x = x.square().mod(n);
             if(x.isUnit())return false;
             if(x.equals(nPrev))continue next}
           return false}
         return true}
       BigInteger.prototype.isPrime
       =
       function(strict)
        {var isPrime=isBasicPrime(this);
         if(isPrime !== undefined)return isPrime;
         var n=this.abs(),bits=n.bitLength();
         if(bits <= 64)
          return millerRabinTest(n,[2,3,5,7,11,13,17,19,23,29,31,37]);
         var
          logN=Math.log(2) * bits.toJSNumber(),
          t=Math.ceil(strict === true?2 * Math.pow(logN,2):logN);
         for(var a=[],i=0;i < t;i++)a.push(bigInt(i + 2));
         return millerRabinTest(n,a)};
       NativeBigInt.prototype.isPrime
       =
       SmallInteger.prototype.isPrime
       =
       BigInteger.prototype.isPrime;
       BigInteger.prototype.isProbablePrime
       =
       function(iterations)
        {var isPrime=isBasicPrime(this);
         if(isPrime !== undefined)return isPrime;
         var n=this.abs(),t=iterations === undefined?5:iterations;
         for(var a=[],i=0;i < t;i++)a.push(bigInt.randBetween(2,n.minus(2)));
         return millerRabinTest(n,a)};
       NativeBigInt.prototype.isProbablePrime
       =
       SmallInteger.prototype.isProbablePrime
       =
       BigInteger.prototype.isProbablePrime;
       BigInteger.prototype.modInv
       =
       function(n)
        {var
          t=bigInt.zero,
          newT=bigInt.one,
          r=parseValue(n),
          newR=this.abs(),
          q,
          lastT,
          lastR;
         while(! newR.isZero())
          {q = r.divide(newR);
           lastT = t;
           lastR = r;
           t = newT;
           r = newR;
           newT = lastT.subtract(q.multiply(newT));
           newR = lastR.subtract(q.multiply(newR))}
         if(! r.isUnit())
          throw new
                 Error
                 (this.toString()
                  +
                  str_and
                  +
                  n.toString()
                  +
                  " are not co-prime");
         if(t.compare(0) === - 1)t = t.add(n);
         if(this.isNegative())return t.negate();
         return t};
       NativeBigInt.prototype.modInv
       =
       SmallInteger.prototype.modInv
       =
       BigInteger.prototype.modInv;
       BigInteger.prototype.next
       =
       function()
        {var value=this.value;
         if(this.sign)return subtractSmall(value,1,this.sign);
         return new BigInteger(addSmall(value,1),this.sign)};
       SmallInteger.prototype.next
       =
       function()
        {var value=this.value;
         if(value + 1 < MAX_INT)return new SmallInteger(value + 1);
         return new BigInteger(MAX_INT_ARR,false)};
       NativeBigInt.prototype.next
       =
       function(){return new NativeBigInt(this.value + BigInt(1))};
       BigInteger.prototype.prev
       =
       function()
        {var value=this.value;
         if(this.sign)return new BigInteger(addSmall(value,1),true);
         return subtractSmall(value,1,this.sign)};
       SmallInteger.prototype.prev
       =
       function()
        {var value=this.value;
         if(value - 1 > - MAX_INT)return new SmallInteger(value - 1);
         return new BigInteger(MAX_INT_ARR,true)};
       NativeBigInt.prototype.prev
       =
       function(){return new NativeBigInt(this.value - BigInt(1))};
       var powersOfTwo=[1];
       while(2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
        powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
       var
        powers2Length=powersOfTwo.length,
        highestPower2=powersOfTwo[powers2Length - 1];
       function shift_isSmall(n){return Math.abs(n) <= BASE}
       BigInteger.prototype.shiftLeft
       =
       function(v)
        {var n=parseValue(v).toJSNumber();
         if(! shift_isSmall(n))
          throw new Error(String(n) + str_is_too_large_fo_abr);
         if(n < 0)return this.shiftRight(- n);
         var result=this;
         if(result.isZero())return result;
         while(n >= powers2Length)
          {result = result.multiply(highestPower2);n -= powers2Length - 1}
         return result.multiply(powersOfTwo[n])};
       NativeBigInt.prototype.shiftLeft
       =
       SmallInteger.prototype.shiftLeft
       =
       BigInteger.prototype.shiftLeft;
       BigInteger.prototype.shiftRight
       =
       function(v)
        {var remQuo,n=parseValue(v).toJSNumber();
         if(! shift_isSmall(n))
          throw new Error(String(n) + str_is_too_large_fo_abr);
         if(n < 0)return this.shiftLeft(- n);
         var result=this;
         while(n >= powers2Length)
          {if(result.isZero() || result.isNegative() && result.isUnit())
            return result;
           remQuo = divModAny(result,highestPower2);
           result = remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];
           n -= powers2Length - 1}
         remQuo = divModAny(result,powersOfTwo[n]);
         return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};
       NativeBigInt.prototype.shiftRight
       =
       SmallInteger.prototype.shiftRight
       =
       BigInteger.prototype.shiftRight;
       function bitwise(x,y,fn)
        {y = parseValue(y);
         var
          xSign=x.isNegative(),
          ySign=y.isNegative(),
          xRem=xSign?x.not():x,
          yRem=ySign?y.not():y,
          xDigit=0,
          yDigit=0,
          xDivMod=null,
          yDivMod=null,
          result=[];
         while(! xRem.isZero() || ! yRem.isZero())
          {xDivMod = divModAny(xRem,highestPower2);
           xDigit = xDivMod[1].toJSNumber();
           if(xSign)xDigit = highestPower2 - 1 - xDigit;
           yDivMod = divModAny(yRem,highestPower2);
           yDigit = yDivMod[1].toJSNumber();
           if(ySign)yDigit = highestPower2 - 1 - yDigit;
           xRem = xDivMod[0];
           yRem = yDivMod[0];
           result.push(fn(xDigit,yDigit))}
         var sum=fn(xSign?1:0,ySign?1:0) !== 0?bigInt(- 1):bigInt(0);
         for(var i=result.length - 1;i >= 0;i -= 1)
          sum = sum.multiply(highestPower2).add(bigInt(result[i]));
         return sum}
       BigInteger.prototype.not = function(){return this.negate().prev()};
       NativeBigInt.prototype.not
       =
       SmallInteger.prototype.not
       =
       BigInteger.prototype.not;
       BigInteger.prototype.and
       =
       function(n){return bitwise(this,n,function(a,b){return a & b})};
       NativeBigInt.prototype.and
       =
       SmallInteger.prototype.and
       =
       BigInteger.prototype.and;
       BigInteger.prototype.or
       =
       function(n){return bitwise(this,n,function(a,b){return a | b})};
       NativeBigInt.prototype.or
       =
       SmallInteger.prototype.or
       =
       BigInteger.prototype.or;
       BigInteger.prototype.xor
       =
       function(n){return bitwise(this,n,function(a,b){return a ^ b})};
       NativeBigInt.prototype.xor
       =
       SmallInteger.prototype.xor
       =
       BigInteger.prototype.xor;
       var
        LOBMASK_I=1 << 30,
        LOBMASK_BI=(BASE & - BASE) * (BASE & - BASE) | LOBMASK_I;
       function roughLOB(n)
        {var
          v=n.value,
          x=
           typeof v === "number"
            ?v | LOBMASK_I
            :typeof v === "bigint"
              ?v | BigInt(LOBMASK_I)
              :v[0] + v[1] * BASE | LOBMASK_BI;
         return x & - x}
       function integerLogarithm(value,base)
        {if(base.compareTo(value) <= 0)
          {var
            tmp=integerLogarithm(value,base.square(base)),
            p=tmp.p,
            e=tmp.e,
            t=p.multiply(base);
           return t.compareTo(value) <= 0?{p:t,e:e * 2 + 1}:{p:p,e:e * 2}}
         return {p:bigInt(1),e:0}}
       BigInteger.prototype.bitLength
       =
       function()
        {var n=this;
         if(n.compareTo(bigInt(0)) < 0)n = n.negate().subtract(bigInt(1));
         if(n.compareTo(bigInt(0)) === 0)return bigInt(0);
         return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};
       NativeBigInt.prototype.bitLength
       =
       SmallInteger.prototype.bitLength
       =
       BigInteger.prototype.bitLength;
       function max(a,b)
        {a = parseValue(a);b = parseValue(b);return a.greater(b)?a:b}
       function min(a,b)
        {a = parseValue(a);b = parseValue(b);return a.lesser(b)?a:b}
       function gcd(a,b)
        {a = parseValue(a).abs();
         b = parseValue(b).abs();
         if(a.equals(b))return a;
         if(a.isZero())return b;
         if(b.isZero())return a;
         var c=Integer[1],d,t;
         while(a.isEven() && b.isEven())
          {d = min(roughLOB(a),roughLOB(b));
           a = a.divide(d);
           b = b.divide(d);
           c = c.multiply(d)}
         while(a.isEven())a = a.divide(roughLOB(a));
         do
          {while(b.isEven())b = b.divide(roughLOB(b));
           if(a.greater(b)){t = b;b = a;a = t}
           b = b.subtract(a)}
         while
          (! b.isZero());
         return c.isUnit()?a:a.multiply(c)}
       function lcm(a,b)
        {a = parseValue(a).abs();
         b = parseValue(b).abs();
         return a.divide(gcd(a,b)).multiply(b)}
       function randBetween(a,b)
        {a = parseValue(a);
         b = parseValue(b);
         var low=min(a,b),high=max(a,b),range=high.subtract(low).add(1);
         if(range.isSmall)return low.add(Math.floor(Math.random() * range));
         var digits=toBase(range,BASE).value,result=[],restricted=true;
         for(var i=0;i < digits.length;i++)
          {var
            top=restricted?digits[i]:BASE,
            digit=truncate(Math.random() * top);
           result.push(digit);
           if(digit < top)restricted = false}
         return low.add(Integer.fromArray(result,BASE,false))}
       function parseBase(text,base,alphabet,caseSensitive)
        {alphabet = alphabet || DEFAULT_ALPHABET;
         text = String(text);
         if(! caseSensitive)
          {text = text.toLowerCase();alphabet = alphabet.toLowerCase()}
         var length=text.length,i,absBase=Math.abs(base),alphabetValues={};
         for(i = 0;i < alphabet.length;i++)alphabetValues[alphabet[i]] = i;
         for(i = 0;i < length;i++)
          {var c=text[i];
           if(c === str$60)continue;
           if(c in alphabetValues)
            if(alphabetValues[c] >= absBase)
             {if(c === str_1$0 && absBase === 1)continue;
              throw new
                     Error
                     (c + " is not a valid digit in base " + base + str$48)}}
         base = parseValue(base);
         var digits=[],isNegative=text[0] === str$60;
         for(i = isNegative?1:0;i < text.length;i++)
          {var c=text[i];
           if(c in alphabetValues)
            digits.push(parseValue(alphabetValues[c]));
           else
            if(c === str$64)
             {var start=i;
              do i++;while(text[i] !== str$18 && i < text.length);
              digits.push(parseValue(text.slice(start + 1,i)))}
            else
             throw new Error(c + " is not a valid character")}
         return parseBaseFromArray(digits,base,isNegative)}
       function parseBaseFromArray(digits,base,isNegative)
        {var val=Integer[0],pow=Integer[1],i;
         for(i = digits.length - 1;i >= 0;i--)
          {val = val.add(digits[i].times(pow));pow = pow.times(base)}
         return isNegative?val.negate():val}
       function stringify(digit,alphabet)
        {alphabet = alphabet || DEFAULT_ALPHABET;
         if(digit < alphabet.length)return alphabet[digit];
         return str$64 + digit + str$18}
       function toBase(n,base)
        {base = bigInt(base);
         if(base.isZero())
          {if(n.isZero())return {value:[0],isNegative:false};
           throw new Error("Cannot convert nonzero numbers to base 0.")}
         if(base.equals(- 1))
          {if(n.isZero())return {value:[0],isNegative:false};
           if(n.isNegative())
            return {value:
                    [].concat.apply
                     ([],
                      Array.apply(null,Array(- n.toJSNumber())).map
                       (Array.prototype.valueOf,[1,0])),
                    isNegative:false};
           var
            arr=
             Array.apply(null,Array(n.toJSNumber() - 1)).map
              (Array.prototype.valueOf,[0,1]);
           arr.unshift([1]);
           return {value:[].concat.apply([],arr),isNegative:false}}
         var neg=false;
         if(n.isNegative() && base.isPositive()){neg = true;n = n.abs()}
         if(base.isUnit())
          {if(n.isZero())return {value:[0],isNegative:false};
           return {value:
                   Array.apply(null,Array(n.toJSNumber())).map
                    (Number.prototype.valueOf,1),
                   isNegative:neg}}
         var out=[],left=n,divmod;
         while(left.isNegative() || left.compareAbs(base) >= 0)
          {divmod = left.divmod(base);
           left = divmod.quotient;
           var digit=divmod.remainder;
           if(digit.isNegative())
            {digit = base.minus(digit).abs();left = left.next()}
           out.push(digit.toJSNumber())}
         out.push(left.toJSNumber());
         return {value:out.reverse(),isNegative:neg}}
       function toBaseString(n,base,alphabet)
        {var arr=toBase(n,base);
         return (arr.isNegative?str$60:str$59)
                +
                arr.value.map(function(x){return stringify(x,alphabet)}).join
                 (str$59)}
       BigInteger.prototype.toArray
       =
       function(radix){return toBase(this,radix)};
       SmallInteger.prototype.toArray
       =
       function(radix){return toBase(this,radix)};
       NativeBigInt.prototype.toArray
       =
       function(radix){return toBase(this,radix)};
       BigInteger.prototype.toString
       =
       function(radix,alphabet)
        {if(radix === undefined)radix = 10;
         if(radix !== 10)return toBaseString(this,radix,alphabet);
         var v=this.value,l=v.length,str=String(v[--l]),zeros="0000000",digit;
         while(--l >= 0)
          {digit = String(v[l]);str += zeros.slice(digit.length) + digit}
         var sign=this.sign?str$60:str$59;
         return sign + str};
       SmallInteger.prototype.toString
       =
       function(radix,alphabet)
        {if(radix === undefined)radix = 10;
         if(radix != 10)return toBaseString(this,radix,alphabet);
         return String(this.value)};
       NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
       NativeBigInt.prototype.toJSON
       =
       BigInteger.prototype.toJSON
       =
       SmallInteger.prototype.toJSON
       =
       function(){return this.toString()};
       BigInteger.prototype.valueOf
       =
       function(){return parseInt(this.toString(),10)};
       BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;
       SmallInteger.prototype.valueOf = function(){return this.value};
       SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
       NativeBigInt.prototype.valueOf
       =
       NativeBigInt.prototype.toJSNumber
       =
       function(){return parseInt(this.toString(),10)};
       function parseStringValue(v)
        {if(isPrecise(+ v))
          {var x=+ v;
           if(x === truncate(x))
            return supportsNativeBigInt
                    ?new NativeBigInt(BigInt(x))
                    :new SmallInteger(x);
           throw new Error(str_Invalid_integer + v)}
         var sign=v[0] === str$60;
         if(sign)v = v.slice(1);
         var split=v.split(/e/i);
         if(split.length > 2)
          throw new Error(str_Invalid_integer + split.join(str_e));
         if(split.length === 2)
          {var exp=split[1];
           if(exp[0] === str$58)exp = exp.slice(1);
           exp = + exp;
           if(exp !== truncate(exp) || ! isPrecise(exp))
            throw new
                   Error
                   (str_Invalid_integer + exp + " is not a valid exponent.");
           var text=split[0],decimalPlace=text.indexOf(str$48);
           if(decimalPlace >= 0)
            {exp -= text.length - decimalPlace - 1;
             text = text.slice(0,decimalPlace) + text.slice(decimalPlace + 1)}
           if(exp < 0)
            throw new
                   Error
                   ("Cannot include negative exponent part for integers");
           text += new Array(exp + 1).join(str_0);
           v = text}
         var isValid=/^([0-9][0-9]*)$/.test(v);
         if(! isValid)throw new Error(str_Invalid_integer + v);
         if(supportsNativeBigInt)
          return new NativeBigInt(BigInt(sign?str$60 + v:v));
         var r=[],max=v.length,l=LOG_BASE,min=max - l;
         while(max > 0)
          {r.push(+ v.slice(min,max));min -= l;if(min < 0)min = 0;max -= l}
         trim(r);
         return new BigInteger(r,sign)}
       function parseNumberValue(v)
        {if(supportsNativeBigInt)return new NativeBigInt(BigInt(v));
         if(isPrecise(v))
          {if(v !== truncate(v))throw new Error(v + " is not an integer.");
           return new SmallInteger(v)}
         return parseStringValue(v.toString())}
       function parseValue(v)
        {if(typeof v === "number")return parseNumberValue(v);
         if(typeof v === "string")return parseStringValue(v);
         if(typeof v === "bigint")return new NativeBigInt(v);
         return v}
       for(var i=0;i < num_1000$0;i++)
        {Integer[i] = parseValue(i);if(i > 0)Integer[- i] = parseValue(- i)}
       Integer.one = Integer[1];
       Integer.zero = Integer[0];
       Integer.minusOne = Integer[- 1];
       Integer.max = max;
       Integer.min = min;
       Integer.gcd = gcd;
       Integer.lcm = lcm;
       Integer.isInstance
       =
       function(x)
        {return x instanceof BigInteger
                ||
                x instanceof SmallInteger
                ||
                x instanceof NativeBigInt};
       Integer.randBetween = randBetween;
       Integer.fromArray
       =
       function(digits,base,isNegative)
        {return parseBaseFromArray
                 (digits.map(parseValue),parseValue(base || 10),isNegative)};
       return Integer}
     ();
  function ml_z_normalize(x)
   {var y=x.toJSNumber() | 0;if(x.equals(bigInt(y)))return y;return x}
  function ml_z_abs(z1){return ml_z_normalize(bigInt(z1).abs())}
  function ml_z_add(z1,z2){return ml_z_normalize(bigInt(z1).add(bigInt(z2)))}
  function ml_z_div(z1,z2)
   {z2 = bigInt(z2);
    if(z2.equals(bigInt(0)))caml_raise_zero_divide();
    return ml_z_normalize(bigInt(z1).divide(bigInt(z2)))}
  function ml_z_rem(z1,z2)
   {z2 = bigInt(z2);
    if(z2.equals(bigInt(0)))caml_raise_zero_divide();
    return ml_z_normalize(bigInt(z1).mod(z2))}
  function ml_z_div_rem(z1,z2){return [0,ml_z_div(z1,z2),ml_z_rem(z1,z2)]}
  function ml_z_equal(z1,z2){return bigInt(z1).equals(bigInt(z2))}
  function ml_z_extract(z1,pos,len)
   {z1 = bigInt(z1);
    return ml_z_normalize
            (z1.shiftRight(pos).and(bigInt(2).pow(len).subtract(1)))}
  function ml_z_format(fmt,z1)
   {z1 = bigInt(z1);
    var
     fmt=caml_jsbytes_of_string(fmt),
     base=10,
     cas=0,
     width=0,
     alt=0,
     dir=0,
     sign=str$59,
     pad=str$67,
     idx=0,
     prefix=str$59;
    while(fmt[idx] == "%")idx++;
    for(;;idx++)
     if(fmt[idx] == str$0)
      alt = 1;
     else
      if(fmt[idx] == str_0)
       pad = str_0;
      else
       if(fmt[idx] == str$60)
        dir = 1;
       else
        if(fmt[idx] == str$67 || fmt[idx] == str$58)
         sign = fmt[idx];
        else
         break;
    if(z1.lt(bigInt(0))){sign = str$60;z1 = z1.negate()}
    for(;fmt[idx] >= str_0 && fmt[idx] <= "9";idx++)
     width = 10 * width + + fmt[idx];
    switch(fmt[idx])
     {case "i":
      case "d":
      case "u":break;
      case "b":base = 2;if(alt)prefix = str_0b;break;
      case "o":base = 8;if(alt)prefix = str_0o;break;
      case "x":base = 16;if(alt)prefix = str_0x;break;
      case "X":base = 16;if(alt)prefix = "0X";cas = 1;break;
      default:caml_failwith("Unsupported format '" + fmt + str$46)}
    if(dir)pad = str$67;
    var res=z1.toString(base);
    if(cas === 1)res = res.toUpperCase();
    var size=res.length;
    if(pad == str$67)
     if(dir)
      {res = sign + prefix + res;for(;res.length < width;)res = res + pad}
     else
      {res = sign + prefix + res;for(;res.length < width;)res = pad + res}
    else
     {var pre=sign + prefix;
      for(;res.length + pre.length < width;)res = pad + res;
      res = pre + res}
    return caml_string_of_jsbytes(res)}
  function caml_zarith_marshal(writer,v,sz)
   {v = bigInt(v);
    var bits=v.toArray(Math.pow(2,32));
    writer.write(8,bits.isNegative?1:0);
    var block=bits.value.length,len=block * 4;
    writer.write(32,len);
    for(var i=block - 1;i >= 0;i--)
     {writer.write(8,bits.value[i] >>> 0 & num_0xff);
      writer.write(8,bits.value[i] >>> 8 & num_0xff);
      writer.write(8,bits.value[i] >>> 16 & num_0xff);
      writer.write(8,bits.value[i] >>> 24 & num_0xff)}
    sz[0] = 4 * (1 + ((len + 3) / 4 | 0));
    sz[1] = 8 * (1 + ((len + 7) / 8 | 0))}
  function caml_zarith_unmarshal(reader,sz)
   {var negate;
    switch(reader.read8u())
     {case 1:negate = true;break;
      case 0:negate = false;break;
      default:caml_failwith("input_value: z (malformed input)")}
    var len=reader.read32u(),x=bigInt(0);
    for(var i=0;i < len / 4;i++)
     {var y=bigInt(reader.read8u());
      y = y.add(reader.read8u() << 8);
      y = y.add(reader.read8u() << 16);
      y = y.add(reader.read8u() << 24 >>> 0);
      x = y.shiftLeft(i * 32).add(x)}
    if(negate)x = x.negate();
    sz[0] = len + 4;
    return ml_z_normalize(x)}
  function ml_z_hash(z1)
   {var a=bigInt(z1).toArray(Math.pow(2,32)),acc=0;
    for(var i=0;i < a.value.length;i++)
     acc = caml_hash_mix_int(acc,a.value[i]);
    if(a.value.length % 2 != 0)acc = caml_hash_mix_int(acc,0);
    if(a.isNegative)acc = acc + 1;
    return acc | 0}
  function ml_z_compare(z1,z2){return bigInt(z1).compare(bigInt(z2))}
  function ml_z_init(unit)
   {caml_custom_ops[str_z]
    =
    {serialize:caml_zarith_marshal,
     deserialize:caml_zarith_unmarshal,
     hash:ml_z_hash,
     compare:ml_z_compare};
    return 0}
  function ml_z_logor(z1,z2){return ml_z_normalize(bigInt(z1).or(bigInt(z2)))}
  function ml_z_mul(z1,z2)
   {return ml_z_normalize(bigInt(z1).multiply(bigInt(z2)))}
  function ml_z_neg(z1){return ml_z_normalize(bigInt(z1).negate())}
  function ml_z_numbits(z1)
   {z1 = bigInt(z1).abs();
    var n=0,upperBound=bigInt.one;
    while(upperBound.leq(z1)){n += 1;upperBound = upperBound.multiply(2)}
    return n}
  function ml_z_of_bits(z1)
   {var r=bigInt.zero,base1=bigInt(num_256),base=bigInt.one;
    for(var i=0;i < caml_ml_string_length(z1);i++)
     {var d=caml_string_unsafe_get(z1,i);
      r = bigInt(base).multiply(d).add(r);
      base = bigInt(base).multiply(base1)}
    return ml_z_normalize(r)}
  function ml_z_of_int(i){return i | 0}
  function ml_z_of_int64(i64)
   {var neg=false;
    if(caml_int64_compare(i64,caml_int64_create_lo_hi(0,0)) < 0)
     {neg = true;i64 = caml_int64_neg(i64)}
    var
     lo=caml_int64_lo32(i64) >>> 0,
     hi=caml_int64_hi32(i64) >>> 0,
     x=bigInt(lo).add(bigInt(hi).shiftLeft(32));
    if(neg)x = x.negate();
    return ml_z_normalize(x)}
  function jsoo_z_of_js_string_base(base,s)
   {if(base == 0)
     {base = 10;
      var p=0,sign=1;
      if(s[p] == str$60){sign = - 1;p++}else if(s[p] == str$58)p++;
      if(s[p] == str_0)
       {p++;
        if(s.length == p)
         return 0;
        else
         {var bc=s[p];
          if(bc == str_o || bc == "O")
           base = 8;
          else
           if(bc == str_x$0 || bc == "X")
            base = 16;
           else
            if(bc == str_b$0 || bc == str_B$0)base = 2;
          if(base != 10){s = s.substring(p + 1);if(sign == - 1)s = str$60 + s}}}}
    if(s[0] == str$58)s = s.substring(1);
    s = s.replace(/^0+/,str$59);
    if(s == str$60 || s == str$59)s = str_0;
    function digit(code)
     {if(code >= 48 && code <= 57)return code - 48;
      if(code >= 97 && code <= num_102)return code - 97 + 10;
      if(code >= 65 && code <= 70)return code - 65 + 10}
    var i=0;
    if(s[i] == str$60)i++;
    for(;i < s.length;i++)
     {var c=digit(s.charCodeAt(i));
      if(c == undefined || c >= base)
       caml_invalid_argument("Z.of_substring_base: invalid digit")}
    return ml_z_normalize(bigInt(s,base))}
  function ml_z_of_substring_base(base,s,pos,len)
   {s = caml_jsbytes_of_string(s);
    if(pos != 0 || len != s.length)
     {if(s.length - pos < len)
       caml_invalid_argument("Z.of_substring_base: invalid offset or length");
      s = s.slice(pos,pos + len)}
    return jsoo_z_of_js_string_base(base,s)}
  function ml_z_pred(z1){return ml_z_normalize(bigInt(z1).prev())}
  function ml_z_shift_left(z1,amt)
   {return ml_z_normalize(bigInt(z1).shiftLeft(amt))}
  function ml_z_shift_right(z1,amt)
   {return ml_z_normalize(bigInt(z1).shiftRight(amt))}
  function ml_z_sign(z1){return bigInt(z1).compare(bigInt.zero)}
  function ml_z_to_bits(z1)
   {z1 = bigInt(z1).abs();
    var res=str$59;
    while(! z1.equals(bigInt(0)))
     {res += String.fromCharCode(z1.mod(bigInt(num_256)));
      z1 = z1.divide(bigInt(num_256))}
    while(res.length % 4 != 0)res += String.fromCharCode(0);
    return caml_string_of_jsbytes(res)}
  function ml_z_to_int(z1)
   {if(z1 == (z1 | 0))return z1 | 0;
    caml_raise_constant(caml_named_value(str_ml_z_overflow))}
  function caml_array_get(array,index)
   {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
    return array[index + 1]}
  function re_replacement_text(repl,groups,orig)
   {var
     repl=caml_jsbytes_of_string(repl),
     len=repl.length,
     orig=caml_jsbytes_of_string(orig),
     res=str$59,
     n=0,
     cur,
     start,
     end,
     c;
    while(n < len)
     {cur = repl.charAt(n++);
      if(cur != str$45)
       res += cur;
      else
       {if(n == len)caml_failwith("Str.replace: illegal backslash sequence");
        cur = repl.charAt(n++);
        switch(cur)
         {case "\\":res += cur;break;
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           c = + cur;
           if(c * 2 >= groups.length - 1)
            caml_failwith(str_Str_replace_ref_abr);
           start = caml_array_get(groups,c * 2);
           end = caml_array_get(groups,c * 2 + 1);
           if(start == - 1)caml_failwith(str_Str_replace_ref_abr);
           res += orig.slice(start,end);
           break;
          default:res += str$45 + cur}}}
    return caml_string_of_jsbytes(res)}
  var
   re_match=
    function()
      {var
        re_word_letters=
         [num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0xFF,
          0x03,
          num_0xFE,
          num_0xFF,
          num_0xFF,
          0x87,
          num_0xFE,
          num_0xFF,
          num_0xFF,
          0x07,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0x00,
          num_0xFF,
          num_0xFF,
          num_0x7F,
          num_0xFF,
          num_0xFF,
          num_0xFF,
          num_0x7F,
          num_0xFF],
        opcodes=
         {CHAR:0,
          CHARNORM:1,
          STRING:2,
          STRINGNORM:3,
          CHARCLASS:4,
          BOL:5,
          EOL:6,
          WORDBOUNDARY:7,
          BEGGROUP:8,
          ENDGROUP:9,
          REFGROUP:10,
          ACCEPT:11,
          SIMPLEOPT:12,
          SIMPLESTAR:13,
          SIMPLEPLUS:14,
          GOTO:15,
          PUSHBACK:16,
          SETMARK:17,
          CHECKPROGRESS:18};
       function is_word_letter(c)
        {return re_word_letters[c >> 3] >> (c & 7) & 1}
       function in_bitset(s,i)
        {return caml_string_get(s,i >> 3) >> (i & 7) & 1}
       function re_match_impl(re,s,pos,partial)
        {var
          prog=caml_js_from_array(re[1]),
          cpool=caml_js_from_array(re[2]),
          normtable=caml_jsbytes_of_string(re[3]),
          numgroups=re[4] | 0,
          numregisters=re[5] | 0,
          startchars=re[6] | 0,
          s=caml_array_of_string(s),
          pc=0,
          quit=false,
          stack=[],
          groups=new Array(numgroups),
          re_register=new Array(numregisters);
         for(var i=0;i < groups.length;i++)groups[i] = {start:- 1,end:- 1};
         groups[0].start = pos;
         function backtrack()
          {while(stack.length)
            {var item=stack.pop();
             if(item.undo)
              item.undo.obj[item.undo.prop] = item.undo.value;
             else
              if(item.pos){pc = item.pos.pc;pos = item.pos.txt;return}}
           quit = true}
         function push(item){stack.push(item)}
         function accept()
          {groups[0].end = pos;
           var result=new Array(1 + groups.length * 2);
           result[0] = 0;
           for(var i=0;i < groups.length;i++)
            {var g=groups[i];
             if(g.start < 0 || g.end < 0)g.start = g.end = - 1;
             result[2 * i + 1] = g.start;
             result[2 * i + 1 + 1] = g.end}
           return result}
         function prefix_match(){if(partial)return accept();else backtrack()}
         while(! quit)
          {var
            op=prog[pc] & num_0xff,
            sarg=prog[pc] >> 8,
            uarg=sarg & num_0xff,
            c=s[pos],
            group;
           pc++;
           switch(op)
            {case opcodes.CHAR:
              if(pos === s.length){prefix_match();break}
              if(c === uarg)pos++;else backtrack();
              break;
             case opcodes.CHARNORM:
              if(pos === s.length){prefix_match();break}
              if(normtable.charCodeAt(c) === uarg)pos++;else backtrack();
              break;
             case opcodes.STRING:
              for
               (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                i
                <
                arg.length;
                i++)
               {if(pos === s.length){prefix_match();break}
                if(c === arg.charCodeAt(i))
                 c = s[++pos];
                else
                 {backtrack();break}}
              break;
             case opcodes.STRINGNORM:
              for
               (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                i
                <
                arg.length;
                i++)
               {if(pos === s.length){prefix_match();break}
                if(normtable.charCodeAt(c) === arg.charCodeAt(i))
                 c = s[++pos];
                else
                 {backtrack();break}}
              break;
             case opcodes.CHARCLASS:
              if(pos === s.length){prefix_match();break}
              if(in_bitset(cpool[uarg],c))pos++;else backtrack();
              break;
             case opcodes.BOL:
              if(pos > 0 && s[pos - 1] != 10)backtrack();break;
             case opcodes.EOL:
              if(pos < s.length && s[pos] != 10)backtrack();break;
             case opcodes.WORDBOUNDARY:
              if(pos == 0)
               {if(pos === s.length){prefix_match();break}
                if(is_word_letter(s[0]))break;
                backtrack()}
              else
               if(pos === s.length)
                {if(is_word_letter(s[pos - 1]))break;backtrack()}
               else
                {if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos]))
                  break;
                 backtrack()}
              break;
             case opcodes.BEGGROUP:
              group = groups[uarg];
              push({undo:{obj:group,prop:"start",value:group.start}});
              group.start = pos;
              break;
             case opcodes.ENDGROUP:
              group = groups[uarg];
              push({undo:{obj:group,prop:str_end,value:group.end}});
              group.end = pos;
              break;
             case opcodes.REFGROUP:
              group = groups[uarg];
              if(group.start < 0 || group.end < 0){backtrack();break}
              for(var i=group.start;i < group.end;i++)
               {if(pos === s.length){prefix_match();break}
                if(s[i] != s[pos]){backtrack();break}
                pos++}
              break;
             case opcodes.SIMPLEOPT:if(in_bitset(cpool[uarg],c))pos++;break;
             case opcodes.SIMPLESTAR:
              while(in_bitset(cpool[uarg],c))c = s[++pos];break;
             case opcodes.SIMPLEPLUS:
              if(pos === s.length){prefix_match();break}
              if(in_bitset(cpool[uarg],c))
               do c = s[++pos];while(in_bitset(cpool[uarg],c));
              else
               backtrack();
              break;
             case opcodes.ACCEPT:return accept();
             case opcodes.GOTO:pc = pc + sarg;break;
             case opcodes.PUSHBACK:push({pos:{pc:pc + sarg,txt:pos}});break;
             case opcodes.SETMARK:
              push({undo:{obj:re_register,prop:uarg,value:re_register[uarg]}});
              re_register[uarg] = pos;
              break;
             case opcodes.CHECKPROGRESS:
              if(re_register[uarg] === pos)backtrack();break;
             default:throw new Error("Invalid bytecode")}}
         return 0}
       return re_match_impl}
     ();
  function re_search_forward(re,s,pos)
   {if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    while(pos <= caml_ml_string_length(s))
     {var res=re_match(re,s,pos,0);if(res)return res;pos++}
    return [0]}
  function unix_inet_addr_of_string(){return 0}
  function caml_call1(f,a0){return f.length == 1?f(a0):caml_call_gen(f,[a0])}
  function caml_call2(f,a0,a1)
   {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
  function caml_call3(f,a0,a1,a2)
   {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
  function caml_call4(f,a0,a1,a2,a3)
   {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
  function caml_call5(f,a0,a1,a2,a3,a4)
   {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
  function caml_call6(f,a0,a1,a2,a3,a4,a5)
   {return f.length == 6
            ?f(a0,a1,a2,a3,a4,a5)
            :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
  function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
   {return f.length == 7
            ?f(a0,a1,a2,a3,a4,a5,a6)
            :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
  function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
   {return f.length == 8
            ?f(a0,a1,a2,a3,a4,a5,a6,a7)
            :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
  function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
   {return f.length == 9
            ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
            :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
  function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
   {return f.length == 10
            ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
            :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
  function caml_call11(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
   {return f.length == 11
            ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
            :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10])}
  caml_fs_init();
  var
   Out_of_memory=[num_248,caml_string_of_jsbytes(str_Out_of_memory),-1],
   Sys_error=[num_248,caml_string_of_jsbytes(str_Sys_error),-2],
   Failure=[num_248,caml_string_of_jsbytes(str_Failure),-3],
   Invalid_argument=[num_248,caml_string_of_jsbytes(str_Invalid_argument),-4],
   End_of_file=[num_248,caml_string_of_jsbytes(str_End_of_file),-5],
   Division_by_zero=[num_248,caml_string_of_jsbytes(str_Division_by_zero),-6],
   Not_found=[num_248,caml_string_of_jsbytes(str_Not_found),-7],
   Match_failure=[num_248,caml_string_of_jsbytes(str_Match_failure),-8],
   Stack_overflow=[num_248,caml_string_of_jsbytes(str_Stack_overflow),-9],
   Sys_blocked_io=[num_248,caml_string_of_jsbytes(str_Sys_blocked_io),num_10],
   Assert_failure=[num_248,caml_string_of_jsbytes(str_Assert_failure),-11],
   Undefined_recursive_module=
    [num_248,caml_string_of_jsbytes(str_Undefined_recurs_abr),-12],
   zero=caml_int64_create_lo_mi_hi(0,0,0),
   dummy_pos=[0,caml_string_of_jsbytes(str$59),0,0,-1],
   zero_pos=[0,caml_string_of_jsbytes(str$59),1,0,0],
   sub_format=[0,0,caml_string_of_jsbytes(str$59)],
   formatting_lit=[0,caml_string_of_jsbytes(str$43),1,0],
   opt=[0,num_103],
   partial=[4,0,0,0,0],
   locfmt=
    [0,
     [11,
      caml_string_of_jsbytes('File "'),
      [2,
       0,
       [11,
        caml_string_of_jsbytes('", line '),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(str_characters),
          [4,
           0,
           0,
           0,
           [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(str$47),[2,0,0]]]]]]]]]],
     caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
   opt$0=[0,0],
   dir_sep=caml_string_of_jsbytes(str$13),
   quotequote=caml_string_of_jsbytes("'\\''"),
   current_dir_name=caml_string_of_jsbytes(str$48),
   parent_dir_name=caml_string_of_jsbytes(str$12),
   dir_sep$0=caml_string_of_jsbytes(str$61),
   current_dir_name$0=caml_string_of_jsbytes(str$48),
   parent_dir_name$0=caml_string_of_jsbytes(str$12),
   dir_sep$1=caml_string_of_jsbytes(str$13),
   hexa=caml_string_of_jsbytes(str_0123456789abcdef),
   hexa1=
    caml_string_of_jsbytes
     ("0000000000000000111111111111111122222222222222223333333333333333444444444444444455555555555555556666666666666666777777777777777788888888888888889999999999999999aaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbccccccccccccccccddddddddddddddddeeeeeeeeeeeeeeeeffffffffffffffff"),
   hexa2=
    caml_string_of_jsbytes
     ("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"),
   api_function_name=caml_string_of_jsbytes("wakeup"),
   shared=
    [0,
     caml_string_of_jsbytes(str_blocked),
     caml_string_of_jsbytes(str_close),
     caml_string_of_jsbytes(str_push),
     caml_string_of_jsbytes(str_count),
     caml_string_of_jsbytes(str_size),
     caml_string_of_jsbytes(str_set_reference),
     caml_string_of_jsbytes(str_resize),
     caml_string_of_jsbytes(str_closed)],
   op=caml_string_of_jsbytes("substring"),
   e=caml_string_of_jsbytes(str$13),
   subd=caml_string_of_jsbytes("!$&'()*+,;="),
   always_safe=
    caml_string_of_jsbytes
     ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-~"),
   compact=[0,0],
   partial$0=[11,caml_string_of_jsbytes(str_v_0),0],
   partial$1=
    [17,
     [0,caml_string_of_jsbytes(str$31),0,0],
     [11,
      caml_string_of_jsbytes("Already present:"),
      [17,
       [0,caml_string_of_jsbytes(str$31),0,0],
       [11,
        caml_string_of_jsbytes(str$75),
        [18,
         [1,
          [0,
           [11,caml_string_of_jsbytes(str_v_0),0],
           caml_string_of_jsbytes(str_v_0)]],
         [15,[17,0,[17,0,0]]]]]]]],
   n=caml_string_of_jsbytes(str_default),
   err$3=caml_string_of_jsbytes(str_minimum_field_re_abr),
   err$2=caml_string_of_jsbytes(str_maximum_field_re_abr),
   err$1=caml_string_of_jsbytes(str_minimum_field_re_abr),
   err$0=caml_string_of_jsbytes(str_maximum_field_re_abr),
   array_specs=[0,0,0,0,0],
   string_specs=[0,0,0,0],
   numeric_specs=[0,0,0,0],
   partial$2=[11,caml_string_of_jsbytes(str$66),0],
   version=caml_string_of_jsbytes("http://json-schema.org/draft-04/schema#"),
   specs=[0,0,0,0],
   float$0=[3,0],
   partial$3=
    [17,
     [0,caml_string_of_jsbytes(str$5),1,0],
     [11,caml_string_of_jsbytes(str_stream),[17,0,0]]],
   partial$4=[17,[0,caml_string_of_jsbytes(str$5),1,0],[12,40,0]],
   partial$5=
    [11,
     caml_string_of_jsbytes("('\"'"),
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,
       caml_string_of_jsbytes(str_or),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,caml_string_of_jsbytes(str$44),[17,0,0]]]]]],
   partial$6=[0,caml_string_of_jsbytes(str$5),1,0],
   partial$7=
    [11,
     caml_string_of_jsbytes(str$62),
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,
       caml_string_of_jsbytes(str_or),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,caml_string_of_jsbytes(str$44),[17,0,0]]]]]],
   partial$8=[0,caml_string_of_jsbytes(str$5),1,0],
   partial$9=
    [11,
     caml_string_of_jsbytes(str_or),
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,caml_string_of_jsbytes(str$51),[17,0,0]]]],
   partial$10=[0,caml_string_of_jsbytes(str$5),1,0],
   partial$11=
    [11,
     caml_string_of_jsbytes(str$62),
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,
       caml_string_of_jsbytes(str_or),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,caml_string_of_jsbytes(str$51),[17,0,0]]]]]],
   partial$12=[0,caml_string_of_jsbytes(str$5),1,0],
   partial$13=
    [17,[0,caml_string_of_jsbytes(str$5),1,0],[12,40,[15,[12,41,[17,0,0]]]]],
   err_bom=[0,num_106380200,-543455433],
   err_unclosed_comment=[0,num_106380200,[0,num_364210971,num_826170817]],
   err_unclosed_string=[0,num_106380200,[0,num_364210971,num_976970511]],
   err_unclosed_arr=[0,num_106380200,[0,num_364210971,num_14610]],
   err_unclosed_obj=[0,num_106380200,[0,num_364210971,num_17732]],
   err_exp_comment=[0,num_106380200,[0,num_434236056,num_826170817]],
   err_exp_value=[0,num_106380200,[0,num_434236056,-991563951]],
   err_exp_name=[0,num_106380200,[0,num_434236056,num_869834347]],
   err_exp_nsep=[0,num_106380200,[0,num_434236056,num_713199754]],
   err_exp_arr_fst=[0,num_106380200,[0,num_434236056,[0,num_726711616,1]]],
   err_exp_arr_nxt=[0,num_106380200,[0,num_434236056,[0,num_726711616,0]]],
   err_exp_obj_fst=[0,num_106380200,[0,num_434236056,[0,num_881518886,1]]],
   err_exp_obj_nxt=[0,num_106380200,[0,num_434236056,[0,num_881518886,0]]],
   err_exp_json=[0,num_106380200,[0,num_434236056,num_826371656]],
   err_exp_eoi=[0,num_106380200,[0,num_434236056,num_3456159]],
   opt$1=[0,0],
   fmt=
    [0,
     [11,caml_string_of_jsbytes("JSON.of_buffer "),[2,0,0]],
     caml_string_of_jsbytes("JSON.of_buffer %s")],
   name=caml_string_of_jsbytes(str_a_list),
   name$0=caml_string_of_jsbytes(str_a_list),
   integer_cases=
    [0,
     [0,caml_string_of_jsbytes("Int16"),num_783416972],
     [0,
      [0,caml_string_of_jsbytes("Int8"),num_815034505],
      [0,
       [0,caml_string_of_jsbytes(str_Uint16),num_980827423],
       [0,[0,caml_string_of_jsbytes(str_Uint8),num_919245630],0]]]],
   z_reference_name=caml_string_of_jsbytes(str_Z_t),
   z_reference_description=
    caml_string_of_jsbytes
     ("A variable length sequence of bytes, encoding a Zarith number. Each byte has a running unary size bit: the most significant bit of each byte tells is this is the last byte in the sequence (0) or if there is more to read (1). The second most significant bit of the first byte is reserved for the sign (positive if zero). Size and sign bits ignored, data is then the binary representation of the absolute value of the number in little endian order."),
   z_encoding=[0,[0,[0,caml_string_of_jsbytes(str_Z_t),num_57067359,3],0]],
   n_reference_name=caml_string_of_jsbytes(str_N_t),
   n_reference_description=
    caml_string_of_jsbytes
     ("A variable length sequence of bytes, encoding a Zarith number. Each byte has a running unary size bit: the most significant bit of each byte tells is this is the last byte in the sequence (0) or if there is more to read (1). Size bits ignored, data is then the binary representation of the absolute value of the number in little endian order."),
   n_encoding=[0,[0,[0,caml_string_of_jsbytes(str_N_t),num_57067359,3],0]],
   float_name=caml_string_of_jsbytes("rangedFloat"),
   partial$14=[17,4,0],
   ok_unit=[0,0],
   ok_none=[0,0],
   ok_nil=[0,0],
   ok_true=[0,1],
   ok_false=[0,0],
   partial$15=[15,[17,0,0]],
   id$1=caml_string_of_jsbytes(str$59),
   category=[0,num_103274127],
   title=caml_string_of_jsbytes(str_Generic_error),
   description=caml_string_of_jsbytes("An unclassified error"),
   id$2=caml_string_of_jsbytes(str$59),
   category$0=[0,num_103274127],
   id$3=caml_string_of_jsbytes(str$59),
   ok_nil$1=[0,0],
   empty$4=[0,0,0],
   shared$0=
    [0,
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_call_service)],
   opt$3=[0,1],
   b58check_prefix=caml_string_of_jsbytes("\x014"),
   b58check_prefix$0=caml_string_of_jsbytes("\x05t"),
   b58check_prefix$1=caml_string_of_jsbytes("\x85\xe9"),
   b58check_prefix$2=caml_string_of_jsbytes("\x1d\x9fm"),
   b58check_prefix$3=caml_string_of_jsbytes("\x02\xaa"),
   b58check_prefix$4=caml_string_of_jsbytes("O\xc7"),
   b58check_prefix$5=caml_string_of_jsbytes("\xea\xf9"),
   b58check_prefix$6=caml_string_of_jsbytes("\x05\xb7"),
   b58check_prefix$7=caml_string_of_jsbytes("\x86'"),
   b58check_prefix$8=caml_string_of_jsbytes("\x1d\x9f\xb6"),
   b58check_prefix$9=caml_string_of_jsbytes("\x06\xa1\x9f"),
   b58check_prefix$10=caml_string_of_jsbytes("\x06\xa1\xa1"),
   b58check_prefix$11=caml_string_of_jsbytes("\x06\xa1\xa4"),
   b58check_prefix$12=caml_string_of_jsbytes("\x99g"),
   ed25519_seed=caml_string_of_jsbytes("\r\x0f:\x07"),
   ed25519_public_key=caml_string_of_jsbytes("\r\x0f%\xd9"),
   secp256k1_secret_key=caml_string_of_jsbytes("\x11\xa2\xe0\xc9"),
   p256_secret_key=caml_string_of_jsbytes("\x10Q\xee\xbd"),
   ed25519_encrypted_seed=caml_string_of_jsbytes("\x07Z<\xb3)"),
   secp256k1_encrypted_secret_key=caml_string_of_jsbytes("\t\xed\xf1\xae\x96"),
   p256_encrypted_secret_key=caml_string_of_jsbytes("\t09s\xab"),
   secp256k1_public_key=caml_string_of_jsbytes("\x03\xfe\xe2V"),
   p256_public_key=caml_string_of_jsbytes("\x03\xb2\x8b\x7f"),
   ed25519_secret_key=caml_string_of_jsbytes("+\xf6N\x07"),
   ed25519_signature=caml_string_of_jsbytes("\t\xf5\xcd\x86\x12"),
   secp256k1_signature=caml_string_of_jsbytes("\rse\x13?"),
   p256_signature=caml_string_of_jsbytes("6\xf0,4"),
   generic_signature=caml_string_of_jsbytes("\x04\x82+"),
   chain_id=caml_string_of_jsbytes("WR\0"),
   name$1=caml_string_of_jsbytes("Generic_hash"),
   title$0=caml_string_of_jsbytes(str$59),
   name$2=caml_string_of_jsbytes(str_block_hash),
   title$1=caml_string_of_jsbytes("A block identifier"),
   name$3=caml_string_of_jsbytes("Chain_id"),
   title$2=caml_string_of_jsbytes("Network identifier"),
   name$4=caml_string_of_jsbytes("Ed25519.Public_key_hash"),
   title$3=caml_string_of_jsbytes("An Ed25519 public key hash"),
   size$8=[0,20],
   name$6=caml_string_of_jsbytes("Ed25519.Public_key"),
   title$5=caml_string_of_jsbytes("Ed25519 public key"),
   name$7=caml_string_of_jsbytes("Ed25519.Secret_key"),
   title$6=caml_string_of_jsbytes("An Ed25519 secret key"),
   name$8=caml_string_of_jsbytes(str_Ed25519),
   title$7=caml_string_of_jsbytes("An Ed25519 signature"),
   name$9=caml_string_of_jsbytes("P256.Public_key_hash"),
   title$8=caml_string_of_jsbytes("A P256 public key hash"),
   size$10=[0,20],
   name$11=caml_string_of_jsbytes("P256.Public_key"),
   title$10=caml_string_of_jsbytes("A P256 public key"),
   name$12=caml_string_of_jsbytes("P256.Secret_key"),
   title$11=caml_string_of_jsbytes("A P256 secret key"),
   name$13=caml_string_of_jsbytes(str_P256),
   title$12=caml_string_of_jsbytes("A P256 signature"),
   opt$4=[0,0],
   name$14=caml_string_of_jsbytes("Secp256k1.Public_key_hash"),
   title$13=caml_string_of_jsbytes("A Secp256k1 public key hash"),
   size$12=[0,20],
   name$16=caml_string_of_jsbytes("Secp256k1.Public_key"),
   title$15=caml_string_of_jsbytes("A Secp256k1 public key"),
   name$17=caml_string_of_jsbytes("Secp256k1.Secret_key"),
   title$16=caml_string_of_jsbytes("A Secp256k1 secret key"),
   name$18=caml_string_of_jsbytes(str_Secp256k1),
   title$17=caml_string_of_jsbytes("A Secp256k1 signature"),
   name$19=caml_string_of_jsbytes("Signature.Public_key_hash"),
   title$18=
    caml_string_of_jsbytes("A Ed25519, Secp256k1, or P256 public key hash"),
   name$20=caml_string_of_jsbytes("Signature.Public_key"),
   title$19=caml_string_of_jsbytes("A Ed25519, Secp256k1, or P256 public key"),
   name$21=caml_string_of_jsbytes("Signature.Secret_key"),
   title$20=caml_string_of_jsbytes("A Ed25519, Secp256k1 or P256 secret key"),
   name$22=caml_string_of_jsbytes("Signature"),
   title$21=caml_string_of_jsbytes("A Ed25519, Secp256k1 or P256 signature"),
   name$23=caml_string_of_jsbytes("Protocol_hash"),
   title$22=caml_string_of_jsbytes("A Tezos protocol ID"),
   name$25=caml_string_of_jsbytes("Operation_metadata_hash"),
   title$24=caml_string_of_jsbytes("A Tezos operation metadata ID"),
   name$26=caml_string_of_jsbytes("Operation_metadata_list_hash"),
   title$25=caml_string_of_jsbytes("A list of operation metadata"),
   name$27=caml_string_of_jsbytes("Operation_metadata_list_list_hash"),
   title$26=caml_string_of_jsbytes("A list of list of operation metadata"),
   name$28=caml_string_of_jsbytes("Operation_hash"),
   title$27=caml_string_of_jsbytes("A Tezos operation ID"),
   name$30=caml_string_of_jsbytes("Operation_list_hash"),
   title$29=caml_string_of_jsbytes("A list of operations"),
   name$31=caml_string_of_jsbytes("Operation_list_list_hash"),
   title$30=caml_string_of_jsbytes("A list of list of operations"),
   name$32=caml_string_of_jsbytes("Crypto_box.Public_key_hash"),
   title$31=caml_string_of_jsbytes("A Cryptobox public key ID"),
   size$14=[0,16],
   name$33=caml_string_of_jsbytes("Context_hash"),
   title$32=caml_string_of_jsbytes("A hash of context"),
   name$34=caml_string_of_jsbytes("Block_metadata_hash"),
   title$33=caml_string_of_jsbytes("A Tezos block metadata ID"),
   tbl=
    [0,
     caml_string_of_jsbytes
      ("\0\0\xfd\xff\x02\0r\0\xe4\0\x04\0t\0V\x01\xc8\x01:\x02t\x02\0\0\xfa\x02 \0\xfe\xff\xff\xff\xe6\0"),
     caml_string_of_jsbytes
      ("\x03\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff"),
     caml_string_of_jsbytes
      ("\x02\0\0\0\x02\0\x02\0\x02\0\xff\xff\x02\0\x02\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff"),
     caml_string_of_jsbytes
      ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x05\0\0\0\0\0\0\0\0\0\x10\0\x10\0\0\0\0\0\0\0\0\0\x06\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\x10\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x0f\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x10\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\xff\xff\0\0\x04\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\x0f\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
     caml_string_of_jsbytes
      ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x02\0\x02\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x04\0\xff\xff\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\x10\0\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\xff\xff\x10\0\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
     caml_string_of_jsbytes
      ("\0\0\0\0\x02\0\x04\0\x06\0\0\0\b\0\n\0\f\0|\0\0\0\0\0\xee\0\0\0\0\0\0\0\0\0"),
     caml_string_of_jsbytes
      ("\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0'\0'\0\0\0\0\0\0\0\0\0\0\0\0\0"),
     caml_string_of_jsbytes
      ("\x01\0\0\0\x01\0\x01\0\x01\0\0\0\x01\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
     caml_string_of_jsbytes
      ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x17\0\x17\0$\0$\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x17\0\0\0$\0\0\0$\0\x14\0\0\0\t\0\0\0\t\0\0\0\0\0\0\0\x1a\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x
     caml_string_of_jsbytes
      ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x02\0\x02\0\x03\0\x03\0\x04\0\x04\0\x06\0\x06\0\x07\0\x07\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\x04\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\b\0\x05\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\x04\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
     caml_string_of_jsbytes
      ("\xff\x05\xff\xff\x04\xff\x03\xff\xff\x06\xff\xff\0\x04\xff\x03\xff\x04\xff\xff\x06\x05\xff\x05\x06\xff\x05\x06\x06\xff\xff\x07\xff\x06\xff\xff\x07\xff\xff\0\x03\x01\x05\x02\x07\xff")],
   fmt$0=
    [0,
     [11,caml_string_of_jsbytes("invalid log level ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("invalid log level (%s)")],
   doc=
    caml_string_of_jsbytes
     ("Generic event legacy / string-based information logging."),
   description$0=
    caml_string_of_jsbytes
     ("Activation of an Internal Event SINK with an URI failed"),
   title$35=
    caml_string_of_jsbytes("Internal Event Sink: Wrong Activation URI"),
   name$36=caml_string_of_jsbytes("error-event"),
   doc$0=caml_string_of_jsbytes("Generic event for any kind of error."),
   name$37=caml_string_of_jsbytes("debug-event"),
   doc$1=
    caml_string_of_jsbytes
     ("Generic event for semi-structured debug information."),
   name$38=caml_string_of_jsbytes("lwt-worker-event"),
   doc$2=
    caml_string_of_jsbytes
     ("Generic event for callers of the function Lwt_utils.worker."),
   uri_scheme=caml_string_of_jsbytes("lwt-log"),
   cany=[0,[0,0,num_255],0],
   eps_expr=[0,0,0],
   name$39=caml_string_of_jsbytes("Re.exec"),
   partial$16=[4,0,[0,2,2],0,0],
   acc=caml_int64_create_lo_mi_hi(0,0,0),
   pow=caml_int64_create_lo_mi_hi(num_10817536,num_59604,0),
   ps_count_in_min=caml_int64_create_lo_mi_hi(11517952,3576278,0),
   ps_count_in_hour=caml_int64_create_lo_mi_hi(3211264,13250129,12),
   ps_count_in_day=caml_int64_create_lo_mi_hi(9961472,num_16013212,num_306),
   ps_day_max=caml_int64_create_lo_mi_hi(9961471,num_16013212,num_306),
   epoch=[0,0,caml_int64_create_lo_mi_hi(0,0,0)],
   fmt$1=
    [0,
     [11,caml_string_of_jsbytes(str_Time_of_notation),0],
     caml_string_of_jsbytes(str_Time_of_notation)],
   epoch$0=caml_int64_create_lo_mi_hi(0,0,0),
   partial$17=
    [0,[11,caml_string_of_jsbytes(str_v$0),0],caml_string_of_jsbytes(str_v$0)],
   partial$18=
    [17,
     0,
     [11,
      caml_string_of_jsbytes("] ;"),
      [17,0,[17,[0,caml_string_of_jsbytes(str$5),1,0],[12,num_125,[17,0,0]]]]]],
   partial$19=
    [17,
     [0,caml_string_of_jsbytes(str$5),1,0],
     [11,
      caml_string_of_jsbytes("implementation = "),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str$39),
        [17,
         0,
         [17,[0,caml_string_of_jsbytes(str$5),1,0],[12,num_125,[17,0,0]]]]]]]],
   partial$20=[11,caml_string_of_jsbytes("Expiration: "),[15,[17,0,0]]],
   partial$21=[0,caml_string_of_jsbytes(str$5),1,0],
   _Zw_=[0,caml_string_of_jsbytes(str_filters)],
   shared$1=[0,caml_string_of_jsbytes(str_timeout)],
   opt$5=[0,caml_string_of_jsbytes(str_no)],
   name$42=caml_string_of_jsbytes("list_offset"),
   descr$1=
    caml_string_of_jsbytes("Index `n` of the requested validation pass."),
   name$43=caml_string_of_jsbytes("operation_offset"),
   descr$2=
    caml_string_of_jsbytes
     ("Index `m` of the requested operation in its validation pass."),
   name$44=caml_string_of_jsbytes("context_path"),
   descr$3=caml_string_of_jsbytes("A path inside the context"),
   delims=[0,num_126,[0,45,[0,43,0]]],
   _ads_=
    [0,
     caml_string_of_jsbytes(str_applied),
     caml_string_of_jsbytes(str_refused),
     caml_string_of_jsbytes(str_branch_refused),
     caml_string_of_jsbytes(str_branch_delayed)],
   _adt_=
    [0,
     caml_string_of_jsbytes(str_sort_operations),
     caml_string_of_jsbytes(str_timestamp)],
   _adu_=
    [0,
     caml_string_of_jsbytes(str_refused),
     caml_string_of_jsbytes(str_branch_refused),
     caml_string_of_jsbytes(str_branch_delayed),
     caml_string_of_jsbytes(str_applied)],
   _adv_=
    [0,
     caml_string_of_jsbytes(str_timestamp),
     caml_string_of_jsbytes(str_sort_operations)],
   shared$2=[0,caml_string_of_jsbytes(str_depth)],
   name$40=caml_string_of_jsbytes(str_chain_id),
   descr=
    caml_string_of_jsbytes
     ("A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'."),
   name$41=caml_string_of_jsbytes("block_id"),
   descr$0=
    caml_string_of_jsbytes
     ("A block identifier. This is either a block hash in Base58Check notation, one the predefined aliases: 'genesis', 'head' or a block level (index in the chain). One might also use 'head~N' or '<hash>~N' where N is an integer to denote the Nth predecessor of the designated block.Also, '<hash>+N' denotes the Nth successor of a block."),
   shared$3=
    [0,
     caml_string_of_jsbytes(str_min_date),
     caml_string_of_jsbytes(str_length),
     caml_string_of_jsbytes(str_heads)],
   name$45=caml_string_of_jsbytes("node.state"),
   _ap7_=
    [0,caml_string_of_jsbytes(str_chain),caml_string_of_jsbytes(str_async)],
   shared$4=
    [0,
     caml_string_of_jsbytes(str_force),
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_async)],
   shared$5=
    [0,
     caml_string_of_jsbytes(str_protocols),
     caml_string_of_jsbytes(str_next_protocols),
     caml_string_of_jsbytes(str_chains)],
   partial$22=[17,0,0],
   shared$6=
    [0,
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_message),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_answer)],
   long$0=caml_string_of_jsbytes(str_force),
   short$0=[0,num_102],
   partial$23=[2,0,[11,caml_string_of_jsbytes(str_Use_alias_nam_abr),0]],
   partial$24=[2,0,[11,caml_string_of_jsbytes(str_Use_alias_nam_abr),0]],
   partial$25=
    [17,
     [0,caml_string_of_jsbytes(str$31),0,0],
     [11,caml_string_of_jsbytes("Use --force to update"),[17,0,0]]],
   name$46=caml_string_of_jsbytes("public key hash"),
   name$47=caml_string_of_jsbytes(str_secret_key),
   name$48=caml_string_of_jsbytes(str_public_key),
   fold_case_table=caml_string_of_jsbytes(str$59),
   loc=caml_string_of_jsbytes(str_lib_sexp_uri_sex_abr),
   tp_loc=caml_string_of_jsbytes(str_lib_sexp_uri_sex_abr),
   yylhs=
    caml_string_of_jsbytes
     ("\xff\xff\x05\0\x05\0\x06\0\x06\0\x07\0\x07\0\x07\0\x01\0\x01\0\x01\0\b\0\b\0\x02\0\x02\0\t\0\t\0\x03\0\x03\0\x03\0\n\0\n\0\x04\0\x04\0\0\0\0\0\0\0\0\0"),
   yylen=
    caml_string_of_jsbytes
     ("\x02\0\x04\0\x04\0\x02\0\0\0\x04\0\x04\0\x04\0\x02\0\x03\0\x01\0\x02\0\x02\0\x02\0\x03\0\x02\0\x02\0\x02\0\x03\0\x01\0\x02\0\x02\0\x02\0\x03\0\x02\0\x02\0\x02\0\x02\0"),
   yydefred=
    caml_string_of_jsbytes
     ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\x18\0\0\0\0\0\0\0\x19\0\0\0\0\0\x13\0\0\0\x1a\0\0\0\0\0\0\0\x1b\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\f\0\x0b\0\0\0\r\0\x10\0\x0f\0\0\0\x11\0\x15\0\x14\0\0\0\x16\0\0\0\0\0\0\0\t\0\0\0\x03\0\x0e\0\x12\0\x17\0\x05\0\x06\0\x07\0\0\0\x02\0\x01\0"),
   yydgoto=
    caml_string_of_jsbytes
     ("\x05\0\t\0\r\0\x12\0\x16\0\x1d\0\x1e\0\n\0\x0e\0\x13\0\x17\0"),
   yysindex=
    caml_string_of_jsbytes
     ("\x14\0\0\xff\x0b\xff\t\xff\f\xff\0\0\x1b\xff\0\0#\xff\0\0\xfe\xfe\b\xff\b\xff\0\0\x15\xff\b\xff\0\0\b\xff\0\0\x16\xff\b\xff\b\xff\0\0\x1d\xff'\xff\r\xff\0\xff\0\0\"\xff\b\xff\0\0\0\0\x0b\xff\0\0\0\0\0\0\t\xff\0\0\0\0\0\0\f\xff\0\0\b\xff\b\xff\b\xff\0\0%\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\xff\0\0\0\0"),
   yyrindex=
    caml_string_of_jsbytes
     ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\xff\x1e\xff\0\0\0\0\x1e\xff\0\0\x1e\xff\0\0\0\0\x1e\xff\x1e\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\xff\x1e\xff\x1e\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
   yygindex=
    caml_string_of_jsbytes
     ("\0\0\x11\0\f\0\t\0\x06\0\0\0\xf4\xff\0\0\0\0\0\0\0\0"),
   yytable=
    caml_string_of_jsbytes
     ("\x1f\0\x06\0\x1a\0\"\0\x1b\0#\0\x07\0\b\0&\0'\0\x0f\0\x1c\0\x0b\0\x14\0+\0\x10\0\x11\0/\0\f\0\x15\0,\0\x01\0\x02\0\x03\0\x04\0 \0$\0!\0%\0\x18\x003\x004\x005\0(\0\x04\0)\0\x04\0\x19\x007\x008\0*\0.\x006\0-\x000\x001\x002\0"),
   yycheck=
    caml_string_of_jsbytes
     ("\f\0\x01\x01\x04\x01\x0f\0\x06\x01\x11\0\x06\x01\x07\x01\x14\0\x15\0\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x06\x01\x07\x01\x1d\0\x07\x01\x07\x01\x07\x01\x01\0\x02\0\x03\0\x04\0\x04\x01\x04\x01\x06\x01\x06\x01\x02\x01*\0+\0,\0\x04\x01\x04\x01\x06\x01\x06\x01\x02\x01\x07\x01\b\x01\x01\x01\x07\x01\x05\x01\x1a\0 \0$\0(\0"),
   yynames_const=
    caml_string_of_jsbytes("STAR\0SLASH\0SEMI\0COMMA\0EQUAL\0EOI\0"),
   yynames_block=caml_string_of_jsbytes("TOK\0QS\0"),
   ocaml_lex_tables=
    [0,
     caml_string_of_jsbytes
      ("\0\0\xf7\xff\xf8\xff$\0\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xffH\0\t\0\x01\0\xfe\xff\x02\0\xff\xff"),
     caml_string_of_jsbytes
      ("\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x02\0\xff\xff"),
     caml_string_of_jsbytes
      ("\x03\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\x0b\0\0\0\x0b\0\0\0"),
     caml_string_of_jsbytes
      ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x04\0\xff\xff\x0e\0\0\0\0\0\0\0\xff\xff\xff\xff\t\0\f\0\x06\0\xff\xff\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\x07\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff"),
     caml_string_of_jsbytes
      ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x0b\0\r\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\n\0\0\0\x03\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\xff\xff\xff\xff\x03\0\t\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\n\0\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\xff\xff\xff\xff\t\0\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\x03\0\x03\0\x03\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x0b\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0"),
     caml_string_of_jsbytes(str$59),
     caml_string_of_jsbytes(str$59),
     caml_string_of_jsbytes(str$59),
     caml_string_of_jsbytes(str$59),
     caml_string_of_jsbytes(str$59),
     caml_string_of_jsbytes(str$59)],
   s$1=caml_string_of_jsbytes(str$59),
   tp_loc$0=caml_string_of_jsbytes(str_cohttp_src_code_abr$0),
   tp_loc$1=caml_string_of_jsbytes(str_cohttp_src_code_abr$0),
   tp_loc$2=caml_string_of_jsbytes(str_cohttp_src_code_abr),
   tp_loc$3=caml_string_of_jsbytes(str_cohttp_src_code_abr),
   tp_loc$4=caml_string_of_jsbytes("cohttp/src/code.ml.informational_status"),
   tp_loc$5=caml_string_of_jsbytes("cohttp/src/code.ml.success_status"),
   tp_loc$6=caml_string_of_jsbytes("cohttp/src/code.ml.redirection_status"),
   tp_loc$7=caml_string_of_jsbytes("cohttp/src/code.ml.client_error_status"),
   tp_loc$8=caml_string_of_jsbytes("cohttp/src/code.ml.server_error_status"),
   tp_loc$9=caml_string_of_jsbytes(str_cohttp_src_code_abr$1),
   tp_loc$10=caml_string_of_jsbytes(str_cohttp_src_code_abr$1),
   version$0=caml_string_of_jsbytes("2.5.4"),
   loc$0=caml_string_of_jsbytes("cohttp/src/transfer.ml.encoding"),
   names=
    [0,
     caml_string_of_jsbytes(str_encoding),
     [0,
      caml_string_of_jsbytes(str_headers),
      [0,
       caml_string_of_jsbytes(str_version),
       [0,
        caml_string_of_jsbytes(str_status),
        [0,caml_string_of_jsbytes(str_flush),0]]]]],
   tp_loc$11=caml_string_of_jsbytes("cohttp/src/response.ml.t"),
   opt$6=[0,caml_string_of_jsbytes(str_localhost)],
   names$0=
    [0,
     caml_string_of_jsbytes(str_headers),
     [0,
      caml_string_of_jsbytes(str_meth),
      [0,
       caml_string_of_jsbytes(str_resource),
       [0,
        caml_string_of_jsbytes(str_version),
        [0,caml_string_of_jsbytes(str_encoding),0]]]]],
   tp_loc$12=caml_string_of_jsbytes("cohttp/src/request.ml.t"),
   partial$26=[15,[17,0,0]],
   partial$27=
    [17,
     [0,caml_string_of_jsbytes(str$31),0,0],
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("content:"),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],[3,0,[17,0,[17,0,0]]]]]]],
   partial$28=
    [18,
     [1,
      [0,
       [11,caml_string_of_jsbytes(str_v_2),0],
       caml_string_of_jsbytes(str_v_2)]],
     [11,
      caml_string_of_jsbytes("Raw data:"),
      [17,[0,caml_string_of_jsbytes(str$5),1,0],[2,0,[17,0,[17,0,0]]]]]],
   pub_meths=
    [0,
     caml_string_of_jsbytes(str_base),
     caml_string_of_jsbytes(str_generic_json_call),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_call_service)],
   scheme$1=caml_string_of_jsbytes("unencrypted"),
   scheme$2=caml_string_of_jsbytes("encrypted"),
   path$7=caml_string_of_jsbytes("return-password"),
   v=caml_string_of_jsbytes("application/x-www-form-urlencoded"),
   k$2=caml_string_of_jsbytes(str_content_type),
   shared$7=
    [0,
     caml_string_of_jsbytes("to_string"),
     caml_string_of_jsbytes("set_handle")],
   _aLy_=
    [0,
     caml_string_of_jsbytes(str_write),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_get_base_dir),
     caml_string_of_jsbytes(str_filename)],
   _aLA_=
    [0,
     caml_string_of_jsbytes(str_prompt_password),
     caml_string_of_jsbytes(str_prompt)],
   _aLD_=
    [0,
     caml_string_of_jsbytes(str_answer),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_message),
     caml_string_of_jsbytes(str_warning)],
   _aLE_=
    [0,
     caml_string_of_jsbytes(str_base),
     caml_string_of_jsbytes(str_exit),
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_write),
     caml_string_of_jsbytes(str_generic_json_call),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_answer),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_sleep),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_now),
     caml_string_of_jsbytes(str_confirmations),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_message),
     caml_string_of_jsbytes(str_call_service),
     caml_string_of_jsbytes(str_prompt_password),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_block),
     caml_string_of_jsbytes(str_prompt),
     caml_string_of_jsbytes(str_get_base_dir)],
   _aLI_=
    [0,
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_write),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_get_base_dir)],
   shared$8=
    [0,
     caml_string_of_jsbytes(str_method_a),
     caml_string_of_jsbytes(str_method_b)],
   req_path=caml_string_of_jsbytes(str_inc),
   shared$9=
    [0,
     caml_string_of_jsbytes(str_pbkdf2sha256),
     caml_string_of_jsbytes(str_pbkdf2sha512),
     caml_string_of_jsbytes(str_incdirect)],
   password_file=[0,caml_string_of_jsbytes(str_password)],
   base_dir=caml_string_of_jsbytes(str$59);
  caml_register_global(11,Undefined_recursive_module,str_Undefined_recurs_abr);
  caml_register_global(10,Assert_failure,str_Assert_failure);
  caml_register_global(9,Sys_blocked_io,str_Sys_blocked_io);
  caml_register_global(8,Stack_overflow,str_Stack_overflow);
  caml_register_global(7,Match_failure,str_Match_failure);
  caml_register_global(6,Not_found,str_Not_found);
  caml_register_global(5,Division_by_zero,str_Division_by_zero);
  caml_register_global(4,End_of_file,str_End_of_file);
  caml_register_global(3,Invalid_argument,str_Invalid_argument);
  caml_register_global(2,Failure,str_Failure);
  caml_register_global(1,Sys_error,str_Sys_error);
  caml_register_global(0,Out_of_memory,str_Out_of_memory);
  var
   _i_=caml_string_of_jsbytes("%,"),
   _h_=caml_string_of_jsbytes(str_input),
   _g_=caml_string_of_jsbytes("output_substring"),
   _f_=caml_string_of_jsbytes("%.12g"),
   _e_=caml_string_of_jsbytes(str$48),
   _c_=caml_string_of_jsbytes(str_true),
   _d_=caml_string_of_jsbytes(str_false),
   _b_=caml_string_of_jsbytes("char_of_int"),
   _a_=caml_string_of_jsbytes("Stdlib.Exit"),
   _k_=caml_string_of_jsbytes(str$6),
   _l_=caml_string_of_jsbytes("\\'"),
   _m_=caml_string_of_jsbytes(str_b),
   _n_=caml_string_of_jsbytes(str_t),
   _o_=caml_string_of_jsbytes(str_n),
   _p_=caml_string_of_jsbytes(str_r),
   _j_=caml_string_of_jsbytes("Char.chr"),
   _q_=caml_string_of_jsbytes(" is not an Unicode scalar value"),
   _r_=caml_string_of_jsbytes(str_X),
   _s_=caml_string_of_jsbytes("Stdlib.Sys.Break"),
   _z_=caml_string_of_jsbytes("List.iter2"),
   _A_=caml_string_of_jsbytes("List.for_all2"),
   _B_=[0,caml_string_of_jsbytes("list.ml"),282,11],
   _x_=caml_string_of_jsbytes("List.init"),
   _v_=caml_string_of_jsbytes("nth"),
   _w_=caml_string_of_jsbytes("List.nth"),
   _u_=caml_string_of_jsbytes("tl"),
   _t_=caml_string_of_jsbytes("hd"),
   _F_=caml_string_of_jsbytes("Bytes.concat"),
   _E_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
   _D_=caml_string_of_jsbytes("Bytes.blit"),
   _C_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
   _L_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
   _K_=caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
   _J_=caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
   _I_=caml_string_of_jsbytes(str$59),
   _H_=caml_string_of_jsbytes(str$59),
   _G_=caml_string_of_jsbytes("String.concat"),
   _R_=caml_string_of_jsbytes("Obj.Ephemeron.check_key"),
   _Q_=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
   _P_=caml_string_of_jsbytes("Obj.Ephemeron.get_key"),
   _O_=caml_string_of_jsbytes("Obj.Ephemeron.create"),
   _N_=caml_string_of_jsbytes(str_Obj_extension_co_abr),
   _M_=caml_string_of_jsbytes(str_Obj_extension_co_abr),
   _X_=[0,caml_string_of_jsbytes("array.ml"),236,4],
   _V_=caml_string_of_jsbytes("Array.blit"),
   _U_=caml_string_of_jsbytes("Array.fill"),
   _T_=caml_string_of_jsbytes("Array.sub"),
   _S_=caml_string_of_jsbytes("Array.init"),
   _W_=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
   _Y_=caml_string_of_jsbytes(str_d),
   _$_=caml_string_of_jsbytes(str_d),
   ___=caml_int64_create_lo_mi_hi(0,0,0),
   _Z_=caml_int64_create_lo_mi_hi(1,0,0),
   _ac_=caml_string_of_jsbytes("syntax error"),
   _aa_=caml_string_of_jsbytes("Stdlib.Parsing.YYexit"),
   _ab_=caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
   _ah_=caml_string_of_jsbytes("Set.remove_min_elt"),
   _ai_=[0,0,0,0],
   _aj_=[0,0,0],
   _ak_=[0,caml_string_of_jsbytes("set.ml"),547,18],
   _ad_=caml_string_of_jsbytes(str_Set_bal),
   _ae_=caml_string_of_jsbytes(str_Set_bal),
   _af_=caml_string_of_jsbytes(str_Set_bal),
   _ag_=caml_string_of_jsbytes(str_Set_bal),
   _aq_=caml_string_of_jsbytes("Map.remove_min_elt"),
   _ar_=[0,0,0,0],
   _as_=[0,caml_string_of_jsbytes("map.ml"),num_398,10],
   _at_=[0,0,0],
   _am_=caml_string_of_jsbytes(str_Map_bal),
   _an_=caml_string_of_jsbytes(str_Map_bal),
   _ao_=caml_string_of_jsbytes(str_Map_bal),
   _ap_=caml_string_of_jsbytes(str_Map_bal),
   _av_=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
   _aw_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
   _ax_=caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
   _ay_=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
   _az_=caml_string_of_jsbytes("Stdlib.Stream.Error"),
   _aE_=caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
   _aD_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
   _aC_=[0,caml_string_of_jsbytes(str_buffer_ml),93,2],
   _aB_=[0,caml_string_of_jsbytes(str_buffer_ml),94,2],
   _aA_=caml_string_of_jsbytes("Buffer.sub"),
   _aO_=caml_string_of_jsbytes(str_c),
   _aP_=caml_string_of_jsbytes(str_s$1),
   _aQ_=caml_string_of_jsbytes(str_i),
   _aR_=caml_string_of_jsbytes(str_li),
   _aS_=caml_string_of_jsbytes(str_ni),
   _aT_=caml_string_of_jsbytes(str_Li),
   _aU_=caml_string_of_jsbytes(str_f),
   _aV_=caml_string_of_jsbytes("%B"),
   _aW_=caml_string_of_jsbytes("%{"),
   _aX_=caml_string_of_jsbytes("%}"),
   _aY_=caml_string_of_jsbytes("%("),
   _aZ_=caml_string_of_jsbytes("%)"),
   _a0_=caml_string_of_jsbytes(str_a),
   _a1_=caml_string_of_jsbytes("%t"),
   _a2_=caml_string_of_jsbytes("%?"),
   _a3_=caml_string_of_jsbytes("%r"),
   _a4_=caml_string_of_jsbytes("%_r"),
   _a5_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),847,23],
   _be_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),811,21],
   _a8_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),812,21],
   _bf_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),815,21],
   _a9_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),816,21],
   _bg_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),819,19],
   _a__=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),820,19],
   _bh_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),823,22],
   _a$_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),824,22],
   _bi_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),828,30],
   _ba_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),829,30],
   _bc_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),833,26],
   _a6_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),834,26],
   _bd_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),843,28],
   _a7_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),844,28],
   _bb_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),848,23],
   _ce_=caml_string_of_jsbytes(str_u),
   _cc_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),1555,4],
   _cd_=caml_string_of_jsbytes("Printf: bad conversion %["),
   _cf_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),1623,39],
   _cg_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),1646,31],
   _ch_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),1647,31],
   _ci_=caml_string_of_jsbytes("Printf: bad conversion %_"),
   _cj_=caml_string_of_jsbytes(str$42),
   _ck_=caml_string_of_jsbytes(str$3),
   _cl_=caml_string_of_jsbytes(str$42),
   _cm_=caml_string_of_jsbytes(str$3),
   _cn_=caml_string_of_jsbytes(str$42),
   _co_=caml_string_of_jsbytes(str$3),
   _do_=
    [0,
     [11,
      caml_string_of_jsbytes("bad input: format type mismatch between "),
      [3,0,[11,caml_string_of_jsbytes(str_and),[3,0,0]]]],
     caml_string_of_jsbytes
      ("bad input: format type mismatch between %S and %S")],
   _cD_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: at character number %d, duplicate flag %C")],
   _cG_=caml_string_of_jsbytes(str_0),
   _cE_=caml_string_of_jsbytes(str_padding),
   _cF_=[0,1,0],
   _cH_=[0,0],
   _cI_=caml_string_of_jsbytes(str_precision),
   _cK_=[1,0],
   _cJ_=[1,1],
   _cU_=caml_string_of_jsbytes(str$53),
   _cR_=caml_string_of_jsbytes("'-'"),
   _cS_=caml_string_of_jsbytes("'0'"),
   _cT_=caml_string_of_jsbytes(str$53),
   _cO_=caml_string_of_jsbytes(str_0),
   _cP_=[1,1],
   _cQ_=caml_string_of_jsbytes(str_0),
   _cL_=caml_string_of_jsbytes(str_precision),
   _cM_=[1,1],
   _cN_=caml_string_of_jsbytes(str_precision),
   _c5_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(", flag "),
          [1,
           [11,
            caml_string_of_jsbytes(" is only allowed after the '"),
            [12,
             37,
             [11,caml_string_of_jsbytes("', before padding and precision"),0]]]]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
   _cV_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(', invalid conversion "'),
          [12,37,[0,[12,34,0]]]]]]]],
     caml_string_of_jsbytes
      ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
   _cW_=caml_string_of_jsbytes(str$38),
   _cX_=caml_string_of_jsbytes(str$69),
   _cY_=caml_string_of_jsbytes(str$25),
   _cZ_=[0,0],
   _c0_=caml_string_of_jsbytes("`padding'"),
   _c1_=[0,0],
   _c2_=caml_string_of_jsbytes("`precision'"),
   _c3_=caml_string_of_jsbytes(str$38),
   _c4_=caml_string_of_jsbytes("'_'"),
   _c6_=[0,[12,64,0]],
   _c7_=[0,caml_string_of_jsbytes(str$5),1,0],
   _c8_=[0,caml_string_of_jsbytes(str$31),0,0],
   _c9_=[2,60],
   _c__=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(": '"),
        [12,
         37,
         [11,
          caml_string_of_jsbytes
           ("' alone is not accepted in character sets, use "),
          [12,
           37,
           [12,
            37,
            [11,
             caml_string_of_jsbytes(" instead at position "),
             [4,0,0,0,[12,46,0]]]]]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
   _c$_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(": integer "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" is greater than the limit "),
          [4,0,0,0,0]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: integer %d is greater than the limit %d")],
   _db_=caml_string_of_jsbytes(str_digit),
   _da_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),2842,11],
   _dc_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(': unclosed sub-format, expected "'),
        [12,
         37,
         [0,[11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
     caml_string_of_jsbytes
      ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
   _dd_=caml_string_of_jsbytes("character ')'"),
   _de_=caml_string_of_jsbytes("character '}'"),
   _df_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),2904,34],
   _dk_=caml_string_of_jsbytes(str$69),
   _dj_=caml_string_of_jsbytes(str$38),
   _di_=caml_string_of_jsbytes(str$38),
   _dh_=caml_string_of_jsbytes(str$25),
   _dg_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),2940,28],
   _dm_=caml_string_of_jsbytes(str$38),
   _dl_=[0,caml_string_of_jsbytes(str_camlinternalForm_abr),2961,11],
   _dn_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(str$50),
          [2,
           0,
           [11,
            caml_string_of_jsbytes(" is incompatible with '"),
            [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
   _cC_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(str$50),
          [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: at character number %d, %s expected, read %C")],
   _cB_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(", '"),
          [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
     caml_string_of_jsbytes
      ("invalid format %S: at character number %d, '%c' without %s")],
   _cA_=
    caml_string_of_jsbytes
     ("non-zero widths are unsupported for %c conversions"),
   _cz_=caml_string_of_jsbytes("unexpected end of format"),
   _cy_=
    [0,
     [11,
      caml_string_of_jsbytes(str_invalid_format),
      [3,
       0,
       [11,
        caml_string_of_jsbytes(str_at_character_n_abr),
        [4,0,0,0,[11,caml_string_of_jsbytes(str$50),[2,0,0]]]]]],
     caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
   _cr_=
    [0,
     [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
     caml_string_of_jsbytes("invalid box description %S")],
   _cp_=caml_string_of_jsbytes(str$59),
   _cq_=[0,0,4],
   _cs_=caml_string_of_jsbytes(str$59),
   _ct_=caml_string_of_jsbytes(str_b$0),
   _cu_=caml_string_of_jsbytes("h"),
   _cv_=caml_string_of_jsbytes("hov"),
   _cw_=caml_string_of_jsbytes("hv"),
   _cx_=caml_string_of_jsbytes(str_v),
   _ca_=caml_string_of_jsbytes(str_nan),
   _cb_=caml_string_of_jsbytes(str$48),
   _b__=caml_string_of_jsbytes("neg_infinity"),
   _b$_=caml_string_of_jsbytes(str_infinity),
   _bY_=caml_string_of_jsbytes("%+nd"),
   _bZ_=caml_string_of_jsbytes("% nd"),
   _b1_=caml_string_of_jsbytes("%+ni"),
   _b2_=caml_string_of_jsbytes("% ni"),
   _b3_=caml_string_of_jsbytes("%nx"),
   _b4_=caml_string_of_jsbytes("%#nx"),
   _b5_=caml_string_of_jsbytes("%nX"),
   _b6_=caml_string_of_jsbytes("%#nX"),
   _b7_=caml_string_of_jsbytes("%no"),
   _b8_=caml_string_of_jsbytes("%#no"),
   _bX_=caml_string_of_jsbytes("%nd"),
   _b0_=caml_string_of_jsbytes(str_ni),
   _b9_=caml_string_of_jsbytes("%nu"),
   _bL_=caml_string_of_jsbytes("%+ld"),
   _bM_=caml_string_of_jsbytes("% ld"),
   _bO_=caml_string_of_jsbytes("%+li"),
   _bP_=caml_string_of_jsbytes("% li"),
   _bQ_=caml_string_of_jsbytes("%lx"),
   _bR_=caml_string_of_jsbytes("%#lx"),
   _bS_=caml_string_of_jsbytes("%lX"),
   _bT_=caml_string_of_jsbytes("%#lX"),
   _bU_=caml_string_of_jsbytes("%lo"),
   _bV_=caml_string_of_jsbytes("%#lo"),
   _bK_=caml_string_of_jsbytes("%ld"),
   _bN_=caml_string_of_jsbytes(str_li),
   _bW_=caml_string_of_jsbytes("%lu"),
   _by_=caml_string_of_jsbytes("%+Ld"),
   _bz_=caml_string_of_jsbytes("% Ld"),
   _bB_=caml_string_of_jsbytes("%+Li"),
   _bC_=caml_string_of_jsbytes("% Li"),
   _bD_=caml_string_of_jsbytes("%Lx"),
   _bE_=caml_string_of_jsbytes("%#Lx"),
   _bF_=caml_string_of_jsbytes("%LX"),
   _bG_=caml_string_of_jsbytes("%#LX"),
   _bH_=caml_string_of_jsbytes("%Lo"),
   _bI_=caml_string_of_jsbytes("%#Lo"),
   _bx_=caml_string_of_jsbytes("%Ld"),
   _bA_=caml_string_of_jsbytes(str_Li),
   _bJ_=caml_string_of_jsbytes("%Lu"),
   _bl_=caml_string_of_jsbytes("%+d"),
   _bm_=caml_string_of_jsbytes("% d"),
   _bo_=caml_string_of_jsbytes("%+i"),
   _bp_=caml_string_of_jsbytes("% i"),
   _bq_=caml_string_of_jsbytes(str_x),
   _br_=caml_string_of_jsbytes("%#x"),
   _bs_=caml_string_of_jsbytes(str_X),
   _bt_=caml_string_of_jsbytes("%#X"),
   _bu_=caml_string_of_jsbytes("%o"),
   _bv_=caml_string_of_jsbytes("%#o"),
   _bk_=caml_string_of_jsbytes(str_d),
   _bn_=caml_string_of_jsbytes(str_i),
   _bw_=caml_string_of_jsbytes(str_u),
   _aG_=caml_string_of_jsbytes("@]"),
   _aH_=caml_string_of_jsbytes("@}"),
   _aI_=caml_string_of_jsbytes("@?"),
   _aJ_=caml_string_of_jsbytes("@\n"),
   _aK_=caml_string_of_jsbytes("@."),
   _aL_=caml_string_of_jsbytes("@@"),
   _aM_=caml_string_of_jsbytes("@%"),
   _aN_=caml_string_of_jsbytes("@"),
   _aF_=[0,0,0],
   _bj_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
   _dp_=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
   _dq_=caml_string_of_jsbytes("Stdlib.Arg.Help"),
   _du_=caml_string_of_jsbytes(str$59),
   _dv_=
    [0,
     [11,caml_string_of_jsbytes(str$50),[2,0,[2,0,0]]],
     caml_string_of_jsbytes(", %s%s")],
   _dN_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
   _dO_=
    [0,
     [11,caml_string_of_jsbytes(str_Program_not_lin_abr),0],
     caml_string_of_jsbytes(str_Program_not_lin_abr)],
   _dF_=caml_string_of_jsbytes("Raised at"),
   _dG_=caml_string_of_jsbytes("Re-raised at"),
   _dH_=caml_string_of_jsbytes("Raised by primitive operation at"),
   _dI_=caml_string_of_jsbytes("Called from"),
   _dJ_=caml_string_of_jsbytes(" (inlined)"),
   _dL_=caml_string_of_jsbytes(str$59),
   _dK_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes(' file "'),
       [2,
        0,
        [12,
         34,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(", line "),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(str_characters),
             [4,0,0,0,[12,45,partial]]]]]]]]]],
     caml_string_of_jsbytes('%s file "%s"%s, line %d, characters %d-%d')],
   _dM_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
     caml_string_of_jsbytes("%s unknown location")],
   _dA_=caml_string_of_jsbytes("Out of memory"),
   _dB_=caml_string_of_jsbytes("Stack overflow"),
   _dC_=caml_string_of_jsbytes("Pattern matching failed"),
   _dD_=caml_string_of_jsbytes("Assertion failed"),
   _dE_=caml_string_of_jsbytes("Undefined recursive module"),
   _dw_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
   _dx_=caml_string_of_jsbytes(str$59),
   _dy_=caml_string_of_jsbytes(str$59),
   _dz_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
   _dt_=[0,[4,0,0,0,0],caml_string_of_jsbytes(str_d)],
   _dr_=[0,[3,0,0],caml_string_of_jsbytes(str_S)],
   _ds_=caml_string_of_jsbytes(str$71),
   _dQ_=caml_string_of_jsbytes("Random.int"),
   _dP_=caml_string_of_jsbytes(str_x$0),
   _dR_=
    [0,
     987910699,
     495797812,
     364182224,
     414272206,
     318284740,
     990407751,
     383018966,
     270373319,
     840823159,
     24560019,
     536292337,
     512266505,
     189156120,
     730249596,
     143776328,
     51606627,
     140166561,
     366354223,
     1003410265,
     700563762,
     981890670,
     913149062,
     526082594,
     1021425055,
     784300257,
     667753350,
     630144451,
     949649812,
     48546892,
     415514493,
     258888527,
     511570777,
     89983870,
     283659902,
     308386020,
     242688715,
     482270760,
     865188196,
     1027664170,
     207196989,
     193777847,
     619708188,
     671350186,
     149669678,
     257044018,
     87658204,
     558145612,
     183450813,
     28133145,
     901332182,
     710253903,
     510646120,
     652377910,
     409934019,
     801085050],
   _dV_=[0,0],
   _dU_=[0,caml_string_of_jsbytes("hashtbl.ml"),num_108,23],
   _aMO_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
   _aMM_=caml_string_of_jsbytes("CAMLRUNPARAM"),
   _dS_=caml_string_of_jsbytes(str$59),
   _d2_=caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
   _d1_=caml_string_of_jsbytes("Weak.blit"),
   _d0_=caml_string_of_jsbytes("Weak.check"),
   _dZ_=caml_string_of_jsbytes(str_Weak_get_copy),
   _dY_=caml_string_of_jsbytes("Weak.get"),
   _dX_=caml_string_of_jsbytes(str_Weak_set),
   _dW_=caml_string_of_jsbytes(str_Weak_create),
   _ek_=[3,0,3],
   _el_=caml_string_of_jsbytes(str$48),
   _eh_=caml_string_of_jsbytes(str$18),
   _ei_=caml_string_of_jsbytes("<\/"),
   _ej_=caml_string_of_jsbytes(str$59),
   _ee_=caml_string_of_jsbytes(str$18),
   _ef_=caml_string_of_jsbytes(str$64),
   _eg_=caml_string_of_jsbytes(str$59),
   _ed_=caml_string_of_jsbytes(str$40),
   _d$_=caml_string_of_jsbytes(str$59),
   _ea_=caml_string_of_jsbytes(str$59),
   _eb_=caml_string_of_jsbytes(str$59),
   _ec_=caml_string_of_jsbytes(str$59),
   _d__=[0,caml_string_of_jsbytes(str$59)],
   _d6_=caml_string_of_jsbytes(str$59),
   _d7_=caml_string_of_jsbytes(str$59),
   _d8_=caml_string_of_jsbytes(str$59),
   _d9_=caml_string_of_jsbytes(str$59),
   _d5_=[0,caml_string_of_jsbytes(str$59),0,caml_string_of_jsbytes(str$59)],
   _d4_=caml_string_of_jsbytes(str$59),
   _d3_=caml_string_of_jsbytes("Stdlib.Format.String_tag"),
   _eU_=[0,91],
   _eT_=[0,num_123],
   _eV_=caml_string_of_jsbytes("end of input not found"),
   _eW_=caml_string_of_jsbytes('scanf: bad conversion "%a"'),
   _eX_=caml_string_of_jsbytes('scanf: bad conversion "%t"'),
   _eY_=caml_string_of_jsbytes("scanf: missing reader"),
   _eZ_=[0,caml_string_of_jsbytes(str_scanf_ml),1453,13],
   _e0_=
    caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
   _e1_=caml_string_of_jsbytes(str_scanf_bad_conve_abr),
   _e3_=caml_string_of_jsbytes(str_scanf_bad_conve_abr),
   _e2_=caml_string_of_jsbytes('scanf: bad conversion "%-"'),
   _e4_=caml_string_of_jsbytes(str_scanf_bad_conve_abr),
   _e5_=caml_string_of_jsbytes(str$7),
   _e6_=caml_string_of_jsbytes(' in format "'),
   _eS_=[0,37,caml_string_of_jsbytes(str$59)],
   _eR_=
    [0,
     [11,
      caml_string_of_jsbytes("scanf: bad input at char number "),
      [4,3,0,0,[11,caml_string_of_jsbytes(str$47),[2,0,0]]]],
     caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
   _eQ_=
    [0,
     [11,
      caml_string_of_jsbytes("the character "),
      [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
     caml_string_of_jsbytes("the character %C cannot start a boolean")],
   _eN_=
    [0,
     [11,
      caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
      [0,[0,0]]],
     caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
   _eM_=
    [0,
     [11,
      caml_string_of_jsbytes("bad character decimal encoding \\"),
      [0,[0,[0,0]]]],
     caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
   _eJ_=caml_string_of_jsbytes(str_an),
   _eL_=caml_string_of_jsbytes(str_x$0),
   _eK_=caml_string_of_jsbytes("nfinity"),
   _eE_=caml_string_of_jsbytes("digits"),
   _eF_=
    [0,
     [11,
      caml_string_of_jsbytes(str_character),
      [1,
       [11,
        caml_string_of_jsbytes(" is not a valid "),
        [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
     caml_string_of_jsbytes("character %C is not a valid %s digit")],
   _eC_=caml_string_of_jsbytes("decimal digits"),
   _eD_=
    [0,
     [11,
      caml_string_of_jsbytes(str_character),
      [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
     caml_string_of_jsbytes("character %C is not a decimal digit")],
   _ey_=caml_string_of_jsbytes(str_0b),
   _ez_=caml_string_of_jsbytes(str_0o),
   _eA_=caml_string_of_jsbytes("0u"),
   _eB_=caml_string_of_jsbytes(str_0x),
   _ex_=[0,caml_string_of_jsbytes(str_scanf_ml),555,9],
   _eu_=caml_string_of_jsbytes(str_false),
   _ev_=caml_string_of_jsbytes(str_true),
   _ew_=
    [0,
     [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
     caml_string_of_jsbytes("invalid boolean '%s'")],
   _et_=
    [0,
     [11,
      caml_string_of_jsbytes("looking for "),
      [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
     caml_string_of_jsbytes("looking for %C, found %C")],
   _es_=caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
   _er_=caml_string_of_jsbytes("no dot or exponent part found in float token"),
   _eq_=
    [0,
     [11,
      caml_string_of_jsbytes(str_scanning_of),
      [2,
       0,
       [11,
        caml_string_of_jsbytes
         (" failed: premature end of file occurred before end of token"),
        0]]],
     caml_string_of_jsbytes
      ("scanning of %s failed: premature end of file occurred before end of token")],
   _ep_=
    [0,
     [11,
      caml_string_of_jsbytes(str_scanning_of),
      [2,
       0,
       [11,
        caml_string_of_jsbytes
         (" failed: the specified length was too short for token"),
        0]]],
     caml_string_of_jsbytes
      ("scanning of %s failed: the specified length was too short for token")],
   _eo_=
    [0,
     [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
     caml_string_of_jsbytes("illegal escape character %C")],
   _em_=caml_string_of_jsbytes(str$60),
   _en_=caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
   _eG_=caml_string_of_jsbytes("binary"),
   _eH_=caml_string_of_jsbytes("octal"),
   _eI_=caml_string_of_jsbytes("hexadecimal"),
   _eO_=caml_string_of_jsbytes("a Char"),
   _eP_=caml_string_of_jsbytes("a String"),
   _e8_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),281,50],
   _e7_=caml_string_of_jsbytes(str$59),
   _ff_=caml_string_of_jsbytes(str$59),
   _fd_=caml_string_of_jsbytes(str$33),
   _fc_=caml_string_of_jsbytes(".\\"),
   _fb_=caml_string_of_jsbytes("../"),
   _fa_=caml_string_of_jsbytes("..\\"),
   _e__=caml_string_of_jsbytes(str$59),
   _e9_=caml_string_of_jsbytes(str$59),
   _aMK_=caml_string_of_jsbytes("TMPDIR"),
   _e$_=caml_string_of_jsbytes("/tmp"),
   _aMI_=caml_string_of_jsbytes("TEMP"),
   _fe_=caml_string_of_jsbytes(str$48),
   _fg_=caml_string_of_jsbytes("Cygwin"),
   _fh_=caml_string_of_jsbytes("Win32"),
   _fp_=
    [0,
     [17,[0,caml_string_of_jsbytes(str$43),1,0],0],
     caml_string_of_jsbytes(str$43)],
   _fo_=[0,[12,32,0],caml_string_of_jsbytes(str$67)],
   _fn_=
    [0,[11,caml_string_of_jsbytes(str$75),0],caml_string_of_jsbytes(str$75)],
   _fq_=[0,[15,[4,6,0,[0,2],[15,0]]],caml_string_of_jsbytes("%a%.2x%a")],
   _fm_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Cstruct_blit_fro_abr),
      [15,
       [11,
        caml_string_of_jsbytes(str_dst),
        [15,
         [11,
          caml_string_of_jsbytes(" dst-off="),
          [4,0,0,0,[11,caml_string_of_jsbytes(str_len),[4,0,0,0,0]]]]]]]],
     caml_string_of_jsbytes
      ("Cstruct.blit_from_string src=%a dst=%a dst-off=%d len=%d")],
   _fl_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Cstruct_blit_fro_abr),
      [15,
       [11,
        caml_string_of_jsbytes(str_dst),
        [15,
         [11,
          caml_string_of_jsbytes(" src-off="),
          [4,0,0,0,[11,caml_string_of_jsbytes(str_len),[4,0,0,0,0]]]]]]]],
     caml_string_of_jsbytes
      ("Cstruct.blit_from_string src=%a dst=%a src-off=%d len=%d")],
   _fk_=
    [0,
     [11,caml_string_of_jsbytes("Cstruct.set_len "),[15,[12,32,[4,0,0,0,0]]]],
     caml_string_of_jsbytes("Cstruct.set_len %a %d")],
   _fj_=[0,[12,91,[4,0,0,0,[12,93,0]]],caml_string_of_jsbytes("[%d]")],
   _fi_=
    [0,
     [12,
      91,
      [4,
       0,
       0,
       0,
       [12,44,[4,0,0,0,[11,caml_string_of_jsbytes("]("),[4,0,0,0,[12,41,0]]]]]]],
     caml_string_of_jsbytes("[%d,%d](%d)")],
   _fr_=[0,[17,3,[15,[17,4,0]]],caml_string_of_jsbytes("@\n%a@.")],
   _fu_=
    [0,
     [11,caml_string_of_jsbytes(str_hex_conversion_abr),0],
     caml_string_of_jsbytes(str_hex_conversion_abr)],
   _ft_=caml_string_of_jsbytes(str$59),
   _fs_=
    [0,
     [11,
      caml_string_of_jsbytes("Hex.to_char: "),
      [4,0,0,0,[11,caml_string_of_jsbytes(" is an invalid char"),0]]],
     caml_string_of_jsbytes("Hex.to_char: %d is an invalid char")],
   _fv_=caml_string_of_jsbytes(str$59),
   _fw_=caml_string_of_jsbytes("Z.Overflow"),
   _fy_=caml_string_of_jsbytes(str_ml_z_overflow),
   _fz_=caml_string_of_jsbytes(str_d),
   _f9_=[0,caml_string_of_jsbytes(str_src_core_lwt_ml),2595,18],
   _f8_=[0,caml_string_of_jsbytes(str_src_core_lwt_ml),2582,13],
   _f7_=[0,0],
   _f6_=[0,0],
   _f4_=[0,1],
   _f5_=[0,1],
   _f3_=[0,1],
   _f1_=[0,0],
   _f2_=[0,1],
   _fZ_=[0,1],
   _f0_=[0,1],
   _fX_=[0,0],
   _fY_=[0,1],
   _fU_=[0,0],
   _fV_=[0,0],
   _fW_=[0,1],
   _fS_=[0,0],
   _fT_=[0,1],
   _fQ_=[0,0],
   _fR_=[0,0],
   _fP_=[0,0],
   _fO_=[0,0],
   _fN_=caml_string_of_jsbytes("wakeup_later_exn"),
   _fM_=caml_string_of_jsbytes("wakeup_later"),
   _fJ_=
    [0,
     [11,caml_string_of_jsbytes(str_Lwt),[2,0,0]],
     caml_string_of_jsbytes(str_Lwt_s)],
   _fK_=
    [0,
     [11,caml_string_of_jsbytes(str_Lwt),[2,0,0]],
     caml_string_of_jsbytes(str_Lwt_s)],
   _fL_=[0,1],
   _fG_=
    [0,
     [11,caml_string_of_jsbytes(str_Lwt),[2,0,0]],
     caml_string_of_jsbytes(str_Lwt_s)],
   _fH_=
    [0,
     [11,caml_string_of_jsbytes(str_Lwt),[2,0,0]],
     caml_string_of_jsbytes(str_Lwt_s)],
   _fI_=[0,0],
   _fE_=caml_string_of_jsbytes("Fatal error: exception "),
   _fC_=[0,caml_string_of_jsbytes(str_src_core_lwt_ml),994,23],
   _fD_=[0,caml_string_of_jsbytes(str_src_core_lwt_ml),995,22],
   _fF_=caml_string_of_jsbytes("Lwt.Resolution_loop.Canceled"),
   _gi_=caml_string_of_jsbytes("Lwt_stream.bounded_push#resize"),
   _ge_=caml_string_of_jsbytes(str$59),
   _gf_=caml_string_of_jsbytes(str$59),
   _gg_=caml_string_of_jsbytes(str$59),
   _gh_=caml_string_of_jsbytes(str$59),
   _gd_=caml_string_of_jsbytes("Lwt_stream.clone"),
   _f$_=
    [0,
     caml_string_of_jsbytes(str_size),
     caml_string_of_jsbytes(str_set_reference),
     caml_string_of_jsbytes(str_resize),
     caml_string_of_jsbytes(str_push),
     caml_string_of_jsbytes(str_count),
     caml_string_of_jsbytes(str_closed),
     caml_string_of_jsbytes(str_close),
     caml_string_of_jsbytes(str_blocked)],
   _ga_=[0,caml_string_of_jsbytes(str_closed)],
   _gb_=caml_string_of_jsbytes("Lwt_stream.Closed"),
   _gc_=caml_string_of_jsbytes("Lwt_stream.Full"),
   _gj_=caml_string_of_jsbytes(str_None),
   _go_=
    [0,
     [18,
      [1,
       [0,[11,caml_string_of_jsbytes(str_1),0],caml_string_of_jsbytes(str_1)]],
      [12,num_123,0]],
     caml_string_of_jsbytes("@[<1>{")],
   _gp_=[0,[12,num_125,[17,0,0]],caml_string_of_jsbytes("}@]")],
   _gn_=
    [0,
     [18,
      [1,
       [0,[11,caml_string_of_jsbytes(str_1),0],caml_string_of_jsbytes(str_1)]],
      [12,
       40,
       [15,
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [18,
          [1,[0,0,caml_string_of_jsbytes(str$59)]],
          [15,[17,0,[12,41,[17,0,0]]]]]]]]],
     caml_string_of_jsbytes("@[<1>(%a@ @[%a@])@]")],
   _gm_=
    [0,
     [11,caml_string_of_jsbytes("tag:"),[2,0,0]],
     caml_string_of_jsbytes("tag:%s")],
   _gl_=caml_string_of_jsbytes("undocumented"),
   _gk_=caml_string_of_jsbytes("Tezos_stdlib.Tag.Def(X).Me"),
   _gy_=caml_string_of_jsbytes(str$59),
   _gw_=caml_string_of_jsbytes(str$59),
   _gv_=caml_string_of_jsbytes(str$59),
   _gu_=caml_string_of_jsbytes(str$59),
   _gt_=caml_string_of_jsbytes(str$59),
   _gz_=caml_string_of_jsbytes("Stringext.Found_int"),
   _gA_=
    [0,
     [11,
      caml_string_of_jsbytes("Bigstringaf."),
      [2,
       0,
       [11,
        caml_string_of_jsbytes(" invalid range: { buffer_len: "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(", off: "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", len: "),
            [4,0,0,0,[11,caml_string_of_jsbytes(str$74),0]]]]]]]]],
     caml_string_of_jsbytes
      ("Bigstringaf.%s invalid range: { buffer_len: %d, off: %d, len: %d }")],
   _gD_=[1,caml_string_of_jsbytes("incomplete input")],
   _gB_=caml_string_of_jsbytes(str$47),
   _gC_=caml_string_of_jsbytes(" > "),
   _gE_=caml_string_of_jsbytes("prompt: input shrunk!"),
   _gM_=caml_string_of_jsbytes(str_count_while1),
   _gL_=caml_string_of_jsbytes(str_count_while1),
   _gP_=caml_string_of_jsbytes("count: n < 0"),
   _gO_=caml_string_of_jsbytes("no more choices"),
   _gN_=[1,caml_string_of_jsbytes(str_string)],
   _gK_=
    [0,
     [11,caml_string_of_jsbytes("char "),[1,0]],
     caml_string_of_jsbytes("char %C")],
   _gJ_=
    [0,
     [11,caml_string_of_jsbytes(str_satisfy),[1,0]],
     caml_string_of_jsbytes(str_satisfy_C)],
   _gI_=
    [0,
     [11,caml_string_of_jsbytes(str_satisfy),[1,0]],
     caml_string_of_jsbytes(str_satisfy_C)],
   _gH_=caml_string_of_jsbytes("end_of_input"),
   _gG_=caml_string_of_jsbytes(str_not_enough_input),
   _gF_=caml_string_of_jsbytes(str_not_enough_input),
   _hT_=[0,0,0],
   _ic_=caml_string_of_jsbytes(str$59),
   _h3_=caml_string_of_jsbytes(str$59),
   _hU_=caml_string_of_jsbytes(str$59),
   _hV_=caml_string_of_jsbytes(str$4),
   _hW_=caml_string_of_jsbytes(str$59),
   _hX_=caml_string_of_jsbytes(str$4),
   _hY_=caml_string_of_jsbytes(str$70),
   _hS_=caml_string_of_jsbytes("too many parts in IPv6 address"),
   _hR_=caml_string_of_jsbytes(str$59),
   _hQ_=[0,caml_string_of_jsbytes(str$59),0],
   _hO_=caml_string_of_jsbytes(str$48),
   _hP_=caml_string_of_jsbytes(str$48),
   _hM_=caml_string_of_jsbytes("invalid octect"),
   _hH_=caml_string_of_jsbytes(str$59),
   _hF_=caml_string_of_jsbytes(str$59),
   _hE_=caml_string_of_jsbytes(str$59),
   _hA_=caml_string_of_jsbytes(str$59),
   _hC_=
    [0,
     [11,caml_string_of_jsbytes("/?"),[2,0,0]],
     caml_string_of_jsbytes("/?%s")],
   _hD_=caml_string_of_jsbytes(str$13),
   _hB_=[0,[2,0,[12,63,[2,0,0]]],caml_string_of_jsbytes("%s?%s")],
   _hy_=caml_string_of_jsbytes(str$13),
   _hz_=caml_string_of_jsbytes(str$13),
   _hx_=caml_string_of_jsbytes(str$59),
   _hw_=caml_string_of_jsbytes(str_localhost),
   _hs_=caml_string_of_jsbytes(str$22),
   _ht_=caml_string_of_jsbytes(str$13),
   _hu_=caml_string_of_jsbytes(str$4),
   _hv_=caml_string_of_jsbytes(str$33),
   _hr_=[0,caml_string_of_jsbytes(str$59)],
   _ho_=caml_string_of_jsbytes(str$13),
   _hp_=caml_string_of_jsbytes(str$13),
   _hq_=[0,0],
   _hn_=caml_string_of_jsbytes(str$55),
   _hm_=caml_string_of_jsbytes("&"),
   _hi_=[0,caml_string_of_jsbytes(str$59),0],
   _hj_=[0,caml_string_of_jsbytes(str$59),0],
   _hk_=[0,2],
   _hl_=[0,[0,caml_string_of_jsbytes(str$59),0],0],
   _hh_=caml_string_of_jsbytes(str$13),
   _he_=caml_string_of_jsbytes(str$13),
   _hf_=caml_string_of_jsbytes(str$13),
   _hg_=caml_string_of_jsbytes(str$13),
   _hd_=caml_string_of_jsbytes(str$13),
   _hc_=caml_string_of_jsbytes(str$59),
   _g2_=caml_string_of_jsbytes(str$48),
   _g3_=caml_string_of_jsbytes(str$12),
   _g4_=caml_string_of_jsbytes(str$13),
   _g8_=caml_string_of_jsbytes(str$48),
   _g9_=caml_string_of_jsbytes(str$12),
   _g__=caml_string_of_jsbytes(str$13),
   _g$_=caml_string_of_jsbytes(str$13),
   _ha_=caml_string_of_jsbytes(str$13),
   _hb_=caml_string_of_jsbytes(str$13),
   _g5_=caml_string_of_jsbytes(str$12),
   _g6_=caml_string_of_jsbytes(str$13),
   _g7_=caml_string_of_jsbytes(str$13),
   _g0_=[0,2],
   _g1_=[0,caml_string_of_jsbytes(str$59),0],
   _gY_=caml_string_of_jsbytes(str_int_of_hex_char),
   _gZ_=caml_string_of_jsbytes(str_int_of_hex_char),
   _gX_=[0,[12,37,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes("%%%02X")],
   _gT_=caml_string_of_jsbytes(str_file),
   _gU_=caml_string_of_jsbytes(str_http),
   _gV_=caml_string_of_jsbytes("https"),
   _gW_=caml_string_of_jsbytes("urn"),
   _gR_=caml_string_of_jsbytes(str_localhost),
   _gS_=[0,caml_string_of_jsbytes(str$59)],
   _gQ_=[0,caml_string_of_jsbytes(str$13),0],
   _h8_=caml_string_of_jsbytes(str$59),
   _id_=[0,0,0,0],
   _ig_=caml_string_of_jsbytes(str$22),
   _iy_=[0,[12,44,0],caml_string_of_jsbytes(str$55)],
   _iF_=[0,[15,[12,58,[15,0]]],caml_string_of_jsbytes("%a:%a")],
   _iE_=[0,[12,44,0],caml_string_of_jsbytes(str$55)],
   _ix_=
    [0,
     [11,caml_string_of_jsbytes(str_null),0],
     caml_string_of_jsbytes(str_null)],
   _iB_=
    [0,
     [11,caml_string_of_jsbytes(str_true),0],
     caml_string_of_jsbytes(str_true)],
   _iA_=
    [0,
     [11,caml_string_of_jsbytes(str_false),0],
     caml_string_of_jsbytes(str_false)],
   _iC_=[0,[8,[0,0,0],0,[0,0],0],caml_string_of_jsbytes("%.0f")],
   _iD_=[0,[8,[0,0,3],0,0,0],caml_string_of_jsbytes(str_g)],
   _iG_=[0,[12,num_123,[15,[12,num_125,0]]],caml_string_of_jsbytes("{%a}")],
   _iz_=[0,[12,91,[15,[12,93,0]]],caml_string_of_jsbytes(str_a$1)],
   _iH_=
    [0,
     [12,44,[17,[0,caml_string_of_jsbytes(str$5),1,0],0]],
     caml_string_of_jsbytes(str$21)],
   _iL_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hov_2),0],
        caml_string_of_jsbytes(str_hov_2)]],
      [15,[12,58,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]]],
     caml_string_of_jsbytes("@[<hov 2>%a:@ %a@]")],
   _iK_=
    [0,
     [12,44,[17,[0,caml_string_of_jsbytes(str$5),1,0],0]],
     caml_string_of_jsbytes(str$21)],
   _iM_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hov_2),0],
        caml_string_of_jsbytes(str_hov_2)]],
      [11,
       caml_string_of_jsbytes(str$32),
       [15,[11,caml_string_of_jsbytes(str$74),[17,0,0]]]]],
     caml_string_of_jsbytes("@[<hov 2>{ %a }@]")],
   _iN_=
    [0,[11,caml_string_of_jsbytes(str$56),0],caml_string_of_jsbytes(str$56)],
   _iI_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hov_2),0],
        caml_string_of_jsbytes(str_hov_2)]],
      [11,
       caml_string_of_jsbytes(str$15),
       [15,[11,caml_string_of_jsbytes(str$72),[17,0,0]]]]],
     caml_string_of_jsbytes("@[<hov 2>[ %a ]@]")],
   _iJ_=
    [0,[11,caml_string_of_jsbytes(str$19),0],caml_string_of_jsbytes(str$19)],
   _in_=[0,[12,34,0],caml_string_of_jsbytes(str$7)],
   _ir_=[0,[0,0],caml_string_of_jsbytes(str_c)],
   _iq_=[0,[11,caml_string_of_jsbytes(str$6),0],caml_string_of_jsbytes(str$6)],
   _it_=[0,[11,caml_string_of_jsbytes(str_b),0],caml_string_of_jsbytes(str_b)],
   _iu_=[0,[11,caml_string_of_jsbytes(str_t),0],caml_string_of_jsbytes(str_t)],
   _iv_=[0,[11,caml_string_of_jsbytes(str_n),0],caml_string_of_jsbytes(str_n)],
   _iw_=[0,[11,caml_string_of_jsbytes(str_r),0],caml_string_of_jsbytes(str_r)],
   _ip_=
    [0,[11,caml_string_of_jsbytes(str$10),0],caml_string_of_jsbytes(str$10)],
   _is_=
    [0,
     [11,caml_string_of_jsbytes("\\u"),[4,6,[0,2,4],0,0]],
     caml_string_of_jsbytes("\\u%04x")],
   _io_=[0,[12,34,0],caml_string_of_jsbytes(str$7)],
   _jc_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Illegal pointer notation"),
       [17,
        [0,caml_string_of_jsbytes(str$31),0,0],
        [11,
         caml_string_of_jsbytes("At character "),
         [4,
          0,
          0,
          0,
          [11,
           caml_string_of_jsbytes(" of "),
           [3,0,[17,[0,caml_string_of_jsbytes(str$31),0,0],[2,0,[17,0,0]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Illegal pointer notation@,At character %d of %S@,%s@]")],
   _jd_=
    [0,
     [11,
      caml_string_of_jsbytes("Path operator "),
      [2,0,[11,caml_string_of_jsbytes(" unsupported by "),[2,0,0]]]],
     caml_string_of_jsbytes("Path operator %s unsupported by %s")],
   _je_=[0,1],
   _jf_=
    [0,
     [11,
      caml_string_of_jsbytes("Unmergeable objects, incompatibility at "),
      [15,0]],
     caml_string_of_jsbytes("Unmergeable objects, incompatibility at %a")],
   _jg_=
    [0,
     [11,caml_string_of_jsbytes(str_Unmergeable_objects),0],
     caml_string_of_jsbytes(str_Unmergeable_objects)],
   _jh_=
    [0,
     [11,caml_string_of_jsbytes("Unhandled error "),[2,0,0]],
     caml_string_of_jsbytes("Unhandled error %s")],
   _i__=caml_string_of_jsbytes("wildcard"),
   _i$_=caml_string_of_jsbytes("array append"),
   _ja_=caml_string_of_jsbytes("field access"),
   _jb_=caml_string_of_jsbytes("array access"),
   _i9_=[0,caml_string_of_jsbytes("src/json_query.ml"),num_174,29],
   _i4_=caml_string_of_jsbytes("Unterminated escape sequence"),
   _i5_=caml_string_of_jsbytes("Illegal escape character"),
   _i6_=caml_string_of_jsbytes(str$60),
   _i7_=caml_string_of_jsbytes(str_JSON_pointer_w_o_abr),
   _i8_=caml_string_of_jsbytes("Missing initial slash"),
   _i3_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _iX_=caml_string_of_jsbytes("JSON pointer"),
   _iY_=
    [0,
     [11,caml_string_of_jsbytes("/-"),[15,0]],
     caml_string_of_jsbytes("/-%a")],
   _iZ_=caml_string_of_jsbytes(str_JSON_pointer_w_o_abr),
   _i0_=[0,[12,47,[2,0,[15,0]]],caml_string_of_jsbytes(str_s_a)],
   _i1_=[0,[12,47,[4,0,0,0,[15,0]]],caml_string_of_jsbytes("/%d%a")],
   _i2_=[0,[12,47,0],caml_string_of_jsbytes(str$13)],
   _iR_=[0,[12,42,[15,0]],caml_string_of_jsbytes("*%a")],
   _iT_=[0,[12,45,[15,0]],caml_string_of_jsbytes("-%a")],
   _iU_=[0,[12,47,[2,0,[15,0]]],caml_string_of_jsbytes(str_s_a)],
   _iV_=[0,[12,91,[4,0,0,0,[12,93,[15,0]]]],caml_string_of_jsbytes("[%d]%a")],
   _iS_=caml_string_of_jsbytes("JSON path w/o wildcards"),
   _iW_=[0,[12,47,0],caml_string_of_jsbytes(str$13)],
   _iO_=caml_string_of_jsbytes("Json_query.Illegal_pointer_notation"),
   _iP_=caml_string_of_jsbytes("Json_query.Unsupported_path_item"),
   _iQ_=caml_string_of_jsbytes("Json_query.Cannot_merge"),
   _kb_=[0,[12,47,[2,0,[12,47,0]]],caml_string_of_jsbytes(str_s$0)],
   _kc_=
    [0,
     [11,caml_string_of_jsbytes(str_string),0],
     caml_string_of_jsbytes(str_string)],
   _ka_=
    [0,
     [4,0,0,0,[11,caml_string_of_jsbytes(str$37),0]],
     caml_string_of_jsbytes("%d <= ")],
   _j$_=
    [0,
     [11,caml_string_of_jsbytes("<= "),[4,0,0,0,0]],
     caml_string_of_jsbytes("<= %d")],
   _j2_=
    [0,
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,caml_string_of_jsbytes(str$29),0]],
     caml_string_of_jsbytes(str$49)],
   _j3_=
    [0,
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,caml_string_of_jsbytes("|| "),0]],
     caml_string_of_jsbytes("@ || ")],
   _j4_=
    [0,
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,caml_string_of_jsbytes("&& "),0]],
     caml_string_of_jsbytes("@ && ")],
   _j5_=[0,caml_string_of_jsbytes(str_src_json_schema_ml),num_314,23],
   _jV_=[0,[15,[15,0]],caml_string_of_jsbytes("%a%a")],
   _jT_=
    [0,
     [12,44,[17,[0,caml_string_of_jsbytes(str$5),1,0],0]],
     caml_string_of_jsbytes(str$21)],
   _jH_=
    [0,
     [17,
      [0,caml_string_of_jsbytes(str$5),1,0],
      [11,caml_string_of_jsbytes(str$29),0]],
     caml_string_of_jsbytes(str$49)],
   _jF_=[0,[12,35,[2,0,0]],caml_string_of_jsbytes(str_s)],
   _jG_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _jI_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hv_0),0],
        caml_string_of_jsbytes(str_hv_0)]],
      [15,[17,0,0]]],
     caml_string_of_jsbytes(str_hv_0_a)],
   _jK_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str$32),
       [15,
        [17,
         [0,caml_string_of_jsbytes(str$31),0,0],
         [15,[11,caml_string_of_jsbytes(str$74),[17,0,0]]]]]]],
     caml_string_of_jsbytes("@[<v 2>{ %a@,%a }@]")],
   _jL_=
    [0,
     [15,[17,[0,caml_string_of_jsbytes(str$31),0,0],[15,0]]],
     caml_string_of_jsbytes("%a@,%a")],
   _jJ_=
    [0,
     [15,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,0]]],
     caml_string_of_jsbytes("%a@ %a")],
   _jM_=
    [0,
     [11,caml_string_of_jsbytes(str_boolean),0],
     caml_string_of_jsbytes(str_boolean)],
   _jN_=
    [0,
     [11,caml_string_of_jsbytes(str_null),0],
     caml_string_of_jsbytes(str_null)],
   _jO_=
    [0,[11,caml_string_of_jsbytes(str_any),0],caml_string_of_jsbytes(str_any)],
   _jP_=[0,caml_string_of_jsbytes(str_src_json_schema_ml),num_306,23],
   _jR_=
    [0,[11,caml_string_of_jsbytes(str$56),0],caml_string_of_jsbytes(str$56)],
   _jQ_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str$32),
       [15,[11,caml_string_of_jsbytes(str$74),[17,0,0]]]]],
     caml_string_of_jsbytes("@[<v 2>{ %a }@]")],
   _jU_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hv_2),0],
        caml_string_of_jsbytes(str_hv_2)]],
      [11,caml_string_of_jsbytes(str$15),0]],
     caml_string_of_jsbytes("@[<hv 2>[ ")],
   _jW_=
    [0,
     [15,
      [12,
       44,
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,caml_string_of_jsbytes(str$68),0]]]],
     caml_string_of_jsbytes("%a,@ ...")],
   _jY_=
    [0,
     [15,
      [12,
       44,
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [15,[11,caml_string_of_jsbytes(" ..."),0]]]]],
     caml_string_of_jsbytes("%a,@ %a ...")],
   _jX_=
    [0,
     [11,caml_string_of_jsbytes(str$72),[17,0,0]],
     caml_string_of_jsbytes(" ]@]")],
   _jZ_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hv_2),0],
        caml_string_of_jsbytes(str_hv_2)]],
      [11,
       caml_string_of_jsbytes(str$15),
       [15,
        [11,
         caml_string_of_jsbytes(str$11),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,caml_string_of_jsbytes("... ]"),[17,0,0]]]]]]],
     caml_string_of_jsbytes("@[<hv 2>[ %a ...,@ ... ]@]")],
   _j0_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hv_2),0],
        caml_string_of_jsbytes(str_hv_2)]],
      [11,
       caml_string_of_jsbytes(str$15),
       [15,
        [11,
         caml_string_of_jsbytes(str$11),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [15,[11,caml_string_of_jsbytes(str$65),[17,0,0]]]]]]]],
     caml_string_of_jsbytes("@[<hv 2>[ %a ...,@ %a ... ]@]")],
   _j1_=
    [0,
     [11,
      caml_string_of_jsbytes(str$15),
      [15,[11,caml_string_of_jsbytes(str$65),0]]],
     caml_string_of_jsbytes("[ %a ... ]")],
   _j7_=
    [0,
     [11,caml_string_of_jsbytes("! "),[15,0]],
     caml_string_of_jsbytes("! %a")],
   _j6_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_hv_0),0],
        caml_string_of_jsbytes(str_hv_0)]],
      [15,[17,0,0]]],
     caml_string_of_jsbytes(str_hv_0_a)],
   _j8_=[0,[12,36,[15,0]],caml_string_of_jsbytes(str_a$0)],
   _j9_=[0,[12,35,[2,0,0]],caml_string_of_jsbytes(str_s)],
   _j__=[0,[12,36,[15,0]],caml_string_of_jsbytes(str_a$0)],
   _ke_=[0,[12,47,[2,0,[12,47,0]]],caml_string_of_jsbytes(str_s$0)],
   _kf_=
    [0,
     [11,caml_string_of_jsbytes(str_string),0],
     caml_string_of_jsbytes(str_string)],
   _kd_=
    [0,
     [15,
      [11,
       caml_string_of_jsbytes(str$36),
       [15,[11,caml_string_of_jsbytes(str_length),[15,[12,41,0]]]]]],
     caml_string_of_jsbytes("%a (%alength%a)")],
   _kh_=
    [0,
     [11,caml_string_of_jsbytes(str_integer),0],
     caml_string_of_jsbytes(str_integer)],
   _kg_=
    [0,
     [11,caml_string_of_jsbytes("integer "),[15,0]],
     caml_string_of_jsbytes("integer %a")],
   _kj_=
    [0,
     [11,caml_string_of_jsbytes(str_number),0],
     caml_string_of_jsbytes(str_number)],
   _ki_=
    [0,
     [11,caml_string_of_jsbytes("number "),[15,0]],
     caml_string_of_jsbytes("number %a")],
   _jS_=
    [0,[11,caml_string_of_jsbytes(str$19),0],caml_string_of_jsbytes(str$19)],
   _ko_=
    [0,
     [15,
      [18,
       [1,
        [0,
         [11,caml_string_of_jsbytes(str_hv_2),0],
         caml_string_of_jsbytes(str_hv_2)]],
       [12,
        47,
        [2,
         0,
         [11,
          caml_string_of_jsbytes("/:"),
          [17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]]]]],
     caml_string_of_jsbytes("%a@[<hv 2>/%s/:@ %a@]")],
   _kl_=caml_string_of_jsbytes(str$59),
   _kn_=caml_string_of_jsbytes("?"),
   _km_=
    [0,
     [15,
      [18,
       [1,
        [0,
         [11,caml_string_of_jsbytes(str_hv_2),0],
         caml_string_of_jsbytes(str_hv_2)]],
       [15,
        [2,0,[12,58,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]]]]],
     caml_string_of_jsbytes("%a@[<hv 2>%a%s:@ %a@]")],
   _kk_=
    [0,
     [12,44,[17,[0,caml_string_of_jsbytes(str$5),1,0],0]],
     caml_string_of_jsbytes(str$21)],
   _kp_=
    [0,
     [15,[11,caml_string_of_jsbytes(str$68),0]],
     caml_string_of_jsbytes("%a...")],
   _kq_=
    [0,
     [15,
      [18,
       [1,
        [0,
         [11,caml_string_of_jsbytes(str_hv_2),0],
         caml_string_of_jsbytes(str_hv_2)]],
       [11,
        caml_string_of_jsbytes("*:"),
        [17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]]],
     caml_string_of_jsbytes("%a@[<hv 2>*:@ %a@]")],
   _kw_=[0,1],
   _kx_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Schema parse error:"),
       [17,
        [0,caml_string_of_jsbytes(str$31),0,0],
        [11,
         caml_string_of_jsbytes(str_At),
         [15,[17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,0]]]]]]]],
     caml_string_of_jsbytes("@[<v 2>Schema parse error:@,At %a@,%a@]")],
   _ky_=
    [0,
     [11,caml_string_of_jsbytes("Dangling reference "),[2,0,0]],
     caml_string_of_jsbytes("Dangling reference %s")],
   _kz_=
    [0,
     [11,caml_string_of_jsbytes("Illegal reference notation "),[2,0,0]],
     caml_string_of_jsbytes("Illegal reference notation %s")],
   _kA_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Unexpected),
      [2,0,[11,caml_string_of_jsbytes(str_instead_of),[2,0,0]]]],
     caml_string_of_jsbytes(str_Unexpected_s_in_abr)],
   _kB_=[0,0],
   _kC_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Duplicate definition "),
       [15,
        [17,
         [0,caml_string_of_jsbytes(str$31),0,0],
         [11,
          caml_string_of_jsbytes("To be inserted:"),
          [17,
           [0,caml_string_of_jsbytes(str$31),0,0],
           [11,
            caml_string_of_jsbytes(str$75),
            [18,
             [1,[0,partial$0,caml_string_of_jsbytes(str_v_0)]],
             [15,[17,0,partial$1]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Duplicate definition %a@,To be inserted:@,  @[<v 0>%a@]@,Already present:@,  @[<v 0>%a@]@]")],
   _nl_=[0,caml_string_of_jsbytes(str_src_json_schema_ml),1188,36],
   _nk_=caml_string_of_jsbytes("/definitions/"),
   _nj_=[0,0],
   _l5_=[0,0],
   _l6_=caml_string_of_jsbytes(" has no fragment"),
   _md_=caml_string_of_jsbytes("a list of elements"),
   _mn_=caml_string_of_jsbytes(str_type),
   _mo_=caml_string_of_jsbytes(str_type),
   _l7_=caml_string_of_jsbytes(str_id),
   _l8_=caml_string_of_jsbytes(str_http),
   _l9_=caml_string_of_jsbytes(" is not a valid ID"),
   _l__=caml_string_of_jsbytes(str_id),
   _l$_=caml_string_of_jsbytes(str_type),
   _mp_=caml_string_of_jsbytes(str_type_type_array_abr),
   _mq_=caml_string_of_jsbytes(str_type),
   _ma_=caml_string_of_jsbytes(str_type_type_array_abr),
   _mb_=caml_string_of_jsbytes(str_type),
   _mc_=caml_string_of_jsbytes(str_ref),
   _me_=caml_string_of_jsbytes(str_not),
   _mf_=caml_string_of_jsbytes(str_not),
   _mg_=caml_string_of_jsbytes(str_title),
   _mh_=caml_string_of_jsbytes(str_description),
   _mi_=caml_string_of_jsbytes(str_enum),
   _mj_=caml_string_of_jsbytes(str_format),
   _mk_=caml_string_of_jsbytes(str_oneOf),
   _ml_=caml_string_of_jsbytes(str_anyOf),
   _mm_=caml_string_of_jsbytes(str_allOf),
   _ng_=caml_string_of_jsbytes(str_items),
   _m6_=caml_string_of_jsbytes(str_object),
   _m4_=caml_string_of_jsbytes(str_string),
   _m5_=caml_string_of_jsbytes(str_propertyDependen_abr),
   _m2_=caml_string_of_jsbytes("string array"),
   _m3_=caml_string_of_jsbytes(str_propertyDependen_abr),
   _mW_=caml_string_of_jsbytes(str_properties),
   _mR_=caml_string_of_jsbytes(str_string),
   _mS_=caml_string_of_jsbytes(str_required),
   _my_=caml_string_of_jsbytes(str_multipleOf),
   _mz_=caml_string_of_jsbytes(str_exclusiveMinimum),
   _mA_=caml_string_of_jsbytes(str_minimum),
   _mE_=caml_string_of_jsbytes(str_minimum),
   _mB_=caml_string_of_jsbytes(str_exclusiveMaximum),
   _mC_=caml_string_of_jsbytes(str_maximum),
   _mD_=caml_string_of_jsbytes(str_maximum),
   _mr_=caml_string_of_jsbytes(str_multipleOf),
   _ms_=caml_string_of_jsbytes(str_exclusiveMinimum),
   _mt_=caml_string_of_jsbytes(str_minimum),
   _mx_=caml_string_of_jsbytes(str_minimum),
   _mu_=caml_string_of_jsbytes(str_exclusiveMaximum),
   _mv_=caml_string_of_jsbytes(str_maximum),
   _mw_=caml_string_of_jsbytes(str_maximum),
   _mF_=caml_string_of_jsbytes(str_array),
   _mG_=caml_string_of_jsbytes(str_boolean),
   _mH_=caml_string_of_jsbytes(str_integer),
   _mI_=caml_string_of_jsbytes(str_null),
   _mJ_=caml_string_of_jsbytes(str_number),
   _mK_=caml_string_of_jsbytes(str_object),
   _mL_=caml_string_of_jsbytes(str_string),
   _mN_=caml_string_of_jsbytes(str_pattern),
   _mO_=caml_string_of_jsbytes(str_minLength),
   _mP_=caml_string_of_jsbytes(str_maxLength),
   _mQ_=caml_string_of_jsbytes(str_required),
   _mT_=caml_string_of_jsbytes(str_properties),
   _mU_=caml_string_of_jsbytes(str_object),
   _mV_=caml_string_of_jsbytes(str_properties),
   _mX_=caml_string_of_jsbytes(str_additionalProper_abr),
   _mY_=caml_string_of_jsbytes(str_additionalProper_abr),
   _mZ_=caml_string_of_jsbytes(str_propertyDependen_abr),
   _m0_=caml_string_of_jsbytes(str_object),
   _m1_=caml_string_of_jsbytes(str_propertyDependen_abr),
   _m7_=caml_string_of_jsbytes(str_patternProperties),
   _m8_=caml_string_of_jsbytes(str_schemaDependencies),
   _m9_=caml_string_of_jsbytes(str_minProperties),
   _m__=caml_string_of_jsbytes(str_maxProperties),
   _m$_=caml_string_of_jsbytes(str_uniqueItems),
   _na_=caml_string_of_jsbytes(str_minItems),
   _nb_=caml_string_of_jsbytes(str_maxItems),
   _nc_=caml_string_of_jsbytes(str_additionalItems),
   _nd_=caml_string_of_jsbytes(str_additionalItems),
   _ne_=caml_string_of_jsbytes(str_items),
   _nf_=caml_string_of_jsbytes(str_items),
   _mM_=caml_string_of_jsbytes("a known type"),
   _ni_=caml_string_of_jsbytes("#/definitions/"),
   _l3_=caml_string_of_jsbytes(" is not a valid URI"),
   _l2_=caml_string_of_jsbytes(str_array),
   _l1_=caml_string_of_jsbytes(str_number),
   _l0_=caml_string_of_jsbytes(str_length),
   _lZ_=caml_string_of_jsbytes(str_integer),
   _lY_=caml_string_of_jsbytes(str_bool),
   _lX_=caml_string_of_jsbytes(str_string),
   _l4_=caml_string_of_jsbytes(str_id),
   _nh_=[0,[0,num_331416730,caml_string_of_jsbytes(str_definitions)],0],
   _lN_=caml_string_of_jsbytes(str_null),
   _lQ_=caml_string_of_jsbytes(str_boolean),
   _lR_=caml_string_of_jsbytes(str_number),
   _lS_=caml_string_of_jsbytes(str_object),
   _lT_=caml_string_of_jsbytes(str_empty_object),
   _lU_=caml_string_of_jsbytes(str$59),
   _lW_=caml_string_of_jsbytes("empty string"),
   _lV_=caml_string_of_jsbytes(str_string),
   _lO_=caml_string_of_jsbytes(str_array),
   _lP_=caml_string_of_jsbytes(str_empty_array),
   _lc_=caml_string_of_jsbytes(str_anyOf),
   _ld_=caml_string_of_jsbytes(str_oneOf),
   _le_=caml_string_of_jsbytes(str_allOf),
   _lf_=caml_string_of_jsbytes(str_not),
   _k0_=[0,num_737456202,0],
   _kT_=[0,num_737456202,0],
   _kF_=caml_string_of_jsbytes(str_format),
   _kG_=caml_string_of_jsbytes(str_enum),
   _kH_=caml_string_of_jsbytes(str_default),
   _kI_=[0,num_976970511,caml_string_of_jsbytes(str_boolean)],
   _kJ_=caml_string_of_jsbytes(str_type),
   _kM_=[0,num_976970511,caml_string_of_jsbytes(str_null)],
   _kN_=caml_string_of_jsbytes(str_type),
   _kO_=caml_string_of_jsbytes("Json_schema.to_json: remaining dummy element"),
   _kP_=caml_string_of_jsbytes(str_propertyDependen_abr),
   _kQ_=caml_string_of_jsbytes(str_schemaDependencies),
   _kR_=caml_string_of_jsbytes(str_maxProperties),
   _kS_=caml_string_of_jsbytes(str_minProperties),
   _kU_=caml_string_of_jsbytes(str_additionalProper_abr),
   _kV_=caml_string_of_jsbytes(str_patternProperties),
   _kW_=caml_string_of_jsbytes(str_required),
   _kX_=caml_string_of_jsbytes(str_properties),
   _kY_=[0,num_976970511,caml_string_of_jsbytes(str_object)],
   _kZ_=caml_string_of_jsbytes(str_type),
   _k1_=caml_string_of_jsbytes(str_additionalItems),
   _k2_=caml_string_of_jsbytes(str_uniqueItems),
   _k3_=caml_string_of_jsbytes(str_maxItems),
   _k4_=caml_string_of_jsbytes(str_minItems),
   _k5_=caml_string_of_jsbytes(str_items),
   _k6_=[0,num_976970511,caml_string_of_jsbytes(str_array)],
   _k7_=caml_string_of_jsbytes(str_type),
   _k8_=caml_string_of_jsbytes(str_uniqueItems),
   _k9_=caml_string_of_jsbytes(str_maxItems),
   _k__=caml_string_of_jsbytes(str_minItems),
   _k$_=caml_string_of_jsbytes(str_items),
   _la_=[0,num_976970511,caml_string_of_jsbytes(str_array)],
   _lb_=caml_string_of_jsbytes(str_type),
   _lg_=caml_string_of_jsbytes(str$0),
   _lh_=caml_string_of_jsbytes(str_ref),
   _li_=caml_string_of_jsbytes(str$0),
   _lj_=caml_string_of_jsbytes(str_ref),
   _lk_=caml_string_of_jsbytes(str_ref),
   _ll_=caml_string_of_jsbytes(str_pattern),
   _lm_=caml_string_of_jsbytes(str_maxLength),
   _ln_=caml_string_of_jsbytes(str_minLength),
   _lo_=[0,num_976970511,caml_string_of_jsbytes(str_string)],
   _lp_=caml_string_of_jsbytes(str_type),
   _lq_=caml_string_of_jsbytes(str_maximum),
   _ly_=[0,num_737456202,1],
   _lz_=caml_string_of_jsbytes(str_exclusiveMaximum),
   _lA_=caml_string_of_jsbytes(str_maximum),
   _lr_=caml_string_of_jsbytes(str_minimum),
   _lv_=[0,num_737456202,1],
   _lw_=caml_string_of_jsbytes(str_exclusiveMinimum),
   _lx_=caml_string_of_jsbytes(str_minimum),
   _ls_=caml_string_of_jsbytes(str_multipleOf),
   _lt_=[0,num_976970511,caml_string_of_jsbytes(str_integer)],
   _lu_=caml_string_of_jsbytes(str_type),
   _lB_=caml_string_of_jsbytes(str_maximum),
   _lJ_=[0,num_737456202,1],
   _lK_=caml_string_of_jsbytes(str_exclusiveMaximum),
   _lL_=caml_string_of_jsbytes(str_maximum),
   _lC_=caml_string_of_jsbytes(str_minimum),
   _lG_=[0,num_737456202,1],
   _lH_=caml_string_of_jsbytes(str_exclusiveMinimum),
   _lI_=caml_string_of_jsbytes(str_minimum),
   _lD_=caml_string_of_jsbytes(str_multipleOf),
   _lE_=[0,num_976970511,caml_string_of_jsbytes(str_number)],
   _lF_=caml_string_of_jsbytes(str_type),
   _kK_=caml_string_of_jsbytes(str_description),
   _kL_=caml_string_of_jsbytes(str_title),
   _lM_=caml_string_of_jsbytes("$schema"),
   _jE_=
    [0,
     [11,
      caml_string_of_jsbytes(str$52),
      [18,
       [1,
        [0,
         [11,caml_string_of_jsbytes(str_hov_0),0],
         caml_string_of_jsbytes(str_hov_0)]],
       [15,[17,0,[11,caml_string_of_jsbytes(str$66),0]]]]],
     caml_string_of_jsbytes("/* @[<hov 0>%a@] */")],
   _jD_=
    [0,
     [11,
      caml_string_of_jsbytes(str$52),
      [18,
       [1,
        [0,
         [11,caml_string_of_jsbytes(str_v_0),0],
         caml_string_of_jsbytes(str_v_0)]],
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes(str_hov_0),0],
          caml_string_of_jsbytes(str_hov_0)]],
        [15,
         [17,
          0,
          [17,
           [0,caml_string_of_jsbytes(str$31),0,0],
           [18,
            [1,
             [0,
              [11,caml_string_of_jsbytes(str_hov_0),0],
              caml_string_of_jsbytes(str_hov_0)]],
            [15,[17,0,[17,0,partial$2]]]]]]]]]],
     caml_string_of_jsbytes("/* @[<v 0>@[<hov 0>%a@]@,@[<hov 0>%a@]@] */")],
   _jB_=caml_string_of_jsbytes(str_definitions),
   _jC_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _jA_=[0,1],
   _jy_=
    [0,
     [11,caml_string_of_jsbytes("multiple of "),[8,[0,0,3],0,0,0]],
     caml_string_of_jsbytes("multiple of %g")],
   _jx_=
    [0,[11,caml_string_of_jsbytes(str$50),0],caml_string_of_jsbytes(str$50)],
   _jt_=[0,[12,91,[15,0]],caml_string_of_jsbytes("[%a")],
   _ju_=[0,[12,93,[15,0]],caml_string_of_jsbytes("]%a")],
   _jv_=
    [0,[11,caml_string_of_jsbytes(str$16),0],caml_string_of_jsbytes(str$16)],
   _jq_=[0,[15,[12,93,0]],caml_string_of_jsbytes("%a]")],
   _jr_=[0,[15,[12,91,0]],caml_string_of_jsbytes("%a[")],
   _js_=
    [0,[11,caml_string_of_jsbytes(str$54),0],caml_string_of_jsbytes(str$54)],
   _jw_=
    [0,
     [11,
      caml_string_of_jsbytes("\xe2\x88\x88 "),
      [15,[11,caml_string_of_jsbytes(str$50),[15,0]]]],
     caml_string_of_jsbytes("\xe2\x88\x88 %a, %a")],
   _jz_=[0,[15,[15,[15,0]]],caml_string_of_jsbytes("%a%a%a")],
   _jk_=caml_string_of_jsbytes(str$59),
   _jo_=caml_string_of_jsbytes(str$60),
   _jl_=
    [0,
     [2,0,[11,caml_string_of_jsbytes("2^"),[8,[0,0,3],0,0,0]]],
     caml_string_of_jsbytes("%s2^%g")],
   _jm_=[0,[12,43,[8,[0,0,3],0,0,0]],caml_string_of_jsbytes("+%g")],
   _jn_=[0,[12,45,[8,[0,0,3],0,0,0]],caml_string_of_jsbytes("-%g")],
   _ji_=[0,[8,[0,0,3],0,0,0],caml_string_of_jsbytes(str_g)],
   _jj_=[0,-2.,[0,-1.,[0,0.,[0,1.,[0,2.,0]]]]],
   _jp_=[0,[8,[0,0,0],0,0,0],caml_string_of_jsbytes(str_f)],
   _kr_=caml_string_of_jsbytes("Json_schema.Cannot_parse"),
   _ks_=caml_string_of_jsbytes("Json_schema.Dangling_reference"),
   _kt_=caml_string_of_jsbytes("Json_schema.Bad_reference"),
   _ku_=caml_string_of_jsbytes("Json_schema.Unexpected"),
   _kv_=caml_string_of_jsbytes("Json_schema.Duplicate_definition"),
   _ot_=[0,1],
   _ou_=
    [0,
     [11,
      caml_string_of_jsbytes(str_At),
      [15,
       [11,
        caml_string_of_jsbytes(", unexpected "),
        [2,0,[11,caml_string_of_jsbytes(str_instead_of),[2,0,0]]]]]],
     caml_string_of_jsbytes("At %a, unexpected %s instead of %s")],
   _ov_=[0,1],
   _ow_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str_At),
       [15,
        [11,
         caml_string_of_jsbytes(", no case matched:"),
         [17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,0]]]]]]],
     caml_string_of_jsbytes("@[<v 2>At %a, no case matched:@,%a@]")],
   _ox_=[0,1],
   _oy_=
    [0,
     [11,
      caml_string_of_jsbytes(str_At),
      [15,
       [11,
        caml_string_of_jsbytes(", unexpected array of size "),
        [4,0,0,0,[11,caml_string_of_jsbytes(str_instead_of),[4,0,0,0,0]]]]]],
     caml_string_of_jsbytes
      ("At %a, unexpected array of size %d instead of %d")],
   _oz_=[0,1],
   _oA_=
    [0,
     [11,
      caml_string_of_jsbytes(str_At),
      [15,[11,caml_string_of_jsbytes(", missing object field "),[2,0,0]]]],
     caml_string_of_jsbytes("At %a, missing object field %s")],
   _oB_=[0,1],
   _oC_=
    [0,
     [11,
      caml_string_of_jsbytes(str_At),
      [15,[11,caml_string_of_jsbytes(", unexpected object field "),[2,0,0]]]],
     caml_string_of_jsbytes("At %a, unexpected object field %s")],
   _oD_=[0,1],
   _oE_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str_At),
       [15,
        [11,
         caml_string_of_jsbytes(", bad custom schema:"),
         [17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,0]]]]]]],
     caml_string_of_jsbytes("@[<v 2>At %a, bad custom schema:@,%a@]")],
   _oM_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Unexpected),
      [2,0,[11,caml_string_of_jsbytes(str_instead_of),[2,0,0]]]],
     caml_string_of_jsbytes(str_Unexpected_s_in_abr)],
   _oF_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("No case matched:"),
       [17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,0]]]]],
     caml_string_of_jsbytes("@[<v 2>No case matched:@,%a@]")],
   _oG_=
    [0,
     [11,
      caml_string_of_jsbytes("Unexpected array of size "),
      [4,0,0,0,[11,caml_string_of_jsbytes(str_instead_of),[4,0,0,0,0]]]],
     caml_string_of_jsbytes("Unexpected array of size %d instead of %d")],
   _oH_=
    [0,
     [11,caml_string_of_jsbytes("Missing object field "),[2,0,0]],
     caml_string_of_jsbytes("Missing object field %s")],
   _oI_=
    [0,
     [11,caml_string_of_jsbytes("Unexpected object field "),[2,0,0]],
     caml_string_of_jsbytes("Unexpected object field %s")],
   _oJ_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("bad custom schema:"),
       [17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,0]]]]],
     caml_string_of_jsbytes("@[<v 2>bad custom schema:@,%a@]")],
   _oK_=[0,1],
   _oL_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str_At),
       [15,[12,58,[17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,0]]]]]]],
     caml_string_of_jsbytes("@[<v 2>At %a:@,%a@]")],
   _os_=caml_string_of_jsbytes("Json_encoding.union"),
   _or_=caml_string_of_jsbytes(str_Json_encoding_me_abr),
   _oq_=caml_string_of_jsbytes("Json_encoding.merge_tups"),
   _oo_=caml_string_of_jsbytes("asssociative object"),
   _on_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("Json_encoding.construct: consequence of non exhaustive Json_encoding.string_enum. Strings are: "),
      [2,0,0]],
     caml_string_of_jsbytes
      ("Json_encoding.construct: consequence of non exhaustive Json_encoding.string_enum. Strings are: %s")],
   _oh_=
    [0,
     [3,0,[11,caml_string_of_jsbytes(" , "),[15,0]]],
     caml_string_of_jsbytes("%S , %a")],
   _oi_=
    [0,
     [3,0,[11,caml_string_of_jsbytes(" or "),[3,0,0]]],
     caml_string_of_jsbytes("%S or %S")],
   _oj_=[0,[3,0,0],caml_string_of_jsbytes(str_S)],
   _ok_=[0,caml_string_of_jsbytes(str_src_json_encodin_abr),748,20],
   _ol_=
    [0,
     [11,caml_string_of_jsbytes("string value "),[3,0,0]],
     caml_string_of_jsbytes("string value %S")],
   _om_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _og_=caml_string_of_jsbytes("Json_encoding.string_enum: duplicate case"),
   _od_=caml_string_of_jsbytes(str$46),
   _oe_=caml_string_of_jsbytes(str$46),
   _of_=caml_string_of_jsbytes(str$67),
   _n3_=[0,[0,0,0],0],
   _n4_=[0,[0,0,1],0],
   _n5_=caml_string_of_jsbytes("Json_encoding.schema: empty union in object"),
   _n2_=
    caml_string_of_jsbytes
     ("Json_encoding.schema: consequence of bad merge_objs"),
   _n6_=
    caml_string_of_jsbytes
     ("Json_encoding.schema: consequence of bad merge_tups"),
   _n8_=[0,caml_string_of_jsbytes(str_src_json_encodin_abr),num_511,40],
   _n7_=[0,caml_string_of_jsbytes(str_src_json_encodin_abr),num_512,37],
   _nZ_=caml_string_of_jsbytes(str_array),
   _nY_=caml_string_of_jsbytes(str_array),
   _nX_=caml_string_of_jsbytes(str_object),
   _nW_=caml_string_of_jsbytes(str_object),
   _nV_=caml_string_of_jsbytes(str_array),
   _nU_=caml_string_of_jsbytes(str_float),
   _nT_=caml_string_of_jsbytes(str_out_of_range),
   _nS_=caml_string_of_jsbytes(str_float),
   _nQ_=caml_string_of_jsbytes(" cannot have a fractional part"),
   _nR_=caml_string_of_jsbytes(str_out_of_range),
   _nP_=caml_string_of_jsbytes(str_number),
   _nO_=caml_string_of_jsbytes(str_string),
   _nN_=caml_string_of_jsbytes(str_boolean),
   _nM_=caml_string_of_jsbytes("an empty object"),
   _nL_=caml_string_of_jsbytes(str_null),
   _n0_=
    caml_string_of_jsbytes
     ("Json_encoding.destruct: consequence of bad merge_tups"),
   _n1_=
    caml_string_of_jsbytes
     ("Json_encoding.destruct: consequence of bad merge_objs"),
   _nK_=
    caml_string_of_jsbytes
     ("Json_encoding.construct: consequence of bad union"),
   _nJ_=
    caml_string_of_jsbytes
     ("Json_encoding.construct: consequence of bad merge_tups"),
   _nI_=
    caml_string_of_jsbytes
     ("Json_encoding.construct: consequence of bad merge_objs"),
   _nH_=[0,79,0],
   _nD_=caml_string_of_jsbytes(str_out_of_range),
   _nE_=caml_string_of_jsbytes(str_Json_encoding_co_abr),
   _nC_=[0,79,0],
   _nB_=[0,79,0],
   _nF_=caml_string_of_jsbytes(str_out_of_range),
   _nG_=caml_string_of_jsbytes(str_Json_encoding_co_abr),
   _nt_=caml_string_of_jsbytes(str_null),
   _nw_=caml_string_of_jsbytes(str_boolean),
   _nx_=caml_string_of_jsbytes(str_number),
   _ny_=caml_string_of_jsbytes(str_object),
   _nz_=caml_string_of_jsbytes(str_empty_object),
   _nA_=caml_string_of_jsbytes(str_string),
   _nu_=caml_string_of_jsbytes(str_array),
   _nv_=caml_string_of_jsbytes(str_empty_array),
   _nm_=caml_string_of_jsbytes("Json_encoding.Unexpected"),
   _nn_=caml_string_of_jsbytes("Json_encoding.No_case_matched"),
   _no_=caml_string_of_jsbytes("Json_encoding.Bad_array_size"),
   _np_=caml_string_of_jsbytes("Json_encoding.Missing_field"),
   _nq_=caml_string_of_jsbytes("Json_encoding.Unexpected_field"),
   _nr_=caml_string_of_jsbytes("Json_encoding.Bad_schema"),
   _ns_=caml_string_of_jsbytes("Json_encoding.Cannot_destruct"),
   _oa_=caml_string_of_jsbytes(str_int),
   _oc_=caml_string_of_jsbytes(str_int32),
   _o9_=[0,0,0],
   _o__=caml_string_of_jsbytes("Json_repr.bson_to_bytes"),
   _o0_=
    [0,
     [11,caml_string_of_jsbytes(str_invalid_field_na_abr),0],
     caml_string_of_jsbytes(str_invalid_field_na_abr)],
   _o1_=
    [0,
     [11,caml_string_of_jsbytes(str_early_terminator),0],
     caml_string_of_jsbytes(str_early_terminator)],
   _o5_=[0,num_870828711],
   _o2_=
    [0,
     [11,caml_string_of_jsbytes("unknown tag (0x"),[4,8,[0,2,2],0,[12,41,0]]],
     caml_string_of_jsbytes("unknown tag (0x%02X)")],
   _o3_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$2),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$2)],
   _o4_=
    [0,
     [11,
      caml_string_of_jsbytes("not enough data, subdocument expected ("),
      [4,0,0,0,[11,caml_string_of_jsbytes(str_bytes$0),0]]],
     caml_string_of_jsbytes
      ("not enough data, subdocument expected (%d bytes)")],
   _oV_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$4),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$4)],
   _oT_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$3),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$3)],
   _oU_=
    [0,
     [11,
      caml_string_of_jsbytes("invalid bool value (0x"),
      [4,8,[0,2,2],0,[12,41,0]]],
     caml_string_of_jsbytes("invalid bool value (0x%02X)")],
   _oP_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$0),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$0)],
   _oQ_=
    [0,
     [11,
      caml_string_of_jsbytes("not enough data, string expected ("),
      [4,0,0,0,[11,caml_string_of_jsbytes(str_bytes$0),0]]],
     caml_string_of_jsbytes("not enough data, string expected (%d bytes)")],
   _oR_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$1),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$1)],
   _oS_=
    [0,
     [11,caml_string_of_jsbytes(str_string_terminato_abr),0],
     caml_string_of_jsbytes(str_string_terminato_abr)],
   _oO_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr),0],
     caml_string_of_jsbytes(str_not_enough_data_abr)],
   _oW_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$6),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$6)],
   _oX_=
    [0,
     [11,caml_string_of_jsbytes(str_size_tag_inconsi_abr),0],
     caml_string_of_jsbytes(str_size_tag_inconsi_abr)],
   _oY_=[0,79,0],
   _oZ_=
    [0,
     [11,caml_string_of_jsbytes(str_early_terminator),0],
     caml_string_of_jsbytes(str_early_terminator)],
   _o6_=
    [0,
     [11,
      caml_string_of_jsbytes("unknown immediate tag (0x"),
      [4,8,[0,2,2],0,[12,41,0]]],
     caml_string_of_jsbytes("unknown immediate tag (0x%02X)")],
   _o7_=
    [0,
     [11,caml_string_of_jsbytes(str_not_enough_data_abr$5),0],
     caml_string_of_jsbytes(str_not_enough_data_abr$5)],
   _o8_=
    [0,
     [11,caml_string_of_jsbytes(str_terminator_expec_abr),0],
     caml_string_of_jsbytes(str_terminator_expec_abr)],
   _oN_=caml_string_of_jsbytes("Json_repr_bson.Repr.Bson_decoding_error"),
   _pn_=[0,caml_string_of_jsbytes(str_src_uutf_ml),num_364,9],
   _pi_=[0,num_211555818,num_3299808],
   _pd_=[0,num_211558048,num_3299808],
   _pj_=[0,num_684370880,num_3299808],
   _ph_=[0,num_684370880,num_427938126],
   _pe_=[0,num_211558048,num_427938126],
   _pf_=[0,caml_string_of_jsbytes(str_src_uutf_ml),154,55],
   _pg_=[0,num_684370880,num_427938126],
   _pk_=[0,caml_string_of_jsbytes(str_src_uutf_ml),num_153,55],
   _pl_=[0,caml_string_of_jsbytes(str_src_uutf_ml),155,55],
   _pm_=[0,num_684370880,num_3455931],
   _pc_=[0,caml_string_of_jsbytes(str_src_uutf_ml),121,9],
   _pa_=
    [0,
     [11,
      caml_string_of_jsbytes("invalid bounds (index "),
      [4,0,0,0,[11,caml_string_of_jsbytes(", length "),[4,0,0,0,[12,41,0]]]]],
     caml_string_of_jsbytes("invalid bounds (index %d, length %d)")],
   _pb_=
    [0,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     3,
     4,
     4,
     4,
     4,
     4,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0],
   _pW_=caml_string_of_jsbytes(str_false),
   _pX_=caml_string_of_jsbytes(str_null),
   _pY_=caml_string_of_jsbytes(str_true),
   _pZ_=[0,num_633954146,[0,num_737456202,1]],
   _p0_=[0,num_633954146,num_870828711],
   _p1_=[0,num_633954146,[0,num_737456202,0]],
   _p3_=[0,num_633954146,num_14610],
   _p2_=[0,num_633954146,num_17732],
   _p6_=[0,caml_string_of_jsbytes(str_src_jsonm_ml),num_398,27],
   _p5_=[0,num_633954146,num_17718],
   _p4_=[0,num_633954146,num_14596],
   _pV_=[0,caml_string_of_jsbytes(str_src_jsonm_ml),212,8],
   _pU_=[0,caml_string_of_jsbytes(str_src_jsonm_ml),num_205,45],
   _pq_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_illegal),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes("initial"),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,
           caml_string_of_jsbytes("BOM"),
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [11,
             caml_string_of_jsbytes(str_in),
             [17,
              [0,caml_string_of_jsbytes(str$5),1,0],
              [11,caml_string_of_jsbytes(str_character$0),partial$3]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[illegal@ initial@ BOM@ in@ character@ stream@]")],
   _pr_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_illegal),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes("escape,"),
         [17,[0,caml_string_of_jsbytes(str$5),1,0],0]]]]],
     caml_string_of_jsbytes("@[illegal@ escape,@ ")],
   _pt_=
    [0,
     [15,
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_not),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes(str_an),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes("escaped"),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(str_character$0),[17,0,0]]]]]]]]]],
     caml_string_of_jsbytes("%a@ not@ an@ escaped@ character@]")],
   _pu_=
    [0,
     [15,
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_lone),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes(str_low),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,caml_string_of_jsbytes(str_surrogate),[17,0,0]]]]]]]],
     caml_string_of_jsbytes("%a@ lone@ low@ surrogate@]")],
   _pv_=
    [0,
     [15,
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_lone),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes("high"),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,caml_string_of_jsbytes(str_surrogate),[17,0,0]]]]]]]],
     caml_string_of_jsbytes("%a@ lone@ high@ surrogate@]")],
   _pw_=
    [0,
     [15,
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_not),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [12,
          97,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes("hex"),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(str_digit),[17,0,0]]]]]]]]]],
     caml_string_of_jsbytes("%a@ not@ a@ hex@ digit@]")],
   _ps_=
    [0,
     [15,
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_not),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [12,
          97,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes(str_low),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(str_surrogate),[17,0,0]]]]]]]]]],
     caml_string_of_jsbytes("%a@ not@ a@ low@ surrogate@]")],
   _px_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_illegal),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes(str_bytes),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,
           caml_string_of_jsbytes(str_in),
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [11,
             caml_string_of_jsbytes(str_character$0),
             [17,
              [0,caml_string_of_jsbytes(str$5),1,0],
              [11,caml_string_of_jsbytes(str_stream),partial$4]]]]]]]]]],
     caml_string_of_jsbytes("@[illegal@ bytes@ in@ character@ stream@ (")],
   _py_=[0,[4,8,[0,2,2],0,0],caml_string_of_jsbytes("%02X")],
   _pA_=[0,[12,32,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes(" %02X")],
   _pz_=[0,[12,41,[17,0,0]],caml_string_of_jsbytes(")@]")],
   _pB_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_expected),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],0]]],
     caml_string_of_jsbytes("@[expected@ ")],
   _pC_=
    [0,
     [11,
      caml_string_of_jsbytes(str_member),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,caml_string_of_jsbytes(str_name),[17,0,0]]]],
     caml_string_of_jsbytes("member@ name@]")],
   _pD_=
    [0,
     [11,
      caml_string_of_jsbytes(str_JSON),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,caml_string_of_jsbytes("text (JSON value)"),[17,0,0]]]],
     caml_string_of_jsbytes("JSON@ text (JSON value)@]")],
   _pE_=
    [0,
     [11,
      caml_string_of_jsbytes(str_name),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_separator),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,caml_string_of_jsbytes("(':')"),[17,0,0]]]]]],
     caml_string_of_jsbytes("name@ separator@ (':')@]")],
   _pF_=
    [0,
     [11,
      caml_string_of_jsbytes(str_end),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes("of"),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,caml_string_of_jsbytes(str_input),[17,0,0]]]]]],
     caml_string_of_jsbytes("end@ of@ input@]")],
   _pG_=
    [0,
     [11,
      caml_string_of_jsbytes("JavaScript"),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,caml_string_of_jsbytes(str_comment),[17,0,0]]]],
     caml_string_of_jsbytes("JavaScript@ comment@]")],
   _pH_=
    [0,
     [11,
      caml_string_of_jsbytes(str_JSON),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,caml_string_of_jsbytes(str_value),[17,0,0]]]],
     caml_string_of_jsbytes("JSON@ value@]")],
   _pJ_=
    [0,
     [11,
      caml_string_of_jsbytes(str_member),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_name),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes(str_or),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes(str_object),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(str_end),[17,partial$6,partial$5]]]]]]]]]],
     caml_string_of_jsbytes
      ("member@ name@ or@ object@ end@ ('\"'@ or@ '}')@]")],
   _pI_=
    [0,
     [11,
      caml_string_of_jsbytes(str_value),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_separator),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes(str_or),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes(str_object),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(str_end),[17,partial$8,partial$7]]]]]]]]]],
     caml_string_of_jsbytes
      ("value@ separator@ or@ object@ end@ (','@ or@ '}')@]")],
   _pL_=
    [0,
     [11,
      caml_string_of_jsbytes(str_value),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_or),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes(str_array),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes(str_end),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes("(value"),[17,partial$10,partial$9]]]]]]]]]],
     caml_string_of_jsbytes("value@ or@ array@ end@ (value@ or@ ']')@]")],
   _pK_=
    [0,
     [11,
      caml_string_of_jsbytes(str_value),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_separator),
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes(str_or),
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes(str_array),
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(str_end),[17,partial$12,partial$11]]]]]]]]]],
     caml_string_of_jsbytes
      ("value@ separator@ or@ array@ end@ (','@ or@ ']')@]")],
   _pM_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_illegal),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes(str_number),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [12,40,[2,0,[12,41,[17,0,0]]]]]]]]],
     caml_string_of_jsbytes("@[illegal@ number@ (%s)@]")],
   _pS_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_illegal),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes("literal"),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [12,40,[2,0,[12,41,[17,0,0]]]]]]]]],
     caml_string_of_jsbytes("@[illegal@ literal@ (%s)@]")],
   _pT_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes(str_illegal),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes(str_character$0),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,
           caml_string_of_jsbytes(str_in),
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [11,
             caml_string_of_jsbytes(str_JSON),
             [17,
              [0,caml_string_of_jsbytes(str$5),1,0],
              [11,caml_string_of_jsbytes(str_string),partial$13]]]]]]]]]],
     caml_string_of_jsbytes("@[illegal@ character@ in@ JSON@ string@ (%a)@]")],
   _pN_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes("unclosed"),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],0]]],
     caml_string_of_jsbytes("@[unclosed@ ")],
   _pO_=
    [0,
     [11,caml_string_of_jsbytes(str_object),[17,0,0]],
     caml_string_of_jsbytes("object@]")],
   _pP_=
    [0,
     [11,caml_string_of_jsbytes(str_array),[17,0,0]],
     caml_string_of_jsbytes("array@]")],
   _pQ_=
    [0,
     [11,caml_string_of_jsbytes(str_comment),[17,0,0]],
     caml_string_of_jsbytes("comment@]")],
   _pR_=
    [0,
     [11,caml_string_of_jsbytes(str_string),[17,0,0]],
     caml_string_of_jsbytes("string@]")],
   _pp_=
    [0,
     [12,39,[2,0,[11,caml_string_of_jsbytes("' ("),[15,[12,41,0]]]]],
     caml_string_of_jsbytes("'%s' (%a)")],
   _po_=
    [0,
     [11,caml_string_of_jsbytes("U+"),[4,8,[0,2,4],0,0]],
     caml_string_of_jsbytes("U+%04X")],
   _qc_=caml_string_of_jsbytes("("),
   _qd_=caml_string_of_jsbytes("()"),
   _qe_=caml_string_of_jsbytes(")"),
   _qf_=[0,[15,[17,2,0]],caml_string_of_jsbytes("%a@?")],
   _p__=caml_string_of_jsbytes(str$61),
   _p$_=caml_string_of_jsbytes(str_n),
   _qa_=caml_string_of_jsbytes(' "'),
   _qb_=caml_string_of_jsbytes(str$7),
   _p7_=caml_string_of_jsbytes("Sexplib0.Sexp.Not_found_s"),
   _p8_=caml_string_of_jsbytes("Sexplib0.Sexp.Of_sexp_error"),
   _rq_=caml_string_of_jsbytes(str_Assert_failure),
   _rr_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),354,17],
   _rn_=[0,caml_string_of_jsbytes("Exit")],
   _ro_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),359,17],
   _rk_=[0,caml_string_of_jsbytes(str_End_of_file)],
   _rl_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_364,17],
   _rh_=[0,caml_string_of_jsbytes(str_Failure)],
   _ri_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),369,17],
   _re_=[0,caml_string_of_jsbytes(str_Not_found)],
   _rf_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),374,17],
   _rb_=[0,caml_string_of_jsbytes(str_Invalid_argument)],
   _rc_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),379,17],
   _q__=caml_string_of_jsbytes(str_Match_failure),
   _q$_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),384,17],
   _q7_=[0,caml_string_of_jsbytes("Not_found_s")],
   _q8_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),389,17],
   _q4_=[0,caml_string_of_jsbytes(str_Sys_error)],
   _q5_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),394,17],
   _q1_=[0,caml_string_of_jsbytes("Arg.Help")],
   _q2_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),399,17],
   _qY_=[0,caml_string_of_jsbytes("Arg.Bad")],
   _qZ_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_404,17],
   _qV_=[0,caml_string_of_jsbytes("Lazy.Undefined")],
   _qW_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_409,17],
   _qS_=[0,caml_string_of_jsbytes("Parsing.Parse_error")],
   _qT_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_414,17],
   _qP_=[0,caml_string_of_jsbytes("Queue.Empty")],
   _qQ_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),419,17],
   _qM_=[0,caml_string_of_jsbytes("Scanf.Scan_failure")],
   _qN_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_424,17],
   _qJ_=[0,caml_string_of_jsbytes("Stack.Empty")],
   _qK_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_429,17],
   _qG_=[0,caml_string_of_jsbytes("Stream.Failure")],
   _qH_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),434,17],
   _qD_=[0,caml_string_of_jsbytes("Stream.Error")],
   _qE_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),439,17],
   _qA_=[0,caml_string_of_jsbytes("Sys.Break")],
   _qB_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_444,17],
   _qx_=[0,caml_string_of_jsbytes("Sexplib.Conv.Of_sexp_error")],
   _qy_=[0,caml_string_of_jsbytes(str_sexp_conv_ml),num_450,17],
   _qv_=
    [0,
     [2,0,[12,32,[2,0,[12,58,[4,0,0,0,[12,58,[4,0,0,0,0]]]]]]],
     caml_string_of_jsbytes("%s %s:%d:%d")],
   _qu_=caml_string_of_jsbytes("list_of_sexp: list needed"),
   _qs_=caml_string_of_jsbytes("pair_of_sexp: list needed"),
   _qt_=
    caml_string_of_jsbytes
     ("pair_of_sexp: list must contain exactly two elements only"),
   _qq_=caml_string_of_jsbytes("int64_of_sexp: "),
   _qr_=caml_string_of_jsbytes("int64_of_sexp: atom needed"),
   _qo_=caml_string_of_jsbytes("int_of_sexp: "),
   _qp_=caml_string_of_jsbytes("int_of_sexp: atom needed"),
   _qn_=caml_string_of_jsbytes("string_of_sexp: atom needed"),
   _qh_=caml_string_of_jsbytes("False"),
   _qi_=caml_string_of_jsbytes("True"),
   _qj_=caml_string_of_jsbytes(str_false),
   _qk_=caml_string_of_jsbytes(str_true),
   _ql_=caml_string_of_jsbytes("bool_of_sexp: unknown string"),
   _qm_=caml_string_of_jsbytes("bool_of_sexp: atom needed"),
   _qg_=[0,2],
   _rF_=caml_string_of_jsbytes(str$67),
   _rO_=
    caml_string_of_jsbytes
     ("_of_sexp: the empty list is an invalid polymorphic variant"),
   _rN_=
    caml_string_of_jsbytes
     ("_of_sexp: a nested list is an invalid polymorphic variant"),
   _rM_=
    caml_string_of_jsbytes
     ("_of_sexp: polymorphic variant tag takes an argument"),
   _rL_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes("_of_sexp: polymorphic variant tag "),
       [3,0,[11,caml_string_of_jsbytes(str_has_incorrect_n_abr),0]]]],
     caml_string_of_jsbytes
      ("%s_of_sexp: polymorphic variant tag %S has incorrect number of arguments")],
   _rK_=
    caml_string_of_jsbytes
     ("_of_sexp: polymorphic variant does not take arguments"),
   _rJ_=caml_string_of_jsbytes("_of_sexp: no matching variant found"),
   _rH_=
    caml_string_of_jsbytes
     ("_of_sexp: list instead of atom for record expected"),
   _rG_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes
        ("_of_sexp: the following record elements were undefined: "),
       [2,0,0]]],
     caml_string_of_jsbytes
      ("%s_of_sexp: the following record elements were undefined: %s")],
   _rE_=caml_string_of_jsbytes("extra fields"),
   _rD_=caml_string_of_jsbytes("duplicate fields"),
   _rB_=caml_string_of_jsbytes(str$67),
   _rC_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes("_of_sexp: "),
       [2,0,[11,caml_string_of_jsbytes(str$47),[2,0,0]]]]],
     caml_string_of_jsbytes("%s_of_sexp: %s: %s")],
   _rA_=
    caml_string_of_jsbytes
     ("_of_sexp: record conversion: only pairs expected, their first element must be an atom"),
   _rz_=caml_string_of_jsbytes("_of_sexp: unexpected sum tag"),
   _ry_=caml_string_of_jsbytes("_of_sexp: the empty list is an invalid sum"),
   _rx_=caml_string_of_jsbytes("_of_sexp: a nested list is an invalid sum"),
   _rw_=caml_string_of_jsbytes("_of_sexp: sum tag must be a structured value"),
   _rv_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes("_of_sexp: sum tag "),
       [3,0,[11,caml_string_of_jsbytes(str_has_incorrect_n_abr),0]]]],
     caml_string_of_jsbytes
      ("%s_of_sexp: sum tag %S has incorrect number of arguments")],
   _ru_=caml_string_of_jsbytes("_of_sexp: sum tag does not take arguments"),
   _rt_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes("_of_sexp: tuple of size "),
       [4,0,0,0,[11,caml_string_of_jsbytes(" expected"),0]]]],
     caml_string_of_jsbytes("%s_of_sexp: tuple of size %d expected")],
   _rI_=caml_string_of_jsbytes("Sexplib0.Sexp_conv_error.No_variant_match"),
   _rU_=caml_string_of_jsbytes("not a valid JSON array/object"),
   _rR_=[0,caml_string_of_jsbytes(str_lib_ezjsonm_ml),56,11],
   _rS_=[0,caml_string_of_jsbytes(str_lib_ezjsonm_ml),63,17],
   _rQ_=[0,caml_string_of_jsbytes(str_lib_ezjsonm_ml),47,19],
   _rP_=caml_string_of_jsbytes("Ezjsonm.Escape"),
   _rT_=caml_string_of_jsbytes("Ezjsonm.Parse_error"),
   _rV_=[0,caml_string_of_jsbytes("src/binary_size.ml"),69,2],
   _rZ_=[0,num_332360020,0],
   _r0_=[0,num_332360020,0],
   _r1_=[0,num_332360020,0],
   _r2_=[0,num_332360020,0],
   _r3_=[0,caml_string_of_jsbytes(str_src_encoding_ml),245,8],
   _sv_=[0,0],
   _su_=
    caml_string_of_jsbytes
     ("Data_encoding.option: cannot nest nullable encodings"),
   _sw_=[0,0],
   _sx_=caml_string_of_jsbytes(str_None),
   _sy_=[0,1],
   _sz_=caml_string_of_jsbytes("Some"),
   _sA_=[0,num_919245630],
   _ss_=
    [0,
     [11,
      caml_string_of_jsbytes(str_The_tag),
      [4,0,0,0,[11,caml_string_of_jsbytes(" appears twice in an union."),0]]],
     caml_string_of_jsbytes("The tag %d appears twice in an union.")],
   _st_=
    [0,
     [11,
      caml_string_of_jsbytes(str_The_tag),
      [4,0,0,0,[11,caml_string_of_jsbytes(" is invalid."),0]]],
     caml_string_of_jsbytes("The tag %d is invalid.")],
   _sr_=caml_string_of_jsbytes("Data_encoding.union: empty list of cases."),
   _sq_=caml_string_of_jsbytes("tuples"),
   _sp_=caml_string_of_jsbytes(str_Json_encoding_me_abr),
   _sl_=caml_string_of_jsbytes("objects"),
   _sj_=
    caml_string_of_jsbytes
     ("data_encoding.string_enum: cannot have a single case, use constant instead"),
   _sk_=
    caml_string_of_jsbytes
     ("data_encoding.string_enum: cannot have zero cases"),
   _r8_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("Cannot insert potentially zero-sized element in "),
      [2,0,[12,46,0]]],
     caml_string_of_jsbytes
      ("Cannot insert potentially zero-sized element in %s.")],
   _r7_=
    [0,
     [11,
      caml_string_of_jsbytes("Cannot insert variable length element in "),
      [2,
       0,
       [11,
        caml_string_of_jsbytes
         (". You should wrap the contents using Data_encoding.dynamic_size."),
        0]]],
     caml_string_of_jsbytes
      ("Cannot insert variable length element in %s. You should wrap the contents using Data_encoding.dynamic_size.")],
   _r4_=
    caml_string_of_jsbytes
     ("Cannot create a byte encoding of negative or null fixed length."),
   _rY_=[0,caml_string_of_jsbytes(str_src_encoding_ml),72,8],
   _rW_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Cannot_merge_two),
      [2,
       0,
       [11,
        caml_string_of_jsbytes
         (" when the left element is of variable length and the right one of dynamic length. You should use the reverse order, or wrap the second one with Data_encoding.dynamic_size."),
        0]]],
     caml_string_of_jsbytes
      ("Cannot merge two %s when the left element is of variable length and the right one of dynamic length. You should use the reverse order, or wrap the second one with Data_encoding.dynamic_size.")],
   _rX_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Cannot_merge_two),
      [2,
       0,
       [11,
        caml_string_of_jsbytes
         (" with variable length. You should wrap one of them with Data_encoding.dynamic_size."),
        0]]],
     caml_string_of_jsbytes
      ("Cannot merge two %s with variable length. You should wrap one of them with Data_encoding.dynamic_size.")],
   _r5_=[4,num_1027682724],
   _r6_=[3,num_1027682724],
   _sD_=[0,num_919245630],
   _sB_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(".v"),[4,0,0,0,0]]],
     caml_string_of_jsbytes("%s.v%d")],
   _sC_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(" version "),[4,0,0,0,0]]],
     caml_string_of_jsbytes("%s version %d")],
   _tR_=[0,0],
   _tM_=[0,0],
   _tN_=caml_string_of_jsbytes(str_Variable),
   _tO_=caml_string_of_jsbytes(str_kind),
   _tP_=[0,1],
   _tQ_=caml_string_of_jsbytes(str_Variable),
   _tS_=caml_string_of_jsbytes(str_Dynamic),
   _tT_=caml_string_of_jsbytes(str_kind),
   _tU_=[0,0],
   _tV_=caml_string_of_jsbytes(str_Dynamic),
   _tG_=[0,0],
   _tw_=[0,0],
   _tf_=[0,0],
   _ta_=[0,0],
   _s7_=[0,0],
   _sL_=[0,0],
   _sM_=caml_string_of_jsbytes(str_Padding),
   _sN_=caml_string_of_jsbytes(str_kind),
   _sO_=[0,11],
   _sP_=caml_string_of_jsbytes(str_Padding),
   _sQ_=caml_string_of_jsbytes(str_Ref),
   _sR_=caml_string_of_jsbytes(str_kind),
   _sS_=caml_string_of_jsbytes(str_name),
   _sT_=[0,10],
   _sU_=caml_string_of_jsbytes(str_Ref),
   _sV_=caml_string_of_jsbytes("max_length"),
   _sW_=caml_string_of_jsbytes(str_Seq),
   _sX_=caml_string_of_jsbytes(str_kind),
   _sY_=caml_string_of_jsbytes(str_layout),
   _sZ_=[0,9],
   _s0_=caml_string_of_jsbytes(str_Seq),
   _s1_=caml_string_of_jsbytes(str_Enum),
   _s2_=caml_string_of_jsbytes(str_kind),
   _s3_=caml_string_of_jsbytes("reference"),
   _s4_=caml_string_of_jsbytes(str_size),
   _s5_=[0,8],
   _s6_=caml_string_of_jsbytes(str_Enum),
   _s8_=caml_string_of_jsbytes(str_String),
   _s9_=caml_string_of_jsbytes(str_kind),
   _s__=[0,7],
   _s$_=caml_string_of_jsbytes(str_String),
   _tb_=caml_string_of_jsbytes(str_Bytes),
   _tc_=caml_string_of_jsbytes(str_kind),
   _td_=[0,6],
   _te_=caml_string_of_jsbytes(str_Bytes),
   _tg_=caml_string_of_jsbytes(str_Float),
   _th_=caml_string_of_jsbytes(str_kind),
   _ti_=[0,5],
   _tj_=caml_string_of_jsbytes(str_Float),
   _tk_=caml_string_of_jsbytes(str_RangedFloat),
   _tl_=caml_string_of_jsbytes(str_kind),
   _tm_=caml_string_of_jsbytes(str_max),
   _tn_=caml_string_of_jsbytes(str_min),
   _to_=[0,4],
   _tp_=caml_string_of_jsbytes(str_RangedFloat),
   _tq_=caml_string_of_jsbytes(str_RangedInt),
   _tr_=caml_string_of_jsbytes(str_kind),
   _ts_=caml_string_of_jsbytes(str_max),
   _tt_=caml_string_of_jsbytes(str_min),
   _tu_=[0,3],
   _tv_=caml_string_of_jsbytes(str_RangedInt),
   _tx_=caml_string_of_jsbytes(str_Bool),
   _ty_=caml_string_of_jsbytes(str_kind),
   _tz_=[0,2],
   _tA_=caml_string_of_jsbytes(str_Bool),
   _tB_=caml_string_of_jsbytes(str_Int),
   _tC_=caml_string_of_jsbytes(str_kind),
   _tD_=caml_string_of_jsbytes(str_size),
   _tE_=[0,1],
   _tF_=caml_string_of_jsbytes(str_Int),
   _tH_=caml_string_of_jsbytes(str_Zero_width),
   _tI_=caml_string_of_jsbytes(str_kind),
   _tJ_=[0,0],
   _tK_=caml_string_of_jsbytes(str_Zero_width),
   _sE_=caml_string_of_jsbytes(str_description),
   _sF_=caml_string_of_jsbytes(str_title),
   _sJ_=[0,caml_string_of_jsbytes("Int32"),num_783416530],
   _sK_=[0,caml_string_of_jsbytes("Int64"),num_783415859],
   _tL_=caml_string_of_jsbytes(str_layout),
   _tZ_=caml_string_of_jsbytes(str_Float),
   _t0_=caml_string_of_jsbytes(str_kind),
   _t1_=caml_string_of_jsbytes(str_size),
   _t2_=[0,2],
   _t3_=caml_string_of_jsbytes(str_Fixed),
   _t5_=caml_string_of_jsbytes("schema.kind"),
   _t6_=
    [0,
     [0,caml_string_of_jsbytes("Uint30"),num_980827863],
     [0,
      [0,caml_string_of_jsbytes(str_Uint16),num_980827423],
      [0,[0,caml_string_of_jsbytes(str_Uint8),num_919245630],0]]],
   _t__=caml_string_of_jsbytes(str_name),
   _t$_=caml_string_of_jsbytes("option_indicator"),
   _ua_=caml_string_of_jsbytes(str_kind),
   _ub_=[0,3],
   _uc_=caml_string_of_jsbytes("Optional_field"),
   _ug_=caml_string_of_jsbytes(str_size),
   _uh_=caml_string_of_jsbytes("num_fields"),
   _ui_=caml_string_of_jsbytes(str_name),
   _uk_=caml_string_of_jsbytes("dyn"),
   _ul_=caml_string_of_jsbytes(str_kind),
   _um_=[0,2],
   _un_=caml_string_of_jsbytes("Dynamic_field"),
   _ur_=caml_string_of_jsbytes(str_data_kind),
   _us_=caml_string_of_jsbytes("anon"),
   _ut_=caml_string_of_jsbytes(str_kind),
   _uu_=caml_string_of_jsbytes(str_layout),
   _uv_=[0,1],
   _uw_=caml_string_of_jsbytes("Anonymous_field"),
   _uA_=caml_string_of_jsbytes("named"),
   _uB_=caml_string_of_jsbytes(str_kind),
   _uC_=caml_string_of_jsbytes(str_data_kind),
   _uD_=caml_string_of_jsbytes(str_layout),
   _uE_=caml_string_of_jsbytes(str_name),
   _uF_=[0,0],
   _uG_=caml_string_of_jsbytes("Named_field"),
   _uI_=caml_string_of_jsbytes("schema.field"),
   _uJ_=
    [0,
     [0,caml_string_of_jsbytes(str_Uint16),num_980827423],
     [0,[0,caml_string_of_jsbytes(str_Uint8),num_919245630],0]],
   _uN_=caml_string_of_jsbytes(str_cases),
   _uO_=caml_string_of_jsbytes(str_size),
   _uP_=[0,2],
   _uQ_=caml_string_of_jsbytes("Int_enum"),
   _uU_=caml_string_of_jsbytes(str_name),
   _uW_=caml_string_of_jsbytes(str_fields),
   _uX_=caml_string_of_jsbytes("tag"),
   _u2_=caml_string_of_jsbytes("union case"),
   _u3_=caml_string_of_jsbytes(str_cases),
   _u5_=caml_string_of_jsbytes(str_kind),
   _u6_=caml_string_of_jsbytes("tag_size"),
   _u7_=[0,1],
   _u8_=caml_string_of_jsbytes("Cases"),
   _va_=caml_string_of_jsbytes(str_fields),
   _vb_=[0,0],
   _vc_=caml_string_of_jsbytes("Obj"),
   _vd_=caml_string_of_jsbytes(str_encoding),
   _ve_=caml_string_of_jsbytes(str_description),
   _vf_=caml_string_of_jsbytes(str_fields),
   _vg_=caml_string_of_jsbytes("toplevel"),
   _vl_=caml_string_of_jsbytes("Tag"),
   _vm_=[0,[1,[0,num_332360020,0],0],0],
   _vn_=[0,[1,[0,num_332360020,0],0],0],
   _vo_=[0,[1,[0,num_332360020,0],0],0],
   _vp_=[0,[1,[0,num_332360020,0],0],0],
   _vq_=caml_string_of_jsbytes(str_padding),
   _vr_=[0,num_815034505],
   _vs_=[0,num_919245630],
   _vt_=[0,num_783416972],
   _vu_=[0,num_980827423],
   _vv_=[0,num_783416530],
   _vw_=[0,num_783415859],
   _vk_=caml_string_of_jsbytes("X_"),
   _vx_=[0,0],
   _vy_=caml_string_of_jsbytes(str$59),
   _vz_=caml_string_of_jsbytes(str$59),
   _xv_=[0,0],
   _xq_=[0,0],
   _wT_=[0,0],
   _wO_=[0,0],
   _wJ_=[0,0],
   _wv_=
    [0,
     [11,caml_string_of_jsbytes(str_Not_enough_data),0],
     caml_string_of_jsbytes(str_Not_enough_data)],
   _ww_=
    [0,
     [11,caml_string_of_jsbytes(str_Extra_bytes),0],
     caml_string_of_jsbytes(str_Extra_bytes)],
   _wx_=
    [0,
     [11,caml_string_of_jsbytes(str_No_case_matched),0],
     caml_string_of_jsbytes(str_No_case_matched)],
   _wy_=
    [0,
     [11,caml_string_of_jsbytes(str_Trailing_zero_in_Z),0],
     caml_string_of_jsbytes(str_Trailing_zero_in_Z)],
   _wz_=
    [0,
     [11,caml_string_of_jsbytes(str_Size_limit_exceeded),0],
     caml_string_of_jsbytes(str_Size_limit_exceeded)],
   _wA_=
    [0,
     [11,caml_string_of_jsbytes(str_List_length_limi_abr),0],
     caml_string_of_jsbytes(str_List_length_limi_abr)],
   _wB_=
    [0,
     [11,caml_string_of_jsbytes(str_Array_length_lim_abr),0],
     caml_string_of_jsbytes(str_Array_length_lim_abr)],
   _wC_=
    [0,
     [11,caml_string_of_jsbytes("Unexpected tag "),[4,0,0,0,0]],
     caml_string_of_jsbytes("Unexpected tag %d")],
   _wD_=
    [0,
     [11,caml_string_of_jsbytes("Invalid size "),[4,0,0,0,0]],
     caml_string_of_jsbytes("Invalid size %d")],
   _wE_=
    [0,
     [11,
      caml_string_of_jsbytes("Invalid int ("),
      [4,
       0,
       0,
       0,
       [11,
        caml_string_of_jsbytes(str$37),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(str$37),
          [4,0,0,0,[11,caml_string_of_jsbytes(str$63),0]]]]]]],
     caml_string_of_jsbytes("Invalid int (%d <= %d <= %d) ")],
   _wF_=
    [0,
     [11,
      caml_string_of_jsbytes("Invalid float ("),
      [8,
       [0,0,0],
       0,
       0,
       [11,
        caml_string_of_jsbytes(str$37),
        [8,
         [0,0,0],
         0,
         0,
         [11,
          caml_string_of_jsbytes(str$37),
          [8,[0,0,0],0,0,[11,caml_string_of_jsbytes(str$63),0]]]]]]],
     caml_string_of_jsbytes("Invalid float (%f <= %f <= %f) ")],
   _ws_=[0,0],
   _wn_=[0,0],
   _wi_=[0,0],
   _vR_=[0,0],
   _vM_=[0,0],
   _vH_=[0,0],
   _vC_=[0,0],
   _vD_=[0,10],
   _vE_=caml_string_of_jsbytes(str_Array_too_long),
   _vI_=[0,9],
   _vJ_=caml_string_of_jsbytes(str_List_too_long),
   _vN_=[0,8],
   _vO_=caml_string_of_jsbytes(str_Size_limit_exceeded),
   _vS_=[0,7],
   _vT_=caml_string_of_jsbytes("Trailing zero"),
   _vX_=caml_string_of_jsbytes(str_max),
   _vY_=caml_string_of_jsbytes(str_v),
   _vZ_=caml_string_of_jsbytes(str_min),
   _v0_=[0,6],
   _v1_=caml_string_of_jsbytes(str_Invalid_float),
   _v5_=caml_string_of_jsbytes(str_max),
   _v6_=caml_string_of_jsbytes(str_v),
   _v7_=caml_string_of_jsbytes(str_min),
   _v8_=[0,5],
   _v9_=caml_string_of_jsbytes(str_Invalid_int),
   _wa_=[0,4],
   _wb_=caml_string_of_jsbytes("Invalid size"),
   _we_=[0,3],
   _wf_=caml_string_of_jsbytes("Unexpected tag"),
   _wj_=[0,2],
   _wk_=caml_string_of_jsbytes(str_No_case_matched),
   _wo_=[0,1],
   _wp_=caml_string_of_jsbytes(str_Extra_bytes),
   _wt_=[0,0],
   _wu_=caml_string_of_jsbytes(str_Not_enough_data),
   _wG_=caml_string_of_jsbytes("Data_encoding__Binary_error.Read_error"),
   _wK_=[0,8],
   _wL_=caml_string_of_jsbytes(str_Array_too_long),
   _wP_=[0,7],
   _wQ_=caml_string_of_jsbytes(str_List_too_long),
   _wU_=[0,6],
   _wV_=caml_string_of_jsbytes("Invalid natural"),
   _wZ_=caml_string_of_jsbytes(str_found$0),
   _w0_=caml_string_of_jsbytes(str_expected),
   _w1_=[0,5],
   _w2_=caml_string_of_jsbytes("Invalid string length"),
   _w6_=caml_string_of_jsbytes(str_found$0),
   _w7_=caml_string_of_jsbytes(str_expected),
   _w8_=[0,4],
   _w9_=caml_string_of_jsbytes("Invalid bytes length"),
   _xb_=caml_string_of_jsbytes(str_max),
   _xc_=caml_string_of_jsbytes(str_v),
   _xd_=caml_string_of_jsbytes(str_min),
   _xe_=[0,3],
   _xf_=caml_string_of_jsbytes(str_Invalid_float),
   _xj_=caml_string_of_jsbytes(str_max),
   _xk_=caml_string_of_jsbytes(str_v),
   _xl_=caml_string_of_jsbytes(str_min),
   _xm_=[0,2],
   _xn_=caml_string_of_jsbytes(str_Invalid_int),
   _xr_=[0,1],
   _xs_=caml_string_of_jsbytes(str_No_case_matched),
   _xw_=[0,0],
   _xx_=caml_string_of_jsbytes(str_Size_limit_exceeded),
   _xy_=caml_string_of_jsbytes("Data_encoding__Binary_error.Write_error"),
   _xB_=[0,caml_string_of_jsbytes(str_src_binary_reade_abr),324,18],
   _xE_=[0,caml_string_of_jsbytes(str_src_binary_reade_abr),num_355,6],
   _xD_=[0,caml_string_of_jsbytes(str_src_binary_reade_abr),358,6],
   _xC_=[0,caml_string_of_jsbytes(str_src_binary_reade_abr),361,6],
   _xL_=[0,caml_string_of_jsbytes("src/binary_writer.ml"),num_355,47],
   _yl_=
    [0,
     [11,caml_string_of_jsbytes(str_string_len),[4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes(str_string_len_d)],
   _ym_=
    [0,
     [11,caml_string_of_jsbytes(str_string_len),[4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes(str_string_len_d)],
   _yj_=
    [0,
     [11,caml_string_of_jsbytes(str_string_len),[4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes(str_string_len_d)],
   _yk_=
    [0,
     [11,caml_string_of_jsbytes(str_string_len),[4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes(str_string_len_d)],
   _ye_=caml_string_of_jsbytes("int8"),
   _yf_=caml_string_of_jsbytes("uint8"),
   _yg_=caml_string_of_jsbytes("int16"),
   _yh_=caml_string_of_jsbytes("uint16"),
   _yi_=caml_string_of_jsbytes("rangedInt"),
   _ys_=caml_string_of_jsbytes("]"),
   _yt_=caml_string_of_jsbytes("["),
   _yu_=[1,caml_string_of_jsbytes("Malformed value")],
   _yn_=caml_string_of_jsbytes(str$40),
   _yp_=caml_string_of_jsbytes(str$59),
   _yo_=[0,[15,[2,0,0]],caml_string_of_jsbytes("%a%s")],
   _xV_=caml_string_of_jsbytes(str_negative_natural),
   _xU_=caml_string_of_jsbytes(str_negative_natural),
   _xM_=caml_string_of_jsbytes("Data_encoding__Json.Parse_error"),
   _xP_=
    [0,caml_string_of_jsbytes("Decimal representation of 64 bit integers")],
   _xQ_=[0,caml_string_of_jsbytes("64 bit integers")],
   _xR_=caml_string_of_jsbytes(str_int64),
   _xW_=
    [0,
     caml_string_of_jsbytes("Decimal representation of a positive big number")],
   _xX_=[0,caml_string_of_jsbytes("Positive big number")],
   _xY_=caml_string_of_jsbytes("positive_bignum"),
   _xZ_=[0,caml_string_of_jsbytes("Decimal representation of a big number")],
   _x0_=[0,caml_string_of_jsbytes("Big number")],
   _x1_=caml_string_of_jsbytes("bignum"),
   _x2_=
    [0,0,0,0,0,[7,[0,[0,caml_string_of_jsbytes("^[a-zA-Z0-9]+$")],0,0]],0,0],
   _x$_=caml_string_of_jsbytes("byte"),
   _ya_=caml_string_of_jsbytes("invalid_utf8_string"),
   _yb_=
    [0,
     caml_string_of_jsbytes
      ("Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.")],
   _yc_=[0,caml_string_of_jsbytes("Universal string representation")],
   _yd_=caml_string_of_jsbytes("unistring"),
   _yx_=
    [0,
     [11,
      caml_string_of_jsbytes("Encoding "),
      [2,0,[11,caml_string_of_jsbytes(" previously registered"),0]]],
     caml_string_of_jsbytes("Encoding %s previously registered")],
   _yy_=
    caml_string_of_jsbytes
     ("Data_encoding.Registration.register: non def(in)ed encoding"),
   _yC_=[0,caml_string_of_jsbytes(str_src_lib_error_mo_abr),53,6],
   _yz_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str_Error),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [15,
         [12,
          44,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes("trace:"),
            [17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,partial$14]]]]]]]]]],
     caml_string_of_jsbytes("@[<v 2>Error:@ %a,@ trace:@ %a@]@.")],
   _yA_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str_Error),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,[17,4,0]]]]]],
     caml_string_of_jsbytes("@[<v 2>Error:@ %a@]@.")],
   _yB_=[0,caml_string_of_jsbytes(str_src_lib_error_mo_abr),39,6],
   _yD_=caml_string_of_jsbytes(str_error),
   _yE_=caml_string_of_jsbytes("result"),
   _yF_=[0,1],
   _yG_=caml_string_of_jsbytes("Error"),
   _yH_=[0,0],
   _yI_=caml_string_of_jsbytes("Ok"),
   _yJ_=[0,num_919245630],
   _yK_=caml_string_of_jsbytes("Error_monad.map2_s"),
   _yM_=caml_string_of_jsbytes("Error_monad.map2"),
   _yO_=caml_string_of_jsbytes("Error_monad.iter2_p"),
   _yP_=caml_string_of_jsbytes("Error_monad.iteri2_p"),
   _yN_=caml_string_of_jsbytes("Error_monad.mapi2"),
   _yL_=caml_string_of_jsbytes("Error_monad.mapi2_s"),
   _zk_=
    [0,
     [11,caml_string_of_jsbytes(str_An_unspecified_e_abr),0],
     caml_string_of_jsbytes(str_An_unspecified_e_abr)],
   _zj_=
    [0,caml_string_of_jsbytes("src/lib_error_monad/core_maker.ml"),num_408,22],
   _zi_=[0,0,0],
   _zf_=
    [0,
     [11,
      caml_string_of_jsbytes('Specified encoding for "'),
      [2,
       0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes
          ('" is not an object, but error encodings must be objects.'),
         0]]]],
     caml_string_of_jsbytes
      ('Specified encoding for "%s%s" is not an object, but error encodings must be objects.')],
   _zg_=caml_string_of_jsbytes(str_id),
   _zh_=caml_string_of_jsbytes(str_kind),
   _zd_=caml_string_of_jsbytes("ignore wrapped error when serializing"),
   _ze_=caml_string_of_jsbytes("ignore wrapped error when deserializing"),
   _zc_=
    [0,
     [11,
      caml_string_of_jsbytes("register_error_kind: duplicate error name: "),
      [2,0,0]],
     caml_string_of_jsbytes("register_error_kind: duplicate error name: %s")],
   _y$_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Unregistered error:"),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]],
     caml_string_of_jsbytes("@[<v 2>Unregistered error:@ %a@]")],
   _y8_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_h_0),0],
        caml_string_of_jsbytes(str_h_0)]],
      [15,[17,0,0]]],
     caml_string_of_jsbytes(str_h_0_a)],
   _y1_=caml_string_of_jsbytes(". Was the error registered?"),
   _y2_=caml_string_of_jsbytes("Unclassified error: "),
   _yZ_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("category : "),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\nid : "),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("\ntitle : "),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\ndescription : "),
             [2,0,[11,caml_string_of_jsbytes("\nschema : "),partial$15]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>category : %s\nid : %s\ntitle : %s\ndescription : %s\nschema : %a@]")],
   _yX_=caml_string_of_jsbytes("permanent"),
   _yY_=caml_string_of_jsbytes(str_branch),
   _yW_=caml_string_of_jsbytes("temporary"),
   _yV_=caml_string_of_jsbytes(str$59),
   _yT_=caml_string_of_jsbytes(str$59),
   _yU_=caml_string_of_jsbytes(str_error),
   _zl_=caml_string_of_jsbytes(str_error),
   _y0_=
    caml_string_of_jsbytes
     ("Tezos_error_monad.Core_maker.Make(Prefix).Unclassified"),
   _y3_=caml_string_of_jsbytes(str_error),
   _y4_=caml_string_of_jsbytes("generic"),
   _y5_=caml_string_of_jsbytes(str_kind),
   _y6_=caml_string_of_jsbytes("generic_error"),
   _y7_=caml_string_of_jsbytes(str_Generic_error),
   _y9_=
    caml_string_of_jsbytes
     ("Tezos_error_monad.Core_maker.Make(Prefix).Unregistered_error"),
   _y__=caml_string_of_jsbytes("Unregistered error"),
   _za_=caml_string_of_jsbytes(str$59),
   _zb_=caml_string_of_jsbytes(str$59),
   _yQ_=caml_string_of_jsbytes(str_data),
   _yR_=caml_string_of_jsbytes(str_description),
   _yS_=caml_string_of_jsbytes(str_id),
   _zM_=caml_string_of_jsbytes("The request has timed out"),
   _zL_=[0,0],
   _zE_=caml_string_of_jsbytes("The promise was unexpectedly canceled"),
   _zD_=[0,0],
   _zx_=[0,0],
   _zr_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_h_0),0],
        caml_string_of_jsbytes(str_h_0)]],
      [15,[17,0,0]]],
     caml_string_of_jsbytes(str_h_0_a)],
   _zm_=caml_string_of_jsbytes("Tezos_error_monad.Error_monad.Exn"),
   _zp_=caml_string_of_jsbytes(str_msg),
   _zs_=caml_string_of_jsbytes("Exception safely wrapped in an error"),
   _zt_=caml_string_of_jsbytes("Exception"),
   _zu_=caml_string_of_jsbytes("failure"),
   _zv_=caml_string_of_jsbytes("Tezos_error_monad.Error_monad.Canceled"),
   _zy_=caml_string_of_jsbytes(str_Canceled),
   _zz_=caml_string_of_jsbytes(str_Canceled),
   _zA_=caml_string_of_jsbytes("utils.Canceled"),
   _zF_=caml_string_of_jsbytes("A promise was unexpectedly canceled"),
   _zG_=caml_string_of_jsbytes(str_Canceled),
   _zH_=caml_string_of_jsbytes("canceled"),
   _zI_=caml_string_of_jsbytes("Tezos_error_monad.Error_monad.Timeout"),
   _zN_=caml_string_of_jsbytes(str_Timeout),
   _zO_=caml_string_of_jsbytes(str_Timeout),
   _zP_=caml_string_of_jsbytes("utils.Timeout"),
   _zQ_=caml_string_of_jsbytes("errs"),
   _zR_=[0,caml_string_of_jsbytes("Errors")],
   _AQ_=caml_string_of_jsbytes(str$13),
   _AR_=caml_string_of_jsbytes(str$59),
   _AS_=caml_string_of_jsbytes(str$13),
   _AP_=caml_string_of_jsbytes(str_true),
   _AO_=caml_string_of_jsbytes("<TODO>"),
   _AN_=
    caml_string_of_jsbytes("Resto.MakeService(Encoding).Internal.Not_equal"),
   _AI_=caml_string_of_jsbytes("Resto.Path.prefix"),
   _AH_=caml_string_of_jsbytes("Resto.Path.add_final_arg"),
   _AG_=caml_string_of_jsbytes("Resto.Path.add_arg"),
   _AF_=caml_string_of_jsbytes("Resto.Path.add_suffix"),
   _AA_=[1,caml_string_of_jsbytes("Cannot parse int64 value")],
   _Ay_=[1,caml_string_of_jsbytes("Cannot parse int32 value")],
   _Aw_=[1,caml_string_of_jsbytes("Cannot parse float value")],
   _Au_=[1,caml_string_of_jsbytes("Cannot parse integer value")],
   _As_=caml_string_of_jsbytes(str_yes),
   _Ar_=caml_string_of_jsbytes(str_no),
   _Ap_=caml_string_of_jsbytes(str$59),
   _Ao_=[0,0],
   _Aj_=[0,caml_string_of_jsbytes(str_src_resto_ml),89,29],
   _Ak_=[0,caml_string_of_jsbytes(str_src_resto_ml),90,33],
   _Al_=[0,caml_string_of_jsbytes(str_src_resto_ml),93,14],
   _Am_=[0,caml_string_of_jsbytes(str_src_resto_ml),99,14],
   _An_=[0,caml_string_of_jsbytes(str_src_resto_ml),num_105,14],
   _Ai_=caml_string_of_jsbytes("Ty"),
   _z9_=caml_string_of_jsbytes(str_DELETE),
   _z__=caml_string_of_jsbytes(str_GET),
   _z$_=caml_string_of_jsbytes(str_PATCH),
   _Aa_=caml_string_of_jsbytes(str_POST),
   _Ab_=caml_string_of_jsbytes(str_PUT),
   _Ac_=[0,num_3997359],
   _Ad_=[0,num_891112544],
   _Ae_=[0,num_994393768],
   _Af_=[0,num_3546230],
   _Ag_=[0,num_492530731],
   _z5_=caml_string_of_jsbytes(str_PATCH),
   _z6_=caml_string_of_jsbytes(str_POST),
   _z7_=caml_string_of_jsbytes(str_DELETE),
   _z8_=caml_string_of_jsbytes(str_GET),
   _z4_=caml_string_of_jsbytes(str_PUT),
   _zT_=caml_string_of_jsbytes(str_f$0),
   _zU_=caml_string_of_jsbytes(str_false),
   _zV_=caml_string_of_jsbytes("n"),
   _zW_=caml_string_of_jsbytes(str_no),
   _zX_=caml_string_of_jsbytes("t"),
   _zY_=caml_string_of_jsbytes(str_true),
   _zZ_=caml_string_of_jsbytes("y"),
   _z0_=caml_string_of_jsbytes(str_yes),
   _z1_=[1,caml_string_of_jsbytes("Cannot parse boolean value")],
   _z3_=[0,0],
   _z2_=[0,1],
   _Ah_=caml_string_of_jsbytes("Resto.Internal.Ty.Not_equal"),
   _Aq_=caml_string_of_jsbytes("unit"),
   _At_=caml_string_of_jsbytes(str_bool),
   _Av_=caml_string_of_jsbytes(str_int),
   _Ax_=caml_string_of_jsbytes(str_float),
   _Az_=caml_string_of_jsbytes(str_int32),
   _AB_=caml_string_of_jsbytes(str_int64),
   _AE_=caml_string_of_jsbytes(str_string),
   _AJ_=caml_string_of_jsbytes("recurse"),
   _AY_=[0,caml_string_of_jsbytes(str_src_resto_direct_abr),471,33],
   _AX_=[0,caml_string_of_jsbytes(str_src_resto_direct_abr),454,34],
   _AW_=[0,caml_string_of_jsbytes(str_src_resto_direct_abr),442,33],
   _Ba_=[0,[0,[0,0]]],
   _A$_=[0,[0,0]],
   _A__=[0,0],
   _A9_=[0,[0,[0,[0,[0,0]]]]],
   _A8_=[0,[0,[0,[0,0]]]],
   _A7_=[0,[0,[0,0]]],
   _A6_=[0,[0,0]],
   _A5_=[0,0],
   _A3_=[0,num_358247754,0],
   _A4_=[0,num_358247754,0],
   _A1_=[0,num_358247754,0],
   _A0_=[0,num_358247754,0],
   _AZ_=[0,num_358247754,0],
   _A2_=[0,num_358247754,0],
   _AV_=caml_string_of_jsbytes("RestoDirectory.prefix"),
   _AU_=caml_string_of_jsbytes("Resto_directory.Make(Encoding).Conflict"),
   _CF_=[0,0],
   _Cp_=caml_string_of_jsbytes(str_tree),
   _Cq_=caml_string_of_jsbytes("arg"),
   _Cr_=caml_string_of_jsbytes("dynamic_dispatch"),
   _Cs_=[0,1],
   _Ct_=caml_string_of_jsbytes("Arg"),
   _Cu_=caml_string_of_jsbytes(str_tree),
   _Cv_=caml_string_of_jsbytes(str_name),
   _Cw_=caml_string_of_jsbytes("suffixes"),
   _Cx_=[0,0],
   _Cy_=caml_string_of_jsbytes("Suffixes"),
   _Cz_=caml_string_of_jsbytes("subdirs"),
   _CA_=caml_string_of_jsbytes("patch_service"),
   _CB_=caml_string_of_jsbytes("put_service"),
   _CC_=caml_string_of_jsbytes("delete_service"),
   _CD_=caml_string_of_jsbytes("post_service"),
   _CE_=caml_string_of_jsbytes("get_service"),
   _CG_=caml_string_of_jsbytes("empty"),
   _CH_=[0,2],
   _CI_=caml_string_of_jsbytes("Empty"),
   _CJ_=caml_string_of_jsbytes("dynamic"),
   _CK_=[0,1],
   _CL_=caml_string_of_jsbytes(str_Dynamic),
   _CM_=caml_string_of_jsbytes("static"),
   _CN_=[0,0],
   _CO_=caml_string_of_jsbytes("Static"),
   _BR_=[0,0],
   _Bc_=caml_string_of_jsbytes("untyped"),
   _Bd_=caml_string_of_jsbytes("binary_schema"),
   _Be_=caml_string_of_jsbytes("json_schema"),
   _Bf_=caml_string_of_jsbytes(str_descr),
   _Bh_=caml_string_of_jsbytes(str_name),
   _Bi_=caml_string_of_jsbytes(str_single),
   _Bj_=caml_string_of_jsbytes(str_id),
   _Bn_=caml_string_of_jsbytes(str_descr),
   _Bp_=caml_string_of_jsbytes(str_name),
   _Bq_=caml_string_of_jsbytes("multiple"),
   _Br_=caml_string_of_jsbytes(str_id),
   _Bv_=
    [0,
     [0,caml_string_of_jsbytes(str_GET),num_3546230],
     [0,
      [0,caml_string_of_jsbytes(str_POST),num_891112544],
      [0,
       [0,caml_string_of_jsbytes(str_DELETE),num_492530731],
       [0,
        [0,caml_string_of_jsbytes(str_PUT),num_3997359],
        [0,[0,caml_string_of_jsbytes(str_PATCH),num_994393768],0]]]]],
   _By_=[0,2],
   _Bz_=caml_string_of_jsbytes("PDynamicTail"),
   _BC_=[0,1],
   _BD_=caml_string_of_jsbytes("PDynamic"),
   _BG_=[0,0],
   _BH_=caml_string_of_jsbytes("PStatic"),
   _BL_=caml_string_of_jsbytes("multi"),
   _BM_=[0,3],
   _BN_=caml_string_of_jsbytes("Multi"),
   _BS_=caml_string_of_jsbytes("flag"),
   _BT_=[0,2],
   _BU_=caml_string_of_jsbytes("Flag"),
   _BY_=caml_string_of_jsbytes("optional"),
   _BZ_=[0,1],
   _B0_=caml_string_of_jsbytes("Optional"),
   _B4_=caml_string_of_jsbytes(str_single),
   _B5_=[0,0],
   _B6_=caml_string_of_jsbytes("Single"),
   _B7_=caml_string_of_jsbytes(str_kind),
   _B8_=caml_string_of_jsbytes(str_description),
   _B9_=caml_string_of_jsbytes(str_name),
   _Cb_=caml_string_of_jsbytes(str_error),
   _Cc_=caml_string_of_jsbytes("output"),
   _Cd_=caml_string_of_jsbytes(str_input),
   _Cf_=caml_string_of_jsbytes("query"),
   _Ch_=caml_string_of_jsbytes(str_description),
   _Cj_=caml_string_of_jsbytes(str_path),
   _Ck_=caml_string_of_jsbytes(str_meth),
   _CP_=caml_string_of_jsbytes("service_tree"),
   _CQ_=caml_string_of_jsbytes("recursive"),
   _De_=[0,caml_string_of_jsbytes("src/lib_rpc/RPC_service.ml"),num_119,39],
   _Dc_=caml_string_of_jsbytes(str_error),
   _Dd_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("The full list of error is available with the global RPC `"),
      [2,0,[12,32,[2,0,[12,96,0]]]]],
     caml_string_of_jsbytes
      ("The full list of error is available with the global RPC `%s %s`")],
   _C__=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,caml_string_of_jsbytes(str_The_RPC_returned_abr),[17,0,[17,4,0]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The RPC returned with an error code but no associated error.@]@.")],
   _C9_=[0,0],
   _C3_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("The RPC returned with an error code, and the associated body was not a valid error trace:"),
       [18,
        [1,[0,0,caml_string_of_jsbytes(str$59)]],
        [15,
         [17,
          0,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes
             ("It is likely that the answer does not comes directly from a compatible node."),
            [17,0,[17,4,0]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The RPC returned with an error code, and the associated body was not a valid error trace:@[%a@]@ It is likely that the answer does not comes directly from a compatible node.@]@.")],
   _CW_=caml_string_of_jsbytes("Cannot parse methods"),
   _CX_=caml_string_of_jsbytes("Tezos_rpc.RPC_service.Unparsable_RPC_error"),
   _CY_=caml_string_of_jsbytes("Tezos_rpc.RPC_service.Empty_error_list"),
   _C1_=caml_string_of_jsbytes("unparsable message"),
   _C4_=
    caml_string_of_jsbytes
     ("The RPC returned with an error code, and the associated body was not a valid error trace. It is likely that the answer does not comes directly from a compatible node."),
   _C5_=caml_string_of_jsbytes("RPC fails with an unparsable error message"),
   _C6_=caml_string_of_jsbytes("RPC.Unexpected_error_encoding"),
   _C$_=caml_string_of_jsbytes(str_The_RPC_returned_abr),
   _Da_=caml_string_of_jsbytes("RPC returned an empty list of errors"),
   _Db_=caml_string_of_jsbytes("RPC.Empty_error_list"),
   _Df_=caml_string_of_jsbytes(str_errors),
   _Dh_=
    [0,caml_string_of_jsbytes("Schema for all the RPC errors from the shell")],
   _Di_=caml_string_of_jsbytes("describe"),
   _Dj_=
    [0,caml_string_of_jsbytes("RPCs documentation and input/output schema")],
   _DD_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("RPC lookup failed. Block has been pruned and requested data deleted, service: "),
      [2,0,[12,32,[15,0]]]],
     caml_string_of_jsbytes
      ("RPC lookup failed. Block has been pruned and requested data deleted, service: %s %a")],
   _Du_=
    [0,
     [11,
      caml_string_of_jsbytes("Did not find service: "),
      [2,0,[12,32,[15,0]]]],
     caml_string_of_jsbytes("Did not find service: %s %a")],
   _Do_=caml_string_of_jsbytes(str$59),
   _Dk_=caml_string_of_jsbytes("Tezos_rpc.RPC_context.Not_found"),
   _Dl_=caml_string_of_jsbytes("Tezos_rpc.RPC_context.Gone"),
   _Dm_=caml_string_of_jsbytes("Tezos_rpc.RPC_context.Generic_error"),
   _Dn_=[0,caml_string_of_jsbytes("ocaml")],
   _Dr_=caml_string_of_jsbytes(str_uri),
   _Ds_=caml_string_of_jsbytes(str_method),
   _Dv_=
    caml_string_of_jsbytes
     ("RPC lookup failed. No RPC exists at the URL or the RPC tried to access non-existent data."),
   _Dw_=caml_string_of_jsbytes("RPC lookup failed"),
   _Dx_=caml_string_of_jsbytes("RPC_context.Not_found"),
   _DA_=caml_string_of_jsbytes(str_uri),
   _DB_=caml_string_of_jsbytes(str_method),
   _DE_=
    caml_string_of_jsbytes
     ("RPC lookup failed. Block has been pruned and requested data deleted."),
   _DF_=caml_string_of_jsbytes("RPC lookup failed because of deleted data"),
   _DG_=caml_string_of_jsbytes("RPC_context.Gone"),
   _DL_=caml_string_of_jsbytes("E2BIG"),
   _DN_=caml_string_of_jsbytes("EACCES"),
   _DO_=caml_string_of_jsbytes("EAGAIN"),
   _DP_=caml_string_of_jsbytes("EBADF"),
   _DQ_=caml_string_of_jsbytes("EBUSY"),
   _DR_=caml_string_of_jsbytes("ECHILD"),
   _DS_=caml_string_of_jsbytes("EDEADLK"),
   _DT_=caml_string_of_jsbytes("EDOM"),
   _DU_=caml_string_of_jsbytes("EEXIST"),
   _DV_=caml_string_of_jsbytes("EFAULT"),
   _DW_=caml_string_of_jsbytes("EFBIG"),
   _DX_=caml_string_of_jsbytes("EINTR"),
   _DY_=caml_string_of_jsbytes("EINVAL"),
   _DZ_=caml_string_of_jsbytes("EIO"),
   _D0_=caml_string_of_jsbytes("EISDIR"),
   _D1_=caml_string_of_jsbytes("EMFILE"),
   _D2_=caml_string_of_jsbytes("EMLINK"),
   _D3_=caml_string_of_jsbytes("ENAMETOOLONG"),
   _D4_=caml_string_of_jsbytes("ENFILE"),
   _D5_=caml_string_of_jsbytes("ENODEV"),
   _D6_=caml_string_of_jsbytes("ENOENT"),
   _D7_=caml_string_of_jsbytes("ENOEXEC"),
   _D8_=caml_string_of_jsbytes("ENOLCK"),
   _D9_=caml_string_of_jsbytes("ENOMEM"),
   _D__=caml_string_of_jsbytes("ENOSPC"),
   _D$_=caml_string_of_jsbytes("ENOSYS"),
   _Ea_=caml_string_of_jsbytes("ENOTDIR"),
   _Eb_=caml_string_of_jsbytes("ENOTEMPTY"),
   _Ec_=caml_string_of_jsbytes("ENOTTY"),
   _Ed_=caml_string_of_jsbytes("ENXIO"),
   _Ee_=caml_string_of_jsbytes("EPERM"),
   _Ef_=caml_string_of_jsbytes("EPIPE"),
   _Eg_=caml_string_of_jsbytes("ERANGE"),
   _Eh_=caml_string_of_jsbytes("EROFS"),
   _Ei_=caml_string_of_jsbytes("ESPIPE"),
   _Ej_=caml_string_of_jsbytes("ESRCH"),
   _Ek_=caml_string_of_jsbytes("EXDEV"),
   _El_=caml_string_of_jsbytes("EWOULDBLOCK"),
   _Em_=caml_string_of_jsbytes("EINPROGRESS"),
   _En_=caml_string_of_jsbytes("EALREADY"),
   _Eo_=caml_string_of_jsbytes("ENOTSOCK"),
   _Ep_=caml_string_of_jsbytes("EDESTADDRREQ"),
   _Eq_=caml_string_of_jsbytes("EMSGSIZE"),
   _Er_=caml_string_of_jsbytes("EPROTOTYPE"),
   _Es_=caml_string_of_jsbytes("ENOPROTOOPT"),
   _Et_=caml_string_of_jsbytes("EPROTONOSUPPORT"),
   _Eu_=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
   _Ev_=caml_string_of_jsbytes("EOPNOTSUPP"),
   _Ew_=caml_string_of_jsbytes("EPFNOSUPPORT"),
   _Ex_=caml_string_of_jsbytes("EAFNOSUPPORT"),
   _Ey_=caml_string_of_jsbytes("EADDRINUSE"),
   _Ez_=caml_string_of_jsbytes("EADDRNOTAVAIL"),
   _EA_=caml_string_of_jsbytes("ENETDOWN"),
   _EB_=caml_string_of_jsbytes("ENETUNREACH"),
   _EC_=caml_string_of_jsbytes("ENETRESET"),
   _ED_=caml_string_of_jsbytes("ECONNABORTED"),
   _EE_=caml_string_of_jsbytes("ECONNRESET"),
   _EF_=caml_string_of_jsbytes("ENOBUFS"),
   _EG_=caml_string_of_jsbytes("EISCONN"),
   _EH_=caml_string_of_jsbytes("ENOTCONN"),
   _EI_=caml_string_of_jsbytes("ESHUTDOWN"),
   _EJ_=caml_string_of_jsbytes("ETOOMANYREFS"),
   _EK_=caml_string_of_jsbytes("ETIMEDOUT"),
   _EL_=caml_string_of_jsbytes("ECONNREFUSED"),
   _EM_=caml_string_of_jsbytes("EHOSTDOWN"),
   _EN_=caml_string_of_jsbytes("EHOSTUNREACH"),
   _EO_=caml_string_of_jsbytes("ELOOP"),
   _EP_=caml_string_of_jsbytes("EOVERFLOW"),
   _EQ_=
    [0,
     [11,caml_string_of_jsbytes("EUNKNOWNERR "),[4,0,0,0,0]],
     caml_string_of_jsbytes("EUNKNOWNERR %d")],
   _DM_=
    [0,
     [11,
      caml_string_of_jsbytes("Unix.Unix_error(Unix."),
      [2,
       0,
       [11,
        caml_string_of_jsbytes(str$50),
        [3,0,[11,caml_string_of_jsbytes(str$50),[3,0,[12,41,0]]]]]]],
     caml_string_of_jsbytes("Unix.Unix_error(Unix.%s, %S, %S)")],
   _DH_=caml_string_of_jsbytes(str_Unix_Unix_error),
   _DI_=caml_string_of_jsbytes(str$59),
   _DJ_=caml_string_of_jsbytes(str$59),
   _DK_=caml_string_of_jsbytes(str_Unix_Unix_error),
   _ER_=caml_string_of_jsbytes("0.0.0.0"),
   _ES_=caml_string_of_jsbytes("127.0.0.1"),
   _aMF_=caml_string_of_jsbytes(str$70),
   _aME_=caml_string_of_jsbytes("::1"),
   _E0_=caml_string_of_jsbytes("P256.keypair: failure"),
   _EZ_=[0,caml_string_of_jsbytes("src/lib_hacl_glue/js/src/hacl.ml"),685,10],
   _EY_=caml_string_of_jsbytes("P256.raw_from_uncompressed failure"),
   _EX_=caml_string_of_jsbytes("P256.raw_from_compressed: failure"),
   _EW_=caml_string_of_jsbytes("Secretbox encryption failed"),
   _EV_=
    [0,
     [11,
      caml_string_of_jsbytes("Secretbox.unsafe_of_bytes: buffer must be "),
      [4,0,0,0,[11,caml_string_of_jsbytes(" bytes long"),0]]],
     caml_string_of_jsbytes
      ("Secretbox.unsafe_of_bytes: buffer must be %d bytes long")],
   _EU_=
    caml_string_of_jsbytes("Blake2b.direct: size must be between 1 and 64"),
   _ET_=caml_string_of_jsbytes("Error getting random bytes"),
   _Fc_=
    [0,
     [11,caml_string_of_jsbytes(str_Sign_write_buff_abr),[4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Sign_write_buff_abr$0)],
   _Fb_=
    caml_string_of_jsbytes
     ("Sign.write_exn: buffer too small to contain a DER signature"),
   _Fd_=
    [0,
     [11,caml_string_of_jsbytes(str_Sign_write_buff_abr),[4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Sign_write_buff_abr$0)],
   _E$_=
    [0,
     [11,
      caml_string_of_jsbytes("Sign.read: invalid buffer size "),
      [4,0,0,0,0]],
     caml_string_of_jsbytes("Sign.read: invalid buffer size %d")],
   _Fa_=caml_string_of_jsbytes("Sign.read: signature could not be parsed"),
   _E9_=
    caml_string_of_jsbytes("Key.write (secret): pos < 0 or pos + 32 > buflen"),
   _E__=
    [0,
     [11,
      caml_string_of_jsbytes("Key.write (public): pos="),
      [4,0,0,0,[11,caml_string_of_jsbytes(", buflen="),[4,0,0,0,0]]]],
     caml_string_of_jsbytes("Key.write (public): pos=%d, buflen=%d")],
   _E7_=
    [0,
     [11,
      caml_string_of_jsbytes("Key.read_pk: invalid buffer size "),
      [4,0,0,0,0]],
     caml_string_of_jsbytes("Key.read_pk: invalid buffer size %d")],
   _E8_=caml_string_of_jsbytes("Key.read_pk_exn: public key is invalid"),
   _E5_=
    [0,
     [11,
      caml_string_of_jsbytes("Key.read_sk: invalid buffer size "),
      [4,0,0,0,0]],
     caml_string_of_jsbytes("Key.read_sk: invalid buffer size %d")],
   _E6_=caml_string_of_jsbytes("Key.read_sk: secret key is invalid"),
   _E4_=caml_string_of_jsbytes("Key.neuterize_exn: invalid secret key"),
   _E3_=
    caml_string_of_jsbytes
     ("Context.randomize: input must be at least 32 bytes long"),
   _Fe_=caml_string_of_jsbytes("Ringo.Utils.n_first: negative n"),
   _Fu_=[0,caml_string_of_jsbytes(str_src_dll_ml),168,15],
   _Fv_=[0,caml_string_of_jsbytes(str_src_dll_ml),177,32],
   _Fw_=[0,caml_string_of_jsbytes(str_src_dll_ml),num_176,26],
   _Fq_=[0,caml_string_of_jsbytes(str_src_dll_ml),num_144,15],
   _Ft_=[0,caml_string_of_jsbytes(str_src_dll_ml),148,10],
   _Fs_=[0,caml_string_of_jsbytes(str_src_dll_ml),149,10],
   _Fr_=[0,caml_string_of_jsbytes(str_src_dll_ml),150,10],
   _Fp_=[0,0,0],
   _Fo_=[0,caml_string_of_jsbytes(str_src_dll_ml),75,6],
   _Fn_=[0,caml_string_of_jsbytes(str_src_dll_ml),76,6],
   _Fm_=[0,caml_string_of_jsbytes(str_src_dll_ml),94,14],
   _Fl_=[0,caml_string_of_jsbytes(str_src_dll_ml),63,6],
   _Fk_=[0,caml_string_of_jsbytes(str_src_dll_ml),64,6],
   _Fj_=[0,caml_string_of_jsbytes(str_src_dll_ml),65,6],
   _Fi_=[0,caml_string_of_jsbytes(str_src_dll_ml),66,6],
   _Fh_=[0,caml_string_of_jsbytes(str_src_dll_ml),67,6],
   _Fg_=[0,caml_string_of_jsbytes(str_src_dll_ml),68,6],
   _Ff_=caml_string_of_jsbytes("Ringo.Dll.create: negative or null capacity"),
   _Fx_=caml_string_of_jsbytes("Ring.create: capacity must be positive"),
   _FI_=
    [0,
     [11,
      caml_string_of_jsbytes("Unexpected prefix "),
      [2,0,[11,caml_string_of_jsbytes(str_expected$1),[2,0,[12,41,0]]]]],
     caml_string_of_jsbytes("Unexpected prefix %s (expected %s)")],
   _FJ_=
    [0,
     [11,
      caml_string_of_jsbytes("Unexpected encoded length "),
      [4,
       0,
       0,
       0,
       [11,
        caml_string_of_jsbytes(" for "),
        [2,0,[11,caml_string_of_jsbytes(str_expected$1),[4,0,0,0,[12,41,0]]]]]]],
     caml_string_of_jsbytes
      ("Unexpected encoded length %d for %s (expected %d)")],
   _FH_=[0,caml_string_of_jsbytes(str_src_lib_crypto_b_abr),217,6],
   _FG_=[0,caml_string_of_jsbytes(str_src_lib_crypto_b_abr),num_213,6],
   _FE_=
    [0,
     [11,caml_string_of_jsbytes(str_Base58_registere_abr),0],
     caml_string_of_jsbytes(str_Base58_registere_abr)],
   _FF_=
    caml_string_of_jsbytes("Base58.register_encoding: not a unique prefix."),
   _FD_=
    [0,
     [11,
      caml_string_of_jsbytes("Base58.register_encoding: duplicate prefix: "),
      [3,0,[11,caml_string_of_jsbytes(str$50),[3,0,[12,46,0]]]]],
     caml_string_of_jsbytes
      ("Base58.register_encoding: duplicate prefix: %S, %S.")],
   _Fy_=caml_string_of_jsbytes("Base58: invalid alphabet (length)"),
   _Fz_=
    [0,
     [11,
      caml_string_of_jsbytes("Base58: invalid alphabet (dup '"),
      [0,
       [11,caml_string_of_jsbytes("' "),[4,0,0,0,[12,32,[4,0,0,0,[12,41,0]]]]]]],
     caml_string_of_jsbytes("Base58: invalid alphabet (dup '%c' %d %d)")],
   _FA_=
    caml_string_of_jsbytes
     ("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),
   _FB_=
    caml_string_of_jsbytes
     ("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"),
   _FC_=
    caml_string_of_jsbytes
     ("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),
   _FX_=caml_string_of_jsbytes(str_content),
   _FY_=caml_string_of_jsbytes("capacity"),
   _FW_=[0,caml_string_of_jsbytes("src/lib_crypto/helpers.ml"),220,8],
   _FV_=
    caml_string_of_jsbytes("Tezos_crypto.Helpers.MakeIterator(H).Set.Found"),
   _FT_=
    [0,
     [11,
      caml_string_of_jsbytes("failed to decode Base58Check-encoded data ("),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes
      ("failed to decode Base58Check-encoded data (%s): %S")],
   _FS_=caml_string_of_jsbytes(str_Base58Check_en_abr),
   _FU_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(str_Base58Check_en_abr),0]],
     caml_string_of_jsbytes("%s (Base58Check-encoded)")],
   _FR_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Failed_to_read_a_abr$0),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes(str_Failed_to_read_a_abr)],
   _FQ_=
    [0,
     [11,caml_string_of_jsbytes(str_Unexpected_data),[2,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Unexpected_data_abr)],
   _FP_=
    [0,
     [11,caml_string_of_jsbytes("of_hex ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("of_hex (%s)")],
   _FO_=
    [0,
     [11,caml_string_of_jsbytes("of_hex_exn ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("of_hex_exn (%s)")],
   _FN_=
    [0,
     [11,caml_string_of_jsbytes("of_string ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("of_string (%s)")],
   _FM_=
    [0,
     [11,caml_string_of_jsbytes("of_string_exn ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("of_string_exn (%s)")],
   _FL_=
    [0,
     [11,caml_string_of_jsbytes("of_bytes ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("of_bytes (%s)")],
   _FK_=
    [0,
     [11,caml_string_of_jsbytes("of_bytes_exn ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("of_bytes_exn (%s)")],
   _Gd_=[0,0],
   _Ge_=[0,0],
   _Gf_=caml_string_of_jsbytes("Op"),
   _Gg_=caml_string_of_jsbytes(str_path),
   _Gh_=caml_string_of_jsbytes("left"),
   _Gi_=[0,15],
   _Gj_=caml_string_of_jsbytes("Right"),
   _Gk_=caml_string_of_jsbytes("right"),
   _Gl_=caml_string_of_jsbytes(str_path),
   _Gm_=[0,num_240],
   _Gn_=caml_string_of_jsbytes("Left"),
   _Go_=caml_string_of_jsbytes(str_path),
   _Gb_=caml_string_of_jsbytes(str_compute_path),
   _Gc_=caml_string_of_jsbytes(str_compute_path),
   _Ga_=caml_string_of_jsbytes("Tezos_crypto.Blake2B.Make(R)(K).Data"),
   _F$_=caml_string_of_jsbytes(str$59),
   _F__=caml_string_of_jsbytes(str$59),
   _F9_=caml_string_of_jsbytes(str$59),
   _F8_=caml_string_of_jsbytes(str$59),
   _F7_=caml_string_of_jsbytes(str$59),
   _F6_=caml_string_of_jsbytes(str$59),
   _F5_=caml_string_of_jsbytes(str$59),
   _F4_=caml_string_of_jsbytes(str$59),
   _F3_=caml_string_of_jsbytes(str$59),
   _F2_=
    [0,
     [11,
      caml_string_of_jsbytes("Failed to deserialize a hash ("),
      [2,0,[12,41,0]]],
     caml_string_of_jsbytes("Failed to deserialize a hash (%s)")],
   _F1_=
    [0,
     [2,
      0,
      [11,caml_string_of_jsbytes(str_of_bytes_wrong_abr),[4,0,0,0,[12,41,0]]]],
     caml_string_of_jsbytes(str_s_of_bytes_wro_abr)],
   _F0_=
    [0,
     [2,
      0,
      [11,caml_string_of_jsbytes(str_of_string_wron_abr),[4,0,0,0,[12,41,0]]]],
     caml_string_of_jsbytes(str_s_of_string_wr_abr)],
   _FZ_=
    [0,
     [2,
      0,
      [11,caml_string_of_jsbytes(str_of_string_wron_abr),[4,0,0,0,[12,41,0]]]],
     caml_string_of_jsbytes(str_s_of_string_wr_abr)],
   _Gt_=caml_string_of_jsbytes(str_block_hash),
   _Gu_=[0,caml_string_of_jsbytes("Block Hash")],
   _Gv_=caml_string_of_jsbytes("predecessor_hash"),
   _Gw_=[0,caml_string_of_jsbytes("Block Predecessor Hash")],
   _Gx_=caml_string_of_jsbytes(str_B$0),
   _Gz_=
    [0,
     [2,
      0,
      [11,caml_string_of_jsbytes(str_of_bytes_wrong_abr),[4,0,0,0,[12,41,0]]]],
     caml_string_of_jsbytes(str_s_of_bytes_wro_abr)],
   _Gy_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes(".of_string_exn: wrong string size ("),
       [4,0,0,0,[12,41,0]]]],
     caml_string_of_jsbytes("%s.of_string_exn: wrong string size (%d)")],
   _GA_=caml_string_of_jsbytes("Tezos_crypto.Chain_id.Data"),
   _GL_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Failed_to_read_a_abr$0),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes(str_Failed_to_read_a_abr)],
   _GK_=
    [0,
     [11,caml_string_of_jsbytes(str_Unexpected_data),[2,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Unexpected_data_abr)],
   _GD_=caml_string_of_jsbytes("tz1"),
   _GE_=caml_string_of_jsbytes("Tezos_crypto.Ed25519.Public_key.Data"),
   _GG_=caml_string_of_jsbytes("edpk"),
   _GH_=caml_string_of_jsbytes("Tezos_crypto.Ed25519.Secret_key.Data"),
   _GM_=caml_string_of_jsbytes(str_edsk),
   _GN_=caml_string_of_jsbytes(str_edsk),
   _GO_=caml_string_of_jsbytes("Tezos_crypto.Ed25519.Data"),
   _GP_=caml_string_of_jsbytes("edsig"),
   _GS_=caml_string_of_jsbytes("tz3"),
   _GT_=caml_string_of_jsbytes("Tezos_crypto.P256.Public_key.Data"),
   _GV_=caml_string_of_jsbytes("p2pk"),
   _GW_=caml_string_of_jsbytes("Tezos_crypto.P256.Secret_key.Data"),
   _GX_=caml_string_of_jsbytes("p2sk"),
   _GY_=caml_string_of_jsbytes("Tezos_crypto.P256.Data"),
   _GZ_=caml_string_of_jsbytes("p2sig"),
   _G2_=caml_string_of_jsbytes("tz2"),
   _G3_=
    caml_string_of_jsbytes
     ("Secp256k1 context randomization failed. Aborting."),
   _G4_=caml_string_of_jsbytes("Tezos_crypto.Secp256k1.Public_key.Data"),
   _G6_=caml_string_of_jsbytes("sppk"),
   _G8_=caml_string_of_jsbytes("Tezos_crypto.Secp256k1.Secret_key.Data"),
   _G9_=caml_string_of_jsbytes("spsk"),
   _G__=caml_string_of_jsbytes("Tezos_crypto.Secp256k1.Data"),
   _G$_=caml_string_of_jsbytes("spsig1"),
   _Ik_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Failed_to_read_a_abr$0),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes(str_Failed_to_read_a_abr)],
   _Ij_=
    [0,
     [11,caml_string_of_jsbytes(str_Unexpected_data),[2,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Unexpected_data_abr)],
   _H3_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Failed_to_read_a_abr$0),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes(str_Failed_to_read_a_abr)],
   _H2_=
    [0,
     [11,caml_string_of_jsbytes(str_Unexpected_data),[2,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Unexpected_data_abr)],
   _H0_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),num_450,24],
   _HZ_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),num_451,24],
   _HG_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Failed_to_read_a_abr$0),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes(str_Failed_to_read_a_abr)],
   _HF_=
    [0,
     [11,caml_string_of_jsbytes(str_Unexpected_data),[2,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Unexpected_data_abr)],
   _HD_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),num_319,24],
   _HC_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),num_320,24],
   _Hw_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Failed_to_read_a_abr$0),
      [2,0,[11,caml_string_of_jsbytes(str$8),[3,0,0]]]],
     caml_string_of_jsbytes(str_Failed_to_read_a_abr)],
   _Hv_=
    [0,
     [11,caml_string_of_jsbytes(str_Unexpected_data),[2,0,[12,41,0]]],
     caml_string_of_jsbytes(str_Unexpected_data_abr)],
   _He_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),67,24],
   _Hd_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),68,24],
   _Ha_=caml_string_of_jsbytes("Tezos_crypto.Signature.Public_key_hash.Data"),
   _Hf_=caml_string_of_jsbytes(str$35),
   _Hi_=[0,2],
   _Hj_=caml_string_of_jsbytes(str_P256),
   _Hm_=[0,1],
   _Hn_=caml_string_of_jsbytes(str_Secp256k1),
   _Hq_=[0,0],
   _Hr_=caml_string_of_jsbytes(str_Ed25519),
   _Ht_=caml_string_of_jsbytes("public_key_hash"),
   _aMD_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),num_208,4],
   _aMC_=[0,caml_string_of_jsbytes(str_src_lib_crypto_s_abr),209,4],
   _Hx_=caml_string_of_jsbytes(str_pkh),
   _Hy_=
    [0,
     caml_string_of_jsbytes
      ("A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)")],
   _Hz_=caml_string_of_jsbytes("Tezos_crypto.Signature.Public_key.Data"),
   _HE_=caml_string_of_jsbytes(str$35),
   _HJ_=[0,2],
   _HK_=caml_string_of_jsbytes(str_P256),
   _HN_=[0,1],
   _HO_=caml_string_of_jsbytes(str_Secp256k1),
   _HR_=[0,0],
   _HS_=caml_string_of_jsbytes(str_Ed25519),
   _HU_=caml_string_of_jsbytes(str_public_key),
   _HW_=caml_string_of_jsbytes("Tezos_crypto.Signature.Secret_key.Data"),
   _H1_=caml_string_of_jsbytes(str$35),
   _H6_=[0,2],
   _H7_=caml_string_of_jsbytes(str_P256),
   _H__=[0,1],
   _H$_=caml_string_of_jsbytes(str_Secp256k1),
   _Ic_=[0,0],
   _Id_=caml_string_of_jsbytes(str_Ed25519),
   _If_=caml_string_of_jsbytes(str_secret_key),
   _Ih_=caml_string_of_jsbytes("Tezos_crypto.Signature.Data"),
   _Ii_=caml_string_of_jsbytes("sig"),
   _In_=caml_string_of_jsbytes("P"),
   _Iq_=caml_string_of_jsbytes("r"),
   _Iu_=caml_string_of_jsbytes("Lr"),
   _Iy_=caml_string_of_jsbytes("LLr"),
   _IB_=caml_string_of_jsbytes(str_o),
   _IF_=caml_string_of_jsbytes("Lo"),
   _IJ_=caml_string_of_jsbytes("LLo"),
   _IP_=caml_string_of_jsbytes("Cryptobox.target_of_float"),
   _IQ_=caml_int64_create_lo_mi_hi(1,0,0),
   _IM_=caml_string_of_jsbytes(str_id),
   _IN_=caml_string_of_jsbytes("Init -> Resp"),
   _IO_=caml_string_of_jsbytes("Resp -> Init"),
   _IT_=caml_string_of_jsbytes("Co"),
   _IW_=caml_string_of_jsbytes("bm"),
   _IZ_=caml_string_of_jsbytes(str$34),
   _IX_=caml_string_of_jsbytes("Lwt_log_rules.Parse_error"),
   _Jl_=caml_string_of_jsbytes(str_Invalid_log_rules),
   _Jm_=caml_string_of_jsbytes(str_Invalid_log_rules),
   _Jn_=
    [0,
     [11,caml_string_of_jsbytes("Invalid log rules\n"),[10,0]],
     caml_string_of_jsbytes("Invalid log rules\n%!")],
   _Jk_=[0,caml_string_of_jsbytes(str$59),0],
   _Ji_=[0,caml_string_of_jsbytes(str$59),0],
   _Jj_=caml_string_of_jsbytes(str$59),
   _I8_=caml_string_of_jsbytes(str_debug),
   _I9_=caml_string_of_jsbytes(str_error),
   _I__=caml_string_of_jsbytes(str_fatal),
   _I$_=caml_string_of_jsbytes(str_info),
   _Ja_=caml_string_of_jsbytes(str_notice),
   _Jb_=caml_string_of_jsbytes(str_warning),
   _Jc_=[0,3],
   _Jd_=[0,2],
   _Je_=[0,1],
   _Jf_=[0,5],
   _Jg_=[0,4],
   _Jh_=[0,0],
   _I2_=caml_string_of_jsbytes(str_debug),
   _I3_=caml_string_of_jsbytes(str_info),
   _I4_=caml_string_of_jsbytes(str_notice),
   _I5_=caml_string_of_jsbytes(str_warning),
   _I6_=caml_string_of_jsbytes(str_error),
   _I7_=caml_string_of_jsbytes(str_fatal),
   _I0_=[0,[12,10,[10,0]],caml_string_of_jsbytes("\n%!")],
   _I1_=
    [0,
     [11,caml_string_of_jsbytes(str_Lwt_log),0],
     caml_string_of_jsbytes(str_Lwt_log)],
   _aMA_=caml_string_of_jsbytes("LWT_LOG"),
   _Jp_=caml_string_of_jsbytes(str_main),
   _Jq_=caml_string_of_jsbytes("Lwt_log_core.Logger_closed"),
   _KU_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _KQ_=
    [0,
     [11,caml_string_of_jsbytes(str_Ended),0],
     caml_string_of_jsbytes(str_Ended)],
   _KR_=
    [0,
     [11,caml_string_of_jsbytes(str_Started),0],
     caml_string_of_jsbytes(str_Started)],
   _KS_=
    [0,
     [11,caml_string_of_jsbytes("Failed with "),[2,0,0]],
     caml_string_of_jsbytes("Failed with %s")],
   _KT_=
    [0,
     [11,
      caml_string_of_jsbytes("Worker "),
      [2,0,[12,58,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,0]]]]],
     caml_string_of_jsbytes("Worker %s:@ %a")],
   _KG_=[0,0],
   _Ky_=[0,0],
   _Km_=
    [0,
     [2,
      0,
      [12,
       58,
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [2,0,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,0]]]]]],
     caml_string_of_jsbytes("%s:@ %s@ %a")],
   _Kg_=caml_string_of_jsbytes(str$59),
   _Kf_=
    [0,
     [2,0,[12,58,[17,[0,caml_string_of_jsbytes(str$5),1,0],[2,0,0]]]],
     caml_string_of_jsbytes("%s:@ %s")],
   _J4_=caml_string_of_jsbytes(str_event),
   _J5_=
    [0,
     caml_string_of_jsbytes
      ("String identifier for the class of event being logged")],
   _J6_=caml_string_of_jsbytes(str_exception),
   _J7_=[0,caml_string_of_jsbytes("Exception which was detected")],
   _J3_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _J2_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _JX_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _JV_=caml_string_of_jsbytes(str$60),
   _JW_=caml_string_of_jsbytes("legacy_logging_event-"),
   _JY_=caml_string_of_jsbytes("tags"),
   _JZ_=caml_string_of_jsbytes(str_level),
   _J0_=caml_string_of_jsbytes("section"),
   _J1_=caml_string_of_jsbytes(str_message),
   _JT_=
    [0,
     [11,
      caml_string_of_jsbytes("invalid event name: "),
      [3,0,[11,caml_string_of_jsbytes(" contains '"),[0,[12,39,0]]]]],
     caml_string_of_jsbytes("invalid event name: %S contains '%c'")],
   _JU_=
    [0,
     [11,caml_string_of_jsbytes("duplicate Event name: "),[3,0,0]],
     caml_string_of_jsbytes("duplicate Event name: %S")],
   _JS_=caml_string_of_jsbytes("Internal_event registration error: "),
   _JP_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(": Missing URI scheme "),[3,0,0]]],
     caml_string_of_jsbytes("%s: Missing URI scheme %S")],
   _JQ_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(": URI scheme not registered "),[3,0,0]]],
     caml_string_of_jsbytes("%s: URI scheme not registered %S")],
   _Jw_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("Internal_event: registering duplicate URI scheme: "),
      [3,0,0]],
     caml_string_of_jsbytes
      ("Internal_event: registering duplicate URI scheme: %S")],
   _Jt_=caml_string_of_jsbytes(str$48),
   _Js_=
    [0,
     [11,
      caml_string_of_jsbytes("Internal_event.Section: invalid name "),
      [3,0,[11,caml_string_of_jsbytes(" (contains "),[0,[12,41,0]]]]],
     caml_string_of_jsbytes
      ("Internal_event.Section: invalid name %S (contains %c)")],
   _Jr_=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]]],
   _Jx_=
    caml_string_of_jsbytes
     ("Tezos_event_logging.Internal_event.All_sinks.Activation_error"),
   _JD_=caml_string_of_jsbytes(str_uri),
   _JE_=caml_string_of_jsbytes(str_non_registered_u_abr),
   _JF_=[0,2],
   _JG_=caml_string_of_jsbytes(str_non_registered_u_abr),
   _JK_=caml_string_of_jsbytes(str_uri),
   _JL_=caml_string_of_jsbytes(str_missing_uri_scheme),
   _JM_=[0,0],
   _JN_=caml_string_of_jsbytes(str_missing_uri_scheme),
   _JR_=caml_string_of_jsbytes("internal-event-activation-error"),
   _J8_=caml_string_of_jsbytes(str_trace),
   _J__=
    [0,
     [0,caml_string_of_jsbytes(str_fatal),num_243443684],
     [0,[0,caml_string_of_jsbytes("recoverable"),-169772514],0]],
   _J$_=caml_string_of_jsbytes("severity"),
   _Kb_=caml_string_of_jsbytes(str_message),
   _Kh_=caml_string_of_jsbytes("attachment"),
   _Ki_=caml_string_of_jsbytes(str_message),
   _Kq_=caml_string_of_jsbytes(str_exception),
   _Kr_=caml_string_of_jsbytes(str_failed),
   _Ks_=caml_string_of_jsbytes(str_kind),
   _Kt_=[0,2],
   _Ku_=caml_string_of_jsbytes(str_failed),
   _Kz_=caml_string_of_jsbytes(str_ended),
   _KA_=caml_string_of_jsbytes(str_kind),
   _KB_=[0,1],
   _KC_=caml_string_of_jsbytes(str_ended),
   _KH_=caml_string_of_jsbytes(str_started),
   _KI_=caml_string_of_jsbytes(str_kind),
   _KJ_=[0,0],
   _KK_=caml_string_of_jsbytes(str_started),
   _KL_=caml_string_of_jsbytes(str_event),
   _KM_=caml_string_of_jsbytes(str_name),
   _KY_=[0,caml_string_of_jsbytes("lib/automata.ml"),360,21],
   _KX_=[1,0],
   _K4_=[0,caml_string_of_jsbytes(str_lib_core_ml),690,4],
   _K9_=caml_string_of_jsbytes("Re.compl"),
   _K8_=[0,1],
   _K6_=caml_string_of_jsbytes(str_Re_repn),
   _K7_=caml_string_of_jsbytes(str_Re_repn),
   _K5_=[0,caml_string_of_jsbytes(str_lib_core_ml),723,13],
   _K3_=[0,caml_string_of_jsbytes(str_lib_core_ml),493,35],
   _KZ_=[0,0,0,0,0,0,0,0,0,0,0],
   _K2_=[0,num_170,[0,num_181,[0,num_186,[0,num_223,[0,num_255,0]]]]],
   _Le_=caml_string_of_jsbytes("\t "),
   _Lf_=caml_string_of_jsbytes("Re__Emacs.Parse_error"),
   _Lg_=caml_string_of_jsbytes("Re__Emacs.Not_supported"),
   _LF_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _LB_=
    [0,
     [4,
      0,
      [0,2,4],
      0,
      [12,
       45,
       [4,
        0,
        [0,2,2],
        0,
        [12,
         45,
         [4,
          0,
          [0,2,2],
          0,
          [0,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,partial$16]]]]]]]]]],
     caml_string_of_jsbytes("%04d-%02d-%02d%c%02d:%02d:%02d")],
   _LC_=[0,[12,46,[7,0,[1,2],0,0]],caml_string_of_jsbytes(".%0*Ld")],
   _LE_=[0,[12,90,0],caml_string_of_jsbytes("Z")],
   _LD_=
    [0,
     [0,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,0]]]],
     caml_string_of_jsbytes("%c%02d:%02d")],
   _LA_=[0,0,1],
   _Lz_=caml_int64_create_lo_mi_hi(0,0,0),
   _Ly_=[0,0],
   _Lv_=[0,0],
   _Lx_=[0,num_122,0],
   _Lw_=[0,43,[0,45,[0,90,0]]],
   _Lu_=caml_int64_create_lo_mi_hi(10,0,0),
   _Lt_=[0,num_122,0],
   _Ls_=[0,46,[0,43,[0,45,[0,90,0]]]],
   _Lr_=[0,num_116,[0,32,0]],
   _Lq_=[0,84,0],
   _Lp_=caml_list_of_js_array([num_498443355,48,49,50,51,52,53,54,55,56,57]),
   _Ll_=caml_int64_create_lo_mi_hi(0,0,0),
   _Lk_=caml_int64_create_lo_mi_hi(0,0,0),
   _Li_=caml_int64_create_lo_mi_hi(0,0,0),
   _Lj_=caml_int64_create_lo_mi_hi(0,0,0),
   _Lh_=caml_int64_create_lo_mi_hi(0,0,0),
   _Lm_=
    [0,
     caml_int64_create_lo_mi_hi(num_10817536,num_59604,0),
     caml_int64_create_lo_mi_hi(7792640,5960,0),
     caml_int64_create_lo_mi_hi(779264,596,0),
     caml_int64_create_lo_mi_hi(10144256,59,0),
     caml_int64_create_lo_mi_hi(16113920,5,0),
     caml_int64_create_lo_mi_hi(10000000,0,0),
     caml_int64_create_lo_mi_hi(1000000,0,0),
     caml_int64_create_lo_mi_hi(100000,0,0),
     caml_int64_create_lo_mi_hi(num_10000,0,0),
     caml_int64_create_lo_mi_hi(num_1000$0,0,0),
     caml_int64_create_lo_mi_hi(num_100,0,0),
     caml_int64_create_lo_mi_hi(10,0,0),
     caml_int64_create_lo_mi_hi(1,0,0)],
   _Ln_=[0,31,28,31,30,31,30,31,31,30,31,30,31],
   _Lo_=caml_string_of_jsbytes("Ptime.RFC3339"),
   _LH_=[0,caml_string_of_jsbytes("src/fmt.ml"),610,53],
   _LG_=caml_string_of_jsbytes("K"),
   _L1_=
    [0,
     [11,
      caml_string_of_jsbytes("not an IPv4 address: "),
      [2,0,[11,caml_string_of_jsbytes("\nnot an IPv6 address: "),[2,0,0]]]],
     caml_string_of_jsbytes
      ("not an IPv4 address: %s\nnot an IPv6 address: %s")],
   _L0_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _LU_=[0,0],
   _LW_=
    [0,
     [4,6,0,0,[11,caml_string_of_jsbytes(str$70),0]],
     caml_string_of_jsbytes("%x::")],
   _LX_=[0,[4,6,0,0,0],caml_string_of_jsbytes(str_x)],
   _LV_=[0,[4,6,0,0,[12,58,0]],caml_string_of_jsbytes("%x:")],
   _LY_=caml_string_of_jsbytes(str$70),
   _LZ_=[0,caml_string_of_jsbytes("lib/ipaddr.ml"),662,4],
   _LT_=
    [0,
     [11,
      caml_string_of_jsbytes("component "),
      [4,0,0,0,[11,caml_string_of_jsbytes(" out of bounds"),0]]],
     caml_string_of_jsbytes("component %d out of bounds")],
   _LR_=[0,-1,0],
   _LS_=caml_string_of_jsbytes("too many components"),
   _LQ_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _LP_=
    [0,
     [5,0,0,0,[12,46,[5,0,0,0,[12,46,[5,0,0,0,[12,46,[5,0,0,0,0]]]]]]],
     caml_string_of_jsbytes("%ld.%ld.%ld.%ld")],
   _LL_=caml_string_of_jsbytes("first octet out of bounds"),
   _LM_=caml_string_of_jsbytes("second octet out of bounds"),
   _LN_=caml_string_of_jsbytes("third octet out of bounds"),
   _LO_=caml_string_of_jsbytes("fourth octet out of bounds"),
   _LK_=
    [0,
     [11,
      caml_string_of_jsbytes("invalid character '"),
      [0,[11,caml_string_of_jsbytes("' at "),[4,0,0,0,0]]]],
     caml_string_of_jsbytes("invalid character '%c' at %d")],
   _LJ_=caml_string_of_jsbytes("not enough data"),
   _LI_=caml_string_of_jsbytes("Ipaddr.Parse_error"),
   _MX_=caml_string_of_jsbytes(str_epoch),
   _MY_=caml_string_of_jsbytes(str_none),
   _MZ_=
    [0,
     [11,caml_string_of_jsbytes(str_failed_to_parse_abr$1),[3,0,0]],
     caml_string_of_jsbytes(str_failed_to_parse_abr$2)],
   _MU_=
    [0,
     caml_string_of_jsbytes
      ("A timestamp as seen by the underlying, local computer: subsecond-level precision, epoch or rfc3339 based.")],
   _MG_=caml_int64_create_lo_mi_hi(num_86400,0,0),
   _MH_=caml_int64_create_lo_mi_hi(num_10817536,num_59604,0),
   _MF_=caml_string_of_jsbytes("Time.of_seconds"),
   _MB_=caml_int64_create_lo_mi_hi(num_86400,0,0),
   _MC_=caml_int64_create_lo_mi_hi(num_10817536,num_59604,0),
   _MD_=caml_int64_create_lo_mi_hi(num_86400,0,0),
   _ME_=caml_int64_create_lo_mi_hi(0,0,0),
   _Mw_=
    [0,
     [11,caml_string_of_jsbytes(str_failed_to_parse_abr$0),[3,0,0]],
     caml_string_of_jsbytes(str_failed_to_parse_abr)],
   _Mx_=
    [0,
     [11,caml_string_of_jsbytes(str_failed_to_parse_abr$0),[3,0,0]],
     caml_string_of_jsbytes(str_failed_to_parse_abr)],
   _Ms_=
    [0,
     caml_string_of_jsbytes("A span of time, as seen by the local computer.")],
   _Mp_=caml_string_of_jsbytes("Time.System.Span.encoding"),
   _Mn_=caml_string_of_jsbytes("Time.System.Span.of_seconds_exn"),
   _Mh_=caml_string_of_jsbytes(str_epoch),
   _Mi_=caml_string_of_jsbytes(str_none),
   _Mj_=
    [0,
     [11,caml_string_of_jsbytes(str_failed_to_parse_abr$1),[3,0,0]],
     caml_string_of_jsbytes(str_failed_to_parse_abr$2)],
   _Me_=
    [0,
     caml_string_of_jsbytes
      ("A timestamp as seen by the protocol: second-level precision, epoch based.")],
   _Ma_=caml_string_of_jsbytes("Time.Protocol.decoding"),
   _L8_=[0,0],
   _L9_=[0,0],
   _L4_=caml_int64_create_lo_mi_hi(num_86400,0,0),
   _L5_=caml_int64_create_lo_mi_hi(num_10817536,num_59604,0),
   _L6_=caml_int64_create_lo_mi_hi(num_86400,0,0),
   _L7_=caml_string_of_jsbytes("Time.Protocol.to_ptime"),
   _L2_=caml_int64_create_lo_mi_hi(num_86400,0,0),
   _L3_=caml_int64_create_lo_mi_hi(num_10817536,num_59604,0),
   _Md_=caml_string_of_jsbytes("timestamp.protocol"),
   _Mk_=
    [0,
     [11,caml_string_of_jsbytes(str_date),0],
     caml_string_of_jsbytes(str_date)],
   _Mm_=
    [0,
     [11,caml_string_of_jsbytes(str_A_date_in_second_abr),0],
     caml_string_of_jsbytes(str_A_date_in_second_abr)],
   _Mr_=caml_string_of_jsbytes("timespan.system"),
   _My_=
    [0,
     [11,caml_string_of_jsbytes(str_timespan),0],
     caml_string_of_jsbytes(str_timespan)],
   _MA_=
    [0,
     [11,caml_string_of_jsbytes(str_A_span_of_time_i_abr),0],
     caml_string_of_jsbytes(str_A_span_of_time_i_abr)],
   _MJ_=[0,caml_string_of_jsbytes("A date in RFC 3339 notation.")],
   _MK_=[0,caml_string_of_jsbytes("RFC 3339 formatted timestamp")],
   _ML_=caml_string_of_jsbytes("timestamp.rfc"),
   _MO_=caml_string_of_jsbytes("Second since epoch"),
   _MR_=caml_string_of_jsbytes("RFC encoding"),
   _MT_=caml_string_of_jsbytes("timestamp.system"),
   _M0_=
    [0,
     [11,caml_string_of_jsbytes(str_date),0],
     caml_string_of_jsbytes(str_date)],
   _M2_=
    [0,
     [11,caml_string_of_jsbytes(str_A_date_in_second_abr),0],
     caml_string_of_jsbytes(str_A_date_in_second_abr)],
   _ND_=caml_string_of_jsbytes(str_request),
   _NE_=caml_string_of_jsbytes(str_pushed),
   _NF_=caml_string_of_jsbytes("events"),
   _NG_=caml_string_of_jsbytes(str_level),
   _NH_=caml_string_of_jsbytes(str_request),
   _NI_=caml_string_of_jsbytes(str_treated),
   _NJ_=caml_string_of_jsbytes(str_pushed),
   _NK_=caml_string_of_jsbytes("current_request"),
   _NL_=caml_string_of_jsbytes("backlog"),
   _NM_=caml_string_of_jsbytes("pending_requests"),
   _NN_=caml_string_of_jsbytes(str_status),
   _Nu_=caml_string_of_jsbytes("queue_length"),
   _Nv_=caml_string_of_jsbytes(str_status),
   _Nw_=caml_string_of_jsbytes("instances"),
   _M3_=caml_string_of_jsbytes(str_errors),
   _M4_=caml_string_of_jsbytes(str_since),
   _M5_=caml_string_of_jsbytes(str_birth),
   _M6_=caml_string_of_jsbytes("crashed"),
   _M7_=caml_string_of_jsbytes(str_phase),
   _M8_=[0,4],
   _M9_=caml_string_of_jsbytes("Crashed"),
   _M__=caml_string_of_jsbytes(str_since),
   _M$_=caml_string_of_jsbytes(str_birth),
   _Na_=caml_string_of_jsbytes(str_closed),
   _Nb_=caml_string_of_jsbytes(str_phase),
   _Nc_=[0,3],
   _Nd_=caml_string_of_jsbytes("Closed"),
   _Ne_=caml_string_of_jsbytes(str_since),
   _Nf_=caml_string_of_jsbytes(str_birth),
   _Ng_=caml_string_of_jsbytes("closing"),
   _Nh_=caml_string_of_jsbytes(str_phase),
   _Ni_=[0,2],
   _Nj_=caml_string_of_jsbytes("Closing"),
   _Nk_=caml_string_of_jsbytes(str_since),
   _Nl_=caml_string_of_jsbytes(str_running),
   _Nm_=caml_string_of_jsbytes(str_phase),
   _Nn_=[0,1],
   _No_=caml_string_of_jsbytes(str_Running),
   _Np_=caml_string_of_jsbytes(str_since),
   _Nq_=caml_string_of_jsbytes("launching"),
   _Nr_=caml_string_of_jsbytes(str_phase),
   _Ns_=[0,0],
   _Nt_=caml_string_of_jsbytes("Launching"),
   _Nx_=caml_string_of_jsbytes("completed"),
   _Ny_=caml_string_of_jsbytes(str_treated),
   _Nz_=caml_string_of_jsbytes(str_pushed),
   _NO_=caml_string_of_jsbytes(str_replacement_prot_abr),
   _NP_=caml_string_of_jsbytes(str_level),
   _NQ_=
    [0,
     caml_string_of_jsbytes
      ("User activated upgrades: at given level, switch to given protocol.")],
   _NR_=[0,caml_string_of_jsbytes("User activated upgrades")],
   _NS_=caml_string_of_jsbytes("user_activated.upgrades"),
   _NT_=caml_string_of_jsbytes(str_replacement_prot_abr),
   _NU_=caml_string_of_jsbytes("replaced_protocol"),
   _NV_=
    [0,
     caml_string_of_jsbytes
      ("User activated protocol overrides: activate a protocol instead of another.")],
   _NW_=[0,caml_string_of_jsbytes("User activated protocol overrides")],
   _NX_=caml_string_of_jsbytes("user_activated.protocol_overrides"),
   _NY_=
    [0,
     [15,[11,caml_string_of_jsbytes(str$70),[15,0]]],
     caml_string_of_jsbytes("%a::%a")],
   _NZ_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _N0_=caml_string_of_jsbytes("fitness.elem"),
   _N2_=
    [0,
     caml_string_of_jsbytes
      ("The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.")],
   _N3_=[0,caml_string_of_jsbytes("Block fitness")],
   _N4_=caml_string_of_jsbytes(str_fitness),
   _N5_=caml_string_of_jsbytes(str_context),
   _N6_=caml_string_of_jsbytes(str_fitness),
   _N7_=caml_string_of_jsbytes("operations_hash"),
   _N8_=caml_string_of_jsbytes(str_validation_pass),
   _N9_=caml_string_of_jsbytes(str_timestamp),
   _N__=caml_string_of_jsbytes("predecessor"),
   _N$_=caml_string_of_jsbytes("proto"),
   _Oa_=caml_string_of_jsbytes(str_level),
   _Oe_=
    [0,
     caml_string_of_jsbytes
      ("Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.")],
   _Of_=[0,caml_string_of_jsbytes("Shell header")],
   _Og_=caml_string_of_jsbytes("block_header.shell"),
   _Oh_=caml_string_of_jsbytes(str_protocol_data),
   _Ol_=
    [0,
     caml_string_of_jsbytes
      ("Block header. It contains both shell and protocol specific data.")],
   _Om_=[0,caml_string_of_jsbytes("Block header")],
   _On_=caml_string_of_jsbytes(str_block_header),
   _Oo_=[0,caml_string_of_jsbytes("A name for the distributed DB protocol")],
   _Op_=caml_string_of_jsbytes("distributed_db_version.name"),
   _Oq_=
    [0,
     caml_string_of_jsbytes
      ("A version number for the distributed DB protocol")],
   _Or_=caml_string_of_jsbytes(str_distributed_db_v_abr),
   _OG_=
    [0,
     [11,
      caml_string_of_jsbytes("Rejecting peer connection. Cause : "),
      [15,[12,46,0]]],
     caml_string_of_jsbytes("Rejecting peer connection. Cause : %a.")],
   _Os_=
    [0,
     [11,caml_string_of_jsbytes(str_No_motive),0],
     caml_string_of_jsbytes(str_No_motive)],
   _Ot_=
    [0,
     [11,caml_string_of_jsbytes(str_Too_many_connect_abr$1),0],
     caml_string_of_jsbytes(str_Too_many_connect_abr$1)],
   _Ou_=
    [0,
     [11,caml_string_of_jsbytes(str_Already_connecte_abr),0],
     caml_string_of_jsbytes(str_Already_connecte_abr)],
   _Ov_=
    [0,
     [11,caml_string_of_jsbytes(str_Unknown_chain_name),0],
     caml_string_of_jsbytes(str_Unknown_chain_name)],
   _Ow_=
    [0,
     [11,caml_string_of_jsbytes(str_Running_a_deprec_abr$0),0],
     caml_string_of_jsbytes(str_Running_a_deprec_abr$0)],
   _Ox_=
    [0,
     [11,caml_string_of_jsbytes(str_Running_a_deprec_abr),0],
     caml_string_of_jsbytes(str_Running_a_deprec_abr)],
   _Oy_=
    [0,
     [11,
      caml_string_of_jsbytes("Rejected for unknown reason, code ("),
      [4,3,0,0,[12,41,0]]],
     caml_string_of_jsbytes("Rejected for unknown reason, code (%i)")],
   _OB_=caml_string_of_jsbytes("Tezos_base.P2p_rejection.Rejecting"),
   _OE_=caml_string_of_jsbytes(str_motive),
   _OH_=caml_string_of_jsbytes("Rejecting peer connection with motive."),
   _OI_=caml_string_of_jsbytes("Rejecting socket connection"),
   _OJ_=caml_string_of_jsbytes("node.p2p_socket.rejecting_incoming"),
   _OK_=[0,caml_string_of_jsbytes("A version number for the p2p layer.")],
   _OL_=caml_string_of_jsbytes(str_p2p_version),
   _OV_=
    [0,
     caml_string_of_jsbytes
      ("A version number for the network protocol (includes distributed DB version and p2p version)")],
   _OM_=
    [0,
     [15,[12,46,[15,[11,caml_string_of_jsbytes(" (p2p: "),[15,[12,41,0]]]]]],
     caml_string_of_jsbytes("%a.%a (p2p: %a)")],
   _ON_=caml_string_of_jsbytes(str_p2p_version),
   _OO_=caml_string_of_jsbytes(str_distributed_db_v_abr),
   _OP_=caml_string_of_jsbytes("chain_name"),
   _OU_=caml_string_of_jsbytes(str_network_version),
   _O1_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _O2_=[0,[12,91,[15,[12,93,0]]],caml_string_of_jsbytes(str_a$1)],
   _O0_=[0,caml_string_of_jsbytes("An address for locating peers.")],
   _OZ_=caml_string_of_jsbytes("p2p_address"),
   _O3_=caml_string_of_jsbytes(str_peer_id),
   _O4_=
    [0,
     caml_string_of_jsbytes
      ("A cryptographic node identity (Base58Check-encoded)")],
   _Rr_=
    [0,
     caml_string_of_jsbytes
      ("Events happening during maintenance of and operations on a peer point pool (such as connections, disconnections, connection requests).")],
   _Rk_=[0,0],
   _QC_=caml_string_of_jsbytes(str_event_kind),
   _QB_=
    [0,
     caml_string_of_jsbytes
      ("Information about a peer point. Includes flags, state, and records about past events.")],
   _Qe_=
    [0,
     caml_string_of_jsbytes
      ("The state a connection to a peer point can be in: requested (connection open from here), accepted (handshake), running (connection already established), disconnected (no connection).")],
   _P9_=[0,0],
   _PO_=[0,0],
   _PK_=caml_string_of_jsbytes(str_event_kind),
   _PG_=
    [0,[11,caml_string_of_jsbytes(str$14),0],caml_string_of_jsbytes(str$14)],
   _PH_=
    [0,[11,caml_string_of_jsbytes(str$23),0],caml_string_of_jsbytes(str$23)],
   _PI_=
    [0,[11,caml_string_of_jsbytes(str$73),0],caml_string_of_jsbytes(str$73)],
   _PJ_=
    [0,[11,caml_string_of_jsbytes(str$28),0],caml_string_of_jsbytes(str$28)],
   _PF_=caml_string_of_jsbytes("state_of_state_peerid"),
   _Pv_=caml_string_of_jsbytes(str_accepted),
   _Pw_=caml_string_of_jsbytes(str_disconnected),
   _Px_=caml_string_of_jsbytes(str_requested),
   _Py_=caml_string_of_jsbytes(str_running),
   _PA_=[0,2],
   _PB_=[0,0],
   _PC_=[0,3],
   _PD_=[0,1],
   _Pz_=
    [0,
     [11,caml_string_of_jsbytes(str_Invalid_state),[2,0,0]],
     caml_string_of_jsbytes(str_Invalid_state_s)],
   _Pr_=caml_string_of_jsbytes(str_requested),
   _Ps_=caml_string_of_jsbytes(str_accepted),
   _Pt_=caml_string_of_jsbytes(str_running),
   _Pu_=caml_string_of_jsbytes(str_disconnected),
   _Pl_=[0,caml_string_of_jsbytes("Identifier for a peer point")],
   _Ph_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _Pg_=[1,caml_string_of_jsbytes("P2p_point.of_string")],
   _Pd_=caml_string_of_jsbytes(str$59),
   _Pe_=caml_string_of_jsbytes("P2p_point.of_string_exn: no port"),
   _Pf_=caml_string_of_jsbytes("port must be between 0 and 65535"),
   _O8_=[0,caml_string_of_jsbytes(str$59),caml_string_of_jsbytes(str$59)],
   _O9_=caml_string_of_jsbytes(str$59),
   _O__=
    caml_string_of_jsbytes
     ("Utils.parse_addr_port (unexpected char after ']')"),
   _O$_=caml_string_of_jsbytes("Utils.parse_addr_port (missing ']')"),
   _Pa_=caml_string_of_jsbytes("Utils.parse_addr_port (unexpected char ']')"),
   _Pb_=caml_string_of_jsbytes(str$59),
   _Pc_=
    caml_string_of_jsbytes
     ("Utils.parse_addr_port: IPv6 addresses must be bracketed"),
   _O7_=
    caml_string_of_jsbytes
     ("Utils.parse_addr_port (invalid character in port)"),
   _O5_=[0,[15,[12,58,[4,0,0,0,0]]],caml_string_of_jsbytes("%a:%d")],
   _O6_=
    [0,
     [12,91,[15,[11,caml_string_of_jsbytes(str$27),[4,0,0,0,0]]]],
     caml_string_of_jsbytes(str_a_d)],
   _Pk_=caml_string_of_jsbytes("p2p_point.id"),
   _Pn_=caml_string_of_jsbytes(str_point),
   _Po_=
    [0,caml_string_of_jsbytes("A network point (ipv4:port or [ipv6]:port).")],
   _PE_=caml_string_of_jsbytes(str_p2p_point_state_abr),
   _PP_=caml_string_of_jsbytes(str_disconnected),
   _PQ_=[0,3],
   _PR_=caml_string_of_jsbytes("Disconnected"),
   _PV_=caml_string_of_jsbytes(str_p2p_peer_id),
   _PW_=caml_string_of_jsbytes(str_running),
   _PX_=[0,2],
   _PY_=caml_string_of_jsbytes(str_Running),
   _P2_=caml_string_of_jsbytes(str_p2p_peer_id),
   _P3_=caml_string_of_jsbytes(str_accepted),
   _P4_=[0,1],
   _P5_=caml_string_of_jsbytes(str_Accepted),
   _P__=caml_string_of_jsbytes(str_requested),
   _P$_=[0,0],
   _Qa_=caml_string_of_jsbytes("Requested"),
   _Qb_=[0,num_919245630],
   _Qd_=caml_string_of_jsbytes("p2p_point.state"),
   _Qf_=caml_string_of_jsbytes(str_last_miss),
   _Qh_=caml_string_of_jsbytes(str_last_seen),
   _Qj_=caml_string_of_jsbytes(str_last_disconnection),
   _Ql_=caml_string_of_jsbytes(str_last_established_abr),
   _Qn_=caml_string_of_jsbytes(str_last_rejected_co_abr),
   _Qp_=caml_string_of_jsbytes(str_last_failed_conn_abr),
   _Qr_=caml_string_of_jsbytes(str_p2p_peer_id),
   _Qt_=caml_string_of_jsbytes(str_state),
   _Qu_=caml_string_of_jsbytes("greylisted_until"),
   _Qv_=caml_string_of_jsbytes(str_trusted),
   _QA_=caml_string_of_jsbytes("p2p_point.info"),
   _QG_=caml_string_of_jsbytes(str_p2p_peer_id),
   _QH_=caml_string_of_jsbytes(str_rejecting_request),
   _QI_=[0,6],
   _QJ_=caml_string_of_jsbytes(str_External_disconn_abr),
   _QN_=caml_string_of_jsbytes(str_p2p_peer_id),
   _QO_=caml_string_of_jsbytes(str_rejecting_request),
   _QP_=[0,5],
   _QQ_=caml_string_of_jsbytes(str_Disconnection),
   _QU_=caml_string_of_jsbytes(str_p2p_peer_id),
   _QV_=caml_string_of_jsbytes(str_rejecting_request),
   _QW_=[0,4],
   _QX_=caml_string_of_jsbytes(str_Connection_estab_abr),
   _Q1_=caml_string_of_jsbytes(str_p2p_peer_id),
   _Q2_=caml_string_of_jsbytes(str_request_rejected),
   _Q3_=[0,3],
   _Q4_=caml_string_of_jsbytes("Rejecting_rejected"),
   _Q8_=caml_string_of_jsbytes(str_p2p_peer_id),
   _Q9_=caml_string_of_jsbytes(str_rejecting_request),
   _Q__=[0,2],
   _Q$_=caml_string_of_jsbytes(str_Rejecting_request),
   _Rd_=caml_string_of_jsbytes(str_p2p_peer_id),
   _Re_=caml_string_of_jsbytes(str_accepting_request),
   _Rf_=[0,1],
   _Rg_=caml_string_of_jsbytes(str_Accepting_request),
   _Rl_=caml_string_of_jsbytes("outgoing_request"),
   _Rm_=[0,0],
   _Rn_=caml_string_of_jsbytes("Outgoing_request"),
   _Ro_=[0,num_919245630],
   _Rq_=caml_string_of_jsbytes("p2p_point.pool_event"),
   _U7_=
    [0,
     caml_string_of_jsbytes
      ("An event that may happen during maintenance of and other operations on the p2p connection pool. Typically, it includes connection errors, peer swaps, etc.")],
   _U0_=[0,0],
   _UT_=[0,0],
   _Tt_=[0,0],
   _Tm_=[0,0],
   _R7_=caml_string_of_jsbytes(str_event),
   _RH_=caml_string_of_jsbytes(str_Too_few_connections),
   _RI_=caml_string_of_jsbytes(str_Too_many_connect_abr),
   _RJ_=caml_string_of_jsbytes(str_Gc_points),
   _RK_=caml_string_of_jsbytes(str_Gc_peer_ids),
   _RL_=caml_string_of_jsbytes("New_point "),
   _RM_=caml_string_of_jsbytes("New_peer "),
   _RN_=caml_string_of_jsbytes("Incoming_connection "),
   _RO_=caml_string_of_jsbytes("Outgoing_connection "),
   _RP_=caml_string_of_jsbytes("Authentication_failed "),
   _RQ_=caml_string_of_jsbytes("Accepting_request "),
   _RR_=caml_string_of_jsbytes("Rejecting_request "),
   _RS_=caml_string_of_jsbytes("Request_rejected "),
   _RT_=caml_string_of_jsbytes("Connection_established "),
   _RU_=caml_string_of_jsbytes("Bootstrap_received "),
   _RV_=caml_string_of_jsbytes("Bootstrap_sent "),
   _RW_=caml_string_of_jsbytes("Advertise_received "),
   _RX_=caml_string_of_jsbytes("Advertise_sent "),
   _RY_=caml_string_of_jsbytes("Swap_request_received "),
   _RZ_=caml_string_of_jsbytes("Swap_ack_received "),
   _R0_=caml_string_of_jsbytes("Swap_request_sent "),
   _R1_=caml_string_of_jsbytes("Swap_ack_sent "),
   _R2_=caml_string_of_jsbytes("Swap_request_ignored "),
   _R3_=caml_string_of_jsbytes("Swap_success "),
   _R4_=caml_string_of_jsbytes("Swap_failure "),
   _R5_=caml_string_of_jsbytes("Disconnection "),
   _R6_=caml_string_of_jsbytes("External_disconnection "),
   _Rz_=caml_string_of_jsbytes("remote_metadata"),
   _RA_=caml_string_of_jsbytes("local_metadata"),
   _RB_=caml_string_of_jsbytes("private"),
   _RC_=caml_string_of_jsbytes(str_announced_version),
   _RD_=caml_string_of_jsbytes("remote_socket_port"),
   _RE_=caml_string_of_jsbytes(str_id_point),
   _RF_=caml_string_of_jsbytes(str_peer_id),
   _RG_=caml_string_of_jsbytes("incoming"),
   _Ry_=
    [0,
     caml_string_of_jsbytes
      ("The identifier for a p2p connection. It includes an address and a port number.")],
   _Rs_=
    [0,
     [12,91,[15,[11,caml_string_of_jsbytes(str$27),[4,0,0,0,0]]]],
     caml_string_of_jsbytes(str_a_d)],
   _Rt_=
    [0,
     [12,91,[15,[11,caml_string_of_jsbytes("]:??"),0]]],
     caml_string_of_jsbytes("[%a]:??")],
   _Ru_=caml_string_of_jsbytes(str_port),
   _Rv_=caml_string_of_jsbytes(str_addr),
   _Rx_=caml_string_of_jsbytes("p2p_connection.id"),
   _R$_=caml_string_of_jsbytes(str_source$0),
   _Sa_=caml_string_of_jsbytes("advertise_received"),
   _Sb_=[0,25],
   _Sc_=caml_string_of_jsbytes("Advertise_received"),
   _Sg_=caml_string_of_jsbytes(str_source$0),
   _Sh_=caml_string_of_jsbytes("advertise_sent"),
   _Si_=[0,24],
   _Sj_=caml_string_of_jsbytes("Advertise_sent"),
   _Sn_=caml_string_of_jsbytes(str_source$0),
   _So_=caml_string_of_jsbytes("bootstrap_received"),
   _Sp_=[0,23],
   _Sq_=caml_string_of_jsbytes("Bootstrap_received"),
   _Su_=caml_string_of_jsbytes(str_source$0),
   _Sv_=caml_string_of_jsbytes("bootstrap_sent"),
   _Sw_=[0,22],
   _Sx_=caml_string_of_jsbytes("Bootstrap_sent"),
   _SB_=caml_string_of_jsbytes(str_source$0),
   _SC_=caml_string_of_jsbytes("swap_failure"),
   _SD_=[0,21],
   _SE_=caml_string_of_jsbytes("Swap_failure"),
   _SI_=caml_string_of_jsbytes(str_source$0),
   _SJ_=caml_string_of_jsbytes("swap_success"),
   _SK_=[0,20],
   _SL_=caml_string_of_jsbytes("Swap_success"),
   _SP_=caml_string_of_jsbytes(str_source$0),
   _SQ_=caml_string_of_jsbytes("swap_request_ignored"),
   _SR_=[0,19],
   _SS_=caml_string_of_jsbytes("Swap_request_ignored"),
   _SW_=caml_string_of_jsbytes(str_source$0),
   _SX_=caml_string_of_jsbytes("swap_ack_sent"),
   _SY_=[0,18],
   _SZ_=caml_string_of_jsbytes("Swap_ack_sent"),
   _S3_=caml_string_of_jsbytes(str_source$0),
   _S4_=caml_string_of_jsbytes("swap_request_sent"),
   _S5_=[0,17],
   _S6_=caml_string_of_jsbytes("Swap_request_sent"),
   _S__=caml_string_of_jsbytes(str_source$0),
   _S$_=caml_string_of_jsbytes("swap_ack_received"),
   _Ta_=[0,16],
   _Tb_=caml_string_of_jsbytes("Swap_ack_received"),
   _Tf_=caml_string_of_jsbytes(str_source$0),
   _Tg_=caml_string_of_jsbytes("swap_request_received"),
   _Th_=[0,15],
   _Ti_=caml_string_of_jsbytes("Swap_request_received"),
   _Tn_=caml_string_of_jsbytes("gc_peer_ids"),
   _To_=[0,14],
   _Tp_=caml_string_of_jsbytes(str_Gc_peer_ids),
   _Tu_=caml_string_of_jsbytes("gc_points"),
   _Tv_=[0,13],
   _Tw_=caml_string_of_jsbytes(str_Gc_points),
   _TA_=caml_string_of_jsbytes(str_peer_id),
   _TB_=caml_string_of_jsbytes(str_external_disconn_abr),
   _TC_=[0,12],
   _TD_=caml_string_of_jsbytes(str_External_disconn_abr),
   _TH_=caml_string_of_jsbytes(str_peer_id),
   _TI_=caml_string_of_jsbytes(str_disconnection),
   _TJ_=[0,11],
   _TK_=caml_string_of_jsbytes(str_Disconnection),
   _TO_=caml_string_of_jsbytes(str_peer_id),
   _TP_=caml_string_of_jsbytes(str_id_point),
   _TQ_=caml_string_of_jsbytes(str_connection_estab_abr),
   _TR_=[0,10],
   _TS_=caml_string_of_jsbytes(str_Connection_estab_abr),
   _TW_=caml_string_of_jsbytes(str_identity),
   _TX_=caml_string_of_jsbytes(str_point),
   _TY_=caml_string_of_jsbytes(str_request_rejected),
   _TZ_=[0,9],
   _T0_=caml_string_of_jsbytes("Request_rejected"),
   _T4_=caml_string_of_jsbytes(str_peer_id),
   _T5_=caml_string_of_jsbytes(str_id_point),
   _T6_=caml_string_of_jsbytes(str_point),
   _T7_=caml_string_of_jsbytes(str_rejecting_request),
   _T8_=[0,8],
   _T9_=caml_string_of_jsbytes(str_Rejecting_request),
   _Ub_=caml_string_of_jsbytes(str_peer_id),
   _Uc_=caml_string_of_jsbytes(str_id_point),
   _Ud_=caml_string_of_jsbytes(str_point),
   _Ue_=caml_string_of_jsbytes(str_accepting_request),
   _Uf_=[0,7],
   _Ug_=caml_string_of_jsbytes(str_Accepting_request),
   _Uk_=caml_string_of_jsbytes(str_point),
   _Ul_=caml_string_of_jsbytes("authentication_failed"),
   _Um_=[0,6],
   _Un_=caml_string_of_jsbytes("Authentication_failed"),
   _Ur_=caml_string_of_jsbytes(str_point),
   _Us_=caml_string_of_jsbytes("outgoing_connection"),
   _Ut_=[0,5],
   _Uu_=caml_string_of_jsbytes("Outgoing_connection"),
   _Uy_=caml_string_of_jsbytes(str_point),
   _Uz_=caml_string_of_jsbytes("incoming_connection"),
   _UA_=[0,4],
   _UB_=caml_string_of_jsbytes("Incoming_connection"),
   _UF_=caml_string_of_jsbytes(str_peer_id),
   _UG_=caml_string_of_jsbytes("new_peer"),
   _UH_=[0,3],
   _UI_=caml_string_of_jsbytes("New_peer"),
   _UM_=caml_string_of_jsbytes(str_point),
   _UN_=caml_string_of_jsbytes("new_point"),
   _UO_=[0,2],
   _UP_=caml_string_of_jsbytes("New_point"),
   _UU_=caml_string_of_jsbytes("too_many_connections"),
   _UV_=[0,1],
   _UW_=caml_string_of_jsbytes(str_Too_many_connect_abr),
   _U1_=caml_string_of_jsbytes("too_few_connections"),
   _U2_=[0,0],
   _U3_=caml_string_of_jsbytes(str_Too_few_connections),
   _U4_=[0,num_919245630],
   _U6_=caml_string_of_jsbytes("p2p_connection.pool_event"),
   _Vs_=[0,caml_string_of_jsbytes("Statistics about the p2p network.")],
   _Vi_=
    [0,
     [11,
      caml_string_of_jsbytes("\xe2\x86\x97 "),
      [15,
       [11,
        caml_string_of_jsbytes(str$36),
        [15,
         [11,
          caml_string_of_jsbytes("/s) \xe2\x86\x98 "),
          [15,
           [11,
            caml_string_of_jsbytes(str$36),
            [15,[11,caml_string_of_jsbytes("/s)"),0]]]]]]]]],
     caml_string_of_jsbytes("\xe2\x86\x97 %a (%a/s) \xe2\x86\x98 %a (%a/s)")],
   _U$_=caml_int64_create_lo_mi_hi(1,0,0),
   _Va_=
    [0,
     [7,0,0,0,[11,caml_string_of_jsbytes(str_B),0]],
     caml_string_of_jsbytes("%Ld B")],
   _Vb_=caml_int64_create_lo_mi_hi(1,0,0),
   _Vc_=
    [0,
     [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(str_kiB),0]],
     caml_string_of_jsbytes(str_2f_kiB)],
   _Vd_=caml_int64_create_lo_mi_hi(1,0,0),
   _Ve_=
    [0,
     [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(str_MiB),0]],
     caml_string_of_jsbytes(str_2f_MiB)],
   _Vf_=caml_int64_create_lo_mi_hi(1,0,0),
   _Vg_=
    [0,
     [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(" GiB"),0]],
     caml_string_of_jsbytes("%.2f GiB")],
   _Vh_=
    [0,
     [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(" TiB"),0]],
     caml_string_of_jsbytes("%.2f TiB")],
   _U8_=
    [0,
     [4,0,0,0,[11,caml_string_of_jsbytes(str_B),0]],
     caml_string_of_jsbytes("%d B")],
   _U9_=
    [0,
     [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(str_kiB),0]],
     caml_string_of_jsbytes(str_2f_kiB)],
   _U__=
    [0,
     [8,[0,0,0],0,[0,2],[11,caml_string_of_jsbytes(str_MiB),0]],
     caml_string_of_jsbytes(str_2f_MiB)],
   _Vj_=caml_string_of_jsbytes("current_outflow"),
   _Vk_=caml_string_of_jsbytes("current_inflow"),
   _Vl_=caml_string_of_jsbytes("total_recv"),
   _Vm_=caml_string_of_jsbytes("total_sent"),
   _Vr_=caml_string_of_jsbytes("p2p_stat"),
   _V__=
    [0,
     caml_string_of_jsbytes
      ("An event that may happen during maintenance of and other operations on the connection to a specific peer.")],
   _VN_=caml_string_of_jsbytes(str_last_miss),
   _VO_=caml_string_of_jsbytes(str_last_seen),
   _VP_=caml_string_of_jsbytes(str_last_disconnection),
   _VQ_=caml_string_of_jsbytes(str_last_established_abr),
   _VR_=caml_string_of_jsbytes(str_last_rejected_co_abr),
   _VS_=caml_string_of_jsbytes(str_last_failed_conn_abr),
   _VT_=caml_string_of_jsbytes(str_stat),
   _VU_=caml_string_of_jsbytes("reachable_at"),
   _VV_=caml_string_of_jsbytes(str_state),
   _VW_=caml_string_of_jsbytes("peer_metadata"),
   _VX_=caml_string_of_jsbytes("conn_metadata"),
   _VY_=caml_string_of_jsbytes(str_trusted),
   _VZ_=caml_string_of_jsbytes("score"),
   _VM_=
    [0,
     caml_string_of_jsbytes
      ("The state a peer connection can be in: accepted (when the connection is being established), running (when the connection is already established), disconnected (otherwise).")],
   _VG_=
    [0,[11,caml_string_of_jsbytes(str$14),0],caml_string_of_jsbytes(str$14)],
   _VH_=
    [0,[11,caml_string_of_jsbytes(str$28),0],caml_string_of_jsbytes(str$28)],
   _VI_=
    [0,[11,caml_string_of_jsbytes(str$23),0],caml_string_of_jsbytes(str$23)],
   _Vy_=caml_string_of_jsbytes(str_accepted),
   _Vz_=caml_string_of_jsbytes(str_disconnected),
   _VA_=caml_string_of_jsbytes(str_running),
   _VC_=[0,1],
   _VD_=[0,2],
   _VE_=[0,0],
   _VB_=
    [0,
     [11,caml_string_of_jsbytes(str_Invalid_state),[2,0,0]],
     caml_string_of_jsbytes(str_Invalid_state_s)],
   _Vv_=caml_string_of_jsbytes(str_accepted),
   _Vw_=caml_string_of_jsbytes(str_running),
   _Vx_=caml_string_of_jsbytes(str_disconnected),
   _VF_=caml_string_of_jsbytes(str_p2p_point_state_abr),
   _VJ_=
    [0,
     [0,caml_string_of_jsbytes(str_accepted),0],
     [0,
      [0,caml_string_of_jsbytes(str_running),1],
      [0,[0,caml_string_of_jsbytes(str_disconnected),2],0]]],
   _VL_=caml_string_of_jsbytes("p2p_peer.state"),
   _V0_=
    [0,
     [0,caml_string_of_jsbytes("incoming_request"),0],
     [0,
      [0,caml_string_of_jsbytes(str_rejecting_request),1],
      [0,
       [0,caml_string_of_jsbytes(str_request_rejected),2],
       [0,
        [0,caml_string_of_jsbytes(str_connection_estab_abr),3],
        [0,
         [0,caml_string_of_jsbytes(str_disconnection),4],
         [0,[0,caml_string_of_jsbytes(str_external_disconn_abr),5],0]]]]]],
   _V1_=caml_string_of_jsbytes(str_port),
   _V2_=caml_string_of_jsbytes(str_addr),
   _V3_=caml_string_of_jsbytes(str_timestamp),
   _V4_=caml_string_of_jsbytes(str_kind),
   _V9_=caml_string_of_jsbytes("p2p_peer.pool_event"),
   _Wi_=
    [0,caml_string_of_jsbytes("A sparse block locator \xc3\xa0 la Bitcoin")],
   _Wc_=
    [0,
     [11,
      caml_string_of_jsbytes("head: "),
      [15,
       [11,
        caml_string_of_jsbytes(str$50),
        [4,0,0,0,[11,caml_string_of_jsbytes(" predecessors"),0]]]]],
     caml_string_of_jsbytes("head: %a, %d predecessors")],
   _V$_=
    [0,
     [15,
      [11,
       caml_string_of_jsbytes(str$36),
       [4,3,0,0,[11,caml_string_of_jsbytes(")\n"),[15,0]]]]],
     caml_string_of_jsbytes("%a (%i)\n%a")],
   _Wa_=[0,0,caml_string_of_jsbytes(str$59)],
   _Wb_=
    [0,
     [15,[11,caml_string_of_jsbytes(" (head)\n"),[15,0]]],
     caml_string_of_jsbytes("%a (head)\n%a")],
   _Wd_=caml_string_of_jsbytes("history"),
   _Wf_=caml_string_of_jsbytes("current_head"),
   _Wh_=caml_string_of_jsbytes("block_locator"),
   _Wr_=
    [0,
     caml_string_of_jsbytes
      ("A batch of operation. This format is used to gossip operations between peers.")],
   _Wj_=caml_string_of_jsbytes(str_pending),
   _Wl_=caml_string_of_jsbytes("known_valid"),
   _Wq_=caml_string_of_jsbytes(str_mempool),
   _WF_=
    [0,
     caml_string_of_jsbytes
      ("An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.")],
   _Wy_=[0,caml_string_of_jsbytes("An operation's shell header.")],
   _Ws_=caml_string_of_jsbytes(str_branch),
   _Wx_=caml_string_of_jsbytes("operation.shell_header"),
   _Wz_=caml_string_of_jsbytes(str_data),
   _WE_=caml_string_of_jsbytes(str_operation),
   _WG_=caml_string_of_jsbytes(str_hash),
   _WH_=caml_string_of_jsbytes(str_error),
   _WI_=caml_string_of_jsbytes(str_hash),
   _WJ_=caml_string_of_jsbytes(str_branch_delayed),
   _WK_=caml_string_of_jsbytes(str_branch_refused),
   _WL_=caml_string_of_jsbytes(str_refused),
   _WM_=caml_string_of_jsbytes(str_applied),
   _W$_=
    [0,
     [11,
      caml_string_of_jsbytes(str$39),
      [17,[0,caml_string_of_jsbytes(str$5),1,0],0]],
     caml_string_of_jsbytes(" ;@ ")],
   _Xa_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [12,
       num_123,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes(str_v_1),0],
          caml_string_of_jsbytes(str_v_1)]],
        [11,
         caml_string_of_jsbytes(" expected_env = "),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(str$39),
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [11,
             caml_string_of_jsbytes("components = ["),
             [18,[1,partial$17],[15,partial$18]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[{@[<v 1> expected_env = %s ;@ components = [@[<v>%a@]] ;@]@ }@]")],
   _W8_=
    [0,
     [11,caml_string_of_jsbytes("Some "),[3,0,0]],
     caml_string_of_jsbytes("Some %S")],
   _W9_=
    [0,
     [11,caml_string_of_jsbytes(str_None),0],
     caml_string_of_jsbytes(str_None)],
   _W__=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [12,
       num_123,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes(str_v_1),0],
          caml_string_of_jsbytes(str_v_1)]],
        [11,
         caml_string_of_jsbytes(" name = "),
         [3,
          0,
          [11,
           caml_string_of_jsbytes(str$39),
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [11,
             caml_string_of_jsbytes("interface = "),
             [15,[11,caml_string_of_jsbytes(str$39),partial$19]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[{@[<v 1> name = %S ;@ interface = %a ;@ implementation = %S ;@]@ }@]")],
   _W7_=
    [0,
     caml_string_of_jsbytes
      ("The environment a protocol relies on and the components a protocol is made of.")],
   _WX_=caml_string_of_jsbytes("unexpected environment version"),
   _WU_=caml_string_of_jsbytes("V1"),
   _WT_=caml_string_of_jsbytes("V0"),
   _WN_=caml_string_of_jsbytes("implementation"),
   _WO_=caml_string_of_jsbytes("interface"),
   _WP_=caml_string_of_jsbytes(str_name),
   _WZ_=caml_string_of_jsbytes("protocol.environment_version"),
   _W0_=caml_string_of_jsbytes("components"),
   _W1_=caml_string_of_jsbytes(str_expected_env_ver_abr),
   _W6_=caml_string_of_jsbytes(str_protocol),
   _Xb_=caml_string_of_jsbytes("modules"),
   _Xc_=[0,caml_string_of_jsbytes("Modules comprising the protocol")],
   _Xe_=caml_string_of_jsbytes(str_expected_env_ver_abr),
   _Xg_=caml_string_of_jsbytes(str_hash),
   _Xh_=[0,caml_string_of_jsbytes("Used to force the hash of the protocol")],
   _Xm_=caml_string_of_jsbytes("protocol.meta"),
   _XS_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,caml_string_of_jsbytes("Not running"),[17,0,0]]],
     caml_string_of_jsbytes("@[<v 2>Not running@]")],
   _XT_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Forking "),
       [15,[11,caml_string_of_jsbytes(" (expires "),[15,[12,41,[17,0,0]]]]]]],
     caml_string_of_jsbytes("@[<v 2>Forking %a (expires %a)@]")],
   _XU_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Running "),
       [15,
        [17,
         [0,caml_string_of_jsbytes(str$5),1,0],
         [11,
          caml_string_of_jsbytes("Genesis: "),
          [15,
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [11,
             caml_string_of_jsbytes("Net id: "),
             [15,[17,partial$21,partial$20]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Running %a@ Genesis: %a@ Net id: %a@ Expiration: %a@]")],
   _XR_=
    [0,
     caml_string_of_jsbytes
      ("The status of the test chain: not_running (there is no test chain at the moment), forking (the test chain is being setup), running (the test chain is running).")],
   _XK_=[0,0],
   _Xq_=caml_string_of_jsbytes(str_expiration),
   _Xr_=caml_string_of_jsbytes(str_protocol),
   _Xs_=caml_string_of_jsbytes(str_genesis),
   _Xt_=caml_string_of_jsbytes(str_chain_id),
   _Xu_=caml_string_of_jsbytes(str_running),
   _Xv_=caml_string_of_jsbytes(str_status),
   _Xw_=[0,2],
   _Xx_=caml_string_of_jsbytes(str_Running),
   _XB_=caml_string_of_jsbytes(str_expiration),
   _XC_=caml_string_of_jsbytes(str_protocol),
   _XD_=caml_string_of_jsbytes("forking"),
   _XE_=caml_string_of_jsbytes(str_status),
   _XF_=[0,1],
   _XG_=caml_string_of_jsbytes("Forking"),
   _XL_=caml_string_of_jsbytes("not_running"),
   _XM_=caml_string_of_jsbytes(str_status),
   _XN_=[0,0],
   _XO_=caml_string_of_jsbytes("Not_running"),
   _XQ_=caml_string_of_jsbytes(str_test_chain_status),
   _XY_=caml_string_of_jsbytes(str_other),
   _XZ_=caml_string_of_jsbytes(str_operations_for_b_abr),
   _X0_=caml_string_of_jsbytes(str_operation_hashes_abr),
   _X1_=caml_string_of_jsbytes(str_protocols),
   _X2_=caml_string_of_jsbytes(str_operations),
   _X3_=caml_string_of_jsbytes(str_block_header),
   _X4_=caml_string_of_jsbytes(str_head),
   _X5_=caml_string_of_jsbytes(str_branch),
   _X6_=caml_string_of_jsbytes("peer_metadata.legacy_v0"),
   _X__=caml_string_of_jsbytes(str_other),
   _Ya_=caml_string_of_jsbytes("predecessor_header"),
   _Yb_=caml_string_of_jsbytes("protocol_branch"),
   _Yc_=caml_string_of_jsbytes(str_checkpoint),
   _Yd_=caml_string_of_jsbytes(str_operations_for_b_abr),
   _Ye_=caml_string_of_jsbytes(str_operation_hashes_abr),
   _Yf_=caml_string_of_jsbytes(str_protocols),
   _Yg_=caml_string_of_jsbytes(str_operations),
   _Yh_=caml_string_of_jsbytes(str_block_header),
   _Yi_=caml_string_of_jsbytes(str_head),
   _Yj_=caml_string_of_jsbytes(str_branch),
   _Yk_=caml_string_of_jsbytes("peer_metadata.v1"),
   _Yp_=caml_string_of_jsbytes("scheduled"),
   _Yq_=caml_string_of_jsbytes(str_failed),
   _Yr_=caml_string_of_jsbytes(str_received),
   _Ys_=caml_string_of_jsbytes(str_sent),
   _Yx_=caml_string_of_jsbytes(str_outdated),
   _Yy_=caml_string_of_jsbytes("duplicate"),
   _Yz_=caml_string_of_jsbytes(str_refused),
   _YA_=caml_string_of_jsbytes(str_branch_refused),
   _YB_=caml_string_of_jsbytes(str_branch_delayed),
   _YC_=caml_string_of_jsbytes(str_applied),
   _YD_=caml_string_of_jsbytes("refused_by_postfilter"),
   _YE_=caml_string_of_jsbytes("refused_by_prefilter"),
   _YF_=caml_string_of_jsbytes("cannot_parse"),
   _YG_=caml_string_of_jsbytes("cannot_download"),
   _YK_=caml_string_of_jsbytes(str_outdated),
   _YL_=caml_string_of_jsbytes("unexpected"),
   _YM_=caml_string_of_jsbytes(str_received),
   _YN_=caml_string_of_jsbytes(str_failed),
   _YO_=caml_string_of_jsbytes(str_sent),
   _YT_=caml_string_of_jsbytes(str_protocol),
   _YU_=caml_string_of_jsbytes(str_operations),
   _YV_=caml_string_of_jsbytes(str_block),
   _Y0_=caml_string_of_jsbytes(str_branch),
   _Y1_=caml_string_of_jsbytes(str_head),
   _Y6_=caml_string_of_jsbytes(str_received),
   _Y7_=caml_string_of_jsbytes(str_sent),
   _Za_=caml_string_of_jsbytes("advertisements"),
   _Zb_=caml_string_of_jsbytes("unadvertised"),
   _Zd_=caml_string_of_jsbytes("future_blocks_advertised"),
   _Ze_=caml_string_of_jsbytes("inactive_chains"),
   _Zf_=caml_string_of_jsbytes("unactivated_chains"),
   _Zg_=caml_string_of_jsbytes("prevalidator_results"),
   _Zh_=caml_string_of_jsbytes("old_heads"),
   _Zi_=caml_string_of_jsbytes(str_valid_blocks),
   _Zj_=caml_string_of_jsbytes("requests"),
   _Zk_=caml_string_of_jsbytes("responses"),
   _Zp_=caml_string_of_jsbytes("private_node"),
   _Zq_=caml_string_of_jsbytes("disable_mempool"),
   _$s_=caml_string_of_jsbytes(str$59),
   _$t_=caml_string_of_jsbytes(str_filters),
   __I_=caml_string_of_jsbytes(str$59),
   __J_=caml_string_of_jsbytes(str_filters),
   _ZR_=caml_string_of_jsbytes(str$59),
   _ZS_=caml_string_of_jsbytes(str_timeout),
   _ZJ_=caml_string_of_jsbytes(str$59),
   _ZK_=caml_string_of_jsbytes(str_monitor),
   _ZC_=caml_string_of_jsbytes(str$59),
   _ZD_=caml_string_of_jsbytes(str_wait),
   _Zv_=[0,caml_string_of_jsbytes(str_monitor)],
   _Zx_=[0,caml_string_of_jsbytes(str_wait)],
   _Zy_=caml_string_of_jsbytes(str_wait),
   _ZF_=caml_string_of_jsbytes(str_monitor),
   _ZN_=caml_string_of_jsbytes(str_timeout),
   _ZU_=caml_string_of_jsbytes("self"),
   _ZV_=caml_string_of_jsbytes(str_network),
   _ZX_=[0,caml_string_of_jsbytes("Return the node's peer id")],
   _ZY_=caml_string_of_jsbytes(str_version),
   _ZZ_=caml_string_of_jsbytes(str_network),
   _Z1_=[0,caml_string_of_jsbytes(str_DEPRECATED_use_abr)],
   _Z2_=caml_string_of_jsbytes("versions"),
   _Z3_=caml_string_of_jsbytes(str_network),
   _Z6_=[0,caml_string_of_jsbytes(str_DEPRECATED_use_abr)],
   _Z7_=caml_string_of_jsbytes(str_stat),
   _Z8_=caml_string_of_jsbytes(str_network),
   _Z__=
    [0,caml_string_of_jsbytes("Global network bandwidth statistics in B/s.")],
   _Z$_=caml_string_of_jsbytes(str_log),
   __a_=caml_string_of_jsbytes(str_network),
   __c_=[0,caml_string_of_jsbytes("Stream of all network events")],
   __d_=caml_string_of_jsbytes(str_points),
   __e_=caml_string_of_jsbytes(str_network),
   __g_=[0,caml_string_of_jsbytes("Connect to a peer")],
   __h_=caml_string_of_jsbytes(str_connections),
   __i_=caml_string_of_jsbytes(str_network),
   __l_=[0,caml_string_of_jsbytes("List the running P2P connection.")],
   __m_=caml_string_of_jsbytes(str_connections),
   __n_=caml_string_of_jsbytes(str_network),
   __p_=
    [0,
     caml_string_of_jsbytes
      ("Details about the current P2P connection to the given peer.")],
   __q_=caml_string_of_jsbytes(str_connections),
   __r_=caml_string_of_jsbytes(str_network),
   __t_=
    [0,
     caml_string_of_jsbytes
      ("Forced close of the current P2P connection to the given peer.")],
   __u_=caml_string_of_jsbytes(str_points),
   __v_=caml_string_of_jsbytes(str_network),
   __x_=[0,caml_string_of_jsbytes("Details about a given `IP:addr`.")],
   __y_=caml_string_of_jsbytes(str_log),
   __z_=caml_string_of_jsbytes(str_points),
   __A_=caml_string_of_jsbytes(str_network),
   __D_=
    [0,
     caml_string_of_jsbytes("Monitor network events related to an `IP:addr`.")],
   __E_=caml_string_of_jsbytes(str_filter),
   __L_=caml_string_of_jsbytes(str_points),
   __M_=caml_string_of_jsbytes(str_network),
   __P_=
    [0,
     caml_string_of_jsbytes
      ("List the pool of known `IP:port` used for establishing P2P connections.")],
   __Q_=caml_string_of_jsbytes(str_ban),
   __R_=caml_string_of_jsbytes(str_points),
   __S_=caml_string_of_jsbytes(str_network),
   __U_=
    [0,
     caml_string_of_jsbytes
      ("Blacklist the given address and remove it from the whitelist if present.")],
   __V_=caml_string_of_jsbytes(str_unban),
   __W_=caml_string_of_jsbytes(str_points),
   __X_=caml_string_of_jsbytes(str_network),
   __Z_=[0,caml_string_of_jsbytes("Remove an address from the blacklist.")],
   __0_=caml_string_of_jsbytes(str_trust),
   __1_=caml_string_of_jsbytes(str_points),
   __2_=caml_string_of_jsbytes(str_network),
   __4_=
    [0,
     caml_string_of_jsbytes
      ("Trust a given address permanently and remove it from the blacklist if present. Connections from this address can still be closed on authentication if the peer is greylisted.")],
   __5_=caml_string_of_jsbytes(str_untrust),
   __6_=caml_string_of_jsbytes(str_points),
   __7_=caml_string_of_jsbytes(str_network),
   __9_=[0,caml_string_of_jsbytes("Remove an address from the whitelist.")],
   ____=caml_string_of_jsbytes(str_banned),
   __$_=caml_string_of_jsbytes(str_points),
   _$a_=caml_string_of_jsbytes(str_network),
   _$c_=
    [0,
     caml_string_of_jsbytes
      ("Check is a given address is blacklisted or greylisted.")],
   _$d_=caml_string_of_jsbytes(str_peers),
   _$e_=caml_string_of_jsbytes(str_network),
   _$h_=[0,caml_string_of_jsbytes("Details about a given peer.")],
   _$i_=caml_string_of_jsbytes(str_log),
   _$j_=caml_string_of_jsbytes(str_peers),
   _$k_=caml_string_of_jsbytes(str_network),
   _$n_=
    [0,
     caml_string_of_jsbytes("Monitor network events related to a given peer.")],
   _$o_=caml_string_of_jsbytes(str_filter),
   _$v_=caml_string_of_jsbytes(str_peers),
   _$w_=caml_string_of_jsbytes(str_network),
   _$z_=[0,caml_string_of_jsbytes("List the peers the node ever met.")],
   _$A_=caml_string_of_jsbytes(str_ban),
   _$B_=caml_string_of_jsbytes(str_peers),
   _$C_=caml_string_of_jsbytes(str_network),
   _$E_=
    [0,
     caml_string_of_jsbytes
      ("Blacklist the given peer and remove it from the whitelist if present.")],
   _$F_=caml_string_of_jsbytes(str_unban),
   _$G_=caml_string_of_jsbytes(str_peers),
   _$H_=caml_string_of_jsbytes(str_network),
   _$J_=
    [0,caml_string_of_jsbytes("Remove the given peer from the blacklist.")],
   _$K_=caml_string_of_jsbytes(str_trust),
   _$L_=caml_string_of_jsbytes(str_peers),
   _$M_=caml_string_of_jsbytes(str_network),
   _$O_=
    [0,
     caml_string_of_jsbytes
      ("Whitelist a given peer permanently and remove it from the blacklist if present. The peer cannot be blocked (but its host IP still can).")],
   _$P_=caml_string_of_jsbytes(str_untrust),
   _$Q_=caml_string_of_jsbytes(str_peers),
   _$R_=caml_string_of_jsbytes(str_network),
   _$T_=[0,caml_string_of_jsbytes("Remove a given peer from the whitelist.")],
   _$U_=caml_string_of_jsbytes(str_banned),
   _$V_=caml_string_of_jsbytes(str_peers),
   _$W_=caml_string_of_jsbytes(str_network),
   _$Y_=
    [0,
     caml_string_of_jsbytes
      ("Check if a given peer is blacklisted or greylisted.")],
   _$Z_=caml_string_of_jsbytes("clear"),
   _$0_=caml_string_of_jsbytes("greylist"),
   _$1_=caml_string_of_jsbytes(str_network),
   _$3_=[0,caml_string_of_jsbytes("Clear all greylists tables.")],
   _acP_=
    [0,
     [11,caml_string_of_jsbytes(str_P2P_layer_disabled),0],
     caml_string_of_jsbytes(str_P2P_layer_disabled)],
   _acO_=[0,0],
   _acI_=
    [0,
     [11,
      caml_string_of_jsbytes("The peer identity you tried to connect ("),
      [15,[11,caml_string_of_jsbytes(str_is_banned),0]]],
     caml_string_of_jsbytes
      ("The peer identity you tried to connect (%a) is banned.")],
   _acA_=
    [0,
     [11,
      caml_string_of_jsbytes("The address you tried to connect ("),
      [15,[11,caml_string_of_jsbytes(str_is_banned),0]]],
     caml_string_of_jsbytes
      ("The address you tried to connect (%a) is banned.")],
   _acs_=
    [0,
     [11,caml_string_of_jsbytes(str_Node_is_in_priva_abr),0],
     caml_string_of_jsbytes(str_Node_is_in_priva_abr)],
   _acr_=[0,0],
   _acl_=
    [0,
     [11,caml_string_of_jsbytes(str_Too_many_connect_abr$0),0],
     caml_string_of_jsbytes(str_Too_many_connect_abr$0)],
   _ack_=[0,0],
   _ace_=
    [0,
     [11,
      caml_string_of_jsbytes("Connection to peer "),
      [15,
       [11,
        caml_string_of_jsbytes(" was rejected by us on motive: "),
        [15,[12,46,0]]]]],
     caml_string_of_jsbytes
      ("Connection to peer %a was rejected by us on motive: %a.")],
   _ab7_=
    [0,
     [11,caml_string_of_jsbytes(str_Connection_was_r_abr),0],
     caml_string_of_jsbytes(str_Connection_was_r_abr)],
   _ab6_=[0,0],
   _ab0_=
    [0,
     [11,caml_string_of_jsbytes(str_Fail_to_connect_abr),0],
     caml_string_of_jsbytes(str_Fail_to_connect_abr)],
   _abZ_=[0,0],
   _abT_=
    [0,
     [11,caml_string_of_jsbytes(str_Fail_to_connect_abr$0),0],
     caml_string_of_jsbytes(str_Fail_to_connect_abr$0)],
   _abS_=[0,0],
   _abD_=
    [0,
     [11,
      caml_string_of_jsbytes("Size of chunks is invalid: should be between "),
      [4,
       0,
       0,
       0,
       [11,
        caml_string_of_jsbytes(str_and),
        [4,0,0,0,[11,caml_string_of_jsbytes(" but is "),[4,0,0,0,0]]]]]],
     caml_string_of_jsbytes
      ("Size of chunks is invalid: should be between %d and %d but is %d")],
   _abt_=
    [0,
     [11,caml_string_of_jsbytes(str_Rejected_peer_co_abr),0],
     caml_string_of_jsbytes(str_Rejected_peer_co_abr)],
   _abs_=[0,0],
   _abm_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Remote_peer),
      [15,
       [11,
        caml_string_of_jsbytes
         (" cannot be authenticated: not enough proof of work."),
        0]]],
     caml_string_of_jsbytes
      ("Remote peer %a cannot be authenticated: not enough proof of work.")],
   _abe_=
    [0,
     [11,
      caml_string_of_jsbytes(str_Remote_peer),
      [15,
       [11,
        caml_string_of_jsbytes
         (" cannot be authenticated: peer is actually yourself."),
        0]]],
     caml_string_of_jsbytes
      ("Remote peer %a cannot be authenticated: peer is actually yourself.")],
   _aa8_=
    [0,
     [11,
      caml_string_of_jsbytes("An error occurred while decoding: "),
      [15,[12,46,0]]],
     caml_string_of_jsbytes("An error occurred while decoding: %a.")],
   _aa0_=
    [0,
     [11,caml_string_of_jsbytes(str_Rejected_peer_co_abr$0),0],
     caml_string_of_jsbytes(str_Rejected_peer_co_abr$0)],
   _aaS_=
    [0,
     [11,
      caml_string_of_jsbytes
       ('Rejected peer connection: Peer rejected us on motive "'),
      [15,
       [11,
        caml_string_of_jsbytes('" and proposed '),
        [15,[11,caml_string_of_jsbytes(" alternative peers."),0]]]]],
     caml_string_of_jsbytes
      ('Rejected peer connection: Peer rejected us on motive "%a" and proposed %a alternative peers.')],
   _aaJ_=
    [0,
     [11,caml_string_of_jsbytes(str_Rejected_peer_co_abr$1),0],
     caml_string_of_jsbytes(str_Rejected_peer_co_abr$1)],
   _aaI_=[0,0],
   _aaC_=
    [0,
     [11,caml_string_of_jsbytes(str_The_announced_si_abr),0],
     caml_string_of_jsbytes(str_The_announced_si_abr)],
   _aaB_=[0,0],
   _aav_=
    [0,
     [11,caml_string_of_jsbytes(str_The_size_of_the_abr),0],
     caml_string_of_jsbytes(str_The_size_of_the_abr)],
   _aau_=[0,0],
   _aao_=
    [0,
     [11,caml_string_of_jsbytes(str_An_error_occurre_abr),0],
     caml_string_of_jsbytes(str_An_error_occurre_abr)],
   _aan_=[0,0],
   _$8_=
    [0,
     [11,caml_string_of_jsbytes(str_IO_error_connec_abr),0],
     caml_string_of_jsbytes(str_IO_error_connec_abr)],
   _$7_=[0,0],
   _$4_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Connection_closed"),
   _$9_=caml_string_of_jsbytes(str_IO_error_connec_abr),
   _$__=caml_string_of_jsbytes("Connection closed"),
   _$$_=caml_string_of_jsbytes("node.p2p_io_scheduler.connection_closed"),
   _aaa_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Decipher_error"),
   _aab_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Invalid_message_size"),
   _aac_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Invalid_incoming_ciphertext_size"),
   _aad_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Rejected_socket_connection"),
   _aae_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Rejected_by_nack"),
   _aaf_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Rejected_no_common_protocol"),
   _aag_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Decoding_error"),
   _aah_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Myself"),
   _aai_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Not_enough_proof_of_work"),
   _aaj_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Invalid_auth"),
   _aak_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Invalid_chunks_size"),
   _aap_=caml_string_of_jsbytes(str_An_error_occurre_abr),
   _aaq_=caml_string_of_jsbytes("Decipher error"),
   _aar_=caml_string_of_jsbytes("node.p2p_socket.decipher_error"),
   _aaw_=caml_string_of_jsbytes(str_The_size_of_the_abr),
   _aax_=caml_string_of_jsbytes("Invalid message size"),
   _aay_=caml_string_of_jsbytes("node.p2p_socket.invalid_message_size"),
   _aaD_=caml_string_of_jsbytes(str_The_announced_si_abr),
   _aaE_=caml_string_of_jsbytes("Invalid incoming ciphertext size"),
   _aaF_=
    caml_string_of_jsbytes("node.p2p_socket.invalid_incoming_ciphertext_size"),
   _aaK_=caml_string_of_jsbytes(str_Rejected_peer_co_abr$1),
   _aaL_=caml_string_of_jsbytes("Rejected socket connection"),
   _aaM_=caml_string_of_jsbytes("node.p2p_socket.rejected_socket_connection"),
   _aaP_=caml_string_of_jsbytes("alternative_points"),
   _aaQ_=caml_string_of_jsbytes(str_motive),
   _aaT_=
    caml_string_of_jsbytes
     ("Rejected peer connection: The peer rejected the socket connection by Nack with a list of alternative peers."),
   _aaU_=caml_string_of_jsbytes("Rejected socket connection by Nack"),
   _aaV_=caml_string_of_jsbytes("node.p2p_socket.rejected_by_nack"),
   _aaY_=caml_string_of_jsbytes(str_announced_version),
   _aa1_=
    caml_string_of_jsbytes
     ("Rejected peer connection: rejected socket connection as we have no common network protocol with the peer."),
   _aa2_=
    caml_string_of_jsbytes
     ("Rejected socket connection - no common network protocol"),
   _aa3_=caml_string_of_jsbytes("node.p2p_socket.rejected_no_common_protocol"),
   _aa6_=caml_string_of_jsbytes("read_error"),
   _aa9_=caml_string_of_jsbytes("An error occurred while decoding."),
   _aa__=caml_string_of_jsbytes("Decoding error"),
   _aa$_=caml_string_of_jsbytes("node.p2p_socket.decoding_error"),
   _abc_=caml_string_of_jsbytes("connection_id"),
   _abf_=caml_string_of_jsbytes("Remote peer is actually yourself."),
   _abg_=caml_string_of_jsbytes("Myself"),
   _abh_=caml_string_of_jsbytes("node.p2p_socket.myself"),
   _abk_=caml_string_of_jsbytes(str_peer_id),
   _abn_=
    caml_string_of_jsbytes
     ("Remote peer cannot be authenticated: not enough proof of work."),
   _abo_=caml_string_of_jsbytes("Not enough proof of work"),
   _abp_=caml_string_of_jsbytes("node.p2p_socket.not_enough_proof_of_work"),
   _abu_=caml_string_of_jsbytes(str_Rejected_peer_co_abr),
   _abv_=caml_string_of_jsbytes("Invalid authentication"),
   _abw_=caml_string_of_jsbytes("node.p2p_socket.invalid_auth"),
   _abz_=caml_string_of_jsbytes(str_max),
   _abA_=caml_string_of_jsbytes(str_min),
   _abB_=caml_string_of_jsbytes(str_value),
   _abE_=caml_string_of_jsbytes("Size of chunks is not valid."),
   _abF_=caml_string_of_jsbytes("Invalid chunks size"),
   _abG_=caml_string_of_jsbytes("node.p2p_socket.invalid_chunks_size"),
   _abH_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Pending_connection"),
   _abI_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Connected"),
   _abJ_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Connection_refused"),
   _abK_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Rejected"),
   _abL_=
    caml_string_of_jsbytes
     ("Tezos_p2p_services.P2p_errors.Too_many_connections"),
   _abM_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Private_mode"),
   _abN_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Point_banned"),
   _abO_=caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.Peer_banned"),
   _abP_=
    caml_string_of_jsbytes("Tezos_p2p_services.P2p_errors.P2p_layer_disabled"),
   _abU_=caml_string_of_jsbytes(str_Fail_to_connect_abr$0),
   _abV_=caml_string_of_jsbytes("Pending connection"),
   _abW_=caml_string_of_jsbytes("node.p2p_pool.pending_connection"),
   _ab1_=caml_string_of_jsbytes(str_Fail_to_connect_abr),
   _ab2_=caml_string_of_jsbytes("Connected"),
   _ab3_=caml_string_of_jsbytes("node.p2p_pool.connected"),
   _ab8_=caml_string_of_jsbytes(str_Connection_was_r_abr),
   _ab9_=caml_string_of_jsbytes("Connection refused"),
   _ab__=caml_string_of_jsbytes("node.p2p_pool.connection_refused"),
   _acb_=caml_string_of_jsbytes(str_motive),
   _acc_=caml_string_of_jsbytes(str_peer_id),
   _acf_=caml_string_of_jsbytes("Connection to peer was rejected by us."),
   _acg_=caml_string_of_jsbytes("Rejected peer"),
   _ach_=caml_string_of_jsbytes("node.p2p_pool.rejected"),
   _acm_=caml_string_of_jsbytes(str_Too_many_connect_abr$0),
   _acn_=caml_string_of_jsbytes(str_Too_many_connect_abr$1),
   _aco_=caml_string_of_jsbytes("node.p2p_pool.too_many_connections"),
   _act_=caml_string_of_jsbytes(str_Node_is_in_priva_abr),
   _acu_=caml_string_of_jsbytes("Private mode"),
   _acv_=caml_string_of_jsbytes("node.p2p_pool.private_mode"),
   _acy_=caml_string_of_jsbytes(str_point),
   _acB_=caml_string_of_jsbytes("The address you tried to connect is banned."),
   _acC_=caml_string_of_jsbytes("Point Banned"),
   _acD_=caml_string_of_jsbytes("node.p2p_pool.point_banned"),
   _acG_=caml_string_of_jsbytes(str_peer),
   _acJ_=
    caml_string_of_jsbytes
     ("The peer identity you tried to connect is banned."),
   _acK_=caml_string_of_jsbytes("Peer Banned"),
   _acL_=caml_string_of_jsbytes("node.p2p_pool.peer_banned"),
   _acQ_=caml_string_of_jsbytes("The P2P layer on this node is not active."),
   _acR_=caml_string_of_jsbytes("P2P layer disabled"),
   _acS_=caml_string_of_jsbytes("node.p2p_pool.disabled"),
   _adc_=[0,0],
   _ac1_=[0,0],
   _acT_=caml_string_of_jsbytes("commit_date"),
   _acU_=caml_string_of_jsbytes(str_commit_hash),
   _ac2_=caml_string_of_jsbytes("release"),
   _ac3_=[0,2],
   _ac4_=caml_string_of_jsbytes("Release"),
   _ac8_=caml_string_of_jsbytes("rc"),
   _ac9_=[0,1],
   _ac__=caml_string_of_jsbytes("RC"),
   _add_=caml_string_of_jsbytes("dev"),
   _ade_=[0,0],
   _adf_=caml_string_of_jsbytes("Dev"),
   _adg_=caml_string_of_jsbytes("additional_info"),
   _adh_=caml_string_of_jsbytes("minor"),
   _adi_=caml_string_of_jsbytes("major"),
   _adm_=caml_string_of_jsbytes("commit_info"),
   _adn_=caml_string_of_jsbytes(str_network_version),
   _ado_=caml_string_of_jsbytes(str_version),
   _ag4_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _ag3_=[0,0,0],
   _ag0_=[0,num_803493184,0],
   _agZ_=caml_string_of_jsbytes(str$59),
   _agY_=[0,num_803493184,0],
   _agX_=[0,num_803493184,0],
   _agW_=[0,num_803493184,0],
   _agV_=[0,num_803493184,0],
   _agU_=caml_string_of_jsbytes(str$59),
   _agT_=[0,num_803493184,0],
   _agS_=[0,num_803493184,0],
   _agQ_=caml_string_of_jsbytes(str$59),
   _agR_=caml_string_of_jsbytes(str_depth),
   _agP_=[0,num_803493184,0],
   _agO_=[0,num_803493184,0],
   _agN_=[0,num_803493184,0],
   _agM_=[0,num_803493184,0],
   _agL_=[0,num_803493184,0],
   _agK_=[0,num_803493184,0],
   _agJ_=[0,num_803493184,0],
   _agI_=[0,num_803493184,0],
   _agH_=[0,num_803493184,0],
   _agG_=[0,num_803493184,0],
   _agF_=[0,num_803493184,0],
   _agE_=[0,num_803493184,0],
   _agD_=[0,num_803493184,0],
   _agC_=[0,num_803493184,0],
   _agB_=[0,num_803493184,0],
   _agA_=[0,num_803493184,0],
   _agz_=[0,num_803493184,0],
   _agy_=[0,num_803493184,0],
   _agx_=[0,num_803493184,0],
   _agu_=caml_string_of_jsbytes("request_operations"),
   _agv_=[0,caml_string_of_jsbytes("Request the operations of your peers.")],
   _ags_=caml_string_of_jsbytes(str_filter),
   _agt_=
    [0,caml_string_of_jsbytes("Set the configuration of the mempool filter.")],
   _agq_=caml_string_of_jsbytes(str_filter),
   _agr_=
    [0,caml_string_of_jsbytes("Get the configuration of the mempool filter.")],
   _ago_=caml_string_of_jsbytes("monitor_operations"),
   _agp_=[0,caml_string_of_jsbytes("Monitor the mempool operations.")],
   _agn_=caml_string_of_jsbytes(str$59),
   _agd_=caml_string_of_jsbytes("pending_operations"),
   _age_=[0,caml_string_of_jsbytes("List the prevalidated operations.")],
   _af2_=caml_string_of_jsbytes(str$59),
   _af3_=caml_string_of_jsbytes(str_depth),
   _afQ_=caml_string_of_jsbytes(str$59),
   _afr_=
    [0,
     [11,caml_string_of_jsbytes("Invalid operation offset ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("Invalid operation offset (%s)")],
   _afq_=
    [0,
     [11,caml_string_of_jsbytes("Invalid list offset ("),[2,0,[12,41,0]]],
     caml_string_of_jsbytes("Invalid list offset (%s)")],
   _aeA_=caml_string_of_jsbytes("raw_block_header"),
   _aeB_=caml_string_of_jsbytes(str_hash),
   _aeC_=caml_string_of_jsbytes(str_chain_id),
   _aeD_=caml_string_of_jsbytes(str_protocol),
   _aeE_=caml_string_of_jsbytes(str_block_header),
   _aeF_=caml_string_of_jsbytes("max_operation_list_length"),
   _aeG_=caml_string_of_jsbytes("max_block_header_length"),
   _aeH_=caml_string_of_jsbytes("max_operation_data_length"),
   _aeI_=caml_string_of_jsbytes("max_operations_ttl"),
   _aeJ_=caml_string_of_jsbytes(str_test_chain_status),
   _aeK_=caml_string_of_jsbytes(str_next_protocol),
   _aeL_=caml_string_of_jsbytes(str_protocol),
   _aeM_=caml_string_of_jsbytes("block_header_metadata"),
   _aeN_=caml_string_of_jsbytes(str_protocol),
   _aeO_=caml_string_of_jsbytes("next_operation"),
   _aeP_=[0,1],
   _aeQ_=caml_string_of_jsbytes("Operation without metadata"),
   _aeR_=[0,0],
   _aeS_=caml_string_of_jsbytes("Operation with metadata"),
   _aeT_=[0,num_919245630],
   _aeU_=caml_string_of_jsbytes(str_hash),
   _aeV_=caml_string_of_jsbytes(str_chain_id),
   _aeW_=caml_string_of_jsbytes(str_protocol),
   _aeX_=caml_string_of_jsbytes(str_operation),
   _aeY_=caml_string_of_jsbytes(str_operations),
   _aeZ_=caml_string_of_jsbytes(str_metadata),
   _ae0_=caml_string_of_jsbytes(str_header),
   _ae1_=caml_string_of_jsbytes(str_hash),
   _ae2_=caml_string_of_jsbytes(str_chain_id),
   _ae3_=caml_string_of_jsbytes(str_protocol),
   _ae4_=caml_string_of_jsbytes(str_hash),
   _ae5_=
    [0,caml_string_of_jsbytes("The block's hash, its unique identifier.")],
   _ae6_=caml_string_of_jsbytes(str_header),
   _ae7_=[0,caml_string_of_jsbytes("The whole block header.")],
   _ae8_=caml_string_of_jsbytes(str_raw),
   _ae9_=caml_string_of_jsbytes(str_header),
   _ae__=[0,caml_string_of_jsbytes("The whole block header (unparsed).")],
   _ae$_=caml_string_of_jsbytes(str_metadata),
   _afa_=
    [0,caml_string_of_jsbytes("All the metadata associated to the block.")],
   _afb_=caml_string_of_jsbytes("metadata_hash"),
   _afc_=
    [0,
     caml_string_of_jsbytes
      ("Hash of the metadata associated to the block. This is only set on blocks starting from environment V1.")],
   _afd_=caml_string_of_jsbytes(str_protocols),
   _afe_=[0,caml_string_of_jsbytes("Current and next protocol.")],
   _aff_=caml_string_of_jsbytes(str_header),
   _afg_=caml_string_of_jsbytes("shell"),
   _afh_=
    [0,
     caml_string_of_jsbytes
      ("The shell-specific fragment of the block header.")],
   _afi_=caml_string_of_jsbytes(str_protocol_data),
   _afj_=caml_string_of_jsbytes(str_protocol),
   _afk_=
    [0,
     caml_string_of_jsbytes
      ("The version-specific fragment of the block header.")],
   _afl_=caml_string_of_jsbytes(str_raw),
   _afm_=caml_string_of_jsbytes(str_protocol_data),
   _afn_=
    [0,
     caml_string_of_jsbytes
      ("The version-specific fragment of the block header (unparsed).")],
   _afo_=caml_string_of_jsbytes(str_operations),
   _afp_=
    [0,caml_string_of_jsbytes("All the operations included in the block.")],
   _afs_=[0,caml_string_of_jsbytes(str_All_the_operatio_abr)],
   _aft_=
    [0,
     caml_string_of_jsbytes
      ("The `m-th` operation in the `n-th` validation pass of the block.")],
   _afu_=caml_string_of_jsbytes("operation_hashes"),
   _afv_=
    [0,
     caml_string_of_jsbytes
      ("The hashes of all the operations included in the block.")],
   _afw_=[0,caml_string_of_jsbytes(str_All_the_operatio_abr)],
   _afx_=
    [0,
     caml_string_of_jsbytes
      ("The hash of then `m-th` operation in the `n-th` validation pass of the block.")],
   _afy_=caml_string_of_jsbytes("operations_metadata_hash"),
   _afz_=
    [0,
     caml_string_of_jsbytes
      ("The root hash of the operations metadata from the block. This is only set on blocks starting from environment V1.")],
   _afA_=caml_string_of_jsbytes("operation_metadata_hashes"),
   _afB_=
    [0,
     caml_string_of_jsbytes
      ("The hashes of all the operation metadata included in the block. This is only set on blocks starting from environment V1.")],
   _afC_=
    [0,
     caml_string_of_jsbytes
      ("All the operation metadata included in `n-th` validation pass of the block. This is only set on blocks starting from environment V1.")],
   _afD_=
    [0,
     caml_string_of_jsbytes
      ("The hash of then `m-th` operation metadata in the `n-th` validation pass of the block. This is only set on blocks starting from environment V1.")],
   _afE_=caml_string_of_jsbytes("helpers"),
   _afF_=caml_string_of_jsbytes("forge_block_header"),
   _afG_=caml_string_of_jsbytes(str_block),
   _afH_=[0,caml_string_of_jsbytes("Forge a block header")],
   _afI_=caml_string_of_jsbytes("preapply"),
   _afJ_=caml_string_of_jsbytes(str_operations),
   _afK_=caml_string_of_jsbytes("shell_header"),
   _afL_=caml_string_of_jsbytes(str_operations),
   _afM_=caml_string_of_jsbytes(str_protocol),
   _afN_=caml_string_of_jsbytes(str_protocol_data),
   _afO_=caml_string_of_jsbytes(str_timestamp),
   _afP_=caml_string_of_jsbytes("sort"),
   _afR_=caml_string_of_jsbytes(str_block),
   _afS_=
    [0,
     caml_string_of_jsbytes
      ("Simulate the validation of a block that would contain the given operations and return the resulting fitness and context hash.")],
   _afT_=caml_string_of_jsbytes(str_operations),
   _afU_=
    [0,caml_string_of_jsbytes("Simulate the validation of an operation.")],
   _afV_=caml_string_of_jsbytes("prefix"),
   _afW_=caml_string_of_jsbytes("complete"),
   _afX_=
    [0,
     caml_string_of_jsbytes
      ("Try to complete a prefix of a Base58Check-encoded data. This RPC is actually able to complete hashes of block, operations, public_keys and contracts.")],
   _afY_=caml_string_of_jsbytes(str_bytes),
   _afZ_=caml_string_of_jsbytes(str_raw),
   _af0_=caml_string_of_jsbytes(str_context),
   _af1_=caml_string_of_jsbytes(str_depth),
   _af4_=[0,caml_string_of_jsbytes("Returns the raw context.")],
   _af5_=
    [0,
     caml_string_of_jsbytes
      ("All the information about a block. The associated metadata may not be present depending on the history mode and block's distance from the head.")],
   _af6_=caml_string_of_jsbytes("unprocessed"),
   _af7_=caml_string_of_jsbytes(str_error),
   _af8_=caml_string_of_jsbytes(str_branch_delayed),
   _af9_=caml_string_of_jsbytes(str_error),
   _af__=caml_string_of_jsbytes(str_branch_refused),
   _af$_=caml_string_of_jsbytes(str_error),
   _aga_=caml_string_of_jsbytes(str_refused),
   _agb_=caml_string_of_jsbytes(str_hash),
   _agc_=caml_string_of_jsbytes(str_applied),
   _agf_=caml_string_of_jsbytes(str_branch_delayed),
   _agg_=
    [0,
     caml_string_of_jsbytes
      ("Include branch delayed operations (set by default)")],
   _agh_=caml_string_of_jsbytes(str_branch_refused),
   _agi_=[0,caml_string_of_jsbytes("Include branch refused operations")],
   _agj_=caml_string_of_jsbytes(str_refused),
   _agk_=[0,caml_string_of_jsbytes("Include refused operations")],
   _agl_=caml_string_of_jsbytes(str_applied),
   _agm_=
    [0,caml_string_of_jsbytes("Include applied operations (set by default)")],
   _agw_=
    [0,
     caml_string_of_jsbytes
      ("List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.")],
   _ael_=
    [0,
     [11,
      caml_string_of_jsbytes("Extraction depth "),
      [4,0,0,0,[11,caml_string_of_jsbytes(" is invalid"),0]]],
     caml_string_of_jsbytes("Extraction depth %d is invalid")],
   _ad__=[0,0],
   _ad$_=[0,2],
   _aea_=caml_string_of_jsbytes("Cut"),
   _aeb_=[0,1],
   _aec_=caml_string_of_jsbytes("Dir"),
   _aed_=[0,0],
   _aee_=caml_string_of_jsbytes("Key"),
   _ad3_=caml_string_of_jsbytes(str_live_blocks),
   _ad2_=caml_string_of_jsbytes(str_mempool),
   _adS_=caml_string_of_jsbytes(str_genesis),
   _adU_=[0,[2,0,[12,43,[4,0,0,0,0]]],caml_string_of_jsbytes(str_s_d$0)],
   _adT_=[0,[2,0,[12,num_126,[4,0,0,0,0]]],caml_string_of_jsbytes(str_s_d)],
   _adX_=
    [0,
     [11,caml_string_of_jsbytes("head+"),[4,0,0,0,0]],
     caml_string_of_jsbytes("head+%d")],
   _adW_=
    [0,
     [11,caml_string_of_jsbytes("head~"),[4,0,0,0,0]],
     caml_string_of_jsbytes("head~%d")],
   _adV_=caml_string_of_jsbytes(str_head),
   _adZ_=[0,[2,0,[12,43,[4,0,0,0,0]]],caml_string_of_jsbytes(str_s_d$0)],
   _adY_=[0,[2,0,[12,num_126,[4,0,0,0,0]]],caml_string_of_jsbytes(str_s_d)],
   _ad0_=[0,[4,0,0,0,0],caml_string_of_jsbytes(str_d)],
   _adQ_=caml_string_of_jsbytes(str_checkpoint),
   _adR_=caml_string_of_jsbytes(str_save_point),
   _adP_=caml_string_of_jsbytes(str_caboose),
   _adE_=caml_string_of_jsbytes(str_caboose),
   _adF_=caml_string_of_jsbytes(str_checkpoint),
   _adG_=caml_string_of_jsbytes(str_genesis),
   _adH_=caml_string_of_jsbytes(str_head),
   _adI_=caml_string_of_jsbytes(str_save_point),
   _adK_=[0,[0,num_884916592,[0,num_850585938,0]]],
   _adL_=[0,[0,num_803493184,0]],
   _adM_=[0,num_61693000],
   _adN_=[0,[0,num_884916592,[0,num_973294248,0]]],
   _adO_=[0,[0,num_884916592,[0,num_508281962,0]]],
   _adJ_=[0,num_61693000],
   _adD_=[1,caml_string_of_jsbytes("Cannot parse block identifier.")],
   _adB_=caml_string_of_jsbytes(str_test),
   _adC_=caml_string_of_jsbytes(str_main),
   _adx_=caml_string_of_jsbytes(str_main),
   _ady_=caml_string_of_jsbytes(str_test),
   _adz_=[0,num_936572018],
   _adA_=[0,num_858743897],
   _adw_=[1,caml_string_of_jsbytes("Cannot parse chain identifier.")],
   _ad1_=caml_string_of_jsbytes(str_chains),
   _ad4_=caml_string_of_jsbytes(str_blocks),
   _ad5_=caml_string_of_jsbytes("max_op"),
   _ad6_=caml_string_of_jsbytes(str_max_size),
   _aef_=caml_string_of_jsbytes("raw_context"),
   _aeg_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_services.Invalid_depth_arg"),
   _aej_=caml_string_of_jsbytes(str_depth),
   _aem_=
    caml_string_of_jsbytes
     ("The raw context extraction depth argument must be positive."),
   _aen_=caml_string_of_jsbytes("Invalid depth argument"),
   _aeo_=caml_string_of_jsbytes("raw_context.invalid_depth"),
   _aep_=caml_string_of_jsbytes(str_next_protocol),
   _aeq_=caml_string_of_jsbytes(str_protocol),
   _ag5_=caml_string_of_jsbytes(str_peer),
   _ag6_=caml_string_of_jsbytes(str_chain_id),
   _ag7_=caml_string_of_jsbytes(str_block),
   _ahc_=caml_string_of_jsbytes(str_errors),
   _ahd_=caml_string_of_jsbytes(str_status),
   _ahe_=caml_string_of_jsbytes("failed_validation"),
   _ahf_=[0,2],
   _ahg_=caml_string_of_jsbytes("Validation_failure"),
   _ahk_=caml_string_of_jsbytes(str_status),
   _ahl_=caml_string_of_jsbytes("successful_validation"),
   _ahm_=[0,1],
   _ahn_=caml_string_of_jsbytes("Validation_success"),
   _ahr_=caml_string_of_jsbytes(str_message),
   _ahs_=[0,0],
   _aht_=caml_string_of_jsbytes(str_Debug),
   _ahS_=[0,0],
   _ahu_=
    [0,
     [0,caml_string_of_jsbytes("synced"),[0,0]],
     [0,
      [0,caml_string_of_jsbytes("unsynced"),0],
      [0,[0,caml_string_of_jsbytes("stuck"),[0,1]],0]]],
   _ahv_=
    [0,
     caml_string_of_jsbytes
      ("If 'unsynced', the node is not currently synchronized with of its peers (it is probably still bootstrapping and its head is lagging behind the chain's).\nIf 'synced', the node considers itself synchronized with its peers and the current head timestamp is recent.\nIf 'stuck', the node considers itself synchronized with its peers but the chain seems to be halted from its viewpoint.")],
   _ahw_=caml_string_of_jsbytes("chain_status"),
   _ahA_=caml_string_of_jsbytes("most_recent_validation"),
   _ahB_=caml_string_of_jsbytes("max_head_time"),
   _ahC_=caml_string_of_jsbytes("min_head_time"),
   _ahD_=[0,5],
   _ahE_=caml_string_of_jsbytes("Bootstrap_active_peers_heads_time"),
   _ahI_=caml_string_of_jsbytes("needed"),
   _ahJ_=caml_string_of_jsbytes("active"),
   _ahK_=[0,4],
   _ahL_=caml_string_of_jsbytes("Bootstrap_active_peers"),
   _ahO_=[0,3],
   _ahP_=caml_string_of_jsbytes("Sync_status"),
   _ahT_=[0,2],
   _ahU_=caml_string_of_jsbytes("Bootstrapped"),
   _ahX_=[0,1],
   _ahY_=caml_string_of_jsbytes("Could_not_switch_testchain"),
   _ah2_=caml_string_of_jsbytes(str_timestamp),
   _ah3_=caml_string_of_jsbytes(str_level),
   _ah4_=caml_string_of_jsbytes(str_fitness),
   _ah5_=
    [0,
     [0,caml_string_of_jsbytes("ignored"),0],
     [0,
      [0,caml_string_of_jsbytes(str_branch),1],
      [0,[0,caml_string_of_jsbytes("increment"),2],0]]],
   _ah6_=caml_string_of_jsbytes("outcome"),
   _ah7_=caml_string_of_jsbytes(str_status),
   _ah8_=caml_string_of_jsbytes(str_request),
   _ah9_=[0,0],
   _ah__=caml_string_of_jsbytes("Processed_block"),
   _ah$_=caml_string_of_jsbytes(str_active_peers),
   _aia_=caml_string_of_jsbytes(str_bootstrapped),
   _aib_=caml_string_of_jsbytes("scheduler_length"),
   _aic_=caml_string_of_jsbytes("table_length"),
   _aig_=caml_string_of_jsbytes(str_active_peers),
   _aih_=caml_string_of_jsbytes("active_connections"),
   _aii_=caml_string_of_jsbytes("block_header_db"),
   _aij_=caml_string_of_jsbytes("operations_db"),
   _aik_=caml_string_of_jsbytes("operation_db"),
   _ail_=caml_string_of_jsbytes(str_active_chains),
   _aim_=caml_string_of_jsbytes("p2p_readers"),
   _air_=
    [0,
     [11,caml_string_of_jsbytes(str_archive),0],
     caml_string_of_jsbytes(str_archive)],
   _ais_=
    [0,
     [11,caml_string_of_jsbytes(str_full),0],
     caml_string_of_jsbytes(str_full)],
   _ait_=
    [0,
     [11,caml_string_of_jsbytes(str_rolling),0],
     caml_string_of_jsbytes(str_rolling)],
   _aiq_=
    [0,
     [0,caml_string_of_jsbytes(str_archive),0],
     [0,
      [0,caml_string_of_jsbytes(str_full),1],
      [0,[0,caml_string_of_jsbytes(str_rolling),2],0]]],
   _aiu_=caml_string_of_jsbytes(str_history_mode),
   _ai3_=caml_string_of_jsbytes(str$59),
   _aiv_=caml_string_of_jsbytes(str_history_mode),
   _aiw_=caml_string_of_jsbytes(str_caboose),
   _aix_=caml_string_of_jsbytes(str_save_point),
   _aiy_=caml_string_of_jsbytes(str_block),
   _aiz_=caml_string_of_jsbytes(str_errors),
   _aiA_=caml_string_of_jsbytes(str_level),
   _aiB_=caml_string_of_jsbytes(str_block),
   _aiF_=caml_string_of_jsbytes("sync_state"),
   _aiG_=caml_string_of_jsbytes(str_bootstrapped),
   _aiH_=caml_string_of_jsbytes(str_chain_id),
   _aiJ_=[0,caml_string_of_jsbytes("The chain unique identifier.")],
   _aiK_=caml_string_of_jsbytes(str_checkpoint),
   _aiM_=[0,caml_string_of_jsbytes("The current checkpoint for this chain.")],
   _aiN_=caml_string_of_jsbytes("is_bootstrapped"),
   _aiP_=[0,caml_string_of_jsbytes("The bootstrap status of a chain")],
   _aiQ_=caml_string_of_jsbytes(str_bootstrapped),
   _aiR_=
    [0,
     caml_string_of_jsbytes
      ("Forcefully set the bootstrapped flag of the node")],
   _aiS_=caml_string_of_jsbytes(str_min_date),
   _aiT_=
    [0,
     caml_string_of_jsbytes
      ("When `min_date` is provided, blocks with a timestamp before `min_date` are filtered out")],
   _aiV_=caml_string_of_jsbytes(str_head),
   _aiW_=
    [0,
     caml_string_of_jsbytes
      ("An empty argument requests blocks starting with the current head. A non empty list allows to request one or more specific fragments of the chain.")],
   _aiY_=caml_string_of_jsbytes(str_length),
   _aiZ_=
    [0,
     caml_string_of_jsbytes
      ("The requested number of predecessors to return (per request; see next argument).")],
   _ai7_=caml_string_of_jsbytes(str_blocks),
   _ai9_=
    [0,
     caml_string_of_jsbytes
      ("Lists block hashes from '<chain>', up to the last checkpoint, sorted with decreasing fitness. Without arguments it returns the head of the chain. Optional arguments allow to return the list of predecessors of a given block or of a set of blocks.")],
   _ai__=caml_string_of_jsbytes("invalid_blocks"),
   _aja_=
    [0,
     caml_string_of_jsbytes
      ("Lists blocks that have been declared invalid along with the errors that led to them being declared invalid.")],
   _ajc_=
    [0,
     caml_string_of_jsbytes
      ("The errors that appears during the block (in)validation.")],
   _aje_=
    [0,
     caml_string_of_jsbytes("Remove an invalid block for the tezos storage")],
   _aji_=caml_string_of_jsbytes("locators"),
   _ajj_=caml_string_of_jsbytes(str_block),
   _ajk_=caml_string_of_jsbytes("new_branch"),
   _ajl_=caml_string_of_jsbytes(str_request),
   _ajm_=[0,1],
   _ajn_=caml_string_of_jsbytes("New_branch"),
   _ajr_=caml_string_of_jsbytes(str_block),
   _ajs_=caml_string_of_jsbytes("new_head"),
   _ajt_=caml_string_of_jsbytes(str_request),
   _aju_=[0,0],
   _ajv_=caml_string_of_jsbytes("New_head"),
   _ajz_=caml_string_of_jsbytes(str_status),
   _ajA_=caml_string_of_jsbytes(str_failed_request),
   _ajB_=caml_string_of_jsbytes(str_error),
   _ajC_=[0,2],
   _ajD_=caml_string_of_jsbytes(str_Failed_request),
   _ajH_=caml_string_of_jsbytes(str_status),
   _ajI_=caml_string_of_jsbytes(str_request),
   _ajJ_=[0,1],
   _ajK_=caml_string_of_jsbytes(str_Request),
   _ajO_=caml_string_of_jsbytes(str_message),
   _ajP_=[0,0],
   _ajQ_=caml_string_of_jsbytes(str_Debug),
   _ajR_=caml_string_of_jsbytes("fetched_blocks"),
   _ajS_=caml_string_of_jsbytes("fetched_headers"),
   _ajW_=caml_string_of_jsbytes("last_advertised_head"),
   _ajX_=caml_string_of_jsbytes("last_validated_head"),
   _ajY_=caml_string_of_jsbytes(str_pipelines),
   _aka_=[0,0],
   _aj__=[0,1],
   _aj3_=[0,0],
   _aj1_=[0,0],
   _aj4_=caml_string_of_jsbytes("leftover"),
   _aj5_=caml_string_of_jsbytes(str_request),
   _aj6_=[0,5],
   _aj7_=caml_string_of_jsbytes("Leftover"),
   _akb_=caml_string_of_jsbytes("advertise"),
   _akc_=caml_string_of_jsbytes(str_request),
   _akd_=[0,4],
   _ake_=caml_string_of_jsbytes("Advertise"),
   _aki_=caml_string_of_jsbytes(str_operation),
   _akj_=caml_string_of_jsbytes("operation_hash"),
   _akk_=caml_string_of_jsbytes("arrived"),
   _akl_=caml_string_of_jsbytes(str_request),
   _akm_=[0,3],
   _akn_=caml_string_of_jsbytes("Arrived"),
   _akr_=caml_string_of_jsbytes(str_operation),
   _aks_=caml_string_of_jsbytes("inject"),
   _akt_=caml_string_of_jsbytes(str_request),
   _aku_=[0,2],
   _akv_=caml_string_of_jsbytes("Inject"),
   _akz_=caml_string_of_jsbytes(str_mempool),
   _akA_=caml_string_of_jsbytes(str_peer),
   _akB_=caml_string_of_jsbytes("notify"),
   _akC_=caml_string_of_jsbytes(str_request),
   _akD_=[0,1],
   _akE_=caml_string_of_jsbytes("Notify"),
   _akI_=caml_string_of_jsbytes(str_block),
   _akJ_=caml_string_of_jsbytes(str_flush),
   _akK_=caml_string_of_jsbytes(str_request),
   _akL_=[0,0],
   _akM_=caml_string_of_jsbytes("Flush"),
   _akQ_=caml_string_of_jsbytes(str_status),
   _akR_=caml_string_of_jsbytes(str_failed_request),
   _akS_=caml_string_of_jsbytes(str_error),
   _akT_=[0,2],
   _akU_=caml_string_of_jsbytes(str_Failed_request),
   _akY_=caml_string_of_jsbytes(str_status),
   _akZ_=caml_string_of_jsbytes(str_request),
   _ak0_=[0,1],
   _ak1_=caml_string_of_jsbytes(str_Request),
   _ak5_=caml_string_of_jsbytes(str_message),
   _ak6_=[0,0],
   _ak7_=caml_string_of_jsbytes(str_Debug),
   _ak8_=caml_string_of_jsbytes("delayed"),
   _ak__=caml_string_of_jsbytes(str_applied),
   _ala_=caml_string_of_jsbytes(str_pending),
   _alb_=caml_string_of_jsbytes("fetching"),
   _alc_=caml_string_of_jsbytes(str_timestamp),
   _ald_=caml_string_of_jsbytes(str_head),
   _ale_=caml_string_of_jsbytes(str_prevalidators),
   _alf_=caml_string_of_jsbytes(str_workers),
   _alh_=caml_string_of_jsbytes(str_pipelines),
   _ali_=caml_string_of_jsbytes(str_information),
   _alk_=caml_string_of_jsbytes(str_status),
   _all_=caml_string_of_jsbytes(str_chain_id),
   _aln_=
    [0,
     caml_string_of_jsbytes
      ("Lists the Prevalidator workers and their status.")],
   _alo_=caml_string_of_jsbytes(str_prevalidators),
   _alp_=caml_string_of_jsbytes(str_workers),
   _als_=
    [0,
     caml_string_of_jsbytes("Introspect the state of prevalidator workers.")],
   _alt_=caml_string_of_jsbytes("block_validator"),
   _alu_=caml_string_of_jsbytes(str_workers),
   _alx_=
    [0,
     caml_string_of_jsbytes
      ("Introspect the state of the block_validator worker.")],
   _aly_=caml_string_of_jsbytes(str_peers_validators),
   _alz_=caml_string_of_jsbytes(str_chain_validators),
   _alA_=caml_string_of_jsbytes(str_workers),
   _alC_=caml_string_of_jsbytes(str_pipelines),
   _alD_=caml_string_of_jsbytes(str_information),
   _alF_=caml_string_of_jsbytes(str_status),
   _alG_=caml_string_of_jsbytes(str_peer_id),
   _alI_=
    [0,
     caml_string_of_jsbytes
      ("Lists the peer validator workers and their status.")],
   _alJ_=caml_string_of_jsbytes(str_peers_validators),
   _alK_=caml_string_of_jsbytes(str_chain_validators),
   _alL_=caml_string_of_jsbytes(str_workers),
   _alO_=
    [0,
     caml_string_of_jsbytes
      ("Introspect the state of a peer validator worker.")],
   _alP_=caml_string_of_jsbytes(str_chain_validators),
   _alQ_=caml_string_of_jsbytes(str_workers),
   _alS_=caml_string_of_jsbytes(str_pipelines),
   _alT_=caml_string_of_jsbytes(str_information),
   _alV_=caml_string_of_jsbytes(str_status),
   _alW_=caml_string_of_jsbytes(str_chain_id),
   _alY_=
    [0,
     caml_string_of_jsbytes
      ("Lists the chain validator workers and their status.")],
   _alZ_=caml_string_of_jsbytes(str_chain_validators),
   _al0_=caml_string_of_jsbytes(str_workers),
   _al3_=
    [0,
     caml_string_of_jsbytes
      ("Introspect the state of a chain validator worker.")],
   _al4_=caml_string_of_jsbytes("ddb"),
   _al5_=caml_string_of_jsbytes(str_chain_validators),
   _al6_=caml_string_of_jsbytes(str_workers),
   _al8_=
    [0,
     caml_string_of_jsbytes
      ("Introspect the state of the DDB attached to a chain validator worker.")],
   _al9_=caml_string_of_jsbytes(str_version),
   _al$_=[0,caml_string_of_jsbytes("Get information on the node version")],
   _aoX_=
    [0,
     [11,
      caml_string_of_jsbytes("The peer "),
      [15,
       [11,
        caml_string_of_jsbytes
         (" send us a block which is a sibling of the configured checkpoint ("),
        [15,[11,caml_string_of_jsbytes(str$17),0]]]]],
     caml_string_of_jsbytes
      ("The peer %a send us a block which is a sibling of the configured checkpoint (%a).")],
   _aoY_=
    [0,
     [11,
      caml_string_of_jsbytes("The block "),
      [15,
       [11,
        caml_string_of_jsbytes
         (" is incompatible with the current checkpoint."),
        0]]],
     caml_string_of_jsbytes
      ("The block %a is incompatible with the current checkpoint.")],
   _aoO_=
    [0,
     [11,
      caml_string_of_jsbytes("Tried to validate a block from chain "),
      [15,
       [11,
        caml_string_of_jsbytes(", that is not currently considered active."),
        0]]],
     caml_string_of_jsbytes
      ("Tried to validate a block from chain %a, that is not currently considered active.")],
   _aoE_=
    [0,
     [11,caml_string_of_jsbytes(str_Known_invalid),0],
     caml_string_of_jsbytes(str_Known_invalid)],
   _aoD_=[0,0],
   _aox_=
    [0,
     [11,caml_string_of_jsbytes(str_Unknown_ancestor),0],
     caml_string_of_jsbytes(str_Unknown_ancestor)],
   _aow_=[0,0],
   _aoo_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Invalid protocol "),
       [15,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]]],
     caml_string_of_jsbytes("@[<v 2>Invalid protocol %a@ %a@]")],
   _aoj_=
    [0,
     [11,caml_string_of_jsbytes(str_dynlinking_error),0],
     caml_string_of_jsbytes(str_dynlinking_error)],
   _aoi_=
    [0,
     [11,caml_string_of_jsbytes(str_compilation_error),0],
     caml_string_of_jsbytes(str_compilation_error)],
   _aod_=[0,0],
   _an7_=[0,0],
   _anZ_=
    [0,
     [11,
      caml_string_of_jsbytes("Too short locator on peer "),
      [15,[11,caml_string_of_jsbytes(str$2),[15,0]]]],
     caml_string_of_jsbytes("Too short locator on peer %a:\n%a")],
   _anQ_=
    [0,
     [11,
      caml_string_of_jsbytes("Invalid block locator on peer "),
      [15,[11,caml_string_of_jsbytes(str$2),[15,0]]]],
     caml_string_of_jsbytes("Invalid block locator on peer %a:\n%a")],
   _anF_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Missing operation metadata hashes at block: "),
       [15,0]]],
     caml_string_of_jsbytes
      ("@[<v 2>Missing operation metadata hashes at block: %a")],
   _anx_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Missing block metadata hash at block: "),
       [15,0]]],
     caml_string_of_jsbytes("@[<v 2>Missing block metadata hash at block: %a")],
   _anp_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Inconsistent hash:"),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes("got: "),
         [15,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,caml_string_of_jsbytes("expected: "),[15,0]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Inconsistent hash:@ got: %a@ expected: %a")],
   _and_=
    [0,
     [11,
      caml_string_of_jsbytes("Block "),
      [15,
       [11,
        caml_string_of_jsbytes
         (" was expected to be invalid, but was not actually invalid."),
        0]]],
     caml_string_of_jsbytes
      ("Block %a was expected to be invalid, but was not actually invalid.")],
   _am7_=
    [0,
     [11,caml_string_of_jsbytes(str_Bad_data_directory),0],
     caml_string_of_jsbytes(str_Bad_data_directory)],
   _am6_=[0,0],
   _am0_=
    [0,
     [11,caml_string_of_jsbytes("Unknown chain "),[15,0]],
     caml_string_of_jsbytes("Unknown chain %a")],
   _amP_=
    [0,
     [11,caml_string_of_jsbytes(str_Unable_to_serial_abr),0],
     caml_string_of_jsbytes(str_Unable_to_serial_abr)],
   _amO_=[0,0],
   _amI_=
    [0,
     [11,
      caml_string_of_jsbytes("Future block header (block: "),
      [15,
       [11,
        caml_string_of_jsbytes(", block_time: "),
        [15,[11,caml_string_of_jsbytes(", time: "),[15,[12,41,0]]]]]]],
     caml_string_of_jsbytes
      ("Future block header (block: %a, block_time: %a, time: %a)")],
   _amy_=
    [0,
     [11,
      caml_string_of_jsbytes("Oversized operation (size: "),
      [4,0,0,0,[11,caml_string_of_jsbytes(str_max$0),[4,0,0,0,[12,41,0]]]]],
     caml_string_of_jsbytes("Oversized operation (size: %d, max: %d)")],
   _amp_=
    [0,
     [11,caml_string_of_jsbytes(str_Too_many_operati_abr),0],
     caml_string_of_jsbytes(str_Too_many_operati_abr)],
   _amo_=[0,0],
   _ami_=
    [0,
     [11,caml_string_of_jsbytes(str_Operation_parsin_abr),0],
     caml_string_of_jsbytes(str_Operation_parsin_abr)],
   _amh_=[0,0],
   _ama_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Parse_error"),
   _amb_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Too_many_operations"),
   _amc_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Oversized_operation"),
   _amd_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Future_block_header"),
   _ame_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Cannot_serialize_operation_metadata"),
   _amj_=
    caml_string_of_jsbytes
     ("Raised when an operation has not been parsed correctly during prevalidation."),
   _amk_=caml_string_of_jsbytes("Parsing error in prevalidation"),
   _aml_=caml_string_of_jsbytes("node.prevalidation.parse_error"),
   _amq_=caml_string_of_jsbytes("The prevalidation context is full."),
   _amr_=
    caml_string_of_jsbytes("Too many pending operations in prevalidation"),
   _ams_=caml_string_of_jsbytes("node.prevalidation.too_many_operations"),
   _amv_=caml_string_of_jsbytes(str_max_size),
   _amw_=caml_string_of_jsbytes(str_size),
   _amz_=caml_string_of_jsbytes("The operation size is bigger than allowed."),
   _amA_=caml_string_of_jsbytes("Oversized operation"),
   _amB_=caml_string_of_jsbytes("node.prevalidation.oversized_operation"),
   _amE_=caml_string_of_jsbytes(str_time),
   _amF_=caml_string_of_jsbytes("block_time"),
   _amG_=caml_string_of_jsbytes(str_block),
   _amJ_=
    caml_string_of_jsbytes
     ("The block was annotated with a time too far in the future."),
   _amK_=caml_string_of_jsbytes("Future block header"),
   _amL_=caml_string_of_jsbytes("node.prevalidation.future_block_header"),
   _amQ_=caml_string_of_jsbytes("Unable to serialize metadata"),
   _amR_=caml_string_of_jsbytes("Cannot serialize metadata"),
   _amS_=caml_string_of_jsbytes("block_validation.cannot_serialize_metadata"),
   _amT_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Unknown_chain"),
   _amU_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Bad_data_dir"),
   _amV_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Block_not_invalid"),
   _amY_=caml_string_of_jsbytes(str_chain),
   _am1_=
    caml_string_of_jsbytes
     ("The chain identifier could not be found in the chain identifiers table."),
   _am2_=caml_string_of_jsbytes("Unknown chain"),
   _am3_=caml_string_of_jsbytes("node.state.unknown_chain"),
   _am8_=
    caml_string_of_jsbytes
     ("The data directory could not be read. This could be because it was generated with an old version of the tezos-node program. Deleting and regenerating this directory may fix the problem."),
   _am9_=caml_string_of_jsbytes("Bad data directory"),
   _am__=caml_string_of_jsbytes("node.state.bad_data_dir"),
   _anb_=caml_string_of_jsbytes(str_block),
   _ane_=
    caml_string_of_jsbytes
     ("The invalid block to be unmarked was not actually invalid."),
   _anf_=caml_string_of_jsbytes("Block not invalid"),
   _ang_=caml_string_of_jsbytes("node.state.block_not_invalid"),
   _anh_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Inconsistent_hash"),
   _ani_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Missing_block_metadata_hash"),
   _anj_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Missing_operation_metadata_hashes"),
   _anm_=caml_string_of_jsbytes("expected_context_hash"),
   _ann_=caml_string_of_jsbytes("wrong_context_hash"),
   _anq_=
    caml_string_of_jsbytes
     ("When committing the context of a block, the announced context hash was not the one computed at commit time."),
   _anr_=caml_string_of_jsbytes("Inconsistent commit hash"),
   _ans_=caml_string_of_jsbytes("node.state.block.inconsistent_context_hash"),
   _anv_=caml_string_of_jsbytes(str_block),
   _any_=
    caml_string_of_jsbytes
     ("A block was expected to commit to a block metadata hash, however none was given."),
   _anz_=caml_string_of_jsbytes("Missing block metadata hash"),
   _anA_=
    caml_string_of_jsbytes("node.state.block.missing_block_metadata_hash"),
   _anD_=caml_string_of_jsbytes(str_block),
   _anG_=
    caml_string_of_jsbytes
     ("A block was expected to commit to operation metadata hashes, however none were given."),
   _anH_=caml_string_of_jsbytes("Missing operation metadata hashes"),
   _anI_=
    caml_string_of_jsbytes
     ("node.state.block.missing_operation_metadata_hashes"),
   _anJ_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Invalid_locator"),
   _anK_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Too_short_locator"),
   _anN_=caml_string_of_jsbytes(str_locator),
   _anO_=caml_string_of_jsbytes(str_id),
   _anR_=caml_string_of_jsbytes("Block locator is invalid."),
   _anS_=caml_string_of_jsbytes("Invalid block locator"),
   _anT_=caml_string_of_jsbytes("node.bootstrap_pipeline.invalid_locator"),
   _anW_=caml_string_of_jsbytes(str_locator),
   _anX_=caml_string_of_jsbytes(str_id),
   _an0_=caml_string_of_jsbytes("Block locator is too short."),
   _an1_=caml_string_of_jsbytes("Too short locator"),
   _an2_=caml_string_of_jsbytes("node.bootstrap_pipeline.too_short_locator"),
   _an3_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Invalid_protocol"),
   _an8_=caml_string_of_jsbytes("dynlinking_failed"),
   _an9_=caml_string_of_jsbytes(str_error),
   _an__=[0,1],
   _an$_=caml_string_of_jsbytes("Dynlinking failed"),
   _aoe_=caml_string_of_jsbytes("compilation_failed"),
   _aof_=caml_string_of_jsbytes(str_error),
   _aog_=[0,0],
   _aoh_=caml_string_of_jsbytes("Compilation failed"),
   _aom_=caml_string_of_jsbytes("invalid_protocol"),
   _aop_=caml_string_of_jsbytes("Invalid protocol."),
   _aoq_=caml_string_of_jsbytes("Invalid protocol"),
   _aor_=caml_string_of_jsbytes("node.protocol_validator.invalid_protocol"),
   _aos_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Unknown_ancestor"),
   _aot_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Known_invalid"),
   _aoy_=
    caml_string_of_jsbytes("Unknown ancestor block found in the peer's chain"),
   _aoz_=caml_string_of_jsbytes(str_Unknown_ancestor),
   _aoA_=caml_string_of_jsbytes("node.peer_validator.unknown_ancestor"),
   _aoF_=
    caml_string_of_jsbytes("Known invalid block found in the peer's chain"),
   _aoG_=caml_string_of_jsbytes(str_Known_invalid),
   _aoH_=caml_string_of_jsbytes("node.peer_validator.known_invalid"),
   _aoI_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Inactive_chain"),
   _aoJ_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Validation_errors.Checkpoint_error"),
   _aoM_=caml_string_of_jsbytes("inactive_chain"),
   _aoP_=
    caml_string_of_jsbytes
     ("Attempted validation of a block from an inactive chain."),
   _aoQ_=caml_string_of_jsbytes("Inactive chain"),
   _aoR_=caml_string_of_jsbytes("node.validator.inactive_chain"),
   _aoU_=caml_string_of_jsbytes(str_peer),
   _aoV_=caml_string_of_jsbytes(str_block),
   _aoZ_=
    caml_string_of_jsbytes
     ("The block belongs to a branch that is not compatible with the current checkpoint."),
   _ao0_=
    caml_string_of_jsbytes("Block incompatible with the current checkpoint."),
   _ao1_=caml_string_of_jsbytes("node.validator.checkpoint_error"),
   _ao2_=caml_string_of_jsbytes(str_chain_id),
   _ao3_=[0,caml_string_of_jsbytes("Chain ID")],
   _ao4_=caml_string_of_jsbytes("stack_size"),
   _ao5_=caml_string_of_jsbytes("top_heap_words"),
   _ao6_=caml_string_of_jsbytes("compactions"),
   _ao7_=caml_string_of_jsbytes("fragments"),
   _ao8_=caml_string_of_jsbytes("largest_free"),
   _ao9_=caml_string_of_jsbytes("free_blocks"),
   _ao$_=caml_string_of_jsbytes("free_words"),
   _apa_=caml_string_of_jsbytes(str_live_blocks),
   _apb_=caml_string_of_jsbytes("live_words"),
   _apc_=caml_string_of_jsbytes("heap_chunks"),
   _apd_=caml_string_of_jsbytes("heap_words"),
   _apf_=caml_string_of_jsbytes("major_collections"),
   _apg_=caml_string_of_jsbytes("minor_collections"),
   _aph_=caml_string_of_jsbytes("major_words"),
   _api_=caml_string_of_jsbytes("promoted_words"),
   _apj_=caml_string_of_jsbytes("minor_words"),
   _apq_=caml_string_of_jsbytes(str_resident),
   _apr_=caml_string_of_jsbytes("mem"),
   _aps_=caml_string_of_jsbytes(str_page_size),
   _apw_=[0,1],
   _apx_=caml_string_of_jsbytes("Darwin_ps"),
   _apB_=caml_string_of_jsbytes("dt"),
   _apC_=caml_string_of_jsbytes(str_data),
   _apD_=caml_string_of_jsbytes("lib"),
   _apE_=caml_string_of_jsbytes(str_text),
   _apF_=caml_string_of_jsbytes("shared"),
   _apG_=caml_string_of_jsbytes(str_resident),
   _apH_=caml_string_of_jsbytes(str_size),
   _apI_=caml_string_of_jsbytes(str_page_size),
   _apM_=[0,0],
   _apN_=caml_string_of_jsbytes("Linux_proc_statm"),
   _apO_=[0,num_919245630],
   _apP_=caml_string_of_jsbytes("gc"),
   _apQ_=caml_string_of_jsbytes(str_stats),
   _apS_=
    [0,caml_string_of_jsbytes("Gets stats from the OCaml Garbage Collector")],
   _apT_=caml_string_of_jsbytes("memory"),
   _apU_=caml_string_of_jsbytes(str_stats),
   _apW_=[0,caml_string_of_jsbytes("Gets memory usage stats")],
   _apX_=caml_string_of_jsbytes("user_activated_upgrades"),
   _apY_=caml_string_of_jsbytes(str_network),
   _apZ_=caml_string_of_jsbytes(str_config),
   _ap1_=
    [0,
     caml_string_of_jsbytes("List of protocols to switch to at given levels")],
   _ap2_=caml_string_of_jsbytes("user_activated_protocol_overrides"),
   _ap3_=caml_string_of_jsbytes(str_network),
   _ap4_=caml_string_of_jsbytes(str_config),
   _ap6_=
    [0,
     caml_string_of_jsbytes("List of protocols which replace other protocols")],
   _aqG_=caml_string_of_jsbytes(str$59),
   _aqH_=caml_string_of_jsbytes(str_async),
   _aqw_=caml_string_of_jsbytes(str$59),
   _aqh_=caml_string_of_jsbytes(str$59),
   _ap8_=
    [0,
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_force),
     caml_string_of_jsbytes(str_async)],
   _ap9_=[0,caml_string_of_jsbytes(str_async)],
   _ap__=caml_string_of_jsbytes("injection"),
   _ap$_=caml_string_of_jsbytes(str_chain),
   _aqb_=caml_string_of_jsbytes(str_force),
   _aqd_=caml_string_of_jsbytes(str_async),
   _aql_=caml_string_of_jsbytes(str_operations),
   _aqm_=caml_string_of_jsbytes(str_data),
   _aqn_=caml_string_of_jsbytes(str_block),
   _aqp_=
    [0,
     caml_string_of_jsbytes
      ("Inject a block in the node and broadcast it. The `operations` embedded in `blockHeader` might be pre-validated using a contextual RPCs from the latest block (e.g. '/blocks/head/context/preapply'). Returns the ID of the block. By default, the RPC will wait for the block to be validated before answering. If ?async is true, the function returns immediately. Otherwise, the block will be validated before the result is returned. If ?force is true, it will be injected even on non strictly increasing fitness. An optional ?chain parameter can be used to specify whether to inject on the test chain or the main chain.")],
   _aqq_=caml_string_of_jsbytes(str_chain),
   _aqs_=caml_string_of_jsbytes(str_async),
   _aqz_=caml_string_of_jsbytes(str_operation),
   _aqB_=
    [0,
     caml_string_of_jsbytes
      ("Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context. If ?async is true, the function returns immediately. Otherwise, the operation will be validated before the result is returned. An optional ?chain parameter can be used to specify whether to inject on the test chain or the main chain.")],
   _aqC_=caml_string_of_jsbytes(str_async),
   _aqJ_=caml_string_of_jsbytes(str_protocol),
   _aqL_=
    [0,
     caml_string_of_jsbytes
      ("Inject a protocol in node. Returns the ID of the protocol. If ?async is true, the function returns immediately. Otherwise, the protocol will be validated before the result is returned.")],
   _arz_=caml_string_of_jsbytes(str$59),
   _arA_=caml_string_of_jsbytes(str_next_protocols),
   _arl_=caml_string_of_jsbytes(str$59),
   _aqM_=[0,caml_string_of_jsbytes(str_next_protocols)],
   _aqQ_=caml_string_of_jsbytes("stopping"),
   _aqR_=[0,2],
   _aqS_=caml_string_of_jsbytes("Stopping"),
   _aqW_=caml_string_of_jsbytes("expiration_date"),
   _aqX_=caml_string_of_jsbytes(str_test_protocol),
   _aqY_=caml_string_of_jsbytes(str_chain_id),
   _aqZ_=[0,1],
   _aq0_=caml_string_of_jsbytes("Test"),
   _aq4_=caml_string_of_jsbytes(str_chain_id),
   _aq5_=[0,0],
   _aq6_=caml_string_of_jsbytes("Main"),
   _aq7_=[0,num_919245630],
   _aq8_=caml_string_of_jsbytes(str_monitor),
   _aq9_=caml_string_of_jsbytes(str_bootstrapped),
   _aq$_=caml_string_of_jsbytes(str_timestamp),
   _ara_=caml_string_of_jsbytes(str_block),
   _arc_=
    [0,
     caml_string_of_jsbytes
      ("Wait for the node to have synchronized its chain with a few peers (configured by the node's administrator), streaming head updates that happen during the bootstrapping process, and closing the stream at the end. If the node was already bootstrapped, returns the current head immediately.")],
   _ard_=caml_string_of_jsbytes(str_chain),
   _arf_=caml_string_of_jsbytes(str_next_protocol),
   _arh_=caml_string_of_jsbytes(str_protocol),
   _arp_=caml_string_of_jsbytes(str_valid_blocks),
   _arr_=caml_string_of_jsbytes(str_hash),
   _ars_=caml_string_of_jsbytes(str_chain_id),
   _aru_=
    [0,
     caml_string_of_jsbytes
      ("Monitor all blocks that are successfully validated by the node, disregarding whether they were selected as the new head or not.")],
   _arv_=caml_string_of_jsbytes(str_next_protocol),
   _arC_=caml_string_of_jsbytes(str_heads),
   _arE_=caml_string_of_jsbytes(str_hash),
   _arG_=
    [0,
     caml_string_of_jsbytes
      ("Monitor all blocks that are successfully validated by the node and selected as the new head of the given chain.")],
   _arH_=caml_string_of_jsbytes(str_protocols),
   _arJ_=
    [0,
     caml_string_of_jsbytes
      ("Monitor all economic protocols that are retrieved and successfully loaded and compiled by the node.")],
   _arK_=caml_string_of_jsbytes(str_commit_hash),
   _arM_=[0,caml_string_of_jsbytes(str_DEPRECATED_use_abr)],
   _arN_=caml_string_of_jsbytes(str_active_chains),
   _arQ_=
    [0,
     caml_string_of_jsbytes
      ("Monitor every chain creation and destruction. Currently active chains will be given as first elements")],
   _arR_=caml_string_of_jsbytes(str_protocols),
   _arT_=caml_string_of_jsbytes("environment"),
   _arU_=caml_string_of_jsbytes(str_protocols),
   _arW_=caml_string_of_jsbytes(str_protocols),
   _arZ_=caml_string_of_jsbytes("fetch_protocol"),
   _ar1_=[0,caml_string_of_jsbytes("Fetch a protocol from the network.")],
   _au8_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("Failed to validate block using external validation process. "),
      [15,0]],
     caml_string_of_jsbytes
      ("Failed to validate block using external validation process. %a")],
   _au0_=
    [0,
     [11,
      caml_string_of_jsbytes("Missing test protocol "),
      [15,[11,caml_string_of_jsbytes(" when forking the test chain."),0]]],
     caml_string_of_jsbytes
      ("Missing test protocol %a when forking the test chain.")],
   _auS_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("System error while validating a block (in function "),
      [2,
       0,
       [12,
        40,
        [2,
         0,
         [11,
          caml_string_of_jsbytes(")):"),
          [17,[0,caml_string_of_jsbytes(str$5),1,0],[2,0,0]]]]]]],
     caml_string_of_jsbytes
      ("System error while validating a block (in function %s(%s)):@ %s")],
   _auI_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes("Failed to get live blocks from block hash "),
       [15,[17,0,0]]]],
     caml_string_of_jsbytes
      ("@[Failed to get live blocks from block hash %a@]")],
   _auA_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes("Failed to checkout the context with hash "),
       [15,[17,0,0]]]],
     caml_string_of_jsbytes("@[Failed to checkout the context with hash %a@]")],
   _aus_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("The provided list of operations for block "),
       [15,
        [11,
         caml_string_of_jsbytes("  is inconsistent with the block header"),
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,
           caml_string_of_jsbytes(" expected: "),
           [15,
            [17,
             [0,caml_string_of_jsbytes(str$5),1,0],
             [11,caml_string_of_jsbytes(" found: "),[15,partial$22]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The provided list of operations for block %a  is inconsistent with the block header@  expected: %a@  found: %a@]")],
   _aui_=
    [0,
     [11,
      caml_string_of_jsbytes("Missing protocol ("),
      [15,
       [11,
        caml_string_of_jsbytes(") when validating the block "),
        [15,[12,46,0]]]]],
     caml_string_of_jsbytes
      ("Missing protocol (%a) when validating the block %a.")],
   _at$_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Invalid block "),
       [15,[17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]]],
     caml_string_of_jsbytes("@[<v 2>Invalid block %a@ %a@]")],
   _at__=caml_string_of_jsbytes("invalid_block"),
   _atW_=
    [0,
     [11,caml_string_of_jsbytes(str_Missing_handshak_abr),0],
     caml_string_of_jsbytes(str_Missing_handshak_abr)],
   _atX_=
    [0,
     [11,caml_string_of_jsbytes("Inconsistent handshake: "),[2,0,[12,46,0]]],
     caml_string_of_jsbytes("Inconsistent handshake: %s.")],
   _atY_=[0,[2,0,0],caml_string_of_jsbytes(str_s$1)],
   _atR_=[0,0],
   _atn_=
    [0,
     [11,caml_string_of_jsbytes(str_Non_increasing_t_abr),0],
     caml_string_of_jsbytes(str_Non_increasing_t_abr)],
   _ato_=
    [0,
     [11,caml_string_of_jsbytes(str_Non_increasing_f_abr),0],
     caml_string_of_jsbytes(str_Non_increasing_f_abr)],
   _atp_=
    [0,
     [11,caml_string_of_jsbytes(str_Failed_to_parse_abr),0],
     caml_string_of_jsbytes(str_Failed_to_parse_abr)],
   _atq_=
    [0,
     [11,
      caml_string_of_jsbytes("Failed to parse the operation "),
      [15,[12,46,0]]],
     caml_string_of_jsbytes("Failed to parse the operation %a.")],
   _atr_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Invalid fitness:"),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes(str_expected$0),
         [15,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,caml_string_of_jsbytes(str_found),[15,[17,0,0]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Invalid fitness:@  expected %a@  found %a@]")],
   _ats_=
    [0,
     [11,
      caml_string_of_jsbytes("Invalid level:"),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_expected$0),
        [5,
         0,
         0,
         0,
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,caml_string_of_jsbytes(str_found),[5,0,0,0,0]]]]]]],
     caml_string_of_jsbytes("Invalid level:@  expected %ld@  found %ld")],
   _att_=
    [0,
     [11,
      caml_string_of_jsbytes("Invalid protocol level:"),
      [17,
       [0,caml_string_of_jsbytes(str$5),1,0],
       [11,
        caml_string_of_jsbytes(str_expected$0),
        [4,
         0,
         0,
         0,
         [17,
          [0,caml_string_of_jsbytes(str$5),1,0],
          [11,caml_string_of_jsbytes(str_found),[4,0,0,0,0]]]]]]],
     caml_string_of_jsbytes
      ("Invalid protocol level:@  expected %d@  found %d")],
   _atu_=
    [0,
     [11,
      caml_string_of_jsbytes(str_The_operation),
      [15,
       [11,caml_string_of_jsbytes(" was previously included in the chain."),0]]],
     caml_string_of_jsbytes
      ("The operation %a was previously included in the chain.")],
   _atv_=
    [0,
     [11,
      caml_string_of_jsbytes(str_The_operation),
      [15,
       [11,
        caml_string_of_jsbytes(" is outdated (originated in block: "),
        [15,[12,41,0]]]]],
     caml_string_of_jsbytes
      ("The operation %a is outdated (originated in block: %a)")],
   _atw_=
    [0,
     [11,
      caml_string_of_jsbytes("The block timestamp ("),
      [15,
       [11,
        caml_string_of_jsbytes(") is later than its chain expiration date: "),
        [15,
         [11,
          caml_string_of_jsbytes(" (chain: "),
          [15,[11,caml_string_of_jsbytes(str$17),0]]]]]]],
     caml_string_of_jsbytes
      ("The block timestamp (%a) is later than its chain expiration date: %a (chain: %a).")],
   _atx_=
    [0,
     [11,
      caml_string_of_jsbytes("Invalid number of validation passes (found: "),
      [4,0,0,0,[12,41,0]]],
     caml_string_of_jsbytes("Invalid number of validation passes (found: %d)")],
   _aty_=
    [0,
     [11,
      caml_string_of_jsbytes("Too many operations in validation pass "),
      [4,
       0,
       0,
       0,
       [11,
        caml_string_of_jsbytes(" (found: "),
        [4,0,0,0,[11,caml_string_of_jsbytes(str_max$0),[4,0,0,0,[12,41,0]]]]]]],
     caml_string_of_jsbytes
      ("Too many operations in validation pass %d (found: %d, max: %d)")],
   _atz_=
    [0,
     [11,
      caml_string_of_jsbytes("Oversized operation "),
      [15,
       [11,
        caml_string_of_jsbytes(" (size: "),
        [4,0,0,0,[11,caml_string_of_jsbytes(str_max$0),[4,0,0,0,[12,41,0]]]]]]],
     caml_string_of_jsbytes("Oversized operation %a (size: %d, max: %d)")],
   _atA_=
    [0,
     [11,
      caml_string_of_jsbytes("Operation "),
      [15,
       [11,
        caml_string_of_jsbytes(" included in validation pass "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes
           (",  while only the following passes are allowed: "),
          [18,
           [1,
            [0,
             [11,caml_string_of_jsbytes(str_h),0],
             caml_string_of_jsbytes(str_h)]],
           [15,[17,0,0]]]]]]]],
     caml_string_of_jsbytes
      ("Operation %a included in validation pass %d,  while only the following passes are allowed: @[<h>%a@]")],
   _atB_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("Failed to validate the economic-protocol content of the block: "),
      [15,[12,46,0]]],
     caml_string_of_jsbytes
      ("Failed to validate the economic-protocol content of the block: %a.")],
   _as9_=[0,0],
   _as4_=[0,0],
   _ar7_=[0,0],
   _ar2_=caml_string_of_jsbytes(str_trace),
   _ar3_=caml_string_of_jsbytes("economic_protocol_error"),
   _ar4_=caml_string_of_jsbytes(str_error),
   _ar5_=[0,14],
   _ar6_=caml_string_of_jsbytes("Economic_protocol_error"),
   _ar8_=caml_string_of_jsbytes("cannot_parse_bock_header"),
   _ar9_=caml_string_of_jsbytes(str_error),
   _ar__=[0,13],
   _ar$_=caml_string_of_jsbytes("Cannot_parse_block_header"),
   _asa_=caml_string_of_jsbytes("allowed_pass"),
   _asb_=caml_string_of_jsbytes("pass"),
   _asc_=caml_string_of_jsbytes(str_operation),
   _asd_=caml_string_of_jsbytes("invalid_pass"),
   _ase_=caml_string_of_jsbytes(str_error),
   _asf_=[0,12],
   _asg_=caml_string_of_jsbytes("Unallowed_pass"),
   _ash_=caml_string_of_jsbytes(str_max),
   _asi_=caml_string_of_jsbytes(str_found$0),
   _asj_=caml_string_of_jsbytes(str_operation),
   _ask_=caml_string_of_jsbytes("oversized_operation"),
   _asl_=caml_string_of_jsbytes(str_error),
   _asm_=[0,11],
   _asn_=caml_string_of_jsbytes("Oversized_operation"),
   _aso_=caml_string_of_jsbytes(str_max),
   _asp_=caml_string_of_jsbytes(str_found$0),
   _asq_=caml_string_of_jsbytes(str_validation_pass),
   _asr_=caml_string_of_jsbytes("too_many_operations"),
   _ass_=caml_string_of_jsbytes(str_error),
   _ast_=[0,10],
   _asu_=caml_string_of_jsbytes("Too_many_operations"),
   _asv_=caml_string_of_jsbytes(str_found$0),
   _asw_=caml_string_of_jsbytes("unexpected_number_of_passes"),
   _asx_=caml_string_of_jsbytes(str_error),
   _asy_=[0,9],
   _asz_=caml_string_of_jsbytes("Unexpected_number_of_validation_passes"),
   _asA_=caml_string_of_jsbytes(str_timestamp),
   _asB_=caml_string_of_jsbytes(str_expiration),
   _asC_=caml_string_of_jsbytes(str_chain_id),
   _asD_=caml_string_of_jsbytes("expired_chain"),
   _asE_=caml_string_of_jsbytes(str_error),
   _asF_=[0,8],
   _asG_=caml_string_of_jsbytes("Expired_chain"),
   _asH_=caml_string_of_jsbytes("originating_block"),
   _asI_=caml_string_of_jsbytes(str_operation),
   _asJ_=caml_string_of_jsbytes("outdated_operation"),
   _asK_=caml_string_of_jsbytes(str_error),
   _asL_=[0,7],
   _asM_=caml_string_of_jsbytes("Outdated_operation"),
   _asN_=caml_string_of_jsbytes(str_operation),
   _asO_=caml_string_of_jsbytes("replayed_operation"),
   _asP_=caml_string_of_jsbytes(str_error),
   _asQ_=[0,6],
   _asR_=caml_string_of_jsbytes("Replayed_operation"),
   _asS_=caml_string_of_jsbytes(str_found$0),
   _asT_=caml_string_of_jsbytes(str_expected),
   _asU_=caml_string_of_jsbytes("invalid_proto_level"),
   _asV_=caml_string_of_jsbytes(str_error),
   _asW_=[0,5],
   _asX_=caml_string_of_jsbytes("Invalid_proto_level"),
   _asY_=caml_string_of_jsbytes(str_found$0),
   _asZ_=caml_string_of_jsbytes(str_expected),
   _as0_=caml_string_of_jsbytes("invalid_level"),
   _as1_=caml_string_of_jsbytes(str_error),
   _as2_=[0,4],
   _as3_=caml_string_of_jsbytes("Invalid_level"),
   _as5_=caml_string_of_jsbytes("non_increasing_fitness"),
   _as6_=caml_string_of_jsbytes(str_error),
   _as7_=[0,3],
   _as8_=caml_string_of_jsbytes("Non_increasing_fitness"),
   _as__=caml_string_of_jsbytes("non_increasing_timestamp"),
   _as$_=caml_string_of_jsbytes(str_error),
   _ata_=[0,2],
   _atb_=caml_string_of_jsbytes("Non_increasing_timestamp"),
   _atc_=caml_string_of_jsbytes(str_found$0),
   _atd_=caml_string_of_jsbytes(str_expected),
   _ate_=caml_string_of_jsbytes("invalid_fitness"),
   _atf_=caml_string_of_jsbytes(str_error),
   _atg_=[0,1],
   _ath_=caml_string_of_jsbytes("Invalid_fitness"),
   _ati_=caml_string_of_jsbytes(str_operation),
   _atj_=caml_string_of_jsbytes("cannot_parse_operation"),
   _atk_=caml_string_of_jsbytes(str_error),
   _atl_=[0,0],
   _atm_=caml_string_of_jsbytes("Cannot_parse_operation"),
   _atF_=caml_string_of_jsbytes("protocol_dynlink_failure"),
   _atG_=[0,2],
   _atH_=caml_string_of_jsbytes("Protocol_dynlink_failure"),
   _atL_=caml_string_of_jsbytes("inconsistent_handshake"),
   _atM_=[0,1],
   _atN_=caml_string_of_jsbytes("Inconsistent_handshake"),
   _atS_=caml_string_of_jsbytes("missing_handshake"),
   _atT_=caml_string_of_jsbytes("constant"),
   _atU_=[0,0],
   _atV_=caml_string_of_jsbytes("Missing_handshake"),
   _atZ_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Invalid_block"),
   _at0_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Unavailable_protocol"),
   _at1_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Inconsistent_operations_hash"),
   _at2_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Failed_to_checkout_context"),
   _at3_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Failed_to_get_live_blocks"),
   _at4_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.System_error"),
   _at5_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Missing_test_protocol"),
   _at6_=
    caml_string_of_jsbytes
     ("Tezos_shell_services.Block_validator_errors.Validation_process_failed"),
   _aua_=caml_string_of_jsbytes("Invalid block."),
   _aub_=caml_string_of_jsbytes("Invalid block"),
   _auc_=caml_string_of_jsbytes("validator.invalid_block"),
   _auf_=caml_string_of_jsbytes("missing_protocol"),
   _aug_=caml_string_of_jsbytes(str_block),
   _auj_=
    caml_string_of_jsbytes
     ("The protocol required for validating a block is missing."),
   _auk_=caml_string_of_jsbytes("Missing protocol"),
   _aul_=caml_string_of_jsbytes("validator.unavailable_protocol"),
   _auo_=caml_string_of_jsbytes(str_found$0),
   _aup_=caml_string_of_jsbytes(str_expected),
   _auq_=caml_string_of_jsbytes(str_block),
   _aut_=
    caml_string_of_jsbytes
     ("The provided list of operations is inconsistent with the block header."),
   _auu_=caml_string_of_jsbytes("Invalid merkle tree"),
   _auv_=caml_string_of_jsbytes("validator.inconsistent_operations_hash"),
   _auy_=caml_string_of_jsbytes(str_hash),
   _auB_=
    caml_string_of_jsbytes("The context checkout failed using a given hash"),
   _auC_=caml_string_of_jsbytes("Fail during checkout context"),
   _auD_=
    caml_string_of_jsbytes
     ("Block_validator_process.failed_to_checkout_context"),
   _auG_=caml_string_of_jsbytes(str_hash),
   _auJ_=caml_string_of_jsbytes("Unable to get live blocks from a given hash"),
   _auK_=caml_string_of_jsbytes("Fail to get live blocks"),
   _auL_=
    caml_string_of_jsbytes("Block_validator_process.failed_to_get_live_block"),
   _auO_=caml_string_of_jsbytes(str_msg),
   _auP_=caml_string_of_jsbytes("function"),
   _auQ_=caml_string_of_jsbytes("errno"),
   _auT_=
    caml_string_of_jsbytes("The validator failed because of a system error"),
   _auU_=
    caml_string_of_jsbytes
     ("Failed to validate block because of a system error"),
   _auV_=
    caml_string_of_jsbytes("Validator_process.system_error_while_validating"),
   _auY_=caml_string_of_jsbytes(str_test_protocol),
   _au1_=
    caml_string_of_jsbytes
     ("Missing test protocol when forking the test chain"),
   _au2_=caml_string_of_jsbytes("Missing test protocol"),
   _au3_=caml_string_of_jsbytes("validator.missing_test_protocol"),
   _au6_=caml_string_of_jsbytes(str_error),
   _au9_=
    caml_string_of_jsbytes
     ("Failed to validate block using external validation process."),
   _au__=caml_string_of_jsbytes("Validation process failed"),
   _au$_=caml_string_of_jsbytes("validator.validation_process_failed"),
   _avb_=caml_string_of_jsbytes("count must be a positive integer"),
   _avc_=
    caml_string_of_jsbytes("derived key length must be a positive integer"),
   _ava_=caml_string_of_jsbytes("xor: both buffers must be of same size"),
   _avd_=caml_string_of_jsbytes("ed25519"),
   _ave_=caml_string_of_jsbytes("p256"),
   _avf_=caml_string_of_jsbytes("secp256k1"),
   _avg_=
    [0,
     [11,
      caml_string_of_jsbytes("Unknown signature algorithm ("),
      [2,
       0,
       [11,
        caml_string_of_jsbytes
         ("). Available: 'ed25519', 'secp256k1' or 'p256'"),
        0]]],
     caml_string_of_jsbytes
      ("Unknown signature algorithm (%s). Available: 'ed25519', 'secp256k1' or 'p256'")],
   _avo_=caml_string_of_jsbytes(str$59),
   _avn_=caml_string_of_jsbytes(str_stdout),
   _avm_=caml_string_of_jsbytes(str_stderr),
   _avk_=caml_string_of_jsbytes(str$59),
   _avl_=caml_string_of_jsbytes(str$59),
   _avh_=
    [0,
     caml_string_of_jsbytes(str_answer),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_message)],
   _avi_=
    [0,
     caml_string_of_jsbytes(str_write),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_sleep),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_prompt_password),
     caml_string_of_jsbytes(str_prompt),
     caml_string_of_jsbytes(str_now),
     caml_string_of_jsbytes(str_message),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_get_base_dir),
     caml_string_of_jsbytes(str_generic_json_call),
     caml_string_of_jsbytes(str_exit),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_confirmations),
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_call_service),
     caml_string_of_jsbytes(str_block),
     caml_string_of_jsbytes(str_base),
     caml_string_of_jsbytes(str_answer)],
   _avj_=
    [0,
     caml_string_of_jsbytes(str_base),
     caml_string_of_jsbytes(str_exit),
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_write),
     caml_string_of_jsbytes(str_generic_json_call),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_answer),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_sleep),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_now),
     caml_string_of_jsbytes(str_confirmations),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_message),
     caml_string_of_jsbytes(str_call_service),
     caml_string_of_jsbytes(str_prompt_password),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_block),
     caml_string_of_jsbytes(str_prompt),
     caml_string_of_jsbytes(str_get_base_dir)],
   _avM_=caml_string_of_jsbytes("overwrite existing "),
   _avL_=caml_string_of_jsbytes(str_source),
   _avK_=caml_string_of_jsbytes(str_src),
   _avJ_=caml_string_of_jsbytes(str$59),
   _avI_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes(str_Can_be_a),
       [2,
        0,
        [11,
         caml_string_of_jsbytes(str_name_a_file_or_abr),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(str_literal_If_the_abr),
           [2,
            0,
            [11,
             caml_string_of_jsbytes(str_the_client_wil_abr),
             [2,
              0,
              [11,caml_string_of_jsbytes(str_and_if_it_does_abr),partial$23]]]]]]]]]],
     caml_string_of_jsbytes(str_s_Can_be_a_s_n_abr)],
   _avH_=caml_string_of_jsbytes(str_src),
   _avG_=caml_string_of_jsbytes(str_source),
   _avF_=
    [0,
     [2,
      0,
      [11,
       caml_string_of_jsbytes(str_Can_be_a),
       [2,
        0,
        [11,
         caml_string_of_jsbytes(str_name_a_file_or_abr),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(str_literal_If_the_abr),
           [2,
            0,
            [11,
             caml_string_of_jsbytes(str_the_client_wil_abr),
             [2,
              0,
              [11,caml_string_of_jsbytes(str_and_if_it_does_abr),partial$24]]]]]]]]]],
     caml_string_of_jsbytes(str_s_Can_be_a_s_n_abr)],
   _avB_=[0,1],
   _avC_=caml_string_of_jsbytes(str_alias),
   _avD_=caml_string_of_jsbytes(str_file),
   _avE_=caml_string_of_jsbytes(str_text),
   _avA_=caml_string_of_jsbytes("new"),
   _avy_=caml_string_of_jsbytes(str_alias$0),
   _avz_=caml_string_of_jsbytes("new "),
   _avx_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("The "),
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" alias "),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(" already exists."),
           [17,
            [0,caml_string_of_jsbytes(str$31),0,0],
            [11,
             caml_string_of_jsbytes("The current value is "),
             [2,0,[12,46,partial$25]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The %s alias %s already exists.@,The current value is %s.@,Use --force to update@]")],
   _avw_=caml_string_of_jsbytes(str_name),
   _avu_=caml_string_of_jsbytes(str_alias$0),
   _avv_=caml_string_of_jsbytes("existing "),
   _avs_=
    [0,
     [11,
      caml_string_of_jsbytes("another "),
      [2,
       0,
       [11,
        caml_string_of_jsbytes(str_is_already_alia_abr),
        [2,0,[11,caml_string_of_jsbytes(", use --force to update"),0]]]]],
     caml_string_of_jsbytes
      ("another %s is already aliased as %s, use --force to update")],
   _avt_=
    [0,
     [11,
      caml_string_of_jsbytes("this "),
      [2,
       0,
       [11,
        caml_string_of_jsbytes(str_is_already_alia_abr),
        [2,
         0,
         [11,caml_string_of_jsbytes(", use --force to insert duplicate"),0]]]]],
     caml_string_of_jsbytes
      ("this %s is already aliased as %s, use --force to insert duplicate")],
   _avr_=
    [0,
     [11,
      caml_string_of_jsbytes("no "),
      [2,0,[11,caml_string_of_jsbytes(" alias named "),[2,0,0]]]],
     caml_string_of_jsbytes("no %s alias named %s")],
   _avp_=caml_string_of_jsbytes(str_value),
   _avq_=caml_string_of_jsbytes(str_name),
   _awu_=
    [0,
     [11,caml_string_of_jsbytes(str_no_keys_for_the_abr),0],
     caml_string_of_jsbytes(str_no_keys_for_the_abr)],
   _awt_=caml_string_of_jsbytes("remote"),
   _aws_=
    [0,caml_string_of_jsbytes("src/lib_client_base/client_keys.ml"),num_251,6],
   _awo_=
    [0,
     [11,
      caml_string_of_jsbytes("The signer for "),
      [15,[11,caml_string_of_jsbytes(" produced an invalid signature"),0]]],
     caml_string_of_jsbytes("The signer for %a produced an invalid signature")],
   _av$_=
    [0,
     [11,caml_string_of_jsbytes(str_Error_while_pars_abr$0),0],
     caml_string_of_jsbytes(str_Error_while_pars_abr$0)],
   _av__=
    [0,
     [11,caml_string_of_jsbytes(str_Error_while_pars_abr),0],
     caml_string_of_jsbytes(str_Error_while_pars_abr)],
   _av8_=caml_string_of_jsbytes("Key URI needs a scheme"),
   _av2_=
    [0,
     [11,caml_string_of_jsbytes("Cannot parse the key uri: "),[2,0,0]],
     caml_string_of_jsbytes("Cannot parse the key uri: %s")],
   _avU_=
    [0,
     [11,caml_string_of_jsbytes("No matching plugin for key scheme "),[2,0,0]],
     caml_string_of_jsbytes("No matching plugin for key scheme %s")],
   _avO_=
    caml_string_of_jsbytes
     ("Tezos_client_base.Client_keys.Unregistered_key_scheme"),
   _avP_=caml_string_of_jsbytes("Tezos_client_base.Client_keys.Invalid_uri"),
   _avS_=caml_string_of_jsbytes(str_value),
   _avV_=
    caml_string_of_jsbytes
     ("A key has been provided with an unregistered scheme (no corresponding plugin)"),
   _avW_=caml_string_of_jsbytes("Unregistered key scheme"),
   _avX_=caml_string_of_jsbytes("cli.unregistered_key_scheme"),
   _av0_=caml_string_of_jsbytes(str_value),
   _av3_=
    caml_string_of_jsbytes("A key has been provided with an invalid uri."),
   _av4_=caml_string_of_jsbytes("Invalid key uri"),
   _av5_=caml_string_of_jsbytes("cli.key.invalid_uri"),
   _av6_=caml_string_of_jsbytes("pk_alias"),
   _av7_=[0,caml_string_of_jsbytes("Identity")],
   _awd_=caml_string_of_jsbytes("key"),
   _awe_=caml_string_of_jsbytes(str_locator),
   _awf_=caml_string_of_jsbytes("Locator_and_full_key"),
   _awi_=caml_string_of_jsbytes("Locator_only"),
   _awj_=
    caml_string_of_jsbytes("Tezos_client_base.Client_keys.Signature_mismatch"),
   _awm_=caml_string_of_jsbytes(str_locator),
   _awp_=caml_string_of_jsbytes("The signer produced an invalid signature"),
   _awq_=caml_string_of_jsbytes("Signature mismatch"),
   _awr_=caml_string_of_jsbytes("cli.signature_mismatch"),
   _awv_=caml_string_of_jsbytes(str$59),
   _aww_=caml_string_of_jsbytes(str$59),
   _awG_=caml_string_of_jsbytes(str$59),
   _awF_=caml_string_of_jsbytes("Str.group_end"),
   _awA_=[0,92],
   _awC_=caml_string_of_jsbytes("\\( group not closed by \\)"),
   _awB_=[0,caml_string_of_jsbytes(str_str_ml),520,10],
   _awD_=caml_string_of_jsbytes("[ class not closed by ]"),
   _awE_=caml_string_of_jsbytes("spurious \\) in regular expression"),
   _awy_=caml_string_of_jsbytes("too many r* or r+ where r is nullable"),
   _awz_=caml_string_of_jsbytes(str$59),
   _awx_=[0,caml_string_of_jsbytes(str_str_ml),num_213,11],
   _awH_=caml_string_of_jsbytes(str_Path),
   _awN_=caml_string_of_jsbytes(str_Authority),
   _awO_=caml_string_of_jsbytes(str_Custom),
   _awP_=caml_string_of_jsbytes(str_Fragment),
   _awQ_=caml_string_of_jsbytes(str_Generic),
   _awR_=caml_string_of_jsbytes(str_Host),
   _awI_=caml_string_of_jsbytes(str_Query),
   _awJ_=caml_string_of_jsbytes(str_Query_key),
   _awK_=caml_string_of_jsbytes(str_Query_value),
   _awL_=caml_string_of_jsbytes(str_Scheme),
   _awM_=caml_string_of_jsbytes(str_Userinfo),
   _awS_=caml_string_of_jsbytes(str_Path),
   _awY_=caml_string_of_jsbytes(str_Authority),
   _awZ_=caml_string_of_jsbytes(str_Custom),
   _aw0_=caml_string_of_jsbytes(str_Fragment),
   _aw1_=caml_string_of_jsbytes(str_Generic),
   _aw2_=caml_string_of_jsbytes(str_Host),
   _awT_=caml_string_of_jsbytes(str_Query),
   _awU_=caml_string_of_jsbytes(str_Query_key),
   _awV_=caml_string_of_jsbytes(str_Query_value),
   _awW_=caml_string_of_jsbytes(str_Scheme),
   _awX_=caml_string_of_jsbytes(str_Userinfo),
   _axa_=
    [0,
     [11,caml_string_of_jsbytes(str_Invalid_bounds),0],
     caml_string_of_jsbytes(str_Invalid_bounds)],
   _axb_=
    [0,
     [11,caml_string_of_jsbytes(str_Wrong_padding),0],
     caml_string_of_jsbytes(str_Wrong_padding)],
   _axc_=
    [0,
     [11,caml_string_of_jsbytes(str_Malformed_input),0],
     caml_string_of_jsbytes(str_Malformed_input)],
   _axd_=
    [0,
     [11,caml_string_of_jsbytes(str_Too_much_input),0],
     caml_string_of_jsbytes(str_Too_much_input)],
   _aw__=[0,caml_string_of_jsbytes("src/base64.ml"),135,15],
   _aw9_=
    [0,
     [11,caml_string_of_jsbytes(str_Invalid_bounds),0],
     caml_string_of_jsbytes(str_Invalid_bounds)],
   _aw3_=caml_string_of_jsbytes("Length of alphabet must be 64"),
   _aw4_=caml_string_of_jsbytes("Alphabet can not contain padding character"),
   _aw5_=
    caml_string_of_jsbytes
     ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),
   _aw6_=
    caml_string_of_jsbytes
     ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),
   _aw7_=caml_string_of_jsbytes("Base64.Out_of_bounds"),
   _aw8_=caml_string_of_jsbytes("Base64.Too_much_input"),
   _axL_=caml_string_of_jsbytes("parser"),
   _axJ_=caml_string_of_jsbytes("q"),
   _axs_=caml_string_of_jsbytes("compress"),
   _axt_=caml_string_of_jsbytes("deflate"),
   _axu_=caml_string_of_jsbytes("gzip"),
   _axv_=caml_string_of_jsbytes(str_identity),
   _axe_=[0,num_257,258,259,260,261,262,0],
   _axM_=caml_string_of_jsbytes(str$59),
   _axN_=caml_string_of_jsbytes(str$7),
   _axP_=
    [0,[12,59,[2,0,[12,61,[2,0,[2,0,0]]]]],caml_string_of_jsbytes(";%s=%s%s")],
   _axQ_=
    [0,
     [12,59,[2,0,[11,caml_string_of_jsbytes('="'),[2,0,[12,34,[2,0,0]]]]]],
     caml_string_of_jsbytes(';%s="%s"%s')],
   _axR_=caml_string_of_jsbytes(str$59),
   _ax0_=caml_string_of_jsbytes(str$55),
   _axX_=caml_string_of_jsbytes(str$20),
   _axY_=[0,[2,0,[12,47,[2,0,0]]],caml_string_of_jsbytes("%s/%s")],
   _axZ_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(str$30),0]],
     caml_string_of_jsbytes("%s/*")],
   _axW_=
    [0,
     [2,0,[11,caml_string_of_jsbytes(";q="),[2,0,[2,0,0]]]],
     caml_string_of_jsbytes("%s;q=%s%s")],
   _axV_=
    [0,
     [11,
      caml_string_of_jsbytes(str_qvalue),
      [4,0,0,0,[11,caml_string_of_jsbytes(" must be positive"),0]]],
     caml_string_of_jsbytes("qvalue %d must be positive")],
   _axS_=
    [0,
     [11,
      caml_string_of_jsbytes(str_qvalue),
      [4,0,0,0,[11,caml_string_of_jsbytes(" must be less than 1000"),0]]],
     caml_string_of_jsbytes("qvalue %d must be less than 1000")],
   _axU_=
    [0,
     [11,caml_string_of_jsbytes("0."),[4,0,[0,2,3],0,0]],
     caml_string_of_jsbytes("0.%03d")],
   _axT_=caml_string_of_jsbytes(str_1$0),
   _axO_=[0,[0,num_1000$0,[0,0,0]],0],
   _ax3_=
    [0,
     [11,caml_string_of_jsbytes(str_Basic),[2,0,0]],
     caml_string_of_jsbytes("Basic %s")],
   _ax4_=[0,2],
   _ax1_=[0,[2,0,[12,58,[2,0,0]]],caml_string_of_jsbytes("%s:%s")],
   _ax2_=caml_string_of_jsbytes(str_Basic),
   _aB8_=caml_string_of_jsbytes("408 Request Timeout"),
   _aB9_=caml_string_of_jsbytes("307 Temporary Redirect (since HTTP/1.1)"),
   _aB__=caml_string_of_jsbytes("103 Checkpoint"),
   _aB$_=caml_string_of_jsbytes("206 Partial Content"),
   _aB7_=caml_string_of_jsbytes("417 Expectation Failed"),
   _aCa_=caml_string_of_jsbytes("499 Client Closed Request"),
   _aCb_=caml_string_of_jsbytes("510 Not Extended (RFC 2774)"),
   _aCc_=caml_string_of_jsbytes("428 Precondition Required"),
   _aCd_=
    caml_string_of_jsbytes
     ("509 Bandwidth Limit Exceeded (Apache bw/limited extension)"),
   _aCf_=caml_string_of_jsbytes("410 Gone"),
   _aCg_=caml_string_of_jsbytes("599 Network connect timeout error"),
   _aCh_=caml_string_of_jsbytes("504 Gateway Timeout"),
   _aCi_=caml_string_of_jsbytes("449 Retry With"),
   _aCe_=caml_string_of_jsbytes("451 Wrong Exchange server"),
   _aCj_=
    caml_string_of_jsbytes("422 Unprocessable Entity (WebDAV) (RFC 4918)"),
   _aCk_=caml_string_of_jsbytes("202 Accepted"),
   _aCl_=caml_string_of_jsbytes("424 Failed Dependency (WebDAV) (RFC 4918)"),
   _aCm_=caml_string_of_jsbytes("418 I'm a teapot (RFC 2324)"),
   _aCo_=caml_string_of_jsbytes("302 Found"),
   _aCp_=caml_string_of_jsbytes("301 Moved Permanently"),
   _aCq_=caml_string_of_jsbytes("416 Requested Range Not Satisfiable"),
   _aCr_=caml_string_of_jsbytes("412 Precondition Failed"),
   _aCn_=caml_string_of_jsbytes("401 Unauthorized"),
   _aCs_=caml_string_of_jsbytes("303 See Other"),
   _aCt_=caml_string_of_jsbytes("423 Locked (WebDAV) (RFC 4918)"),
   _aCu_=caml_string_of_jsbytes("444 No Response"),
   _aCv_=caml_string_of_jsbytes("100 Continue"),
   _aCw_=caml_string_of_jsbytes("508 Loop Detected (WebDAV) (RFC 5842)"),
   _aCx_=
    caml_string_of_jsbytes("507 Insufficient Storage (WebDAV) (RFC 4918)"),
   _aCy_=
    caml_string_of_jsbytes
     ("203 Non-Authoritative Information (since HTTP/1.1)"),
   _aCz_=caml_string_of_jsbytes("429 Too Many Requests"),
   _aCA_=caml_string_of_jsbytes("413 Request Entity Too Large"),
   _aCB_=caml_string_of_jsbytes("300 Multiple Choices"),
   _aCC_=caml_string_of_jsbytes("405 Method Not Allowed"),
   _aCD_=caml_string_of_jsbytes("200 OK"),
   _aCF_=caml_string_of_jsbytes("407 Proxy Authentication Required"),
   _aCG_=caml_string_of_jsbytes("511 Network Authentication Required"),
   _aCH_=caml_string_of_jsbytes("409 Conflict"),
   _aCI_=caml_string_of_jsbytes("400 Bad Request"),
   _aCE_=caml_string_of_jsbytes("598 Network read timeout error"),
   _aCJ_=caml_string_of_jsbytes("406 Not Acceptable"),
   _aCK_=caml_string_of_jsbytes("306 Switch Proxy"),
   _aCL_=caml_string_of_jsbytes("411 Length Required"),
   _aCM_=caml_string_of_jsbytes("205 Reset Content"),
   _aCN_=caml_string_of_jsbytes("226 IM Used (RFC 3229)"),
   _aCO_=caml_string_of_jsbytes("208 Already Reported (WebDAV) (RFC 5842)"),
   _aCP_=caml_string_of_jsbytes("404 Not Found"),
   _aCQ_=caml_string_of_jsbytes("304 Not Modified"),
   _aCR_=caml_string_of_jsbytes("305 Use Proxy (since HTTP/1.1)"),
   _aCS_=caml_string_of_jsbytes("308 Resume Incomplete"),
   _aCT_=caml_string_of_jsbytes("403 Forbidden"),
   _aCU_=caml_string_of_jsbytes("415 Unsupported Media Type"),
   _aCW_=caml_string_of_jsbytes("501 Not Implemented"),
   _aCX_=caml_string_of_jsbytes("204 No Content"),
   _aCY_=caml_string_of_jsbytes("201 Created"),
   _aCZ_=caml_string_of_jsbytes("402 Payment Required"),
   _aCV_=caml_string_of_jsbytes("506 Variant Also Negotiates (RFC 2295)"),
   _aC0_=caml_string_of_jsbytes("500 Internal Server Error"),
   _aC1_=caml_string_of_jsbytes("503 Service Unavailable"),
   _aC2_=caml_string_of_jsbytes("420 Enhance Your Calm"),
   _aC3_=caml_string_of_jsbytes("102 Processing (WebDAV) (RFC 2518)"),
   _aC4_=caml_string_of_jsbytes("426 Upgrade Required (RFC 2817)"),
   _aC5_=caml_string_of_jsbytes("207 Multi-Status (WebDAV) (RFC 4918)"),
   _aC6_=caml_string_of_jsbytes("502 Bad Gateway"),
   _aC7_=caml_string_of_jsbytes("505 HTTP Version Not Supported"),
   _aC8_=caml_string_of_jsbytes("101 Switching Protocols"),
   _aC9_=caml_string_of_jsbytes("414 Request-URI Too Long"),
   _aC__=caml_string_of_jsbytes("450 Blocked by Windows Parental Controls"),
   _aC$_=caml_string_of_jsbytes("431 Request Header Fields Too Large"),
   _aBZ_=caml_string_of_jsbytes(str_PATCH),
   _aB0_=caml_string_of_jsbytes(str_POST),
   _aB1_=caml_string_of_jsbytes(str_HEAD),
   _aB2_=caml_string_of_jsbytes(str_CONNECT),
   _aBY_=caml_string_of_jsbytes(str_DELETE),
   _aB3_=caml_string_of_jsbytes(str_TRACE),
   _aB4_=caml_string_of_jsbytes(str_PUT),
   _aB5_=caml_string_of_jsbytes(str_GET),
   _aB6_=caml_string_of_jsbytes(str_OPTIONS),
   _aBX_=[0,caml_string_of_jsbytes(str_Code)],
   _aBV_=caml_string_of_jsbytes(str_Code),
   _aBW_=caml_string_of_jsbytes(str_Code),
   _aBH_=[0,caml_string_of_jsbytes(str_Not_extended)],
   _aBI_=[0,caml_string_of_jsbytes(str_Bandwidth_limit_abr)],
   _aBJ_=[0,caml_string_of_jsbytes(str_Network_connect_abr)],
   _aBK_=[0,caml_string_of_jsbytes(str_Gateway_timeout)],
   _aBM_=[0,caml_string_of_jsbytes(str_Loop_detected)],
   _aBN_=[0,caml_string_of_jsbytes(str_Network_authenti_abr)],
   _aBL_=[0,caml_string_of_jsbytes(str_Insufficient_sto_abr)],
   _aBO_=[0,caml_string_of_jsbytes(str_Network_read_tim_abr)],
   _aBP_=[0,caml_string_of_jsbytes(str_Not_implemented)],
   _aBQ_=[0,caml_string_of_jsbytes(str_Variant_also_neg_abr)],
   _aBR_=[0,caml_string_of_jsbytes(str_Internal_server_abr)],
   _aBT_=[0,caml_string_of_jsbytes(str_Service_unavailable)],
   _aBU_=[0,caml_string_of_jsbytes(str_Http_version_not_abr)],
   _aBS_=[0,caml_string_of_jsbytes(str_Bad_gateway)],
   _aBf_=caml_string_of_jsbytes(str_Network_authenti_abr),
   _aBm_=caml_string_of_jsbytes(str_Bad_gateway),
   _aBn_=caml_string_of_jsbytes(str_Bandwidth_limit_abr),
   _aBo_=caml_string_of_jsbytes(str_Gateway_timeout),
   _aBp_=caml_string_of_jsbytes(str_Http_version_not_abr),
   _aBq_=caml_string_of_jsbytes(str_Insufficient_sto_abr),
   _aBr_=caml_string_of_jsbytes(str_Internal_server_abr),
   _aBs_=caml_string_of_jsbytes(str_Loop_detected),
   _aBg_=caml_string_of_jsbytes(str_Network_connect_abr),
   _aBh_=caml_string_of_jsbytes(str_Network_read_tim_abr),
   _aBi_=caml_string_of_jsbytes(str_Not_extended),
   _aBj_=caml_string_of_jsbytes(str_Not_implemented),
   _aBk_=caml_string_of_jsbytes(str_Service_unavailable),
   _aBl_=caml_string_of_jsbytes(str_Variant_also_neg_abr),
   _aBt_=caml_string_of_jsbytes(str_Network_authenti_abr),
   _aBA_=caml_string_of_jsbytes(str_Bad_gateway),
   _aBB_=caml_string_of_jsbytes(str_Bandwidth_limit_abr),
   _aBC_=caml_string_of_jsbytes(str_Gateway_timeout),
   _aBD_=caml_string_of_jsbytes(str_Http_version_not_abr),
   _aBE_=caml_string_of_jsbytes(str_Insufficient_sto_abr),
   _aBF_=caml_string_of_jsbytes(str_Internal_server_abr),
   _aBG_=caml_string_of_jsbytes(str_Loop_detected),
   _aBu_=caml_string_of_jsbytes(str_Network_connect_abr),
   _aBv_=caml_string_of_jsbytes(str_Network_read_tim_abr),
   _aBw_=caml_string_of_jsbytes(str_Not_extended),
   _aBx_=caml_string_of_jsbytes(str_Not_implemented),
   _aBy_=caml_string_of_jsbytes(str_Service_unavailable),
   _aBz_=caml_string_of_jsbytes(str_Variant_also_neg_abr),
   _aAL_=[0,caml_string_of_jsbytes(str_Request_timeout)],
   _aAM_=[0,caml_string_of_jsbytes(str_Expectation_failed)],
   _aAN_=[0,caml_string_of_jsbytes(str_Client_closed_re_abr)],
   _aAO_=[0,caml_string_of_jsbytes(str_Precondition_req_abr)],
   _aAP_=[0,caml_string_of_jsbytes(str_Gone)],
   _aAQ_=[0,caml_string_of_jsbytes(str_Wrong_exchange_s_abr)],
   _aAR_=[0,caml_string_of_jsbytes(str_Retry_with)],
   _aAS_=[0,caml_string_of_jsbytes(str_Unprocessable_en_abr)],
   _aAT_=[0,caml_string_of_jsbytes(str_Failed_dependency)],
   _aAU_=[0,caml_string_of_jsbytes(str_I_m_a_teapot)],
   _aAV_=[0,caml_string_of_jsbytes(str_Requested_range_abr)],
   _aAW_=[0,caml_string_of_jsbytes(str_Unauthorized)],
   _aAX_=[0,caml_string_of_jsbytes(str_Precondition_failed)],
   _aAY_=[0,caml_string_of_jsbytes(str_Locked)],
   _aAZ_=[0,caml_string_of_jsbytes(str_No_response)],
   _aA0_=[0,caml_string_of_jsbytes(str_Too_many_requests)],
   _aA1_=[0,caml_string_of_jsbytes(str_Request_entity_t_abr)],
   _aA2_=[0,caml_string_of_jsbytes(str_Method_not_allowed)],
   _aA3_=[0,caml_string_of_jsbytes(str_Proxy_authentica_abr)],
   _aA4_=[0,caml_string_of_jsbytes(str_Conflict)],
   _aA5_=[0,caml_string_of_jsbytes(str_Bad_request)],
   _aA6_=[0,caml_string_of_jsbytes(str_Not_acceptable)],
   _aA7_=[0,caml_string_of_jsbytes(str_Length_required)],
   _aA8_=[0,caml_string_of_jsbytes(str_Not_found)],
   _aA9_=[0,caml_string_of_jsbytes(str_Forbidden)],
   _aA__=[0,caml_string_of_jsbytes(str_Unsupported_medi_abr)],
   _aA$_=[0,caml_string_of_jsbytes(str_Payment_required)],
   _aBa_=[0,caml_string_of_jsbytes(str_Enhance_your_calm)],
   _aBb_=[0,caml_string_of_jsbytes(str_Upgrade_required)],
   _aBc_=[0,caml_string_of_jsbytes(str_Request_uri_too_abr)],
   _aBd_=[0,caml_string_of_jsbytes(str_Blocked_by_windo_abr)],
   _aBe_=[0,caml_string_of_jsbytes(str_Request_header_f_abr)],
   _azL_=caml_string_of_jsbytes(str_Payment_required),
   _az1_=caml_string_of_jsbytes(str_Gone),
   _az9_=caml_string_of_jsbytes(str_Bad_request),
   _az__=caml_string_of_jsbytes(str_Blocked_by_windo_abr),
   _az$_=caml_string_of_jsbytes(str_Client_closed_re_abr),
   _aAa_=caml_string_of_jsbytes(str_Conflict),
   _aAb_=caml_string_of_jsbytes(str_Enhance_your_calm),
   _aAc_=caml_string_of_jsbytes(str_Expectation_failed),
   _aAd_=caml_string_of_jsbytes(str_Failed_dependency),
   _aAe_=caml_string_of_jsbytes(str_Forbidden),
   _az2_=caml_string_of_jsbytes(str_I_m_a_teapot),
   _az3_=caml_string_of_jsbytes(str_Length_required),
   _az4_=caml_string_of_jsbytes(str_Locked),
   _az5_=caml_string_of_jsbytes(str_Method_not_allowed),
   _az6_=caml_string_of_jsbytes(str_No_response),
   _az7_=caml_string_of_jsbytes(str_Not_acceptable),
   _az8_=caml_string_of_jsbytes(str_Not_found),
   _azM_=caml_string_of_jsbytes(str_Requested_range_abr),
   _azU_=caml_string_of_jsbytes(str_Precondition_failed),
   _azV_=caml_string_of_jsbytes(str_Precondition_req_abr),
   _azW_=caml_string_of_jsbytes(str_Proxy_authentica_abr),
   _azX_=caml_string_of_jsbytes(str_Request_entity_t_abr),
   _azY_=caml_string_of_jsbytes(str_Request_header_f_abr),
   _azZ_=caml_string_of_jsbytes(str_Request_timeout),
   _az0_=caml_string_of_jsbytes(str_Request_uri_too_abr),
   _azN_=caml_string_of_jsbytes(str_Retry_with),
   _azO_=caml_string_of_jsbytes(str_Too_many_requests),
   _azP_=caml_string_of_jsbytes(str_Unauthorized),
   _azQ_=caml_string_of_jsbytes(str_Unprocessable_en_abr),
   _azR_=caml_string_of_jsbytes(str_Unsupported_medi_abr),
   _azS_=caml_string_of_jsbytes(str_Upgrade_required),
   _azT_=caml_string_of_jsbytes(str_Wrong_exchange_s_abr),
   _aAf_=caml_string_of_jsbytes(str_Payment_required),
   _aAv_=caml_string_of_jsbytes(str_Gone),
   _aAD_=caml_string_of_jsbytes(str_Bad_request),
   _aAE_=caml_string_of_jsbytes(str_Blocked_by_windo_abr),
   _aAF_=caml_string_of_jsbytes(str_Client_closed_re_abr),
   _aAG_=caml_string_of_jsbytes(str_Conflict),
   _aAH_=caml_string_of_jsbytes(str_Enhance_your_calm),
   _aAI_=caml_string_of_jsbytes(str_Expectation_failed),
   _aAJ_=caml_string_of_jsbytes(str_Failed_dependency),
   _aAK_=caml_string_of_jsbytes(str_Forbidden),
   _aAw_=caml_string_of_jsbytes(str_I_m_a_teapot),
   _aAx_=caml_string_of_jsbytes(str_Length_required),
   _aAy_=caml_string_of_jsbytes(str_Locked),
   _aAz_=caml_string_of_jsbytes(str_Method_not_allowed),
   _aAA_=caml_string_of_jsbytes(str_No_response),
   _aAB_=caml_string_of_jsbytes(str_Not_acceptable),
   _aAC_=caml_string_of_jsbytes(str_Not_found),
   _aAg_=caml_string_of_jsbytes(str_Requested_range_abr),
   _aAo_=caml_string_of_jsbytes(str_Precondition_failed),
   _aAp_=caml_string_of_jsbytes(str_Precondition_req_abr),
   _aAq_=caml_string_of_jsbytes(str_Proxy_authentica_abr),
   _aAr_=caml_string_of_jsbytes(str_Request_entity_t_abr),
   _aAs_=caml_string_of_jsbytes(str_Request_header_f_abr),
   _aAt_=caml_string_of_jsbytes(str_Request_timeout),
   _aAu_=caml_string_of_jsbytes(str_Request_uri_too_abr),
   _aAh_=caml_string_of_jsbytes(str_Retry_with),
   _aAi_=caml_string_of_jsbytes(str_Too_many_requests),
   _aAj_=caml_string_of_jsbytes(str_Unauthorized),
   _aAk_=caml_string_of_jsbytes(str_Unprocessable_en_abr),
   _aAl_=caml_string_of_jsbytes(str_Unsupported_medi_abr),
   _aAm_=caml_string_of_jsbytes(str_Upgrade_required),
   _aAn_=caml_string_of_jsbytes(str_Wrong_exchange_s_abr),
   _azD_=[0,caml_string_of_jsbytes(str_Temporary_redirect)],
   _azE_=[0,caml_string_of_jsbytes(str_Found)],
   _azF_=[0,caml_string_of_jsbytes(str_Moved_permanently)],
   _azG_=[0,caml_string_of_jsbytes(str_Multiple_choices)],
   _azC_=[0,caml_string_of_jsbytes(str_See_other)],
   _azH_=[0,caml_string_of_jsbytes(str_Switch_proxy)],
   _azI_=[0,caml_string_of_jsbytes(str_Not_modified)],
   _azJ_=[0,caml_string_of_jsbytes(str_Use_proxy)],
   _azK_=[0,caml_string_of_jsbytes(str_Resume_incomplete)],
   _azk_=caml_string_of_jsbytes(str_Found),
   _azl_=caml_string_of_jsbytes(str_Moved_permanently),
   _azm_=caml_string_of_jsbytes(str_Multiple_choices),
   _azn_=caml_string_of_jsbytes(str_Not_modified),
   _azo_=caml_string_of_jsbytes(str_Resume_incomplete),
   _azp_=caml_string_of_jsbytes(str_See_other),
   _azq_=caml_string_of_jsbytes(str_Switch_proxy),
   _azr_=caml_string_of_jsbytes(str_Temporary_redirect),
   _azs_=caml_string_of_jsbytes(str_Use_proxy),
   _azt_=caml_string_of_jsbytes(str_Found),
   _azu_=caml_string_of_jsbytes(str_Moved_permanently),
   _azv_=caml_string_of_jsbytes(str_Multiple_choices),
   _azw_=caml_string_of_jsbytes(str_Not_modified),
   _azx_=caml_string_of_jsbytes(str_Resume_incomplete),
   _azy_=caml_string_of_jsbytes(str_See_other),
   _azz_=caml_string_of_jsbytes(str_Switch_proxy),
   _azA_=caml_string_of_jsbytes(str_Temporary_redirect),
   _azB_=caml_string_of_jsbytes(str_Use_proxy),
   _azb_=[0,caml_string_of_jsbytes(str_Partial_content)],
   _azc_=[0,caml_string_of_jsbytes(str_Accepted)],
   _azd_=[0,caml_string_of_jsbytes(str_Non_authoritativ_abr)],
   _aze_=[0,caml_string_of_jsbytes(str_Reset_content)],
   _aza_=[0,caml_string_of_jsbytes(str_OK)],
   _azg_=[0,caml_string_of_jsbytes(str_Im_used)],
   _azh_=[0,caml_string_of_jsbytes(str_Already_reported)],
   _azi_=[0,caml_string_of_jsbytes(str_No_content)],
   _azj_=[0,caml_string_of_jsbytes(str_Multi_status)],
   _azf_=[0,caml_string_of_jsbytes(str_Created)],
   _ayS_=caml_string_of_jsbytes(str_No_content),
   _ayX_=caml_string_of_jsbytes(str_Accepted),
   _ayY_=caml_string_of_jsbytes(str_Already_reported),
   _ayZ_=caml_string_of_jsbytes(str_Created),
   _ay0_=caml_string_of_jsbytes(str_Im_used),
   _ay1_=caml_string_of_jsbytes(str_Multi_status),
   _ayT_=caml_string_of_jsbytes(str_Non_authoritativ_abr),
   _ayU_=caml_string_of_jsbytes(str_OK),
   _ayV_=caml_string_of_jsbytes(str_Partial_content),
   _ayW_=caml_string_of_jsbytes(str_Reset_content),
   _ay2_=caml_string_of_jsbytes(str_No_content),
   _ay7_=caml_string_of_jsbytes(str_Accepted),
   _ay8_=caml_string_of_jsbytes(str_Already_reported),
   _ay9_=caml_string_of_jsbytes(str_Created),
   _ay__=caml_string_of_jsbytes(str_Im_used),
   _ay$_=caml_string_of_jsbytes(str_Multi_status),
   _ay3_=caml_string_of_jsbytes(str_Non_authoritativ_abr),
   _ay4_=caml_string_of_jsbytes(str_OK),
   _ay5_=caml_string_of_jsbytes(str_Partial_content),
   _ay6_=caml_string_of_jsbytes(str_Reset_content),
   _ayO_=[0,caml_string_of_jsbytes(str_Checkpoint)],
   _ayP_=[0,caml_string_of_jsbytes(str_Continue)],
   _ayQ_=[0,caml_string_of_jsbytes(str_Processing)],
   _ayR_=[0,caml_string_of_jsbytes(str_Switching_protocols)],
   _ayG_=caml_string_of_jsbytes(str_Checkpoint),
   _ayH_=caml_string_of_jsbytes(str_Continue),
   _ayI_=caml_string_of_jsbytes(str_Processing),
   _ayJ_=caml_string_of_jsbytes(str_Switching_protocols),
   _ayK_=caml_string_of_jsbytes(str_Checkpoint),
   _ayL_=caml_string_of_jsbytes(str_Continue),
   _ayM_=caml_string_of_jsbytes(str_Processing),
   _ayN_=caml_string_of_jsbytes(str_Switching_protocols),
   _ayx_=[0,caml_string_of_jsbytes(str_PATCH)],
   _ayy_=[0,caml_string_of_jsbytes(str_POST)],
   _ayz_=[0,caml_string_of_jsbytes(str_HEAD)],
   _ayA_=[0,caml_string_of_jsbytes(str_CONNECT)],
   _ayw_=[0,caml_string_of_jsbytes(str_DELETE)],
   _ayB_=[0,caml_string_of_jsbytes(str_TRACE)],
   _ayC_=[0,caml_string_of_jsbytes(str_PUT)],
   _ayD_=[0,caml_string_of_jsbytes(str_GET)],
   _ayE_=[0,caml_string_of_jsbytes(str_OPTIONS)],
   _ayF_=[0,caml_string_of_jsbytes(str_Other)],
   _ayc_=caml_string_of_jsbytes(str_Other),
   _ayh_=caml_string_of_jsbytes(str_CONNECT),
   _ayi_=caml_string_of_jsbytes(str_DELETE),
   _ayj_=caml_string_of_jsbytes(str_GET),
   _ayk_=caml_string_of_jsbytes(str_HEAD),
   _ayl_=caml_string_of_jsbytes(str_OPTIONS),
   _ayd_=caml_string_of_jsbytes(str_PATCH),
   _aye_=caml_string_of_jsbytes(str_POST),
   _ayf_=caml_string_of_jsbytes(str_PUT),
   _ayg_=caml_string_of_jsbytes(str_TRACE),
   _aym_=caml_string_of_jsbytes(str_Other),
   _ayr_=caml_string_of_jsbytes(str_CONNECT),
   _ays_=caml_string_of_jsbytes(str_DELETE),
   _ayt_=caml_string_of_jsbytes(str_GET),
   _ayu_=caml_string_of_jsbytes(str_HEAD),
   _ayv_=caml_string_of_jsbytes(str_OPTIONS),
   _ayn_=caml_string_of_jsbytes(str_PATCH),
   _ayo_=caml_string_of_jsbytes(str_POST),
   _ayp_=caml_string_of_jsbytes(str_PUT),
   _ayq_=caml_string_of_jsbytes(str_TRACE),
   _ax$_=[0,caml_string_of_jsbytes(str_HTTP_1_1)],
   _aya_=[0,caml_string_of_jsbytes(str_HTTP_1_0)],
   _ayb_=[0,caml_string_of_jsbytes(str_Other)],
   _ax5_=caml_string_of_jsbytes(str_HTTP_1_0),
   _ax6_=caml_string_of_jsbytes(str_HTTP_1_1),
   _ax7_=caml_string_of_jsbytes(str_Other),
   _ax8_=caml_string_of_jsbytes(str_HTTP_1_0),
   _ax9_=caml_string_of_jsbytes(str_HTTP_1_1),
   _ax__=caml_string_of_jsbytes(str_Other),
   _aDa_=caml_string_of_jsbytes(str$59),
   _aDb_=caml_string_of_jsbytes(str$59),
   _aDp_=[0,caml_string_of_jsbytes(str_Unknown)],
   _aDo_=[0,caml_string_of_jsbytes(str_Chunked)],
   _aDq_=[0,caml_string_of_jsbytes(str_Fixed)],
   _aDc_=caml_string_of_jsbytes(str_Chunked),
   _aDd_=caml_string_of_jsbytes(str_Fixed),
   _aDe_=caml_string_of_jsbytes(str_Unknown),
   _aDf_=caml_string_of_jsbytes(str_chunked),
   _aDg_=caml_string_of_jsbytes(str_fixed),
   _aDh_=caml_string_of_jsbytes(str_unknown),
   _aDi_=caml_string_of_jsbytes(str_Chunked),
   _aDj_=caml_string_of_jsbytes(str_Fixed),
   _aDk_=caml_string_of_jsbytes(str_Unknown),
   _aDl_=caml_string_of_jsbytes(str_chunked),
   _aDm_=caml_string_of_jsbytes(str_fixed),
   _aDn_=caml_string_of_jsbytes(str_unknown),
   _aDL_=caml_string_of_jsbytes(str_connection),
   _aDM_=caml_string_of_jsbytes("keep-alive"),
   _aDN_=[0,-288149133],
   _aDO_=caml_string_of_jsbytes(str_close),
   _aDP_=[0,num_611285096],
   _aDK_=caml_string_of_jsbytes(str_authorization),
   _aDJ_=caml_string_of_jsbytes(str_authorization),
   _aDH_=caml_string_of_jsbytes(str_transfer_encoding),
   _aDI_=caml_string_of_jsbytes(str_chunked),
   _aDG_=caml_string_of_jsbytes(str_content_type),
   _aDF_=[0,0],
   _aDy_=caml_string_of_jsbytes("content-length"),
   _aDz_=caml_string_of_jsbytes("content-range"),
   _aDA_=caml_int64_create_lo_mi_hi(0,0,0),
   _aDB_=caml_int64_create_lo_mi_hi(0,0,0),
   _aDC_=caml_int64_create_lo_mi_hi(1,0,0),
   _aDx_=
    [0,
     [11,
      caml_string_of_jsbytes("bytes "),
      [7,0,0,0,[12,45,[7,0,0,0,[12,47,[7,0,0,0,0]]]]]],
     caml_string_of_jsbytes("bytes %Ld-%Ld/%Ld")],
   _aDu_=caml_string_of_jsbytes(str$47),
   _aDv_=caml_string_of_jsbytes(str$1),
   _aDw_=caml_string_of_jsbytes(str$1),
   _aDt_=caml_string_of_jsbytes(str$55),
   _aDr_=
    [0,
     [11,caml_string_of_jsbytes("ocaml-cohttp/"),[2,0,0]],
     caml_string_of_jsbytes("ocaml-cohttp/%s")],
   _aDs_=
    [0,
     caml_string_of_jsbytes(str_accept),
     caml_string_of_jsbytes("accept-charset"),
     caml_string_of_jsbytes("accept-encoding"),
     caml_string_of_jsbytes("accept-language"),
     caml_string_of_jsbytes("accept-ranges"),
     caml_string_of_jsbytes("allow"),
     caml_string_of_jsbytes("cache-control"),
     caml_string_of_jsbytes(str_connection),
     caml_string_of_jsbytes("content-encoding"),
     caml_string_of_jsbytes("content-language"),
     caml_string_of_jsbytes("expect"),
     caml_string_of_jsbytes("if-match"),
     caml_string_of_jsbytes("if-none-match"),
     caml_string_of_jsbytes("link"),
     caml_string_of_jsbytes("pragma"),
     caml_string_of_jsbytes("proxy-authenticate"),
     caml_string_of_jsbytes("te"),
     caml_string_of_jsbytes("trailer"),
     caml_string_of_jsbytes(str_transfer_encoding),
     caml_string_of_jsbytes("upgrade"),
     caml_string_of_jsbytes("vary"),
     caml_string_of_jsbytes("via"),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes("www-authenticate")],
   _aDD_=caml_string_of_jsbytes("[ \t]*\\([^ \t;]+\\)"),
   _aDE_=[0,1],
   _aDR_=caml_string_of_jsbytes(str$59),
   _aDQ_=[0,2],
   _aEg_=[0,caml_string_of_jsbytes(str_flush)],
   _aEh_=[0,caml_string_of_jsbytes(str_status)],
   _aEi_=[0,caml_string_of_jsbytes(str_version)],
   _aEj_=[0,caml_string_of_jsbytes(str_headers)],
   _aEk_=[0,caml_string_of_jsbytes(str_encoding)],
   _aD8_=caml_string_of_jsbytes(str_encoding),
   _aD9_=caml_string_of_jsbytes(str_flush),
   _aD__=caml_string_of_jsbytes(str_headers),
   _aD$_=caml_string_of_jsbytes(str_status),
   _aEa_=caml_string_of_jsbytes(str_version),
   _aEb_=caml_string_of_jsbytes(str_flush),
   _aEc_=caml_string_of_jsbytes(str_status),
   _aEd_=caml_string_of_jsbytes(str_version),
   _aEe_=caml_string_of_jsbytes(str_headers),
   _aEf_=caml_string_of_jsbytes(str_encoding),
   _aDV_=caml_string_of_jsbytes(str_flush),
   _aDY_=caml_string_of_jsbytes(str_status),
   _aD1_=caml_string_of_jsbytes(str_version),
   _aD4_=caml_string_of_jsbytes(str_headers),
   _aD7_=caml_string_of_jsbytes(str_encoding),
   _aEW_=caml_string_of_jsbytes(str$34),
   _aE7_=caml_string_of_jsbytes(str_host),
   _aE8_=caml_string_of_jsbytes(str$22),
   _aE9_=caml_string_of_jsbytes(str$59),
   _aE__=caml_string_of_jsbytes(str$59),
   _aEX_=caml_string_of_jsbytes(str$22),
   _aEY_=caml_string_of_jsbytes(str$59),
   _aEZ_=caml_string_of_jsbytes(str$13),
   _aE0_=caml_string_of_jsbytes(str$59),
   _aE1_=caml_string_of_jsbytes("///"),
   _aE2_=[0,2],
   _aE3_=caml_string_of_jsbytes(str_http),
   _aE6_=caml_string_of_jsbytes(str_http),
   _aE4_=caml_string_of_jsbytes(str_host),
   _aE5_=caml_string_of_jsbytes(str$22),
   _aEQ_=caml_string_of_jsbytes("httpunix"),
   _aEV_=caml_string_of_jsbytes(str$59),
   _aER_=caml_string_of_jsbytes(str$4),
   _aEU_=caml_string_of_jsbytes(str$59),
   _aES_=caml_string_of_jsbytes(str_host),
   _aET_=caml_string_of_jsbytes("user-agent"),
   _aEL_=[0,caml_string_of_jsbytes(str_encoding)],
   _aEM_=[0,caml_string_of_jsbytes(str_version)],
   _aEN_=[0,caml_string_of_jsbytes(str_resource)],
   _aEO_=[0,caml_string_of_jsbytes(str_meth)],
   _aEP_=[0,caml_string_of_jsbytes(str_headers)],
   _aEB_=caml_string_of_jsbytes(str_encoding),
   _aEC_=caml_string_of_jsbytes(str_headers),
   _aED_=caml_string_of_jsbytes(str_meth),
   _aEE_=caml_string_of_jsbytes(str_resource),
   _aEF_=caml_string_of_jsbytes(str_version),
   _aEG_=caml_string_of_jsbytes(str_encoding),
   _aEH_=caml_string_of_jsbytes(str_version),
   _aEI_=caml_string_of_jsbytes(str_resource),
   _aEJ_=caml_string_of_jsbytes(str_meth),
   _aEK_=caml_string_of_jsbytes(str_headers),
   _aEo_=caml_string_of_jsbytes(str_encoding),
   _aEr_=caml_string_of_jsbytes(str_version),
   _aEu_=caml_string_of_jsbytes(str_resource),
   _aEx_=caml_string_of_jsbytes(str_meth),
   _aEA_=caml_string_of_jsbytes(str_headers),
   _aFd_=[0,caml_int64_create_lo_mi_hi(0,0,0)],
   _aFb_=caml_string_of_jsbytes(str$59),
   _aFc_=caml_string_of_jsbytes(str$59),
   _aFa_=caml_string_of_jsbytes(str$59),
   _aFi_=caml_string_of_jsbytes(str$50),
   _aFf_=caml_string_of_jsbytes(str$20),
   _aFg_=caml_string_of_jsbytes(str$13),
   _aFh_=caml_string_of_jsbytes(str$30),
   _aFJ_=caml_string_of_jsbytes(str$59),
   _aFI_=[0,num_17724,0],
   _aFH_=[0,num_17724,0],
   _aFG_=caml_string_of_jsbytes(str$59),
   _aFF_=[0,num_17724,0],
   _aFE_=caml_string_of_jsbytes("Resto_cohttp_client.call_service"),
   _aFD_=caml_string_of_jsbytes(str$59),
   _aFy_=caml_string_of_jsbytes(str_accept),
   _aFz_=caml_string_of_jsbytes("X-OCaml-Resto-CORS-Error"),
   _aFC_=[0,num_17724,0],
   _aFB_=
    caml_string_of_jsbytes
     ("Resto_cohttp_client.generic_json_call: unimplemented"),
   _aFA_=
    [0,
     [0,
      caml_string_of_jsbytes(str_text),
      caml_string_of_jsbytes("ocaml.exception")]],
   _aFt_=caml_string_of_jsbytes(str_host),
   _aFu_=caml_string_of_jsbytes("x-"),
   _aFv_=
    caml_string_of_jsbytes
     ('Resto_cohttp.Client.call: only headers "host" or starting with "x-" are supported'),
   _aFr_=caml_string_of_jsbytes(str$4),
   _aFs_=caml_string_of_jsbytes(str_host),
   _aFw_=caml_string_of_jsbytes(str_content_type),
   _aFx_=caml_string_of_jsbytes(str_accept),
   _aFq_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("<<<<"),
       [4,
        0,
        0,
        0,
        [11,
         caml_string_of_jsbytes(str$47),
         [2,
          0,
          [17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,[17,4,0]]]]]]]]],
     caml_string_of_jsbytes("@[<v 2><<<<%d: %s@,%a@]@.")],
   _aFp_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes(str$41),
       [4,
        0,
        0,
        0,
        [11,
         caml_string_of_jsbytes(str$47),
         [2,
          0,
          [17,[0,caml_string_of_jsbytes(str$31),0,0],[15,[17,0,[17,4,0]]]]]]]]],
     caml_string_of_jsbytes("@[<v 2>>>>>%d: %s@,%a@]@.")],
   _aFo_=
    [0,
     [11,
      caml_string_of_jsbytes(str$41),
      [4,0,0,0,[11,caml_string_of_jsbytes(str$47),[2,0,[17,4,0]]]]],
     caml_string_of_jsbytes(">>>>%d: %s@.")],
   _aFn_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_h_0),0],
        caml_string_of_jsbytes(str_h_0)]],
      [15,[17,0,0]]],
     caml_string_of_jsbytes(str_h_0_a)],
   _aFm_=[0,caml_string_of_jsbytes(str_src_client_ml),num_101,26],
   _aFl_=[0,caml_string_of_jsbytes(str_src_client_ml),num_102,25],
   _aFk_=
    [0,
     [11,
      caml_string_of_jsbytes("Request to "),
      [2,
       0,
       [11,
        caml_string_of_jsbytes(" succeeded in "),
        [8,[0,0,3],0,0,[12,115,[17,4,0]]]]]],
     caml_string_of_jsbytes("Request to %s succeeded in %gs@.")],
   _aHt_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Rpc request failed:"),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes(" - meth: "),
         [2,
          0,
          [17,
           [0,caml_string_of_jsbytes(str$5),1,0],
           [11,
            caml_string_of_jsbytes(" - uri: "),
            [2,
             0,
             [17,
              [0,caml_string_of_jsbytes(str$5),1,0],
              [11,caml_string_of_jsbytes(" - error: "),partial$26]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Rpc request failed:@  - meth: %s@  - uri: %s@  - error: %a@]")],
   _aHa_=
    [0,
     [11,caml_string_of_jsbytes(str_The_server_answe_abr),0],
     caml_string_of_jsbytes(str_The_server_answe_abr)],
   _aHb_=
    [0,
     [11,
      caml_string_of_jsbytes('Unable to connect to the node: "'),
      [2,0,[12,34,0]]],
     caml_string_of_jsbytes('Unable to connect to the node: "%s"')],
   _aHc_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("Oops! It looks like we forged an invalid HTTP request."),
       [17,[0,caml_string_of_jsbytes(str$31),0,0],[2,0,[17,0,0]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Oops! It looks like we forged an invalid HTTP request.@,%s@]")],
   _aHd_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("The requested service only accepts the following method:"),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],[15,[17,0,0]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The requested service only accepts the following method:@ %a@]")],
   _aHe_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("The server does not support the media type we used: "),
       [2,0,[12,46,[17,0,0]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The server does not support the media type we used: %s.@]")],
   _aHf_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("The server wants to known the media type we used."),
       [17,0,0]]],
     caml_string_of_jsbytes
      ("@[<v 2>The server wants to known the media type we used.@]")],
   _aHg_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("No intersection between the media types we accept and  the ones the server is able to send."),
       [17,
        [0,caml_string_of_jsbytes(str$31),0,0],
        [11,
         caml_string_of_jsbytes(" We proposed: "),
         [2,
          0,
          [17,
           [0,caml_string_of_jsbytes(str$31),0,0],
           [11,
            caml_string_of_jsbytes(" The server is only able to serve: "),
            [2,0,[12,46,0]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>No intersection between the media types we accept and  the ones the server is able to send.@, We proposed: %s@, The server is only able to serve: %s.")],
   _aHh_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Unexpected error "),
       [4,0,0,0,[12,58,[17,[0,caml_string_of_jsbytes(str$31),0,0],[3,0,0]]]]]],
     caml_string_of_jsbytes("@[<v 2>Unexpected error %d:@,%S")],
   _aHi_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_0),0],
        caml_string_of_jsbytes(str_v_0)]],
      [11,
       caml_string_of_jsbytes
        ("The server answered with a media type we do not understand: "),
       [2,
        0,
        [12,
         46,
         [17,
          [0,caml_string_of_jsbytes(str$31),0,0],
          [11,
           caml_string_of_jsbytes("The response body was:"),
           [17,[0,caml_string_of_jsbytes(str$31),0,0],[2,0,[17,0,0]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 0>The server answered with a media type we do not understand: %s.@,The response body was:@,%s@]")],
   _aHj_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes("Failed to parse the answer ("),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("):"),
         [17,
          [0,caml_string_of_jsbytes(str$31),0,0],
          [18,
           [1,
            [0,
             [11,caml_string_of_jsbytes(str_v_2),0],
             caml_string_of_jsbytes(str_v_2)]],
           [11,
            caml_string_of_jsbytes("error:"),
            [17,[0,caml_string_of_jsbytes(str$5),1,0],[2,0,[17,0,partial$27]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>Failed to parse the answer (%s):@,@[<v 2>error:@ %s@]@,@[<v 2>content:@ %S@]@]")],
   _aHk_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes
        ("The server failed with an unexpected exception:"),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],[2,0,[17,0,0]]]]],
     caml_string_of_jsbytes
      ("@[<v 2>The server failed with an unexpected exception:@ %s@]")],
   _aHl_=caml_string_of_jsbytes(str$59),
   _aHm_=
    [0,
     [18,
      [1,
       [0,
        [11,caml_string_of_jsbytes(str_v_2),0],
        caml_string_of_jsbytes(str_v_2)]],
      [11,
       caml_string_of_jsbytes('The server refused connection to host "'),
       [2,
        0,
        [11,
         caml_string_of_jsbytes
          ('", please check the node settings for CORS allowed origins.'),
         [17,0,0]]]]],
     caml_string_of_jsbytes
      ('@[<v 2>The server refused connection to host "%s", please check the node settings for CORS allowed origins.@]')],
   _aG7_=[0,0],
   _aFK_=
    caml_string_of_jsbytes("Tezos_rpc_http.RPC_client_errors.Request_failed"),
   _aFO_=caml_string_of_jsbytes(str_content),
   _aFP_=caml_string_of_jsbytes("ocaml_exception"),
   _aFQ_=caml_string_of_jsbytes(str_kind),
   _aFR_=[0,9],
   _aFS_=caml_string_of_jsbytes("OCaml_exception"),
   _aFW_=caml_string_of_jsbytes(str_error),
   _aFX_=caml_string_of_jsbytes(str_media_type),
   _aFY_=caml_string_of_jsbytes(str_content),
   _aFZ_=caml_string_of_jsbytes("unexpected_content"),
   _aF0_=caml_string_of_jsbytes(str_kind),
   _aF1_=[0,8],
   _aF2_=caml_string_of_jsbytes("Unexpected_content"),
   _aF6_=caml_string_of_jsbytes("body"),
   _aF7_=caml_string_of_jsbytes(str_acceptable),
   _aF9_=caml_string_of_jsbytes(str_received),
   _aF__=caml_string_of_jsbytes("unexpected_content_type"),
   _aF$_=caml_string_of_jsbytes(str_kind),
   _aGa_=[0,7],
   _aGb_=caml_string_of_jsbytes("Unexpected_content_type"),
   _aGf_=caml_string_of_jsbytes(str_media_type),
   _aGh_=caml_string_of_jsbytes(str_content),
   _aGi_=caml_string_of_jsbytes("code"),
   _aGj_=caml_string_of_jsbytes("unexpected_status_code"),
   _aGk_=caml_string_of_jsbytes(str_kind),
   _aGl_=[0,6],
   _aGm_=caml_string_of_jsbytes("Unexpected_status_code"),
   _aGq_=caml_string_of_jsbytes(str_acceptable),
   _aGr_=caml_string_of_jsbytes("proposed"),
   _aGs_=caml_string_of_jsbytes("not_acceptable"),
   _aGt_=caml_string_of_jsbytes(str_kind),
   _aGu_=[0,5],
   _aGv_=caml_string_of_jsbytes(str_Not_acceptable),
   _aGz_=caml_string_of_jsbytes("content_type"),
   _aGB_=caml_string_of_jsbytes("unsupported_media_type"),
   _aGC_=caml_string_of_jsbytes(str_kind),
   _aGD_=[0,4],
   _aGE_=caml_string_of_jsbytes(str_Unsupported_medi_abr),
   _aGI_=caml_string_of_jsbytes("allowed"),
   _aGK_=caml_string_of_jsbytes("method_not_allowed"),
   _aGL_=caml_string_of_jsbytes(str_kind),
   _aGM_=[0,3],
   _aGN_=caml_string_of_jsbytes(str_Method_not_allowed),
   _aGR_=caml_string_of_jsbytes(str_message),
   _aGS_=caml_string_of_jsbytes("bad_request"),
   _aGT_=caml_string_of_jsbytes(str_kind),
   _aGU_=[0,2],
   _aGV_=caml_string_of_jsbytes(str_Bad_request),
   _aGZ_=caml_string_of_jsbytes(str_message),
   _aG0_=caml_string_of_jsbytes("connection_failed"),
   _aG1_=caml_string_of_jsbytes(str_kind),
   _aG2_=[0,1],
   _aG3_=caml_string_of_jsbytes("Connection_failed"),
   _aG8_=caml_string_of_jsbytes("empty_answer"),
   _aG9_=caml_string_of_jsbytes(str_kind),
   _aG__=[0,0],
   _aG$_=caml_string_of_jsbytes("Empty_answer"),
   _aHp_=caml_string_of_jsbytes(str_error),
   _aHq_=caml_string_of_jsbytes(str_uri),
   _aHr_=caml_string_of_jsbytes(str_meth),
   _aHu_=caml_string_of_jsbytes(str$59),
   _aHv_=caml_string_of_jsbytes(str$59),
   _aHw_=caml_string_of_jsbytes("rpc_client.request_failed"),
   _aHR_=
    [0,
     [11,
      caml_string_of_jsbytes(";; binary equivalent of the following json"),
      [17,4,[15,0]]],
     caml_string_of_jsbytes(";; binary equivalent of the following json@.%a")],
   _aHS_=
    [0,
     [11,caml_string_of_jsbytes("Invalid binary data: "),[15,[12,46,0]]],
     caml_string_of_jsbytes("Invalid binary data: %a.")],
   _aHP_=
    [0,
     [11,
      caml_string_of_jsbytes("Failed to parse binary data: "),
      [15,[12,46,0]]],
     caml_string_of_jsbytes("Failed to parse binary data: %a.")],
   _aHL_=[0,0],
   _aHK_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes("Invalid BSON:"),
       [17,[0,caml_string_of_jsbytes(str$5),1,0],[2,0,[17,0,0]]]]],
     caml_string_of_jsbytes("@[Invalid BSON:@ %s@]")],
   _aHH_=[0,0],
   _aHG_=
    [0,
     [11,
      caml_string_of_jsbytes(str_at_offset),
      [4,0,0,0,[11,caml_string_of_jsbytes(str$63),[2,0,0]]]],
     caml_string_of_jsbytes(str_at_offset_d_s)],
   _aHI_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aHC_=
    [0,
     [18,
      [1,[0,0,caml_string_of_jsbytes(str$59)]],
      [11,
       caml_string_of_jsbytes("Invalid JSON:"),
       [17,
        [0,caml_string_of_jsbytes(str$5),1,0],
        [11,
         caml_string_of_jsbytes(str$26),
         [18,
          [1,
           [0,
            [11,caml_string_of_jsbytes(str_v_2),0],
            caml_string_of_jsbytes(str_v_2)]],
          [11,
           caml_string_of_jsbytes(str_Error),
           [17,
            [0,caml_string_of_jsbytes(str$5),1,0],
            [2,0,[17,0,[11,caml_string_of_jsbytes(str$26),partial$28]]]]]]]]]],
     caml_string_of_jsbytes
      ("@[Invalid JSON:@  - @[<v 2>Error:@ %s@] - @[<v 2>Raw data:@ %s@]@]")],
   _aHA_=[0,1],
   _aHB_=[0,1],
   _aHy_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aHD_=[0,num_1000$0],
   _aHE_=
    [0,
     caml_string_of_jsbytes(str_application),
     caml_string_of_jsbytes(str_json)],
   _aHM_=[0,num_100],
   _aHN_=
    [0,
     caml_string_of_jsbytes(str_application),
     caml_string_of_jsbytes(str_bson)],
   _aHT_=[0,num_200],
   _aHU_=
    [0,
     caml_string_of_jsbytes(str_application),
     caml_string_of_jsbytes("octet-stream")],
   _aId_=caml_string_of_jsbytes(str$59),
   _aIe_=caml_string_of_jsbytes(str$13),
   _aH$_=caml_string_of_jsbytes(str$59),
   _aIa_=caml_string_of_jsbytes(str$59),
   _aIb_=caml_string_of_jsbytes(str$59),
   _aIc_=caml_string_of_jsbytes(str$59),
   _aH7_=caml_string_of_jsbytes(str$13),
   _aH8_=caml_string_of_jsbytes(str$59),
   _aH6_=caml_string_of_jsbytes(str$13),
   _aH1_=caml_string_of_jsbytes(str$13),
   _aH5_=[0,0],
   _aH4_=
    [0,
     [11,
      caml_string_of_jsbytes(str_at_offset),
      [4,0,0,0,[11,caml_string_of_jsbytes(str$63),[2,0,0]]]],
     caml_string_of_jsbytes(str_at_offset_d_s)],
   _aH0_=caml_string_of_jsbytes(str_application),
   _aH2_=caml_string_of_jsbytes(str_bson),
   _aH3_=caml_string_of_jsbytes(str_json),
   _aHY_=caml_string_of_jsbytes(str$13),
   _aHX_=caml_string_of_jsbytes(str_application),
   _aHZ_=caml_string_of_jsbytes(str_json),
   _aHW_=caml_string_of_jsbytes(str$59),
   _aH9_=caml_string_of_jsbytes("endpoint"),
   _aH__=caml_string_of_jsbytes("http://localhost:8732"),
   _aHV_=
    [0,
     caml_string_of_jsbytes(str_generic_json_call),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_call_service),
     caml_string_of_jsbytes(str_base)],
   _aIg_=caml_string_of_jsbytes("authentication"),
   _aIh_=
    [0,
     caml_string_of_jsbytes
      ("Must be provided if the signer requires authentication. In this case, it must be the signature of the public key hash and message concatenated, by one of the keys authorized by the signer.")],
   _aIl_=caml_string_of_jsbytes(str_keys),
   _aIn_=caml_string_of_jsbytes(str_signature),
   _aIp_=
    [0,caml_string_of_jsbytes("Sign a piece of data with a given remote key")],
   _aIq_=caml_string_of_jsbytes(str_keys),
   _aIs_=caml_string_of_jsbytes(str_deterministic_nonce),
   _aIu_=
    [0,
     caml_string_of_jsbytes
      ("Obtain some random data generated deterministically from some piece of data with a given remote key")],
   _aIv_=caml_string_of_jsbytes(str_keys),
   _aIx_=caml_string_of_jsbytes(str_deterministic_no_abr),
   _aIz_=
    [0,
     caml_string_of_jsbytes
      ("Obtain the hash of some random data generated deterministically from some piece of data with a given remote key")],
   _aIA_=caml_string_of_jsbytes(str_keys),
   _aIC_=caml_string_of_jsbytes(str_supports_determi_abr),
   _aIE_=
    [0,
     caml_string_of_jsbytes
      ("Obtain whether the signing service supports the deterministic nonces functionality")],
   _aIF_=caml_string_of_jsbytes(str_keys),
   _aIH_=caml_string_of_jsbytes(str_public_key),
   _aIJ_=
    [0,
     caml_string_of_jsbytes("Retrieve the public key of a given remote key")],
   _aIK_=caml_string_of_jsbytes(str_authorized_keys),
   _aIM_=caml_string_of_jsbytes(str_authorized_keys),
   _aIO_=
    [0,
     caml_string_of_jsbytes
      ("Retrieve the public keys that can be used to authenticate signing commands.\nIf the empty object is returned, the signer has been set to accept unsigned commands.")],
   _aJP_=[0,0],
   _aJl_=[0,0],
   _aIP_=caml_string_of_jsbytes("\x04"),
   _aIQ_=caml_string_of_jsbytes(str$59),
   _aIR_=caml_string_of_jsbytes(str_signature),
   _aIS_=caml_string_of_jsbytes(str_data),
   _aIT_=caml_string_of_jsbytes(str_pkh),
   _aIU_=caml_string_of_jsbytes(str_signature),
   _aIW_=caml_string_of_jsbytes("signer_messages.sign.response"),
   _aIX_=caml_string_of_jsbytes(str_deterministic_nonce),
   _aIZ_=
    caml_string_of_jsbytes("signer_messages.deterministic_nonce.response"),
   _aI0_=caml_string_of_jsbytes(str_deterministic_no_abr),
   _aI2_=
    caml_string_of_jsbytes
     ("signer_messages.deterministic_nonce_hash.response"),
   _aI3_=caml_string_of_jsbytes(str_pkh),
   _aI5_=
    caml_string_of_jsbytes
     ("signer_messages.supports_deterministic_nonces.request"),
   _aI6_=caml_string_of_jsbytes(str_bool),
   _aI8_=
    caml_string_of_jsbytes
     ("signer_messages.supports_deterministic_nonces.response"),
   _aI9_=caml_string_of_jsbytes(str_pkh),
   _aI$_=caml_string_of_jsbytes("signer_messages.public_key.request"),
   _aJa_=caml_string_of_jsbytes("pubkey"),
   _aJc_=caml_string_of_jsbytes("signer_messages.public_key.response"),
   _aJg_=[0,1],
   _aJh_=caml_string_of_jsbytes(str_Authorized_keys),
   _aJm_=caml_string_of_jsbytes("no_authentication_required"),
   _aJn_=[0,0],
   _aJo_=caml_string_of_jsbytes("No_authentication"),
   _aJs_=caml_string_of_jsbytes(str_supports_determi_abr),
   _aJt_=caml_string_of_jsbytes(str_kind),
   _aJu_=[0,5],
   _aJv_=caml_string_of_jsbytes("Supports_deterministic_nonces"),
   _aJA_=caml_string_of_jsbytes(str_deterministic_no_abr),
   _aJB_=caml_string_of_jsbytes(str_kind),
   _aJC_=[0,4],
   _aJD_=caml_string_of_jsbytes("Deterministic_nonce_hash"),
   _aJI_=caml_string_of_jsbytes(str_deterministic_nonce),
   _aJJ_=caml_string_of_jsbytes(str_kind),
   _aJK_=[0,3],
   _aJL_=caml_string_of_jsbytes("Deterministic_nonce"),
   _aJQ_=caml_string_of_jsbytes(str_authorized_keys),
   _aJR_=caml_string_of_jsbytes(str_kind),
   _aJS_=[0,2],
   _aJT_=caml_string_of_jsbytes(str_Authorized_keys),
   _aJX_=caml_string_of_jsbytes(str_public_key),
   _aJY_=caml_string_of_jsbytes(str_kind),
   _aJZ_=[0,1],
   _aJ0_=caml_string_of_jsbytes("Public_key"),
   _aJ5_=caml_string_of_jsbytes("sign"),
   _aJ6_=caml_string_of_jsbytes(str_kind),
   _aJ7_=[0,0],
   _aJ8_=caml_string_of_jsbytes("Sign"),
   _aJ__=caml_string_of_jsbytes("signer_messages.request"),
   _aJ$_=
    caml_string_of_jsbytes
     ("Tezos_signer_backends.Encrypted.Encrypted_ed25519"),
   _aKa_=
    caml_string_of_jsbytes
     ("Tezos_signer_backends.Encrypted.Encrypted_secp256k1"),
   _aKb_=
    caml_string_of_jsbytes("Tezos_signer_backends.Encrypted.Encrypted_p256"),
   _aKi_=caml_string_of_jsbytes("edesk"),
   _aKj_=caml_string_of_jsbytes("spesk"),
   _aKk_=caml_string_of_jsbytes("p2esk"),
   _aKm_=
    [0,
     [11,caml_string_of_jsbytes("secret key not present for "),[2,0,0]],
     caml_string_of_jsbytes("secret key not present for %s")],
   _aKl_=
    [0,
     [11,
      caml_string_of_jsbytes("secret or public key present for "),
      [2,0,[11,caml_string_of_jsbytes(", use --force to delete"),0]]],
     caml_string_of_jsbytes
      ("secret or public key present for %s, use --force to delete")],
   _aKr_=caml_string_of_jsbytes(str_payload),
   _aKs_=caml_string_of_jsbytes("ok"),
   _aKt_=caml_string_of_jsbytes(str_kind),
   _aKn_=caml_string_of_jsbytes(str_payload),
   _aKo_=caml_string_of_jsbytes(str_msg),
   _aKp_=caml_string_of_jsbytes(str_error),
   _aKq_=caml_string_of_jsbytes(str_kind),
   _aKW_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aKS_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aKH_=
    [0,
     [11,caml_string_of_jsbytes("No keys found for address "),[2,0,0]],
     caml_string_of_jsbytes("No keys found for address %s")],
   _aKz_=caml_string_of_jsbytes(str_pkh),
   _aKA_=caml_string_of_jsbytes(str_alias),
   _aKB_=caml_string_of_jsbytes("add-address"),
   _aKC_=caml_string_of_jsbytes("pk_known"),
   _aKD_=caml_string_of_jsbytes("sk_known"),
   _aKE_=caml_string_of_jsbytes(str_pkh),
   _aKF_=caml_string_of_jsbytes(str_alias),
   _aKG_=caml_string_of_jsbytes("list-known-addresses"),
   _aKI_=caml_string_of_jsbytes("sk"),
   _aKJ_=caml_string_of_jsbytes("pk"),
   _aKK_=caml_string_of_jsbytes(str_pkh),
   _aKL_=caml_string_of_jsbytes(str_name),
   _aKM_=caml_string_of_jsbytes("show_private"),
   _aKN_=caml_string_of_jsbytes("show-address"),
   _aKO_=caml_string_of_jsbytes(str_name),
   _aKP_=caml_string_of_jsbytes(str_force),
   _aKQ_=caml_string_of_jsbytes("forget-address"),
   _aKR_=caml_string_of_jsbytes("forget-all-keys"),
   _aKT_=caml_string_of_jsbytes(str_data),
   _aKU_=caml_string_of_jsbytes(str_alias),
   _aKV_=caml_string_of_jsbytes("generate-nonce"),
   _aKX_=caml_string_of_jsbytes(str_data),
   _aKY_=caml_string_of_jsbytes(str_alias),
   _aKZ_=caml_string_of_jsbytes("generate-nonce-hash"),
   _aK0_=caml_string_of_jsbytes("gen-keys"),
   _aKu_=caml_string_of_jsbytes(str_password),
   _aKv_=caml_string_of_jsbytes(str_name),
   _aKw_=caml_string_of_jsbytes("algo"),
   _aKx_=caml_string_of_jsbytes(str_force),
   _aKy_=caml_string_of_jsbytes(str_force),
   _aK$_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aK__=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aK4_=
    [0,
     [11,caml_string_of_jsbytes(str_Encountered_an_e_abr),0],
     caml_string_of_jsbytes(str_Encountered_an_e_abr)],
   _aK3_=
    [0,
     [11,caml_string_of_jsbytes(str_Please_enter_pas_abr),0],
     caml_string_of_jsbytes(str_Please_enter_pas_abr)],
   _aK1_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aK2_=caml_string_of_jsbytes("helpers.compute-chain-id"),
   _aK5_=caml_string_of_jsbytes(str_error),
   _aK6_=caml_string_of_jsbytes("second"),
   _aK7_=caml_string_of_jsbytes("first"),
   _aK8_=caml_string_of_jsbytes("concat"),
   _aK9_=caml_string_of_jsbytes(str_inc),
   _aLa_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
   _aLb_=caml_string_of_jsbytes(str_jsError),
   _aLc_=caml_string_of_jsbytes("Exception during Lwt.async: "),
   _aLl_=[0,0],
   _aLm_=[0,num_540315116],
   _aLj_=[0,0],
   _aLk_=[0,num_540315116],
   _aLh_=[0,0],
   _aLg_=[0,0],
   _aLf_=[0,0],
   _aLe_=[1,0],
   _aLi_=
    caml_string_of_jsbytes
     ("Cohttp_lwt_xhr.Make_api(X).Cohttp_lwt_xhr_callv_not_implemented"),
   _aLd_=caml_string_of_jsbytes(str_string),
   _aLs_=[0,caml_string_of_jsbytes("src/lib_js_sdk/Fs.ml"),37,53],
   _aLq_=caml_string_of_jsbytes(str$59),
   _aLr_=caml_string_of_jsbytes(str$59),
   _aLo_=
    [0,
     caml_string_of_jsbytes("buffer_handle"),
     caml_string_of_jsbytes("init_buffer")],
   _aLp_=caml_string_of_jsbytes("Fs.Buffer.Buffer_not_init"),
   _aLt_=caml_string_of_jsbytes("Fs.ReadFile"),
   _aLu_=caml_string_of_jsbytes("Fs.WriteFile"),
   _aL$_=caml_string_of_jsbytes(str$59),
   _aMa_=caml_string_of_jsbytes(str$59),
   _aL9_=caml_string_of_jsbytes(str$59),
   _aL__=caml_string_of_jsbytes(str$59),
   _aL6_=caml_string_of_jsbytes(str$59),
   _aL7_=caml_string_of_jsbytes(str$59),
   _aL8_=caml_string_of_jsbytes(str$59),
   _aL5_=[0,caml_string_of_jsbytes(str_src_lib_js_sdk_c_abr),num_174,21],
   _aL4_=[0,caml_string_of_jsbytes(str_src_lib_js_sdk_c_abr),num_176,43],
   _aL3_=[0,caml_string_of_jsbytes(str_src_lib_js_sdk_c_abr),178,20],
   _aL1_=caml_string_of_jsbytes(str_stderr),
   _aL2_=caml_string_of_jsbytes(str_stdout),
   _aL0_=caml_string_of_jsbytes(str$59),
   _aLZ_=
    [0,
     [11,caml_string_of_jsbytes(str_prompt_password_abr),0],
     caml_string_of_jsbytes(str_prompt_password_abr)],
   _aLX_=caml_string_of_jsbytes(str$59),
   _aLY_=caml_string_of_jsbytes(str$59),
   _aLW_=
    [0,
     [11,
      caml_string_of_jsbytes("cannot read key ("),
      [2,0,[11,caml_string_of_jsbytes(") in storage"),0]]],
     caml_string_of_jsbytes("cannot read key (%s) in storage")],
   _aLV_=caml_string_of_jsbytes("undefined"),
   _aLU_=
    [0,
     [11,
      caml_string_of_jsbytes
       ("did not understand the storage content associated to key "),
      [2,0,[11,caml_string_of_jsbytes(str$57),[2,0,0]]]],
     caml_string_of_jsbytes
      ("did not understand the storage content associated to key %s : %s")],
   _aLT_=[0,0],
   _aLS_=
    [0,
     [11,
      caml_string_of_jsbytes("could not write the key "),
      [2,0,[11,caml_string_of_jsbytes(" content in storage."),0]]],
     caml_string_of_jsbytes("could not write the key %s content in storage.")],
   _aLQ_=caml_string_of_jsbytes(str$59),
   _aLR_=caml_string_of_jsbytes(str$59),
   _aLP_=caml_string_of_jsbytes("s"),
   _aLO_=
    [0,
     [11,
      caml_string_of_jsbytes("did not understand the "),
      [2,
       0,
       [11,
        caml_string_of_jsbytes(" alias file "),
        [2,0,[11,caml_string_of_jsbytes(str$57),[2,0,0]]]]]],
     caml_string_of_jsbytes("did not understand the %s alias file %s : %s")],
   _aLN_=[0,0],
   _aLM_=
    [0,
     [11,
      caml_string_of_jsbytes("could not write the "),
      [2,0,[11,caml_string_of_jsbytes(" alias file."),0]]],
     caml_string_of_jsbytes("could not write the %s alias file.")],
   _aLK_=caml_string_of_jsbytes(str$59),
   _aLL_=caml_string_of_jsbytes(str$59),
   _aLv_=
    [0,
     caml_string_of_jsbytes(str_confirmations),
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_block)],
   _aLw_=
    [0,
     caml_string_of_jsbytes(str_method_b),
     caml_string_of_jsbytes(str_method_a)],
   _aLx_=
    [0,
     caml_string_of_jsbytes(str_answer),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_message)],
   _aLz_=
    [0,
     caml_string_of_jsbytes(str_base),
     caml_string_of_jsbytes(str_call_service),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_generic_json_call)],
   _aLB_=
    [0,
     caml_string_of_jsbytes(str_prompt),
     caml_string_of_jsbytes(str_prompt_password)],
   _aLC_=
    [0,
     caml_string_of_jsbytes(str_sleep),
     caml_string_of_jsbytes(str_now),
     caml_string_of_jsbytes(str_exit)],
   _aLF_=
    [0,
     caml_string_of_jsbytes(str_write),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_warning),
     caml_string_of_jsbytes(str_sleep),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_prompt_password),
     caml_string_of_jsbytes(str_prompt),
     caml_string_of_jsbytes(str_now),
     caml_string_of_jsbytes(str_message),
     caml_string_of_jsbytes(str_log),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_get_base_dir),
     caml_string_of_jsbytes(str_generic_json_call),
     caml_string_of_jsbytes(str_exit),
     caml_string_of_jsbytes(str_error),
     caml_string_of_jsbytes(str_confirmations),
     caml_string_of_jsbytes(str_chain),
     caml_string_of_jsbytes(str_call_streamed_se_abr),
     caml_string_of_jsbytes(str_call_service),
     caml_string_of_jsbytes(str_block),
     caml_string_of_jsbytes(str_base),
     caml_string_of_jsbytes(str_answer)],
   _aLG_=
    [0,
     caml_string_of_jsbytes(str_get_base_dir),
     caml_string_of_jsbytes(str_load),
     caml_string_of_jsbytes(str_load_passwords),
     caml_string_of_jsbytes(str_read_file),
     caml_string_of_jsbytes(str_with_lock),
     caml_string_of_jsbytes(str_write)],
   _aLH_=
    [0,
     caml_string_of_jsbytes(str_exit),
     caml_string_of_jsbytes(str_now),
     caml_string_of_jsbytes(str_sleep)],
   _aLJ_=
    [0,
     caml_string_of_jsbytes(str_exit),
     caml_string_of_jsbytes(str_sleep),
     caml_string_of_jsbytes(str_now)],
   _aMv_=caml_string_of_jsbytes(str$59),
   _aMp_=caml_string_of_jsbytes(str$71),
   _aMq_=caml_string_of_jsbytes(str$60),
   _aMr_=caml_string_of_jsbytes(str$71),
   _aMs_=caml_string_of_jsbytes(str$60),
   _aMf_=[0,[15,0],caml_string_of_jsbytes(str_a)],
   _aMg_=
    [0,
     [11,caml_string_of_jsbytes(str_chain_id_test_fa_abr),0],
     caml_string_of_jsbytes(str_chain_id_test_fa_abr)],
   _aMb_=
    [0,
     caml_string_of_jsbytes(str_pbkdf2sha512),
     caml_string_of_jsbytes(str_pbkdf2sha256),
     caml_string_of_jsbytes(str_incdirect)],
   _aMc_=caml_string_of_jsbytes("https://testnet-tezos.giganode.io:443"),
   _aMe_=[0,num_803493184,0],
   _aMh_=caml_string_of_jsbytes("chain-id"),
   _aMj_=caml_string_of_jsbytes(str_content),
   _aMk_=caml_string_of_jsbytes(str_filename),
   _aMl_=caml_string_of_jsbytes("readwrite"),
   _aMn_=caml_string_of_jsbytes(str_filename),
   _aMo_=caml_string_of_jsbytes("readfail");
  function erase_rel(param)
   {if(typeof param === "number")
     return 0;
    else
     switch(param[0])
      {case 0:var rest=param[1];return [0,erase_rel(rest)];
       case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
       case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
       case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
       case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
       case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
       case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
       case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
       case 8:var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
       case 9:
        var rest$8=param[3],ty1=param[1];return [9,ty1,ty1,erase_rel(rest$8)];
       case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
       case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
       case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
       case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
       default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
  function concat_fmtty(fmtty1,fmtty2)
   {if(typeof fmtty1 === "number")
     return fmtty2;
    else
     switch(fmtty1[0])
      {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
       case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
       case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
       case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
       case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
       case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
       case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
       case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
       case 8:
        var rest$7=fmtty1[2],ty=fmtty1[1];
        return [8,ty,concat_fmtty(rest$7,fmtty2)];
       case 9:
        var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
        return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
       case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
       case 11:var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
       case 12:var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
       case 13:var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
       default:var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
  function concat_fmt(fmt1,fmt2)
   {if(typeof fmt1 === "number")
     return fmt2;
    else
     switch(fmt1[0])
      {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
       case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
       case 2:
        var rest$1=fmt1[2],pad=fmt1[1];return [2,pad,concat_fmt(rest$1,fmt2)];
       case 3:
        var rest$2=fmt1[2],pad$0=fmt1[1];
        return [3,pad$0,concat_fmt(rest$2,fmt2)];
       case 4:
        var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
        return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
       case 5:
        var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
        return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
       case 6:
        var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
        return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
       case 7:
        var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
        return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
       case 8:
        var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
        return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
       case 9:
        var rest$8=fmt1[2],pad$6=fmt1[1];
        return [9,pad$6,concat_fmt(rest$8,fmt2)];
       case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
       case 11:
        var rest$10=fmt1[2],str=fmt1[1];
        return [11,str,concat_fmt(rest$10,fmt2)];
       case 12:
        var rest$11=fmt1[2],chr=fmt1[1];
        return [12,chr,concat_fmt(rest$11,fmt2)];
       case 13:
        var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
        return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
       case 14:
        var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
        return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
       case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
       case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
       case 17:
        var rest$16=fmt1[2],fmting_lit=fmt1[1];
        return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
       case 18:
        var rest$17=fmt1[2],fmting_gen=fmt1[1];
        return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
       case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
       case 20:
        var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
        return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
       case 21:
        var rest$20=fmt1[2],counter=fmt1[1];
        return [21,counter,concat_fmt(rest$20,fmt2)];
       case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
       case 23:
        var rest$22=fmt1[2],ign=fmt1[1];
        return [23,ign,concat_fmt(rest$22,fmt2)];
       default:
        var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
        return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
  function failwith(s){throw [0,Failure,s]}
  function invalid_arg(s){throw [0,Invalid_argument,s]}
  var Exit=[num_248,_a_,caml_fresh_oo_id(0)];
  function min(x,y){return caml_lessequal(x,y)?x:y}
  function max(x,y){return caml_greaterequal(x,y)?x:y}
  function abs(x){return 0 <= x?x:- x | 0}
  var max_int_float=num_2147483647,min_int_float=num_2147483648;
  function symbol(s1,s2)
   {var
     l1=caml_ml_string_length(s1),
     l2=caml_ml_string_length(s2),
     s=caml_create_bytes(l1 + l2 | 0);
    caml_blit_string(s1,0,s,0,l1);
    caml_blit_string(s2,0,s,l1,l2);
    return caml_string_of_bytes(s)}
  function char_of_int(n)
   {if(0 <= n && ! (num_255 < n))return n;return invalid_arg(_b_)}
  function of_bool(b){return b?_c_:_d_}
  function construct(n){return caml_string_of_jsbytes(str$59 + n)}
  function of_float(f)
   {var s=caml_format_float(_f_,f),l=caml_ml_string_length(s),i=0;
    for(;;)
     {if(l <= i)return symbol(s,_e_);
      var match=caml_string_get(s,i),switch$0=0;
      if(48 <= match)
       {if(! (58 <= match))switch$0 = 1}
      else
       if(45 === match)switch$0 = 1;
      if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
      return s}}
  function append(l1,l2)
   {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
  var
   stdin=caml_ml_open_descriptor_in(0),
   stdout=caml_ml_open_descriptor_out(1),
   stderr=caml_ml_open_descriptor_out(2);
  function flush_all(param)
   {function iter(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          try
           {caml_ml_flush(a)}
          catch(_bZ2_)
           {_bZ2_ = caml_wrap_exception(_bZ2_);
            if(_bZ2_[1] !== Sys_error)throw _bZ2_;
            var _bZ1_=_bZ2_}
          var param$0=l;
          continue}
        return 0}}
    return iter(caml_ml_out_channels_list(0))}
  function output_string(oc,s)
   {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
  function input(ic,s,ofs,len)
   {if(0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
     return caml_ml_input(ic,s,ofs,len);
    return invalid_arg(_h_)}
  function prerr_string(s){return output_string(stderr,s)}
  function symbol$0(param,_bZZ_)
   {var
     str2=_bZZ_[2],
     fmt2=_bZZ_[1],
     str1=param[2],
     fmt1=param[1],
     _bZ0_=symbol(str1,symbol(_i_,str2));
    return [0,concat_fmt(fmt1,fmt2),_bZ0_]}
  var exit_function=[0,flush_all];
  function at_exit(f)
   {var g=exit_function[1],f_already_ran=[0,0];
    exit_function[1]
    =
    function(param)
     {if(1 - f_already_ran[1]){f_already_ran[1] = 1;caml_call1(f,0)}
      return caml_call1(g,0)};
    return 0}
  function do_at_exit(param){return caml_call1(exit_function[1],0)}
  caml_fresh_oo_id(0);
  function empty(param){return 0}
  function return$0(x,param){return [0,x,empty]}
  function map(f,seq,param)
   {var match=caml_call1(seq,0);
    if(match)
     {var
       next=match[2],
       x=match[1],
       _bZX_=function(_bZY_){return map(f,next,_bZY_)};
      return [0,caml_call1(f,x),_bZX_]}
    return 0}
  function filter_map(f,seq,param)
   {var seq$0=seq;
    for(;;)
     {var match=caml_call1(seq$0,0);
      if(match)
       {var next=match[2],x=match[1],match$0=caml_call1(f,x);
        if(match$0)
         {var y=match$0[1];
          return [0,y,function(_bZW_){return filter_map(f,next,_bZW_)}]}
        var seq$0=next;
        continue}
      return 0}}
  function filter(f,seq,param)
   {var seq$0=seq;
    for(;;)
     {var match=caml_call1(seq$0,0);
      if(match)
       {var next=match[2],x=match[1];
        if(caml_call1(f,x))
         return [0,x,function(_bZV_){return filter(f,next,_bZV_)}];
        var seq$0=next;
        continue}
      return 0}}
  function flat_map$1(counter,f,seq,param)
   {var match=caml_call1(seq,0);
    if(match)
     {var next=match[2],x=match[1],_bZU_=caml_call1(f,x),_bZT_=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return flat_map_app$0(counter$0,f,_bZU_,next,_bZT_)}
      return caml_trampoline_return(flat_map_app$0,[0,f,_bZU_,next,_bZT_])}
    return 0}
  function flat_map_app$0(counter,f,seq,tail,param)
   {var match=caml_call1(seq,0);
    if(match)
     {var next=match[2],x=match[1];
      return [0,x,function(_bZS_){return flat_map_app(f,next,tail,_bZS_)}]}
    var _bZR_=0;
    if(counter < 50)
     {var counter$0=counter + 1 | 0;return flat_map$1(counter$0,f,tail,_bZR_)}
    return caml_trampoline_return(flat_map$1,[0,f,tail,_bZR_])}
  function flat_map(f,seq,param)
   {return caml_trampoline(flat_map$1(0,f,seq,param))}
  function flat_map_app(f,seq,tail,param)
   {return caml_trampoline(flat_map_app$0(0,f,seq,tail,param))}
  function fold_left(f,acc,seq)
   {var acc$0=acc,seq$0=seq;
    for(;;)
     {var match=caml_call1(seq$0,0);
      if(match)
       {var
         seq$1=match[2],
         x=match[1],
         acc$1=caml_call2(f,acc$0,x),
         acc$0=acc$1,
         seq$0=seq$1;
        continue}
      return acc$0}}
  function iter(f,seq)
   {var seq$0=seq;
    for(;;)
     {var match=caml_call1(seq$0,0);
      if(match)
       {var seq$1=match[2],x=match[1];
        caml_call1(f,x);
        var seq$0=seq$1;
        continue}
      return 0}}
  function value(o,default$0){if(o){var v=o[1];return v}return default$0}
  function bind(o,f){if(o){var v=o[1];return caml_call1(f,v)}return 0}
  function map$0(f,o){if(o){var v=o[1];return [0,caml_call1(f,v)]}return 0}
  function fold(none,some,param)
   {if(param){var v=param[1];return caml_call1(some,v)}return none}
  function chr(n)
   {if(0 <= n && ! (num_255 < n))return n;return invalid_arg(_j_)}
  function lowercase(c)
   {var switch$0=0;
    if(! (65 <= c) || 90 < c)switch$0 = 1;
    if(switch$0)
     {var switch$1=0;
      if(! (num_192 <= c) || num_214 < c)switch$1 = 1;
      if(switch$1)
       {var switch$2=0;
        if(! (num_216 <= c) || num_222 < c)switch$2 = 1;
        if(switch$2)return c}}
    return c + 32 | 0}
  function lowercase_ascii(c)
   {if(65 <= c && ! (90 < c))return c + 32 | 0;return c}
  function uppercase_ascii(c)
   {if(97 <= c && ! (num_122 < c))return c + num_32 | 0;return c}
  function equal(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
  function of_int(i)
   {var _bZN_=0 <= i?1:0,_bZO_=_bZN_?i <= 55295?1:0:_bZN_;
    if(_bZO_)
     var _bZP_=_bZO_;
    else
     var _bZQ_=57344 <= i?1:0,_bZP_=_bZQ_?i <= 1114111?1:0:_bZQ_;
    return _bZP_?i:invalid_arg(symbol(caml_format_int(_r_,i),_q_))}
  var
   match=caml_sys_get_config(0),
   os_type=match[1],
   match$0=caml_sys_const_backend_type(0),
   max_array_length=caml_sys_const_max_wosize(0),
   max_string_length=(4 * max_array_length | 0) - 1 | 0,
   Break=[num_248,_s_,caml_fresh_oo_id(0)];
  function length(l)
   {var len=0,param=l;
    for(;;)
     {if(param)
       {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
        continue}
      return len}}
  function hd(param){if(param){var a=param[1];return a}return failwith(_t_)}
  function tl(param){if(param){var l=param[2];return l}return failwith(_u_)}
  function nth(l,n)
   {if(0 <= n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2],a=l$0[1];
          if(0 === n$0)return a;
          var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
          continue}
        return failwith(_v_)}}
    return invalid_arg(_w_)}
  function rev_append(l1,l2)
   {var l1$0=l1,l2$0=l2;
    for(;;)
     {if(l1$0)
       {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
        continue}
      return l2$0}}
  function rev(l){return rev_append(l,0)}
  function init_aux(i,n,f)
   {if(n <= i)return 0;
    var r=caml_call1(f,i);
    return [0,r,init_aux(i + 1 | 0,n,f)]}
  var rev_init_threshold=typeof match$0 === "number"?num_10000:50;
  function flatten(param)
   {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}return 0}
  function map$1(f,param)
   {if(param)
     {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$1(f,l)]}
    return 0}
  function _y_(i,f,param)
   {if(param)
     {var l=param[2],a=param[1],r=caml_call2(f,i,a);
      return [0,r,_y_(i + 1 | 0,f,l)]}
    return 0}
  function mapi(f,l){return _y_(0,f,l)}
  function rev_map(f,param)
   {var accu=0,param$0=param;
    for(;;)
     {if(param$0)
       {var
         param$1=param$0[2],
         a=param$0[1],
         accu$0=[0,caml_call1(f,a),accu],
         accu=accu$0,
         param$0=param$1;
        continue}
      return accu}}
  function iter$0(f,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var param$1=param$0[2],a=param$0[1];
        caml_call1(f,a);
        var param$0=param$1;
        continue}
      return 0}}
  function iteri(f,l)
   {var i=0,param=l;
    for(;;)
     {if(param)
       {var param$0=param[2],a=param[1];
        caml_call2(f,i,a);
        var i$0=i + 1 | 0,i=i$0,param=param$0;
        continue}
      return 0}}
  function fold_left$0(f,accu,l)
   {var accu$0=accu,l$0=l;
    for(;;)
     {if(l$0)
       {var
         l$1=l$0[2],
         a=l$0[1],
         accu$1=caml_call2(f,accu$0,a),
         accu$0=accu$1,
         l$0=l$1;
        continue}
      return accu$0}}
  function fold_right(f,l,accu)
   {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
    return accu}
  function iter2(f,l1,l2)
   {var l1$0=l1,l2$0=l2;
    for(;;)
     {if(l1$0)
       {if(l2$0)
         {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
          caml_call2(f,a1,a2);
          var l1$0=l1$1,l2$0=l2$1;
          continue}}
      else
       if(! l2$0)return 0;
      return invalid_arg(_z_)}}
  function for_all(p,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],a=param$0[1],_bZM_=caml_call1(p,a);
        if(_bZM_){var param$0=l;continue}
        return _bZM_}
      return 1}}
  function exists(p,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],a=param$0[1],_bZL_=caml_call1(p,a);
        if(_bZL_)return _bZL_;
        var param$0=l;
        continue}
      return 0}}
  function for_all2(p,l1,l2)
   {var l1$0=l1,l2$0=l2;
    for(;;)
     {if(l1$0)
       {if(l2$0)
         {var
           l2$1=l2$0[2],
           a2=l2$0[1],
           l1$1=l1$0[2],
           a1=l1$0[1],
           _bZK_=caml_call2(p,a1,a2);
          if(_bZK_){var l1$0=l1$1,l2$0=l2$1;continue}
          return _bZK_}}
      else
       if(! l2$0)return 1;
      return invalid_arg(_A_)}}
  function mem(x,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],a=param$0[1],_bZJ_=0 === caml_compare(a,x)?1:0;
        if(_bZJ_)return _bZJ_;
        var param$0=l;
        continue}
      return 0}}
  function memq(x,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],a=param$0[1],_bZI_=a === x?1:0;
        if(_bZI_)return _bZI_;
        var param$0=l;
        continue}
      return 0}}
  function assoc(x,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(0 === caml_compare(a,x))return b;
        var param$0=l;
        continue}
      throw Not_found}}
  function assoc_opt(x,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(0 === caml_compare(a,x))return [0,b];
        var param$0=l;
        continue}
      return 0}}
  function assq(x,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
        if(a === x)return b;
        var param$0=l;
        continue}
      throw Not_found}}
  function mem_assoc(x,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var
         l=param$0[2],
         match=param$0[1],
         a=match[1],
         _bZH_=0 === caml_compare(a,x)?1:0;
        if(_bZH_)return _bZH_;
        var param$0=l;
        continue}
      return 0}}
  function remove_assq(x,param)
   {if(param)
     {var l=param[2],pair=param[1],a=pair[1];
      return a === x?l:[0,pair,remove_assq(x,l)]}
    return 0}
  function find(p,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var l=param$0[2],x=param$0[1];
        if(caml_call1(p,x))return x;
        var param$0=l;
        continue}
      throw Not_found}}
  function find_all(p)
   {var accu=0;
    return function(param$0)
     {var accu$0=accu,param=param$0;
      for(;;)
       {if(param)
         {var l=param[2],x=param[1];
          if(caml_call1(p,x))
           {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
          var param=l;
          continue}
        return rev(accu$0)}}}
  function filter_map$0(f)
   {var accu=0;
    return function(param$0)
     {var accu$0=accu,param=param$0;
      for(;;)
       {if(param)
         {var l=param[2],x=param[1],match=caml_call1(f,x);
          if(match)
           {var v=match[1],accu$1=[0,v,accu$0],accu$0=accu$1,param=l;continue}
          var param=l;
          continue}
        return rev(accu$0)}}}
  function chop(k,l)
   {var k$0=k,l$0=l;
    for(;;)
     {if(0 === k$0)return l$0;
      if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
      throw [0,Assert_failure,_B_]}}
  function fast_sort(cmp,l)
   {function rev_sort(n,l)
     {if(2 === n)
       {if(l)
         {var _bZE_=l[2];
          if(_bZE_)
           {var x2=_bZE_[1],x1=l[1];
            return 0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
      else
       if(3 === n && l)
        {var _bZF_=l[2];
         if(_bZF_)
          {var _bZG_=_bZF_[2];
           if(_bZG_)
            {var x3=_bZG_[1],x2$0=_bZF_[1],x1$0=l[1];
             return 0 < caml_call2(cmp,x1$0,x2$0)
                     ?0 < caml_call2(cmp,x2$0,x3)
                       ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                       :0 < caml_call2(cmp,x1$0,x3)
                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x3,[0,x1$0,[0,x2$0,0]]]
                     :0 < caml_call2(cmp,x1$0,x3)
                       ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                       :0 < caml_call2(cmp,x2$0,x3)
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
      var
       n1=n >> 1,
       n2=n - n1 | 0,
       l2$0=chop(n1,l),
       l1$0=sort(n1,l),
       l2$1=sort(n2,l2$0),
       l1=l1$0,
       l2=l2$1,
       accu=0;
      for(;;)
       {if(l1)
         {if(l2)
           {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
            if(0 < caml_call2(cmp,h1,h2))
             {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
            var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
            continue}
          return rev_append(l1,accu)}
        return rev_append(l2,accu)}}
    function sort(n,l)
     {if(2 === n)
       {if(l)
         {var _bZB_=l[2];
          if(_bZB_)
           {var x2=_bZB_[1],x1=l[1];
            return 0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
      else
       if(3 === n && l)
        {var _bZC_=l[2];
         if(_bZC_)
          {var _bZD_=_bZC_[2];
           if(_bZD_)
            {var x3=_bZD_[1],x2$0=_bZC_[1],x1$0=l[1];
             return 0 < caml_call2(cmp,x1$0,x2$0)
                     ?0 < caml_call2(cmp,x1$0,x3)
                       ?0 < caml_call2(cmp,x2$0,x3)
                         ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                         :[0,x2$0,[0,x3,[0,x1$0,0]]]
                       :[0,x2$0,[0,x1$0,[0,x3,0]]]
                     :0 < caml_call2(cmp,x2$0,x3)
                       ?0 < caml_call2(cmp,x1$0,x3)
                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                         :[0,x1$0,[0,x3,[0,x2$0,0]]]
                       :[0,x1$0,[0,x2$0,[0,x3,0]]]}}}
      var
       n1=n >> 1,
       n2=n - n1 | 0,
       l2$0=chop(n1,l),
       l1$0=rev_sort(n1,l),
       l2$1=rev_sort(n2,l2$0),
       l1=l1$0,
       l2=l2$1,
       accu=0;
      for(;;)
       {if(l1)
         {if(l2)
           {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
            if(0 < caml_call2(cmp,h1,h2))
             {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
            var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
            continue}
          return rev_append(l1,accu)}
        return rev_append(l2,accu)}}
    var len=length(l);
    return 2 <= len?sort(len,l):l}
  function make(n,c)
   {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
  function init(n,f)
   {var s=caml_create_bytes(n),_bZz_=n - 1 | 0,_bZy_=0;
    if(! (_bZz_ < 0))
     {var i=_bZy_;
      for(;;)
       {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
        var _bZA_=i + 1 | 0;
        if(_bZz_ !== i){var i=_bZA_;continue}
        break}}
    return s}
  var empty_return=caml_create_bytes(0);
  function copy(s)
   {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
    caml_blit_bytes(s,0,r,0,len);
    return r}
  function to_string(b){return caml_string_of_bytes(copy(b))}
  function to_bytes(s){return copy(caml_bytes_of_string(s))}
  function sub(s,ofs,len)
   {if(0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
     {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
    return invalid_arg(_C_)}
  function sub_string(b,ofs,len){return caml_string_of_bytes(sub(b,ofs,len))}
  function blit(s1,ofs1,s2,ofs2,len)
   {if
     (0
      <=
      len
      &&
      0
      <=
      ofs1
      &&
      !
      ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
      &&
      0
      <=
      ofs2
      &&
      !
      ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
     return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
    return invalid_arg(_D_)}
  function blit$0(s1,ofs1,s2,ofs2,len)
   {if
     (0
      <=
      len
      &&
      0
      <=
      ofs1
      &&
      !
      ((caml_ml_string_length(s1) - len | 0) < ofs1)
      &&
      0
      <=
      ofs2
      &&
      !
      ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
     return caml_blit_string(s1,ofs1,s2,ofs2,len);
    return invalid_arg(_E_)}
  function concat(sep,l)
   {if(l)
     {var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
      for(;;)
       {if(param)
         {var _bZt_=param[2],_bZu_=param[1];
          if(_bZt_)
           {var
             x=(caml_ml_bytes_length(_bZu_) + seplen | 0) + acc | 0,
             acc$0=acc <= x?x:invalid_arg(_F_),
             acc=acc$0,
             param=_bZt_;
            continue}
          var _bZx_=caml_ml_bytes_length(_bZu_) + acc | 0}
        else
         var _bZx_=acc;
        var dst=caml_create_bytes(_bZx_),pos=pos$1,param$0=l;
        for(;;)
         {if(param$0)
           {var _bZv_=param$0[2],_bZw_=param$0[1];
            if(_bZv_)
             {caml_blit_bytes(_bZw_,0,dst,pos,caml_ml_bytes_length(_bZw_));
              caml_blit_bytes
               (sep,0,dst,pos + caml_ml_bytes_length(_bZw_) | 0,seplen);
              var
               pos$0=(pos + caml_ml_bytes_length(_bZw_) | 0) + seplen | 0,
               pos=pos$0,
               param$0=_bZv_;
              continue}
            caml_blit_bytes(_bZw_,0,dst,pos,caml_ml_bytes_length(_bZw_));
            return dst}
          return dst}}}
    return empty_return}
  function cat(s1,s2)
   {var
     l1=caml_ml_bytes_length(s1),
     l2=caml_ml_bytes_length(s2),
     r=caml_create_bytes(l1 + l2 | 0);
    caml_blit_bytes(s1,0,r,0,l1);
    caml_blit_bytes(s2,0,r,l1,l2);
    return r}
  function is_space(param)
   {var _bZs_=param - 9 | 0,switch$0=0;
    if(4 < _bZs_ >>> 0)
     {if(23 === _bZs_)switch$0 = 1}
    else
     if(2 !== _bZs_)switch$0 = 1;
    return switch$0?1:0}
  function map$2(f,s)
   {var l=caml_ml_bytes_length(s);
    if(0 === l)return s;
    var r=caml_create_bytes(l),_bZq_=l - 1 | 0,_bZp_=0;
    if(! (_bZq_ < 0))
     {var i=_bZp_;
      for(;;)
       {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
        var _bZr_=i + 1 | 0;
        if(_bZq_ !== i){var i=_bZr_;continue}
        break}}
    return r}
  function make$0(n,c){return caml_string_of_bytes(make(n,c))}
  function init$0(n,f){return caml_string_of_bytes(init(n,f))}
  function sub$0(s,ofs,len)
   {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
  function concat$0(sep,l)
   {if(l)
     {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
      for(;;)
       {if(param)
         {var _bZk_=param[2],_bZl_=param[1];
          if(_bZk_)
           {var
             x=(caml_ml_string_length(_bZl_) + seplen | 0) + acc | 0,
             acc$0=acc <= x?x:invalid_arg(_G_),
             acc=acc$0,
             param=_bZk_;
            continue}
          var _bZo_=caml_ml_string_length(_bZl_) + acc | 0}
        else
         var _bZo_=acc;
        var dst=caml_create_bytes(_bZo_),pos=pos$1,param$0=l;
        for(;;)
         {if(param$0)
           {var _bZm_=param$0[2],_bZn_=param$0[1];
            if(_bZm_)
             {caml_blit_string(_bZn_,0,dst,pos,caml_ml_string_length(_bZn_));
              caml_blit_string
               (sep,0,dst,pos + caml_ml_string_length(_bZn_) | 0,seplen);
              var
               pos$0=(pos + caml_ml_string_length(_bZn_) | 0) + seplen | 0,
               pos=pos$0,
               param$0=_bZm_;
              continue}
            caml_blit_string(_bZn_,0,dst,pos,caml_ml_string_length(_bZn_))}
          return caml_string_of_bytes(dst)}}}
    return _H_}
  function iter$1(f,s)
   {var _bZi_=caml_ml_string_length(s) - 1 | 0,_bZh_=0;
    if(! (_bZi_ < 0))
     {var i=_bZh_;
      for(;;)
       {caml_call1(f,caml_string_unsafe_get(s,i));
        var _bZj_=i + 1 | 0;
        if(_bZi_ !== i){var i=_bZj_;continue}
        break}}
    return 0}
  function is_space$0(param)
   {var _bZg_=param - 9 | 0,switch$0=0;
    if(4 < _bZg_ >>> 0)
     {if(23 === _bZg_)switch$0 = 1}
    else
     if(2 !== _bZg_)switch$0 = 1;
    return switch$0?1:0}
  function escaped(s$0)
   {var n$0=caml_ml_string_length(s$0),i$1=0;
    for(;;)
     {if(n$0 <= i$1)return s$0;
      var
       match$0=caml_string_unsafe_get(s$0,i$1),
       _bZe_=match$0 + num_32 | 0,
       switch$0=0;
      if(59 < _bZe_ >>> 0)
       {if(33 < (_bZe_ - 61 | 0) >>> 0)switch$0 = 1}
      else
       if(2 === _bZe_)switch$0 = 1;
      if(switch$0)
       {var
         s$1=caml_bytes_of_string(s$0),
         n=[0,0],
         _bY9_=caml_ml_bytes_length(s$1) - 1 | 0,
         _bY8_=0;
        if(! (_bY9_ < 0))
         {var i$0=_bY8_;
          for(;;)
           {var match=caml_bytes_unsafe_get(s$1,i$0),switch$1=0;
            if(32 <= match)
             {var _bZb_=match + num_34 | 0,switch$2=0;
              if(58 < _bZb_ >>> 0)
               {if(93 <= _bZb_)switch$2 = 1}
              else
               if(56 < (_bZb_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
              if(! switch$2){var _bZc_=1;switch$1 = 2}}
            else
             if(11 <= match)
              {if(13 === match)switch$1 = 1}
             else
              if(8 <= match)switch$1 = 1;
            switch(switch$1)
             {case 0:var _bZc_=4;break;case 1:var _bZc_=2;break}
            n[1] = n[1] + _bZc_ | 0;
            var _bZd_=i$0 + 1 | 0;
            if(_bY9_ !== i$0){var i$0=_bZd_;continue}
            break}}
        if(n[1] === caml_ml_bytes_length(s$1))
         var _bZf_=copy(s$1);
        else
         {var s=caml_create_bytes(n[1]);
          n[1] = 0;
          var _bY$_=caml_ml_bytes_length(s$1) - 1 | 0,_bY__=0;
          if(! (_bY$_ < 0))
           {var i=_bY__;
            for(;;)
             {var c=caml_bytes_unsafe_get(s$1,i),switch$3=0;
              if(35 <= c)
               if(92 === c)
                switch$3 = 2;
               else
                if(num_127 <= c)switch$3 = 1;else switch$3 = 3;
              else
               if(32 <= c)
                if(34 <= c)switch$3 = 2;else switch$3 = 3;
               else
                if(14 <= c)
                 switch$3 = 1;
                else
                 switch(c)
                  {case 8:
                    caml_bytes_unsafe_set(s,n[1],92);
                    n[1]++;
                    caml_bytes_unsafe_set(s,n[1],98);
                    break;
                   case 9:
                    caml_bytes_unsafe_set(s,n[1],92);
                    n[1]++;
                    caml_bytes_unsafe_set(s,n[1],num_116);
                    break;
                   case 10:
                    caml_bytes_unsafe_set(s,n[1],92);
                    n[1]++;
                    caml_bytes_unsafe_set(s,n[1],num_110);
                    break;
                   case 13:
                    caml_bytes_unsafe_set(s,n[1],92);
                    n[1]++;
                    caml_bytes_unsafe_set(s,n[1],num_114);
                    break;
                   default:switch$3 = 1}
              switch(switch$3)
               {case 1:
                 caml_bytes_unsafe_set(s,n[1],92);
                 n[1]++;
                 caml_bytes_unsafe_set(s,n[1],48 + (c / num_100 | 0) | 0);
                 n[1]++;
                 caml_bytes_unsafe_set
                  (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                 n[1]++;
                 caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                 break;
                case 2:
                 caml_bytes_unsafe_set(s,n[1],92);
                 n[1]++;
                 caml_bytes_unsafe_set(s,n[1],c);
                 break;
                case 3:caml_bytes_unsafe_set(s,n[1],c);break
                }
              n[1]++;
              var _bZa_=i + 1 | 0;
              if(_bY$_ !== i){var i=_bZa_;continue}
              break}}
          var _bZf_=s}
        return caml_string_of_bytes(_bZf_)}
      var i$2=i$1 + 1 | 0,i$1=i$2;
      continue}}
  function index_rec(s,lim,i,c)
   {var i$0=i;
    for(;;)
     {if(lim <= i$0)throw Not_found;
      if(caml_string_unsafe_get(s,i$0) === c)return i$0;
      var i$1=i$0 + 1 | 0,i$0=i$1;
      continue}}
  function index(s,c){return index_rec(s,caml_ml_string_length(s),0,c)}
  function index_from(s,i,c)
   {var l=caml_ml_string_length(s);
    if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
    return invalid_arg(_J_)}
  function rindex_from(s,i$1,c)
   {if(-1 <= i$1 && ! (caml_ml_string_length(s) <= i$1))
     {var i=i$1;
      for(;;)
       {if(0 <= i)
         {if(caml_string_unsafe_get(s,i) === c)return i;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        throw Not_found}}
    return invalid_arg(_K_)}
  function rindex_opt(s,c)
   {var i$1=caml_ml_string_length(s) - 1 | 0,i=i$1;
    for(;;)
     {if(0 <= i)
       {if(caml_string_unsafe_get(s,i) === c)return [0,i];
        var i$0=i - 1 | 0,i=i$0;
        continue}
      return 0}}
  function contains_from(s,i,c)
   {var l=caml_ml_string_length(s);
    if(0 <= i && ! (l < i))
     try
      {index_rec(s,l,i,c);var _bY6_=1;return _bY6_}
     catch(_bY7_)
      {_bY7_ = caml_wrap_exception(_bY7_);
       if(_bY7_ === Not_found)return 0;
       throw _bY7_}
    return invalid_arg(_L_)}
  function contains(s,c){return contains_from(s,0,c)}
  function f(s)
   {var s$0=caml_bytes_of_string(s);
    return caml_string_of_bytes(map$2(lowercase_ascii,s$0))}
  var compare_decoded=caml_string_compare;
  function split_on_char(sep,s)
   {var
     r=[0,0],
     j=[0,caml_ml_string_length(s)],
     _bY2_=caml_ml_string_length(s) - 1 | 0;
    if(! (_bY2_ < 0))
     {var i=_bY2_;
      for(;;)
       {if(caml_string_unsafe_get(s,i) === sep)
         {var _bY4_=r[1];
          r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_bY4_];
          j[1] = i}
        var _bY5_=i - 1 | 0;
        if(0 !== i){var i=_bY5_;continue}
        break}}
    var _bY3_=r[1];
    return [0,sub$0(s,0,j[1]),_bY3_]}
  var equal$0=caml_string_equal;
  function is_block(a){return 1 - (typeof a === "number"?1:0)}
  function of_val(x)
   {var switch$0=0;
    if(is_block(x) && caml_obj_tag(x) !== num_248 && 1 <= x.length - 1)
     {var slot=x[1];switch$0 = 1}
    if(! switch$0)var slot=x;
    var switch$1=0;
    if(is_block(slot) && caml_obj_tag(slot) === num_248)
     {var name=slot[1];switch$1 = 1}
    if(! switch$1)var name=invalid_arg(_N_);
    return caml_obj_tag(name) === num_252?slot:invalid_arg(_M_)}
  function id(slot){return slot[2]}
  var max_ephe_length=max_array_length - 2 | 0;
  function raise_if_invalid_offset(e,o,msg)
   {var
     _bYZ_=0 <= o?1:0,
     _bY0_=_bYZ_?o < (e.length - 1 - 2 | 0)?1:0:_bYZ_,
     _bY1_=1 - _bY0_;
    return _bY1_?invalid_arg(msg):_bY1_}
  function init$1(l,f)
   {if(0 === l)return [0];
    if(0 <= l)
     {var res=caml_make_vect(l,caml_call1(f,0)),_bYX_=l - 1 | 0,_bYW_=1;
      if(! (_bYX_ < 1))
       {var i=_bYW_;
        for(;;)
         {res[1 + i] = caml_call1(f,i);
          var _bYY_=i + 1 | 0;
          if(_bYX_ !== i){var i=_bYY_;continue}
          break}}
      return res}
    return invalid_arg(_S_)}
  function copy$0(a)
   {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
  function sub$1(a,ofs,len)
   {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
     return caml_array_sub(a,ofs,len);
    return invalid_arg(_T_)}
  function blit$1(a1,ofs1,a2,ofs2,len)
   {if
     (0
      <=
      len
      &&
      0
      <=
      ofs1
      &&
      !
      ((a1.length - 1 - len | 0) < ofs1)
      &&
      0
      <=
      ofs2
      &&
      !
      ((a2.length - 1 - len | 0) < ofs2))
     return caml_array_blit(a1,ofs1,a2,ofs2,len);
    return invalid_arg(_V_)}
  function iter$2(f,a)
   {var _bYU_=a.length - 1 - 1 | 0,_bYT_=0;
    if(! (_bYU_ < 0))
     {var i=_bYT_;
      for(;;)
       {caml_call1(f,a[1 + i]);
        var _bYV_=i + 1 | 0;
        if(_bYU_ !== i){var i=_bYV_;continue}
        break}}
    return 0}
  function map$3(f,a)
   {var l=a.length - 1;
    if(0 === l)return [0];
    var r=caml_make_vect(l,caml_call1(f,a[1])),_bYR_=l - 1 | 0,_bYQ_=1;
    if(! (_bYR_ < 1))
     {var i=_bYQ_;
      for(;;)
       {r[1 + i] = caml_call1(f,a[1 + i]);
        var _bYS_=i + 1 | 0;
        if(_bYR_ !== i){var i=_bYS_;continue}
        break}}
    return r}
  function iteri$0(f,a)
   {var _bYO_=a.length - 1 - 1 | 0,_bYN_=0;
    if(! (_bYO_ < 0))
     {var i=_bYN_;
      for(;;)
       {caml_call2(f,i,a[1 + i]);
        var _bYP_=i + 1 | 0;
        if(_bYO_ !== i){var i=_bYP_;continue}
        break}}
    return 0}
  function to_list(a)
   {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
    for(;;)
     {if(0 <= i)
       {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
      return res}}
  function of_list(l)
   {if(l)
     {var tl=l[2],hd=l[1],accu=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],accu$0=accu + 1 | 0,accu=accu$0,param=param$0;
          continue}
        var a=caml_make_vect(accu,hd),i=1,param$1=tl;
        for(;;)
         {if(param$1)
           {var param$2=param$1[2],hd$0=param$1[1];
            a[1 + i] = hd$0;
            var i$0=i + 1 | 0,i=i$0,param$1=param$2;
            continue}
          return a}}}
    return [0]}
  function fold_left$1(f,x,a)
   {var r=[0,x],_bYL_=a.length - 1 - 1 | 0,_bYK_=0;
    if(! (_bYL_ < 0))
     {var i=_bYK_;
      for(;;)
       {r[1] = caml_call2(f,r[1],a[1 + i]);
        var _bYM_=i + 1 | 0;
        if(_bYL_ !== i){var i=_bYM_;continue}
        break}}
    return r[1]}
  function fold_right$0(f,a,x)
   {var r=[0,x],_bYI_=a.length - 1 - 1 | 0;
    if(! (_bYI_ < 0))
     {var i=_bYI_;
      for(;;)
       {r[1] = caml_call2(f,a[1 + i],r[1]);
        var _bYJ_=i - 1 | 0;
        if(0 !== i){var i=_bYJ_;continue}
        break}}
    return r[1]}
  var
   Bottom=[num_248,_W_,caml_fresh_oo_id(0)],
   min_int=num_2147483648,
   max_int=num_2147483647;
  function of_int32(n){return caml_format_int(_Y_,n)}
  var compare=caml_int_compare;
  function of_int64(n){return caml_int64_format(_$_,n)}
  function of_string_opt(s)
   {try
     {var _bYG_=[0,caml_int64_of_string(s)];return _bYG_}
    catch(_bYH_)
     {_bYH_ = caml_wrap_exception(_bYH_);
      if(_bYH_[1] === Failure)return 0;
      throw _bYH_}}
  function compare$0(x,y){return caml_int64_compare(x,y)}
  function engine(tbl,state,buf)
   {var
     result=caml_lex_engine(tbl,state,buf),
     _bYD_=0 <= result?1:0,
     _bYE_=_bYD_?buf[12] !== dummy_pos?1:0:_bYD_;
    if(_bYE_)
     {buf[11] = buf[12];
      var _bYF_=buf[12];
      buf[12] = [0,_bYF_[1],_bYF_[2],_bYF_[3],buf[4] + buf[6] | 0]}
    return result}
  function from_string(opt,s)
   {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
    var
     _bYs_=with_positions?zero_pos:dummy_pos,
     _bYt_=with_positions?zero_pos:dummy_pos,
     _bYu_=[0],
     _bYv_=1,
     _bYw_=0,
     _bYx_=0,
     _bYy_=0,
     _bYz_=0,
     _bYA_=0,
     _bYB_=caml_ml_string_length(s),
     _bYC_=to_bytes(s);
    return [0,
            function(lexbuf){lexbuf[9] = 1;return 0},
            _bYC_,
            _bYB_,
            _bYA_,
            _bYz_,
            _bYy_,
            _bYx_,
            _bYw_,
            _bYv_,
            _bYu_,
            _bYt_,
            _bYs_]}
  function sub_lexeme(lexbuf,i1,i2)
   {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
  var
   YYexit=[num_248,_aa_,caml_fresh_oo_id(0)],
   Parse_error=[num_248,_ab_,caml_fresh_oo_id(0)],
   env=
    [0,
     caml_make_vect(num_100,0),
     caml_make_vect(num_100,0),
     caml_make_vect(num_100,dummy_pos),
     caml_make_vect(num_100,dummy_pos),
     num_100,
     0,
     0,
     0,
     dummy_pos,
     dummy_pos,
     0,
     0,
     0,
     0,
     0,
     0];
  function grow_stacks(param)
   {var
     oldsize=env[5],
     newsize=oldsize * 2 | 0,
     new_s=caml_make_vect(newsize,0),
     new_v=caml_make_vect(newsize,0),
     new_start=caml_make_vect(newsize,dummy_pos),
     new_end=caml_make_vect(newsize,dummy_pos);
    blit$1(env[1],0,new_s,0,oldsize);
    env[1] = new_s;
    blit$1(env[2],0,new_v,0,oldsize);
    env[2] = new_v;
    blit$1(env[3],0,new_start,0,oldsize);
    env[3] = new_start;
    blit$1(env[4],0,new_end,0,oldsize);
    env[4] = new_end;
    env[5] = newsize;
    return 0}
  var current_lookahead_fun=[0,function(param){return 0}];
  function yyparse(tables,start,lexer,lexbuf)
   {var
     init_asp=env[11],
     init_sp=env[14],
     init_stackbase=env[6],
     init_state=env[15],
     init_curr_char=env[7],
     init_lval=env[8],
     init_errflag=env[16];
    env[6] = env[14] + 1 | 0;
    env[7] = start;
    env[10] = lexbuf[12];
    try
     {var cmd=0,arg=0;
      for(;;)
       {var match=caml_parse_engine(tables,env,cmd,arg);
        switch(match)
         {case 0:
           var arg$0=caml_call1(lexer,lexbuf);
           env[9] = lexbuf[11];
           env[10] = lexbuf[12];
           var cmd=1,arg=arg$0;
           continue;
          case 1:throw Parse_error;
          case 2:grow_stacks(0);var cmd=2,arg=0;continue;
          case 3:grow_stacks(0);var cmd=3,arg=0;continue;
          case 4:
           try
            {var
              _bYm_=env[13],
              _bYn_=
               caml_call1(caml_check_bound(tables[1],_bYm_)[1 + _bYm_],env),
              _bYo_=4,
              cmd$0=_bYo_,
              arg$1=_bYn_}
           catch(_bYr_)
            {_bYr_ = caml_wrap_exception(_bYr_);
             if(_bYr_ !== Parse_error)throw _bYr_;
             var cmd$0=5,arg$1=0,_bYp_=_bYr_}
           var cmd=cmd$0,arg=arg$1;
           continue;
          default:caml_call1(tables[14],_ac_);var cmd=5,arg=0;continue}}}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      var curr_char=env[7];
      env[11] = init_asp;
      env[14] = init_sp;
      env[6] = init_stackbase;
      env[15] = init_state;
      env[7] = init_curr_char;
      env[8] = init_lval;
      env[16] = init_errflag;
      if(exn[1] === YYexit){var v=exn[2];return v}
      current_lookahead_fun[1]
      =
      function(tok)
       {if(is_block(tok))
         {var _bYq_=caml_obj_tag(tok);
          return caml_check_bound(tables[3],_bYq_)[1 + _bYq_] === curr_char
                  ?1
                  :0}
        return caml_check_bound(tables[2],tok)[1 + tok] === curr_char?1:0};
      throw exn}}
  function peek_val(env,n)
   {var _bYl_=env[11] - n | 0;
    return caml_check_bound(env[2],_bYl_)[1 + _bYl_]}
  function parse_error(param){return 0}
  function _al_(Ord)
   {function height(param){if(param){var h=param[4];return h}return 0}
    function create(l,v,r)
     {if(l)var h=l[4],hl=h;else var hl=0;
      if(r)var h$0=r[4],hr=h$0;else var hr=0;
      var _bYk_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,v,r,_bYk_]}
    function bal(l,v,r)
     {if(l)var h=l[4],hl=h;else var hl=0;
      if(r)var h$0=r[4],hr=h$0;else var hr=0;
      if((hr + 2 | 0) < hl)
       {if(l)
         {var lr=l[3],lv=l[2],ll=l[1],_bYf_=height(lr);
          if(_bYf_ <= height(ll))return create(ll,lv,create(lr,v,r));
          if(lr)
           {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_bYg_=create(lrr,v,r);
            return create(create(ll,lv,lrl),lrv,_bYg_)}
          return invalid_arg(_ad_)}
        return invalid_arg(_ae_)}
      if((hl + 2 | 0) < hr)
       {if(r)
         {var rr=r[3],rv=r[2],rl=r[1],_bYh_=height(rl);
          if(_bYh_ <= height(rr))return create(create(l,v,rl),rv,rr);
          if(rl)
           {var rlr=rl[3],rlv=rl[2],rll=rl[1],_bYi_=create(rlr,rv,rr);
            return create(create(l,v,rll),rlv,_bYi_)}
          return invalid_arg(_af_)}
        return invalid_arg(_ag_)}
      var _bYj_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,v,r,_bYj_]}
    function add(x,t)
     {if(t)
       {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)return t;
        if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
        var ll=add(x,l);
        return l === ll?t:bal(ll,v,r)}
      return [0,0,x,0,1]}
    function singleton(x){return [0,0,x,0,1]}
    function add_min_element(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1];
        return bal(add_min_element(x,l),v,r)}
      return singleton(x)}
    function add_max_element(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1];
        return bal(l,v,add_max_element(x,r))}
      return singleton(x)}
    function join(l,v,r)
     {if(l)
       {if(r)
         {var rh=r[4],rr=r[3],rv=r[2],rl=r[1],lh=l[4],lr=l[3],lv=l[2],ll=l[1];
          return (rh + 2 | 0) < lh
                  ?bal(ll,lv,join(lr,v,r))
                  :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
        return add_max_element(v,l)}
      return add_min_element(v,r)}
    function min_elt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bYe_=param$0[1];
          if(_bYe_){var param$0=_bYe_;continue}
          var v=param$0[2];
          return v}
        throw Not_found}}
    function min_elt_opt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bYd_=param$0[1];
          if(_bYd_){var param$0=_bYd_;continue}
          var v=param$0[2];
          return [0,v]}
        return 0}}
    function max_elt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bYb_=param$0[3],_bYc_=param$0[2];
          if(_bYb_){var param$0=_bYb_;continue}
          return _bYc_}
        throw Not_found}}
    function max_elt_opt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bX$_=param$0[3],_bYa_=param$0[2];
          if(_bX$_){var param$0=_bX$_;continue}
          return [0,_bYa_]}
        return 0}}
    function remove_min_elt(param)
     {if(param)
       {var _bX__=param[1];
        if(_bX__)
         {var r=param[3],v=param[2];return bal(remove_min_elt(_bX__),v,r)}
        var r$0=param[3];
        return r$0}
      return invalid_arg(_ah_)}
    function concat(t,match)
     {if(t)
       {if(match)
         {var _bX9_=remove_min_elt(match);return join(t,min_elt(match),_bX9_)}
        return t}
      return match}
    function split(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)return [0,l,1,r];
        if(0 <= c)
         {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
          return [0,join(l,v,lr),pres,rr]}
        var match$0=split(x,l),rl=match$0[3],pres$0=match$0[2],ll=match$0[1];
        return [0,ll,pres$0,join(rl,v,r)]}
      return _ai_}
    var empty=0;
    function is_empty(param){return param?0:1}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[3],
           v=param$0[2],
           l=param$0[1],
           c=caml_call2(Ord[1],x,v),
           _bX8_=0 === c?1:0;
          if(_bX8_)return _bX8_;
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        return 0}}
    function remove(x,t)
     {if(t)
       {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)
         {if(l)
           {if(r){var _bX7_=remove_min_elt(r);return bal(l,min_elt(r),_bX7_)}
            return l}
          return r}
        if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
        var ll=remove(x,l);
        return l === ll?t:bal(ll,v,r)}
      return 0}
    function union(t1,match)
     {if(t1)
       {if(match)
         {var
           h2=match[4],
           r2=match[3],
           v2=match[2],
           l2=match[1],
           h1=t1[4],
           r1=t1[3],
           v1=t1[2],
           l1=t1[1];
          if(h2 <= h1)
           {if(1 === h2)return add(v2,t1);
            var
             match$0=split(v1,match),
             r2$0=match$0[3],
             l2$0=match$0[1],
             _bX5_=union(r1,r2$0);
            return join(union(l1,l2$0),v1,_bX5_)}
          if(1 === h1)return add(v1,match);
          var
           match$1=split(v2,t1),
           r1$0=match$1[3],
           l1$0=match$1[1],
           _bX6_=union(r1$0,r2);
          return join(union(l1$0,l2),v2,_bX6_)}
        return t1}
      return match}
    function inter(s1,match)
     {if(s1)
       {if(match)
         {var r1=s1[3],v1=s1[2],l1=s1[1],_bX1_=split(v1,match),_bX2_=_bX1_[1];
          if(0 === _bX1_[2])
           {var r2=_bX1_[3],_bX3_=inter(r1,r2);
            return concat(inter(l1,_bX2_),_bX3_)}
          var r2$0=_bX1_[3],_bX4_=inter(r1,r2$0);
          return join(inter(l1,_bX2_),v1,_bX4_)}
        return 0}
      return 0}
    function split_bis(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)return 0;
        if(0 <= c)
         {var match=split_bis(x,r);
          if(match){var rr=match[2],lr=match[1];return [0,join(l,v,lr),rr]}
          return 0}
        var match$0=split_bis(x,l);
        if(match$0)
         {var rl=match$0[2],ll=match$0[1];
          return [0,ll,function(param){return join(caml_call1(rl,0),v,r)}]}
        return 0}
      return [0,0,function(param){return 0}]}
    function disjoint(s1,s2)
     {var s1$0=s1,s2$0=s2;
      for(;;)
       {if(s1$0 && s2$0)
         {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
          if(s1$0 === s2$0)return 0;
          var match=split_bis(v1,s2$0);
          if(match)
           {var r2=match[2],l2=match[1],_bX0_=disjoint(l1,l2);
            if(_bX0_){var s2$1=caml_call1(r2,0),s1$0=r1,s2$0=s2$1;continue}
            return _bX0_}
          return 0}
        return 1}}
    function diff(t1,match)
     {if(t1)
       {if(match)
         {var r1=t1[3],v1=t1[2],l1=t1[1],_bXW_=split(v1,match),_bXX_=_bXW_[1];
          if(0 === _bXW_[2])
           {var r2=_bXW_[3],_bXY_=diff(r1,r2);
            return join(diff(l1,_bXX_),v1,_bXY_)}
          var r2$0=_bXW_[3],_bXZ_=diff(r1,r2$0);
          return concat(diff(l1,_bXX_),_bXZ_)}
        return t1}
      return 0}
    function cons_enum(s,e)
     {var s$0=s,e$0=e;
      for(;;)
       {if(s$0)
         {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
          continue}
        return e$0}}
    function compare(s1,s2)
     {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
      for(;;)
       {if(e1)
         {if(e2)
           {var
             e2$0=e2[3],
             r2=e2[2],
             v2=e2[1],
             e1$0=e1[3],
             r1=e1[2],
             v1=e1[1],
             c=caml_call2(Ord[1],v1,v2);
            if(0 === c)
             {var
               e2$1=cons_enum(r2,e2$0),
               e1$1=cons_enum(r1,e1$0),
               e1=e1$1,
               e2=e2$1;
              continue}
            return c}
          return 1}
        return e2?-1:0}}
    function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
    function subset(s1,s2)
     {var s1$0=s1,s2$0=s2;
      for(;;)
       {if(s1$0)
         {if(s2$0)
           {var
             r2=s2$0[3],
             v2=s2$0[2],
             l2=s2$0[1],
             r1=s1$0[3],
             v1=s1$0[2],
             l1=s1$0[1],
             c=caml_call2(Ord[1],v1,v2);
            if(0 === c)
             {var _bXT_=subset(l1,l2);
              if(_bXT_){var s1$0=r1,s2$0=r2;continue}
              return _bXT_}
            if(0 <= c)
             {var _bXU_=subset([0,0,v1,r1,0],r2);
              if(_bXU_){var s1$0=l1;continue}
              return _bXU_}
            var _bXV_=subset([0,l1,v1,0,0],l2);
            if(_bXV_){var s1$0=r1;continue}
            return _bXV_}
          return 0}
        return 1}}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[3],v=param$0[2],l=param$0[1];
          iter(f,l);
          caml_call1(f,v);
          var param$0=param$1;
          continue}
        return 0}}
    function fold(f,s,accu)
     {var s$0=s,accu$0=accu;
      for(;;)
       {if(s$0)
         {var
           s$1=s$0[3],
           v=s$0[2],
           l=s$0[1],
           accu$1=caml_call2(f,v,fold(f,l,accu$0)),
           s$0=s$1,
           accu$0=accu$1;
          continue}
        return accu$0}}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[3],v=param$0[2],l=param$0[1],_bXQ_=caml_call1(p,v);
          if(_bXQ_)
           {var _bXR_=for_all(p,l);
            if(_bXR_){var param$0=r;continue}
            var _bXS_=_bXR_}
          else
           var _bXS_=_bXQ_;
          return _bXS_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[3],v=param$0[2],l=param$0[1],_bXN_=caml_call1(p,v);
          if(_bXN_)
           var _bXO_=_bXN_;
          else
           {var _bXP_=exists(p,l);
            if(! _bXP_){var param$0=r;continue}
            var _bXO_=_bXP_}
          return _bXO_}
        return 0}}
    function filter(p,t)
     {if(t)
       {var
         r=t[3],
         v=t[2],
         l=t[1],
         l$0=filter(p,l),
         pv=caml_call1(p,v),
         r$0=filter(p,r);
        if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
        return concat(l$0,r$0)}
      return 0}
    function partition(p,param)
     {if(param)
       {var
         r=param[3],
         v=param[2],
         l=param[1],
         match=partition(p,l),
         lf=match[2],
         lt=match[1],
         pv=caml_call1(p,v),
         match$0=partition(p,r),
         rf=match$0[2],
         rt=match$0[1];
        if(pv){var _bXL_=concat(lf,rf);return [0,join(lt,v,rt),_bXL_]}
        var _bXM_=join(lf,v,rf);
        return [0,concat(lt,rt),_bXM_]}
      return _aj_}
    function cardinal(param)
     {if(param)
       {var r=param[3],l=param[1],_bXK_=cardinal(r);
        return (cardinal(l) + 1 | 0) + _bXK_ | 0}
      return 0}
    function elements_aux(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[3],
           v=param$0[2],
           param$1=param$0[1],
           accu$1=[0,v,elements_aux(accu$0,r)],
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function elements(s){return elements_aux(0,s)}
    function find(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[3],v=param$0[2],l=param$0[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return v;
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        throw Not_found}}
    function find_first(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,param=l$0;
            for(;;)
             {if(param)
               {var r=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,param=l;continue}
                var param=r;
                continue}
              return v0}}
          var param$1=r$0;
          continue}
        throw Not_found}}
    function find_first_opt(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,param=l$0;
            for(;;)
             {if(param)
               {var r=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,param=l;continue}
                var param=r;
                continue}
              return [0,v0]}}
          var param$1=r$0;
          continue}
        return 0}}
    function find_last(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,param=r$0;
            for(;;)
             {if(param)
               {var r=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,param=r;continue}
                var param=l;
                continue}
              return v0}}
          var param$1=l$0;
          continue}
        throw Not_found}}
    function find_last_opt(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,param=r$0;
            for(;;)
             {if(param)
               {var r=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,param=r;continue}
                var param=l;
                continue}
              return [0,v0]}}
          var param$1=l$0;
          continue}
        return 0}}
    function find_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[3],v=param$0[2],l=param$0[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,v];
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        return 0}}
    function map(f,t)
     {if(t)
       {var
         r=t[3],
         v=t[2],
         l=t[1],
         l$0=map(f,l),
         v$0=caml_call1(f,v),
         r$0=map(f,r);
        if(l === l$0 && v === v$0 && r === r$0)return t;
        var switch$0=0;
        if(0 !== l$0)
         {var _bXJ_=max_elt(l$0);
          if(0 <= caml_call2(Ord[1],_bXJ_,v$0))switch$0 = 1}
        if(! switch$0)
         {var switch$1=0;
          if(0 !== r$0)
           {var _bXI_=min_elt(r$0);
            if(0 <= caml_call2(Ord[1],v$0,_bXI_))switch$1 = 1}
          if(! switch$1)return join(l$0,v$0,r$0)}
        return union(l$0,add(v$0,r$0))}
      return 0}
    function of_list(l)
     {if(l)
       {var _bXp_=l[2],_bXq_=l[1];
        if(_bXp_)
         {var _bXr_=_bXp_[2],_bXs_=_bXp_[1];
          if(_bXr_)
           {var _bXt_=_bXr_[2],_bXu_=_bXr_[1];
            if(_bXt_)
             {var _bXv_=_bXt_[2],_bXw_=_bXt_[1];
              if(_bXv_)
               {if(_bXv_[2])
                 {var
                   _bXx_=Ord[1],
                   rev_sort=
                    function(n,l)
                     {if(2 === n)
                       {if(l)
                         {var _bXF_=l[2];
                          if(_bXF_)
                           {var x2=_bXF_[1],x1=l[1],c$0=caml_call2(_bXx_,x1,x2);
                            return 0 === c$0
                                    ?[0,x1,0]
                                    :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
                      else
                       if(3 === n && l)
                        {var _bXG_=l[2];
                         if(_bXG_)
                          {var _bXH_=_bXG_[2];
                           if(_bXH_)
                            {var
                              x3=_bXH_[1],
                              x2$0=_bXG_[1],
                              x1$0=l[1],
                              c$1=caml_call2(_bXx_,x1$0,x2$0);
                             if(0 === c$1)
                              {var c$2=caml_call2(_bXx_,x2$0,x3);
                               return 0 === c$2
                                       ?[0,x2$0,0]
                                       :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                             if(0 < c$1)
                              {var c$3=caml_call2(_bXx_,x2$0,x3);
                               if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                               if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                               var c$4=caml_call2(_bXx_,x1$0,x3);
                               return 0 === c$4
                                       ?[0,x1$0,[0,x2$0,0]]
                                       :0 < c$4
                                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                                         :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                             var c$5=caml_call2(_bXx_,x1$0,x3);
                             if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                             if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                             var c$6=caml_call2(_bXx_,x2$0,x3);
                             return 0 === c$6
                                     ?[0,x2$0,[0,x1$0,0]]
                                     :0 < c$6
                                       ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                                       :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
                      var
                       n1=n >> 1,
                       n2=n - n1 | 0,
                       l2$0=chop(n1,l),
                       l1$0=sort(n1,l),
                       l2$1=sort(n2,l2$0),
                       l1=l1$0,
                       l2=l2$1,
                       accu=0;
                      for(;;)
                       {if(l1)
                         {if(l2)
                           {var
                             t2=l2[2],
                             h2=l2[1],
                             t1=l1[2],
                             h1=l1[1],
                             c=caml_call2(_bXx_,h1,h2);
                            if(0 === c)
                             {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                            if(0 <= c)
                             {var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
                            var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
                            continue}
                          return rev_append(l1,accu)}
                        return rev_append(l2,accu)}},
                   sort=
                    function(n,l)
                     {if(2 === n)
                       {if(l)
                         {var _bXC_=l[2];
                          if(_bXC_)
                           {var x2=_bXC_[1],x1=l[1],c$0=caml_call2(_bXx_,x1,x2);
                            return 0 === c$0
                                    ?[0,x1,0]
                                    :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
                      else
                       if(3 === n && l)
                        {var _bXD_=l[2];
                         if(_bXD_)
                          {var _bXE_=_bXD_[2];
                           if(_bXE_)
                            {var
                              x3=_bXE_[1],
                              x2$0=_bXD_[1],
                              x1$0=l[1],
                              c$1=caml_call2(_bXx_,x1$0,x2$0);
                             if(0 === c$1)
                              {var c$2=caml_call2(_bXx_,x2$0,x3);
                               return 0 === c$2
                                       ?[0,x2$0,0]
                                       :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                             if(0 <= c$1)
                              {var c$3=caml_call2(_bXx_,x1$0,x3);
                               if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                               if(0 <= c$3)
                                {var c$4=caml_call2(_bXx_,x2$0,x3);
                                 return 0 === c$4
                                         ?[0,x2$0,[0,x1$0,0]]
                                         :0 <= c$4
                                           ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                                           :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                               return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                             var c$5=caml_call2(_bXx_,x2$0,x3);
                             if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                             if(0 <= c$5)
                              {var c$6=caml_call2(_bXx_,x1$0,x3);
                               return 0 === c$6
                                       ?[0,x1$0,[0,x2$0,0]]
                                       :0 <= c$6
                                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                                         :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                             return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
                      var
                       n1=n >> 1,
                       n2=n - n1 | 0,
                       l2$0=chop(n1,l),
                       l1$0=rev_sort(n1,l),
                       l2$1=rev_sort(n2,l2$0),
                       l1=l1$0,
                       l2=l2$1,
                       accu=0;
                      for(;;)
                       {if(l1)
                         {if(l2)
                           {var
                             t2=l2[2],
                             h2=l2[1],
                             t1=l1[2],
                             h1=l1[1],
                             c=caml_call2(_bXx_,h1,h2);
                            if(0 === c)
                             {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                            if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
                            var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
                            continue}
                          return rev_append(l1,accu)}
                        return rev_append(l2,accu)}},
                   len=length(l),
                   _bXy_=2 <= len?sort(len,l):l,
                   sub=
                    function(n,l)
                     {if(! (3 < n >>> 0))
                       switch(n)
                        {case 0:return [0,0,l];
                         case 1:
                          if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                          break;
                         case 2:
                          if(l)
                           {var _bXz_=l[2];
                            if(_bXz_)
                             {var l$4=_bXz_[2],x1=_bXz_[1],x0$0=l[1];
                              return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                          break;
                         default:
                          if(l)
                           {var _bXA_=l[2];
                            if(_bXA_)
                             {var _bXB_=_bXA_[2];
                              if(_bXB_)
                               {var l$5=_bXB_[2],x2=_bXB_[1],x1$0=_bXA_[1],x0$1=l[1];
                                return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                      var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                      if(l$0)
                       {var
                         l$1=l$0[2],
                         mid=l$0[1],
                         match$0=sub((n - nl | 0) - 1 | 0,l$1),
                         l$2=match$0[2],
                         right=match$0[1];
                        return [0,create(left,mid,right),l$2]}
                      throw [0,Assert_failure,_ak_]};
                  return sub(length(_bXy_),_bXy_)[1]}
                var x4=_bXv_[1];
                return add
                        (x4,add(_bXw_,add(_bXu_,add(_bXs_,singleton(_bXq_)))))}
              return add(_bXw_,add(_bXu_,add(_bXs_,singleton(_bXq_))))}
            return add(_bXu_,add(_bXs_,singleton(_bXq_)))}
          return add(_bXs_,singleton(_bXq_))}
        return singleton(_bXq_)}
      return empty}
    function add_seq(i,m)
     {return fold_left(function(s,x){return add(x,s)},m,i)}
    function of_seq(i){return add_seq(i,empty)}
    function seq_of_enum(c,param)
     {if(c)
       {var rest=c[3],t=c[2],x=c[1],_bXn_=cons_enum(t,rest);
        return [0,x,function(_bXo_){return seq_of_enum(_bXn_,_bXo_)}]}
      return 0}
    function to_seq(c)
     {var _bXl_=cons_enum(c,0);
      return function(_bXm_){return seq_of_enum(_bXl_,_bXm_)}}
    function to_seq_from(low,s)
     {var s$0=s,c=0;
      for(;;)
       {if(s$0)
         {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
          if(0 !== n)
           {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
            var s$0=r;
            continue}
          var _bXj_=[0,v,r,c]}
        else
         var _bXj_=c;
        return function(_bXk_){return seq_of_enum(_bXj_,_bXk_)}}}
    return [0,
            empty,
            is_empty,
            mem,
            add,
            singleton,
            remove,
            union,
            inter,
            disjoint,
            diff,
            compare,
            equal,
            subset,
            iter,
            map,
            fold,
            for_all,
            exists,
            filter,
            partition,
            cardinal,
            elements,
            min_elt,
            min_elt_opt,
            max_elt,
            max_elt_opt,
            min_elt,
            min_elt_opt,
            split,
            find,
            find_opt,
            find_first,
            find_first_opt,
            find_last,
            find_last_opt,
            of_list,
            to_seq_from,
            to_seq,
            add_seq,
            of_seq]}
  function _au_(Ord)
   {function height(param){if(param){var h=param[5];return h}return 0}
    function create(l,x,d,r)
     {var hl=height(l),hr=height(r),_bXi_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,x,d,r,_bXi_]}
    function singleton(x,d){return [0,0,x,d,0,1]}
    function bal(l,x,d,r)
     {if(l)var h=l[5],hl=h;else var hl=0;
      if(r)var h$0=r[5],hr=h$0;else var hr=0;
      if((hr + 2 | 0) < hl)
       {if(l)
         {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_bXd_=height(lr);
          if(_bXd_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
          if(lr)
           {var
             lrr=lr[4],
             lrd=lr[3],
             lrv=lr[2],
             lrl=lr[1],
             _bXe_=create(lrr,x,d,r);
            return create(create(ll,lv,ld,lrl),lrv,lrd,_bXe_)}
          return invalid_arg(_am_)}
        return invalid_arg(_an_)}
      if((hl + 2 | 0) < hr)
       {if(r)
         {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_bXf_=height(rl);
          if(_bXf_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
          if(rl)
           {var
             rlr=rl[4],
             rld=rl[3],
             rlv=rl[2],
             rll=rl[1],
             _bXg_=create(rlr,rv,rd,rr);
            return create(create(l,x,d,rll),rlv,rld,_bXg_)}
          return invalid_arg(_ao_)}
        return invalid_arg(_ap_)}
      var _bXh_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,x,d,r,_bXh_]}
    var empty=0;
    function is_empty(param){return param?0:1}
    function add(x,data,m)
     {if(m)
       {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)return d === data?m:[0,l,x,data,r,h];
        if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
        var ll=add(x,data,l);
        return l === ll?m:bal(ll,v,d,r)}
      return [0,0,x,data,0,1]}
    function find(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return d;
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        throw Not_found}}
    function find_first(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,d0=d$0,param=l$0;
            for(;;)
             {if(param)
               {var r=param[4],d=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                var param=r;
                continue}
              return [0,v0,d0]}}
          var param$1=r$0;
          continue}
        throw Not_found}}
    function find_first_opt(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,d0=d$0,param=l$0;
            for(;;)
             {if(param)
               {var r=param[4],d=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                var param=r;
                continue}
              return [0,[0,v0,d0]]}}
          var param$1=r$0;
          continue}
        return 0}}
    function find_last(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,d0=d$0,param=r$0;
            for(;;)
             {if(param)
               {var r=param[4],d=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                var param=l;
                continue}
              return [0,v0,d0]}}
          var param$1=l$0;
          continue}
        throw Not_found}}
    function find_last_opt(f,param$0)
     {var param$1=param$0;
      for(;;)
       {if(param$1)
         {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
          if(caml_call1(f,v$0))
           {var v0=v$0,d0=d$0,param=r$0;
            for(;;)
             {if(param)
               {var r=param[4],d=param[3],v=param[2],l=param[1];
                if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                var param=l;
                continue}
              return [0,[0,v0,d0]]}}
          var param$1=l$0;
          continue}
        return 0}}
    function find_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,d];
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        return 0}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           v=param$0[2],
           l=param$0[1],
           c=caml_call2(Ord[1],x,v),
           _bXc_=0 === c?1:0;
          if(_bXc_)return _bXc_;
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        return 0}}
    function min_binding(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bXb_=param$0[1];
          if(_bXb_){var param$0=_bXb_;continue}
          var d=param$0[3],v=param$0[2];
          return [0,v,d]}
        throw Not_found}}
    function min_binding_opt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bXa_=param$0[1];
          if(_bXa_){var param$0=_bXa_;continue}
          var d=param$0[3],v=param$0[2];
          return [0,[0,v,d]]}
        return 0}}
    function max_binding(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bW9_=param$0[4],_bW__=param$0[3],_bW$_=param$0[2];
          if(_bW9_){var param$0=_bW9_;continue}
          return [0,_bW$_,_bW__]}
        throw Not_found}}
    function max_binding_opt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _bW6_=param$0[4],_bW7_=param$0[3],_bW8_=param$0[2];
          if(_bW6_){var param$0=_bW6_;continue}
          return [0,[0,_bW8_,_bW7_]]}
        return 0}}
    function remove_min_binding(param)
     {if(param)
       {var _bW5_=param[1];
        if(_bW5_)
         {var r=param[4],d=param[3],v=param[2];
          return bal(remove_min_binding(_bW5_),v,d,r)}
        var r$0=param[4];
        return r$0}
      return invalid_arg(_aq_)}
    function _bWI_(t,match)
     {if(t)
       {if(match)
         {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
          return bal(t,x,d,remove_min_binding(match))}
        return t}
      return match}
    function remove(x,m)
     {if(m)
       {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)return _bWI_(l,r);
        if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
        var ll=remove(x,l);
        return l === ll?m:bal(ll,v,d,r)}
      return 0}
    function update(x,f,m)
     {if(m)
       {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
        if(0 === c)
         {var match=caml_call1(f,[0,d]);
          if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
          return _bWI_(l,r)}
        if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
        var ll=update(x,f,l);
        return l === ll?m:bal(ll,v,d,r)}
      var match$0=caml_call1(f,0);
      if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
          iter(f,l);
          caml_call2(f,v,d);
          var param$0=param$1;
          continue}
        return 0}}
    function map(f,param)
     {if(param)
       {var
         h=param[5],
         r=param[4],
         d=param[3],
         v=param[2],
         l=param[1],
         l$0=map(f,l),
         d$0=caml_call1(f,d),
         r$0=map(f,r);
        return [0,l$0,v,d$0,r$0,h]}
      return 0}
    function mapi(f,param)
     {if(param)
       {var
         h=param[5],
         r=param[4],
         d=param[3],
         v=param[2],
         l=param[1],
         l$0=mapi(f,l),
         d$0=caml_call2(f,v,d),
         r$0=mapi(f,r);
        return [0,l$0,v,d$0,r$0,h]}
      return 0}
    function fold(f,m,accu)
     {var m$0=m,accu$0=accu;
      for(;;)
       {if(m$0)
         {var
           m$1=m$0[4],
           d=m$0[3],
           v=m$0[2],
           l=m$0[1],
           accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
           m$0=m$1,
           accu$0=accu$1;
          continue}
        return accu$0}}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           _bW2_=caml_call2(p,v,d);
          if(_bW2_)
           {var _bW3_=for_all(p,l);
            if(_bW3_){var param$0=r;continue}
            var _bW4_=_bW3_}
          else
           var _bW4_=_bW2_;
          return _bW4_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           _bWZ_=caml_call2(p,v,d);
          if(_bWZ_)
           var _bW0_=_bWZ_;
          else
           {var _bW1_=exists(p,l);
            if(! _bW1_){var param$0=r;continue}
            var _bW0_=_bW1_}
          return _bW0_}
        return 0}}
    function add_min_binding(k,x,param)
     {if(param)
       {var r=param[4],d=param[3],v=param[2],l=param[1];
        return bal(add_min_binding(k,x,l),v,d,r)}
      return singleton(k,x)}
    function add_max_binding(k,x,param)
     {if(param)
       {var r=param[4],d=param[3],v=param[2],l=param[1];
        return bal(l,v,d,add_max_binding(k,x,r))}
      return singleton(k,x)}
    function join(l,v,d,r)
     {if(l)
       {if(r)
         {var
           rh=r[5],
           rr=r[4],
           rd=r[3],
           rv=r[2],
           rl=r[1],
           lh=l[5],
           lr=l[4],
           ld=l[3],
           lv=l[2],
           ll=l[1];
          return (rh + 2 | 0) < lh
                  ?bal(ll,lv,ld,join(lr,v,d,r))
                  :(lh + 2 | 0) < rh
                    ?bal(join(l,v,d,rl),rv,rd,rr)
                    :create(l,v,d,r)}
        return add_max_binding(v,d,l)}
      return add_min_binding(v,d,r)}
    function concat(t,match)
     {if(t)
       {if(match)
         {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
          return join(t,x,d,remove_min_binding(match))}
        return t}
      return match}
    function concat_or_join(t1,v,d,t2)
     {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
    function split(x,param)
     {if(param)
       {var
         r=param[4],
         d=param[3],
         v=param[2],
         l=param[1],
         c=caml_call2(Ord[1],x,v);
        if(0 === c)return [0,l,[0,d],r];
        if(0 <= c)
         {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
          return [0,join(l,v,d,lr),pres,rr]}
        var match$0=split(x,l),rl=match$0[3],pres$0=match$0[2],ll=match$0[1];
        return [0,ll,pres$0,join(rl,v,d,r)]}
      return _ar_}
    function merge(f,s1,s2)
     {if(s1)
       {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
        if(height(s2) <= h1)
         {var
           match=split(v1,s2),
           r2=match[3],
           d2=match[2],
           l2=match[1],
           _bWV_=merge(f,r1,r2),
           _bWW_=caml_call3(f,v1,[0,d1],d2);
          return concat_or_join(merge(f,l1,l2),v1,_bWW_,_bWV_)}}
      else
       if(! s2)return 0;
      if(s2)
       {var
         r2$0=s2[4],
         d2$0=s2[3],
         v2=s2[2],
         l2$0=s2[1],
         match$0=split(v2,s1),
         r1$0=match$0[3],
         d1$0=match$0[2],
         l1$0=match$0[1],
         _bWX_=merge(f,r1$0,r2$0),
         _bWY_=caml_call3(f,v2,d1$0,[0,d2$0]);
        return concat_or_join(merge(f,l1$0,l2$0),v2,_bWY_,_bWX_)}
      throw [0,Assert_failure,_as_]}
    function union(f,s1,s2)
     {if(s1)
       {if(s2)
         {var
           h2=s2[5],
           r2=s2[4],
           d2=s2[3],
           v2=s2[2],
           l2=s2[1],
           h1=s1[5],
           r1=s1[4],
           d1=s1[3],
           v1=s1[2],
           l1=s1[1];
          if(h2 <= h1)
           {var
             match=split(v1,s2),
             r2$0=match[3],
             d2$0=match[2],
             l2$0=match[1],
             l=union(f,l1,l2$0),
             r=union(f,r1,r2$0);
            if(d2$0)
             {var d2$1=d2$0[1];
              return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
            return join(l,v1,d1,r)}
          var
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           l$0=union(f,l1$0,l2),
           r$0=union(f,r1$0,r2);
          if(d1$0)
           {var d1$1=d1$0[1];
            return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
          return join(l$0,v2,d2,r$0)}
        var s=s1}
      else
       var s=s2;
      return s}
    function filter(p,m)
     {if(m)
       {var
         r=m[4],
         d=m[3],
         v=m[2],
         l=m[1],
         l$0=filter(p,l),
         pvd=caml_call2(p,v,d),
         r$0=filter(p,r);
        if(pvd){if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
        return concat(l$0,r$0)}
      return 0}
    function partition(p,param)
     {if(param)
       {var
         r=param[4],
         d=param[3],
         v=param[2],
         l=param[1],
         match=partition(p,l),
         lf=match[2],
         lt=match[1],
         pvd=caml_call2(p,v,d),
         match$0=partition(p,r),
         rf=match$0[2],
         rt=match$0[1];
        if(pvd){var _bWT_=concat(lf,rf);return [0,join(lt,v,d,rt),_bWT_]}
        var _bWU_=join(lf,v,d,rf);
        return [0,concat(lt,rt),_bWU_]}
      return _at_}
    function cons_enum(m,e)
     {var m$0=m,e$0=e;
      for(;;)
       {if(m$0)
         {var
           r=m$0[4],
           d=m$0[3],
           v=m$0[2],
           m$1=m$0[1],
           e$1=[0,v,d,r,e$0],
           m$0=m$1,
           e$0=e$1;
          continue}
        return e$0}}
    function compare(cmp,m1,m2)
     {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
      for(;;)
       {if(e1)
         {if(e2)
           {var
             e2$0=e2[4],
             r2=e2[3],
             d2=e2[2],
             v2=e2[1],
             e1$0=e1[4],
             r1=e1[3],
             d1=e1[2],
             v1=e1[1],
             c=caml_call2(Ord[1],v1,v2);
            if(0 === c)
             {var c$0=caml_call2(cmp,d1,d2);
              if(0 === c$0)
               {var
                 e2$1=cons_enum(r2,e2$0),
                 e1$1=cons_enum(r1,e1$0),
                 e1=e1$1,
                 e2=e2$1;
                continue}
              return c$0}
            return c}
          return 1}
        return e2?-1:0}}
    function equal(cmp,m1,m2)
     {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
      for(;;)
       {if(e1)
         {if(e2)
           {var
             e2$0=e2[4],
             r2=e2[3],
             d2=e2[2],
             v2=e2[1],
             e1$0=e1[4],
             r1=e1[3],
             d1=e1[2],
             v1=e1[1],
             _bWQ_=0 === caml_call2(Ord[1],v1,v2)?1:0;
            if(_bWQ_)
             {var _bWR_=caml_call2(cmp,d1,d2);
              if(_bWR_)
               {var
                 e2$1=cons_enum(r2,e2$0),
                 e1$1=cons_enum(r1,e1$0),
                 e1=e1$1,
                 e2=e2$1;
                continue}
              var _bWS_=_bWR_}
            else
             var _bWS_=_bWQ_;
            return _bWS_}
          return 0}
        return e2?0:1}}
    function cardinal(param)
     {if(param)
       {var r=param[4],l=param[1],_bWP_=cardinal(r);
        return (cardinal(l) + 1 | 0) + _bWP_ | 0}
      return 0}
    function bindings_aux(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           param$1=param$0[1],
           accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function bindings(s){return bindings_aux(0,s)}
    function add_seq(i,m)
     {return fold_left
              (function(m,param){var v=param[2],k=param[1];return add(k,v,m)},
               m,
               i)}
    function of_seq(i){return add_seq(i,empty)}
    function seq_of_enum(c,param)
     {if(c)
       {var rest=c[4],t=c[3],v=c[2],k=c[1],_bWN_=cons_enum(t,rest);
        return [0,[0,k,v],function(_bWO_){return seq_of_enum(_bWN_,_bWO_)}]}
      return 0}
    function to_seq(m)
     {var _bWL_=cons_enum(m,0);
      return function(_bWM_){return seq_of_enum(_bWL_,_bWM_)}}
    function to_seq_from(low,m)
     {var m$0=m,c=0;
      for(;;)
       {if(m$0)
         {var r=m$0[4],d=m$0[3],v=m$0[2],l=m$0[1],n=caml_call2(Ord[1],v,low);
          if(0 !== n)
           {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
            var m$0=r;
            continue}
          var _bWJ_=[0,v,d,r,c]}
        else
         var _bWJ_=c;
        return function(_bWK_){return seq_of_enum(_bWJ_,_bWK_)}}}
    return [0,
            empty,
            is_empty,
            mem,
            add,
            update,
            singleton,
            remove,
            merge,
            union,
            compare,
            equal,
            iter,
            fold,
            for_all,
            exists,
            filter,
            partition,
            cardinal,
            bindings,
            min_binding,
            min_binding_opt,
            max_binding,
            max_binding_opt,
            min_binding,
            min_binding_opt,
            split,
            find,
            find_opt,
            find_first,
            find_first_opt,
            find_last,
            find_last_opt,
            map,
            mapi,
            to_seq,
            to_seq_from,
            add_seq,
            of_seq]}
  var Empty=[num_248,_av_,caml_fresh_oo_id(0)];
  function create(param){return [0,0,0]}
  function clear(s){s[1] = 0;s[2] = 0;return 0}
  function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
  function pop_opt(s)
   {var _bWH_=s[1];
    if(_bWH_)
     {var tl=_bWH_[2],hd=_bWH_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
    return 0}
  function top_opt(s)
   {var _bWG_=s[1];if(_bWG_){var hd=_bWG_[1];return [0,hd]}return 0}
  var Empty$0=[num_248,_aw_,caml_fresh_oo_id(0)];
  function create$0(param){return [0,0,0,0]}
  function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
  function add(x,q)
   {var cell=[0,x,0],_bWF_=q[3];
    return _bWF_
            ?(q[1] = q[1] + 1 | 0,_bWF_[2] = cell,q[3] = cell,0)
            :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
  function take(q)
   {var _bWC_=q[2];
    if(_bWC_)
     {var _bWD_=_bWC_[1],_bWE_=_bWC_[2];
      return _bWE_?(q[1] = q[1] - 1 | 0,q[2] = _bWE_,_bWD_):(clear$0(q),_bWD_)}
    throw Empty$0}
  var Undefined=[num_248,_ax_,caml_fresh_oo_id(0)];
  function raise_undefined(param){throw Undefined}
  function force_lazy_block(blk)
   {var closure=blk[1];
    blk[1] = raise_undefined;
    try
     {var result=caml_call1(closure,0);
      caml_obj_make_forward(blk,result);
      return result}
    catch(e)
     {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
  function from_fun(f){var x=caml_obj_block(num_246,1);x[1] = f;return x}
  function from_val(v)
   {var t=caml_obj_tag(v);
    if(t !== num_250 && t !== num_246 && t !== num_253)return v;
    return caml_lazy_make_forward(v)}
  var
   Failure$0=[num_248,_ay_,caml_fresh_oo_id(0)],
   Error$0=[num_248,_az_,caml_fresh_oo_id(0)];
  function create$1(n)
   {var
     n$0=1 <= n?n:1,
     n$1=max_string_length < n$0?max_string_length:n$0,
     s=caml_create_bytes(n$1);
    return [0,s,0,n$1,s]}
  function contents(b){return sub_string(b[1],0,b[2])}
  function clear$1(b){b[2] = 0;return 0}
  function reset(b)
   {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
  function resize(b,more)
   {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
    for(;;)
     {if(new_len[1] < (old_pos + more | 0))
       {new_len[1] = 2 * new_len[1] | 0;continue}
      if(max_string_length < new_len[1])
       if((old_pos + more | 0) <= max_string_length)
        new_len[1] = max_string_length;
       else
        failwith(_aD_);
      var new_buffer=caml_create_bytes(new_len[1]);
      blit(b[1],0,new_buffer,0,b[2]);
      b[1] = new_buffer;
      b[3] = new_len[1];
      if((b[2] + more | 0) <= b[3])
       {if((old_pos + more | 0) <= b[3])return 0;
        throw [0,Assert_failure,_aB_]}
      throw [0,Assert_failure,_aC_]}}
  function add_char(b,c)
   {var pos=b[2];
    if(b[3] <= pos)resize(b,1);
    caml_bytes_unsafe_set(b[1],pos,c);
    b[2] = pos + 1 | 0;
    return 0}
  function add_substring(b,s,offset,len)
   {var _bWz_=offset < 0?1:0;
    if(_bWz_)
     var _bWA_=_bWz_;
    else
     var
      _bWB_=len < 0?1:0,
      _bWA_=_bWB_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
    if(_bWA_)invalid_arg(_aE_);
    var new_position=b[2] + len | 0;
    if(b[3] < new_position)resize(b,len);
    caml_blit_string(s,offset,b[1],b[2],len);
    b[2] = new_position;
    return 0}
  function add_string(b,s)
   {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
    if(b[3] < new_position)resize(b,len);
    caml_blit_string(s,0,b[1],b[2],len);
    b[2] = new_position;
    return 0}
  function create_char_set(param){return make(32,0)}
  function add_in_char_set(char_set,c)
   {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
    return caml_bytes_set
            (char_set,
             str_ind,
             char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
  function pad_of_pad_opt(pad_opt)
   {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
  function param_format_of_ignored_format(ign,fmt)
   {if(typeof ign === "number")
     switch(ign)
      {case 0:return [0,[0,fmt]];
       case 1:return [0,[1,fmt]];
       case 2:return [0,[19,fmt]];
       default:return [0,[22,fmt]]}
    else
     switch(ign[0])
      {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
       case 1:
        var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
       case 2:
        var pad_opt$1=ign[2],iconv=ign[1];
        return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
       case 3:
        var pad_opt$2=ign[2],iconv$0=ign[1];
        return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
       case 4:
        var pad_opt$3=ign[2],iconv$1=ign[1];
        return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
       case 5:
        var pad_opt$4=ign[2],iconv$2=ign[1];
        return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
       case 6:
        var prec_opt=ign[2],pad_opt$5=ign[1];
        if(prec_opt)var ndec=prec_opt[1],_bWy_=[0,ndec];else var _bWy_=0;
        return [0,[8,_aF_,pad_of_pad_opt(pad_opt$5),_bWy_,fmt]];
       case 7:
        var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
       case 8:
        var fmtty=ign[2],pad_opt$7=ign[1];return [0,[13,pad_opt$7,fmtty,fmt]];
       case 9:
        var fmtty$0=ign[2],pad_opt$8=ign[1];
        return [0,[14,pad_opt$8,fmtty$0,fmt]];
       case 10:
        var char_set=ign[2],width_opt=ign[1];
        return [0,[20,width_opt,char_set,fmt]];
       default:var counter=ign[1];return [0,[21,counter,fmt]]}}
  function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
  function buffer_create(init_size){return [0,0,caml_create_bytes(init_size)]}
  function buffer_check_size(buf,overhead)
   {var
     len=caml_ml_bytes_length(buf[2]),
     min_len=buf[1] + overhead | 0,
     _bWw_=len < min_len?1:0;
    if(_bWw_)
     {var new_len=max(len * 2 | 0,min_len),new_str=caml_create_bytes(new_len);
      blit(buf[2],0,new_str,0,len);
      buf[2] = new_str;
      var _bWx_=0}
    else
     var _bWx_=_bWw_;
    return _bWx_}
  function buffer_add_char(buf,c)
   {buffer_check_size(buf,1);
    caml_bytes_set(buf[2],buf[1],c);
    buf[1] = buf[1] + 1 | 0;
    return 0}
  function buffer_add_string(buf,s)
   {var str_len=caml_ml_string_length(s);
    buffer_check_size(buf,str_len);
    blit$0(s,0,buf[2],buf[1],str_len);
    buf[1] = buf[1] + str_len | 0;
    return 0}
  function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
  function char_of_iconv(iconv)
   {switch(iconv)
     {case 6:
      case 7:return num_120;
      case 8:
      case 9:return 88;
      case 10:
      case 11:return num_111;
      case 12:
      case 15:return num_117;
      case 0:
      case 1:
      case 2:
      case 13:return num_100;
      default:return num_105}}
  function string_of_formatting_lit(formatting_lit)
   {if(typeof formatting_lit === "number")
     switch(formatting_lit)
      {case 0:return _aG_;
       case 1:return _aH_;
       case 2:return _aI_;
       case 3:return _aJ_;
       case 4:return _aK_;
       case 5:return _aL_;
       default:return _aM_}
    else
     switch(formatting_lit[0])
      {case 0:var str=formatting_lit[1];return str;
       case 1:var str$0=formatting_lit[1];return str$0;
       default:var c=formatting_lit[1];return symbol(_aN_,make$0(1,c))}}
  function bprint_fmtty(buf,fmtty)
   {var fmtty$0=fmtty;
    for(;;)
     if(typeof fmtty$0 === "number")
      return 0;
     else
      switch(fmtty$0[0])
       {case 0:
         var fmtty$1=fmtty$0[1];
         buffer_add_string(buf,_aO_);
         var fmtty$0=fmtty$1;
         continue;
        case 1:
         var fmtty$2=fmtty$0[1];
         buffer_add_string(buf,_aP_);
         var fmtty$0=fmtty$2;
         continue;
        case 2:
         var fmtty$3=fmtty$0[1];
         buffer_add_string(buf,_aQ_);
         var fmtty$0=fmtty$3;
         continue;
        case 3:
         var fmtty$4=fmtty$0[1];
         buffer_add_string(buf,_aR_);
         var fmtty$0=fmtty$4;
         continue;
        case 4:
         var fmtty$5=fmtty$0[1];
         buffer_add_string(buf,_aS_);
         var fmtty$0=fmtty$5;
         continue;
        case 5:
         var fmtty$6=fmtty$0[1];
         buffer_add_string(buf,_aT_);
         var fmtty$0=fmtty$6;
         continue;
        case 6:
         var fmtty$7=fmtty$0[1];
         buffer_add_string(buf,_aU_);
         var fmtty$0=fmtty$7;
         continue;
        case 7:
         var fmtty$8=fmtty$0[1];
         buffer_add_string(buf,_aV_);
         var fmtty$0=fmtty$8;
         continue;
        case 8:
         var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
         buffer_add_string(buf,_aW_);
         bprint_fmtty(buf,sub_fmtty);
         buffer_add_string(buf,_aX_);
         var fmtty$0=fmtty$9;
         continue;
        case 9:
         var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
         buffer_add_string(buf,_aY_);
         bprint_fmtty(buf,sub_fmtty$0);
         buffer_add_string(buf,_aZ_);
         var fmtty$0=fmtty$10;
         continue;
        case 10:
         var fmtty$11=fmtty$0[1];
         buffer_add_string(buf,_a0_);
         var fmtty$0=fmtty$11;
         continue;
        case 11:
         var fmtty$12=fmtty$0[1];
         buffer_add_string(buf,_a1_);
         var fmtty$0=fmtty$12;
         continue;
        case 12:
         var fmtty$13=fmtty$0[1];
         buffer_add_string(buf,_a2_);
         var fmtty$0=fmtty$13;
         continue;
        case 13:
         var fmtty$14=fmtty$0[1];
         buffer_add_string(buf,_a3_);
         var fmtty$0=fmtty$14;
         continue;
        default:
         var fmtty$15=fmtty$0[1];
         buffer_add_string(buf,_a4_);
         var fmtty$0=fmtty$15;
         continue}}
  function symm(param)
   {if(typeof param === "number")
     return 0;
    else
     switch(param[0])
      {case 0:var rest=param[1];return [0,symm(rest)];
       case 1:var rest$0=param[1];return [1,symm(rest$0)];
       case 2:var rest$1=param[1];return [2,symm(rest$1)];
       case 3:var rest$2=param[1];return [3,symm(rest$2)];
       case 4:var rest$3=param[1];return [4,symm(rest$3)];
       case 5:var rest$4=param[1];return [5,symm(rest$4)];
       case 6:var rest$5=param[1];return [6,symm(rest$5)];
       case 7:var rest$6=param[1];return [7,symm(rest$6)];
       case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
       case 9:
        var rest$8=param[3],ty2=param[2],ty1=param[1];
        return [9,ty2,ty1,symm(rest$8)];
       case 10:var rest$9=param[1];return [10,symm(rest$9)];
       case 11:var rest$10=param[1];return [11,symm(rest$10)];
       case 12:var rest$11=param[1];return [12,symm(rest$11)];
       case 13:var rest$12=param[1];return [13,symm(rest$12)];
       default:var rest$13=param[1];return [14,symm(rest$13)]}}
  function fmtty_rel_det(param)
   {if(typeof param === "number")
     {var
       _bV__=function(param){return 0},
       _bV$_=function(param){return 0},
       _bWa_=function(param){return 0};
      return [0,function(param){return 0},_bWa_,_bV$_,_bV__]}
    else
     switch(param[0])
      {case 0:
        var
         rest=param[1],
         match=fmtty_rel_det(rest),
         de=match[4],
         ed=match[3],
         af=match[2],
         fa=match[1],
         _bWb_=function(param){caml_call1(af,0);return 0};
        return [0,function(param){caml_call1(fa,0);return 0},_bWb_,ed,de];
       case 1:
        var
         rest$0=param[1],
         match$0=fmtty_rel_det(rest$0),
         de$0=match$0[4],
         ed$0=match$0[3],
         af$0=match$0[2],
         fa$0=match$0[1],
         _bWc_=function(param){caml_call1(af$0,0);return 0};
        return [0,
                function(param){caml_call1(fa$0,0);return 0},
                _bWc_,
                ed$0,
                de$0];
       case 2:
        var
         rest$1=param[1],
         match$1=fmtty_rel_det(rest$1),
         de$1=match$1[4],
         ed$1=match$1[3],
         af$1=match$1[2],
         fa$1=match$1[1],
         _bWd_=function(param){caml_call1(af$1,0);return 0};
        return [0,
                function(param){caml_call1(fa$1,0);return 0},
                _bWd_,
                ed$1,
                de$1];
       case 3:
        var
         rest$2=param[1],
         match$2=fmtty_rel_det(rest$2),
         de$2=match$2[4],
         ed$2=match$2[3],
         af$2=match$2[2],
         fa$2=match$2[1],
         _bWe_=function(param){caml_call1(af$2,0);return 0};
        return [0,
                function(param){caml_call1(fa$2,0);return 0},
                _bWe_,
                ed$2,
                de$2];
       case 4:
        var
         rest$3=param[1],
         match$3=fmtty_rel_det(rest$3),
         de$3=match$3[4],
         ed$3=match$3[3],
         af$3=match$3[2],
         fa$3=match$3[1],
         _bWf_=function(param){caml_call1(af$3,0);return 0};
        return [0,
                function(param){caml_call1(fa$3,0);return 0},
                _bWf_,
                ed$3,
                de$3];
       case 5:
        var
         rest$4=param[1],
         match$4=fmtty_rel_det(rest$4),
         de$4=match$4[4],
         ed$4=match$4[3],
         af$4=match$4[2],
         fa$4=match$4[1],
         _bWg_=function(param){caml_call1(af$4,0);return 0};
        return [0,
                function(param){caml_call1(fa$4,0);return 0},
                _bWg_,
                ed$4,
                de$4];
       case 6:
        var
         rest$5=param[1],
         match$5=fmtty_rel_det(rest$5),
         de$5=match$5[4],
         ed$5=match$5[3],
         af$5=match$5[2],
         fa$5=match$5[1],
         _bWh_=function(param){caml_call1(af$5,0);return 0};
        return [0,
                function(param){caml_call1(fa$5,0);return 0},
                _bWh_,
                ed$5,
                de$5];
       case 7:
        var
         rest$6=param[1],
         match$6=fmtty_rel_det(rest$6),
         de$6=match$6[4],
         ed$6=match$6[3],
         af$6=match$6[2],
         fa$6=match$6[1],
         _bWi_=function(param){caml_call1(af$6,0);return 0};
        return [0,
                function(param){caml_call1(fa$6,0);return 0},
                _bWi_,
                ed$6,
                de$6];
       case 8:
        var
         rest$7=param[2],
         match$7=fmtty_rel_det(rest$7),
         de$7=match$7[4],
         ed$7=match$7[3],
         af$7=match$7[2],
         fa$7=match$7[1],
         _bWj_=function(param){caml_call1(af$7,0);return 0};
        return [0,
                function(param){caml_call1(fa$7,0);return 0},
                _bWj_,
                ed$7,
                de$7];
       case 9:
        var
         rest$8=param[3],
         ty2=param[2],
         ty1=param[1],
         match$8=fmtty_rel_det(rest$8),
         de$8=match$8[4],
         ed$8=match$8[3],
         af$8=match$8[2],
         fa$8=match$8[1],
         ty=trans(symm(ty1),ty2),
         match$9=fmtty_rel_det(ty),
         jd=match$9[4],
         dj=match$9[3],
         ga=match$9[2],
         ag=match$9[1],
         _bWk_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
         _bWl_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
         _bWm_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
        return [0,
                function(param){caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                _bWm_,
                _bWl_,
                _bWk_];
       case 10:
        var
         rest$9=param[1],
         match$10=fmtty_rel_det(rest$9),
         de$9=match$10[4],
         ed$9=match$10[3],
         af$9=match$10[2],
         fa$9=match$10[1],
         _bWn_=function(param){caml_call1(af$9,0);return 0};
        return [0,
                function(param){caml_call1(fa$9,0);return 0},
                _bWn_,
                ed$9,
                de$9];
       case 11:
        var
         rest$10=param[1],
         match$11=fmtty_rel_det(rest$10),
         de$10=match$11[4],
         ed$10=match$11[3],
         af$10=match$11[2],
         fa$10=match$11[1],
         _bWo_=function(param){caml_call1(af$10,0);return 0};
        return [0,
                function(param){caml_call1(fa$10,0);return 0},
                _bWo_,
                ed$10,
                de$10];
       case 12:
        var
         rest$11=param[1],
         match$12=fmtty_rel_det(rest$11),
         de$11=match$12[4],
         ed$11=match$12[3],
         af$11=match$12[2],
         fa$11=match$12[1],
         _bWp_=function(param){caml_call1(af$11,0);return 0};
        return [0,
                function(param){caml_call1(fa$11,0);return 0},
                _bWp_,
                ed$11,
                de$11];
       case 13:
        var
         rest$12=param[1],
         match$13=fmtty_rel_det(rest$12),
         de$12=match$13[4],
         ed$12=match$13[3],
         af$12=match$13[2],
         fa$12=match$13[1],
         _bWq_=function(param){caml_call1(de$12,0);return 0},
         _bWr_=function(param){caml_call1(ed$12,0);return 0},
         _bWs_=function(param){caml_call1(af$12,0);return 0};
        return [0,
                function(param){caml_call1(fa$12,0);return 0},
                _bWs_,
                _bWr_,
                _bWq_];
       default:
        var
         rest$13=param[1],
         match$14=fmtty_rel_det(rest$13),
         de$13=match$14[4],
         ed$13=match$14[3],
         af$13=match$14[2],
         fa$13=match$14[1],
         _bWt_=function(param){caml_call1(de$13,0);return 0},
         _bWu_=function(param){caml_call1(ed$13,0);return 0},
         _bWv_=function(param){caml_call1(af$13,0);return 0};
        return [0,
                function(param){caml_call1(fa$13,0);return 0},
                _bWv_,
                _bWu_,
                _bWt_]}}
  function trans(ty1,match)
   {var switch$0=0;
    if(typeof ty1 === "number")
     if(typeof match === "number")
      return 0;
     else
      switch(match[0])
       {case 10:break;
        case 11:switch$0 = 1;break;
        case 12:switch$0 = 2;break;
        case 13:switch$0 = 3;break;
        case 14:switch$0 = 4;break;
        case 8:switch$0 = 5;break;
        case 9:switch$0 = 6;break;
        default:throw [0,Assert_failure,_a5_]}
    else
     switch(ty1[0])
      {case 0:
        var switch$1=0,_bVR_=ty1[1];
        if(typeof match !== "number")
         switch(match[0])
          {case 0:var rest2=match[1];return [0,trans(_bVR_,rest2)];
           case 8:switch$0 = 5;switch$1 = 1;break;
           case 9:switch$0 = 6;switch$1 = 1;break;
           case 10:switch$1 = 1;break;
           case 11:switch$0 = 1;switch$1 = 1;break;
           case 12:switch$0 = 2;switch$1 = 1;break;
           case 13:switch$0 = 3;switch$1 = 1;break;
           case 14:switch$0 = 4;switch$1 = 1;break
           }
        if(! switch$1)switch$0 = 7;
        break;
       case 1:
        var switch$2=0,_bVS_=ty1[1];
        if(typeof match !== "number")
         switch(match[0])
          {case 1:var rest2$0=match[1];return [1,trans(_bVS_,rest2$0)];
           case 8:switch$0 = 5;switch$2 = 1;break;
           case 9:switch$0 = 6;switch$2 = 1;break;
           case 10:switch$2 = 1;break;
           case 11:switch$0 = 1;switch$2 = 1;break;
           case 12:switch$0 = 2;switch$2 = 1;break;
           case 13:switch$0 = 3;switch$2 = 1;break;
           case 14:switch$0 = 4;switch$2 = 1;break
           }
        if(! switch$2)switch$0 = 7;
        break;
       case 2:
        var switch$3=0,_bVT_=ty1[1];
        if(typeof match === "number")
         switch$3 = 1;
        else
         switch(match[0])
          {case 2:var rest2$1=match[1];return [2,trans(_bVT_,rest2$1)];
           case 8:switch$0 = 5;break;
           case 9:switch$0 = 6;break;
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$3 = 1}
        if(switch$3)switch$0 = 7;
        break;
       case 3:
        var switch$4=0,_bVU_=ty1[1];
        if(typeof match === "number")
         switch$4 = 1;
        else
         switch(match[0])
          {case 3:var rest2$2=match[1];return [3,trans(_bVU_,rest2$2)];
           case 8:switch$0 = 5;break;
           case 9:switch$0 = 6;break;
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$4 = 1}
        if(switch$4)switch$0 = 7;
        break;
       case 4:
        var switch$5=0,_bVV_=ty1[1];
        if(typeof match === "number")
         switch$5 = 1;
        else
         switch(match[0])
          {case 4:var rest2$3=match[1];return [4,trans(_bVV_,rest2$3)];
           case 8:switch$0 = 5;break;
           case 9:switch$0 = 6;break;
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$5 = 1}
        if(switch$5)switch$0 = 7;
        break;
       case 5:
        var switch$6=0,_bVW_=ty1[1];
        if(typeof match === "number")
         switch$6 = 1;
        else
         switch(match[0])
          {case 5:var rest2$4=match[1];return [5,trans(_bVW_,rest2$4)];
           case 8:switch$0 = 5;break;
           case 9:switch$0 = 6;break;
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$6 = 1}
        if(switch$6)switch$0 = 7;
        break;
       case 6:
        var switch$7=0,_bVX_=ty1[1];
        if(typeof match === "number")
         switch$7 = 1;
        else
         switch(match[0])
          {case 6:var rest2$5=match[1];return [6,trans(_bVX_,rest2$5)];
           case 8:switch$0 = 5;break;
           case 9:switch$0 = 6;break;
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$7 = 1}
        if(switch$7)switch$0 = 7;
        break;
       case 7:
        var switch$8=0,_bVY_=ty1[1];
        if(typeof match === "number")
         switch$8 = 1;
        else
         switch(match[0])
          {case 7:var rest2$6=match[1];return [7,trans(_bVY_,rest2$6)];
           case 8:switch$0 = 5;break;
           case 9:switch$0 = 6;break;
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$8 = 1}
        if(switch$8)switch$0 = 7;
        break;
       case 8:
        var switch$9=0,_bVZ_=ty1[2],_bV0_=ty1[1];
        if(typeof match === "number")
         switch$9 = 1;
        else
         switch(match[0])
          {case 8:
            var rest2$7=match[2],ty2=match[1],_bV1_=trans(_bVZ_,rest2$7);
            return [8,trans(_bV0_,ty2),_bV1_];
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$9 = 1}
        if(switch$9)throw [0,Assert_failure,_bc_];
        break;
       case 9:
        var switch$10=0,_bV2_=ty1[3],_bV3_=ty1[2],_bV4_=ty1[1];
        if(typeof match === "number")
         switch$10 = 1;
        else
         switch(match[0])
          {case 8:switch$0 = 5;break;
           case 9:
            var
             rest2$8=match[3],
             ty22=match[2],
             ty21=match[1],
             ty=trans(symm(_bV3_),ty21),
             match$0=fmtty_rel_det(ty),
             f4=match$0[4],
             f2=match$0[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            return [9,_bV4_,ty22,trans(_bV2_,rest2$8)];
           case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:switch$0 = 4;break;
           default:switch$10 = 1}
        if(switch$10)throw [0,Assert_failure,_bd_];
        break;
       case 10:
        var _bV5_=ty1[1];
        if(typeof match !== "number" && 10 === match[0])
         {var rest2$9=match[1];return [10,trans(_bV5_,rest2$9)]}
        throw [0,Assert_failure,_be_];
       case 11:
        var switch$11=0,_bV6_=ty1[1];
        if(typeof match === "number")
         switch$11 = 1;
        else
         switch(match[0])
          {case 10:break;
           case 11:var rest2$10=match[1];return [11,trans(_bV6_,rest2$10)];
           default:switch$11 = 1}
        if(switch$11)throw [0,Assert_failure,_bf_];
        break;
       case 12:
        var switch$12=0,_bV7_=ty1[1];
        if(typeof match === "number")
         switch$12 = 1;
        else
         switch(match[0])
          {case 10:break;
           case 11:switch$0 = 1;break;
           case 12:var rest2$11=match[1];return [12,trans(_bV7_,rest2$11)];
           default:switch$12 = 1}
        if(switch$12)throw [0,Assert_failure,_bg_];
        break;
       case 13:
        var switch$13=0,_bV8_=ty1[1];
        if(typeof match === "number")
         switch$13 = 1;
        else
         switch(match[0])
          {case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:var rest2$12=match[1];return [13,trans(_bV8_,rest2$12)];
           default:switch$13 = 1}
        if(switch$13)throw [0,Assert_failure,_bh_];
        break;
       default:
        var switch$14=0,_bV9_=ty1[1];
        if(typeof match === "number")
         switch$14 = 1;
        else
         switch(match[0])
          {case 10:break;
           case 11:switch$0 = 1;break;
           case 12:switch$0 = 2;break;
           case 13:switch$0 = 3;break;
           case 14:var rest2$13=match[1];return [14,trans(_bV9_,rest2$13)];
           default:switch$14 = 1}
        if(switch$14)throw [0,Assert_failure,_bi_]}
    switch(switch$0)
     {case 0:throw [0,Assert_failure,_a8_];
      case 1:throw [0,Assert_failure,_a9_];
      case 2:throw [0,Assert_failure,_a__];
      case 3:throw [0,Assert_failure,_a$_];
      case 4:throw [0,Assert_failure,_ba_];
      case 5:throw [0,Assert_failure,_a6_];
      case 6:throw [0,Assert_failure,_a7_];
      default:throw [0,Assert_failure,_bb_]}}
  function fmtty_of_precision_fmtty(prec,fmtty)
   {return typeof prec === "number"?0 === prec?fmtty:[2,fmtty]:fmtty}
  function fmtty_of_padding_fmtty(pad,fmtty)
   {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
  function fmtty_of_custom(arity,fmtty)
   {if(arity){var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
    return fmtty}
  function fmtty_of_fmt(fmtty)
   {var fmtty$0=fmtty;
    for(;;)
     if(typeof fmtty$0 === "number")
      return 0;
     else
      switch(fmtty$0[0])
       {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
        case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
        case 2:
         var rest$1=fmtty$0[2],pad=fmtty$0[1];
         return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
        case 3:
         var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
         return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
        case 4:
         var
          rest$3=fmtty$0[4],
          prec=fmtty$0[3],
          pad$1=fmtty$0[2],
          ty_rest=fmtty_of_fmt(rest$3),
          prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
         return fmtty_of_padding_fmtty(pad$1,prec_ty);
        case 5:
         var
          rest$4=fmtty$0[4],
          prec$0=fmtty$0[3],
          pad$2=fmtty$0[2],
          ty_rest$0=fmtty_of_fmt(rest$4),
          prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
         return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
        case 6:
         var
          rest$5=fmtty$0[4],
          prec$1=fmtty$0[3],
          pad$3=fmtty$0[2],
          ty_rest$1=fmtty_of_fmt(rest$5),
          prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
         return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
        case 7:
         var
          rest$6=fmtty$0[4],
          prec$2=fmtty$0[3],
          pad$4=fmtty$0[2],
          ty_rest$2=fmtty_of_fmt(rest$6),
          prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
         return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
        case 8:
         var
          rest$7=fmtty$0[4],
          prec$3=fmtty$0[3],
          pad$5=fmtty$0[2],
          ty_rest$3=fmtty_of_fmt(rest$7),
          prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
         return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
        case 9:
         var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
         return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
        case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
        case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
        case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
        case 13:
         var rest$9=fmtty$0[3],ty=fmtty$0[2];
         return [8,ty,fmtty_of_fmt(rest$9)];
        case 14:
         var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
         return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
        case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
        case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
        case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
        case 18:
         var
          rest$13=fmtty$0[2],
          fmting_gen=fmtty$0[1],
          _bVP_=fmtty_of_fmt(rest$13);
         if(0 === fmting_gen[0])
          var match=fmting_gen[1],fmt=match[1],_bVQ_=fmtty_of_fmt(fmt);
         else
          var
           match$0=fmting_gen[1],
           fmt$0=match$0[1],
           _bVQ_=fmtty_of_fmt(fmt$0);
         return concat_fmtty(_bVQ_,_bVP_);
        case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
        case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
        case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
        case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
        case 23:
         var rest$18=fmtty$0[2],ign=fmtty$0[1];
         if(typeof ign === "number")
          switch(ign)
           {case 0:var fmtty$0=rest$18;continue;
            case 1:var fmtty$0=rest$18;continue;
            case 2:return [14,fmtty_of_fmt(rest$18)];
            default:var fmtty$0=rest$18;continue}
         else
          switch(ign[0])
           {case 0:var fmtty$0=rest$18;continue;
            case 1:var fmtty$0=rest$18;continue;
            case 2:var fmtty$0=rest$18;continue;
            case 3:var fmtty$0=rest$18;continue;
            case 4:var fmtty$0=rest$18;continue;
            case 5:var fmtty$0=rest$18;continue;
            case 6:var fmtty$0=rest$18;continue;
            case 7:var fmtty$0=rest$18;continue;
            case 8:var fmtty$0=rest$18;continue;
            case 9:
             var fmtty$5=ign[2];
             return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
            case 10:var fmtty$0=rest$18;continue;
            default:var fmtty$0=rest$18;continue}
        default:
         var rest$19=fmtty$0[3],arity=fmtty$0[1];
         return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
  var Type_mismatch=[num_248,_bj_,caml_fresh_oo_id(0)];
  function type_padding(pad,match)
   {if(typeof pad === "number")
     return [0,0,match];
    else
     {if(0 === pad[0]){var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
      if(typeof match !== "number" && 2 === match[0])
       {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
      throw Type_mismatch}}
  function type_padprec(pad,prec,fmtty)
   {var match=type_padding(pad,fmtty);
    if(typeof prec === "number")
     {if(0 === prec){var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
      var _bVO_=match[2];
      if(typeof _bVO_ !== "number" && 2 === _bVO_[0])
       {var rest$0=_bVO_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
      throw Type_mismatch}
    var rest$1=match[2],pad$2=match[1],p=prec[1];
    return [0,pad$2,[0,p],rest$1]}
  function type_ignored_format_substituti(sub_fmtty,fmt,match)
   {if(typeof sub_fmtty === "number")
     return [0,0,type_format_gen(fmt,match)];
    else
     switch(sub_fmtty[0])
      {case 0:
        if(typeof match !== "number" && 0 === match[0])
         {var
           fmtty_rest=match[1],
           sub_fmtty_rest=sub_fmtty[1],
           match$0=
            type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
           fmt$0=match$0[2],
           sub_fmtty_rest$0=match$0[1];
          return [0,[0,sub_fmtty_rest$0],fmt$0]}
        break;
       case 1:
        if(typeof match !== "number" && 1 === match[0])
         {var
           fmtty_rest$0=match[1],
           sub_fmtty_rest$1=sub_fmtty[1],
           match$1=
            type_ignored_format_substituti(sub_fmtty_rest$1,fmt,fmtty_rest$0),
           fmt$1=match$1[2],
           sub_fmtty_rest$2=match$1[1];
          return [0,[1,sub_fmtty_rest$2],fmt$1]}
        break;
       case 2:
        if(typeof match !== "number" && 2 === match[0])
         {var
           fmtty_rest$1=match[1],
           sub_fmtty_rest$3=sub_fmtty[1],
           match$2=
            type_ignored_format_substituti(sub_fmtty_rest$3,fmt,fmtty_rest$1),
           fmt$2=match$2[2],
           sub_fmtty_rest$4=match$2[1];
          return [0,[2,sub_fmtty_rest$4],fmt$2]}
        break;
       case 3:
        if(typeof match !== "number" && 3 === match[0])
         {var
           fmtty_rest$2=match[1],
           sub_fmtty_rest$5=sub_fmtty[1],
           match$3=
            type_ignored_format_substituti(sub_fmtty_rest$5,fmt,fmtty_rest$2),
           fmt$3=match$3[2],
           sub_fmtty_rest$6=match$3[1];
          return [0,[3,sub_fmtty_rest$6],fmt$3]}
        break;
       case 4:
        if(typeof match !== "number" && 4 === match[0])
         {var
           fmtty_rest$3=match[1],
           sub_fmtty_rest$7=sub_fmtty[1],
           match$4=
            type_ignored_format_substituti(sub_fmtty_rest$7,fmt,fmtty_rest$3),
           fmt$4=match$4[2],
           sub_fmtty_rest$8=match$4[1];
          return [0,[4,sub_fmtty_rest$8],fmt$4]}
        break;
       case 5:
        if(typeof match !== "number" && 5 === match[0])
         {var
           fmtty_rest$4=match[1],
           sub_fmtty_rest$9=sub_fmtty[1],
           match$5=
            type_ignored_format_substituti(sub_fmtty_rest$9,fmt,fmtty_rest$4),
           fmt$5=match$5[2],
           sub_fmtty_rest$10=match$5[1];
          return [0,[5,sub_fmtty_rest$10],fmt$5]}
        break;
       case 6:
        if(typeof match !== "number" && 6 === match[0])
         {var
           fmtty_rest$5=match[1],
           sub_fmtty_rest$11=sub_fmtty[1],
           match$6=
            type_ignored_format_substituti(sub_fmtty_rest$11,fmt,fmtty_rest$5),
           fmt$6=match$6[2],
           sub_fmtty_rest$12=match$6[1];
          return [0,[6,sub_fmtty_rest$12],fmt$6]}
        break;
       case 7:
        if(typeof match !== "number" && 7 === match[0])
         {var
           fmtty_rest$6=match[1],
           sub_fmtty_rest$13=sub_fmtty[1],
           match$7=
            type_ignored_format_substituti(sub_fmtty_rest$13,fmt,fmtty_rest$6),
           fmt$7=match$7[2],
           sub_fmtty_rest$14=match$7[1];
          return [0,[7,sub_fmtty_rest$14],fmt$7]}
        break;
       case 8:
        if(typeof match !== "number" && 8 === match[0])
         {var
           fmtty_rest$7=match[2],
           sub2_fmtty=match[1],
           sub_fmtty_rest$15=sub_fmtty[2],
           sub2_fmtty$0=sub_fmtty[1];
          if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
           throw Type_mismatch;
          var
           match$8=
            type_ignored_format_substituti(sub_fmtty_rest$15,fmt,fmtty_rest$7),
           fmt$8=match$8[2],
           sub_fmtty_rest$16=match$8[1];
          return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
        break;
       case 9:
        if(typeof match !== "number" && 9 === match[0])
         {var
           fmtty_rest$8=match[3],
           sub2_fmtty$1=match[2],
           sub1_fmtty=match[1],
           sub_fmtty_rest$17=sub_fmtty[3],
           sub2_fmtty$2=sub_fmtty[2],
           sub1_fmtty$0=sub_fmtty[1],
           _bVM_=[0,erase_rel(sub1_fmtty)];
          if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_bVM_))
           throw Type_mismatch;
          var _bVN_=[0,erase_rel(sub2_fmtty$1)];
          if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_bVN_))
           throw Type_mismatch;
          var
           sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
           match$9=fmtty_rel_det(sub_fmtty$0),
           f4=match$9[4],
           f2=match$9[2];
          caml_call1(f2,0);
          caml_call1(f4,0);
          var
           match$10=
            type_ignored_format_substituti
             (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
           fmt$9=match$10[2],
           sub_fmtty_rest$18=match$10[1];
          return [0,[9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],fmt$9]}
        break;
       case 10:
        if(typeof match !== "number" && 10 === match[0])
         {var
           fmtty_rest$9=match[1],
           sub_fmtty_rest$19=sub_fmtty[1],
           match$11=
            type_ignored_format_substituti(sub_fmtty_rest$19,fmt,fmtty_rest$9),
           fmt$10=match$11[2],
           sub_fmtty_rest$20=match$11[1];
          return [0,[10,sub_fmtty_rest$20],fmt$10]}
        break;
       case 11:
        if(typeof match !== "number" && 11 === match[0])
         {var
           fmtty_rest$10=match[1],
           sub_fmtty_rest$21=sub_fmtty[1],
           match$12=
            type_ignored_format_substituti
             (sub_fmtty_rest$21,fmt,fmtty_rest$10),
           fmt$11=match$12[2],
           sub_fmtty_rest$22=match$12[1];
          return [0,[11,sub_fmtty_rest$22],fmt$11]}
        break;
       case 13:
        if(typeof match !== "number" && 13 === match[0])
         {var
           fmtty_rest$11=match[1],
           sub_fmtty_rest$23=sub_fmtty[1],
           match$13=
            type_ignored_format_substituti
             (sub_fmtty_rest$23,fmt,fmtty_rest$11),
           fmt$12=match$13[2],
           sub_fmtty_rest$24=match$13[1];
          return [0,[13,sub_fmtty_rest$24],fmt$12]}
        break;
       case 14:
        if(typeof match !== "number" && 14 === match[0])
         {var
           fmtty_rest$12=match[1],
           sub_fmtty_rest$25=sub_fmtty[1],
           match$14=
            type_ignored_format_substituti
             (sub_fmtty_rest$25,fmt,fmtty_rest$12),
           fmt$13=match$14[2],
           sub_fmtty_rest$26=match$14[1];
          return [0,[14,sub_fmtty_rest$26],fmt$13]}
        break
       }
    throw Type_mismatch}
  function type_format_gen(fmt,fmtty)
   {if(typeof fmt === "number")
     return [0,0,fmtty];
    else
     switch(fmt[0])
      {case 0:
        if(typeof fmtty !== "number" && 0 === fmtty[0])
         {var
           fmtty_rest=fmtty[1],
           fmt_rest=fmt[1],
           match=type_format_gen(fmt_rest,fmtty_rest),
           fmtty$0=match[2],
           fmt$0=match[1];
          return [0,[0,fmt$0],fmtty$0]}
        break;
       case 1:
        if(typeof fmtty !== "number" && 0 === fmtty[0])
         {var
           fmtty_rest$0=fmtty[1],
           fmt_rest$0=fmt[1],
           match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
           fmtty$1=match$0[2],
           fmt$1=match$0[1];
          return [0,[1,fmt$1],fmtty$1]}
        break;
       case 2:
        var
         fmt_rest$1=fmt[2],
         pad=fmt[1],
         _bVh_=type_padding(pad,fmtty),
         _bVi_=_bVh_[2],
         _bVj_=_bVh_[1];
        if(typeof _bVi_ !== "number" && 1 === _bVi_[0])
         {var
           fmtty_rest$1=_bVi_[1],
           match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
           fmtty$2=match$1[2],
           fmt$2=match$1[1];
          return [0,[2,_bVj_,fmt$2],fmtty$2]}
        throw Type_mismatch;
       case 3:
        var
         fmt_rest$2=fmt[2],
         pad$0=fmt[1],
         _bVk_=type_padding(pad$0,fmtty),
         _bVl_=_bVk_[2],
         _bVm_=_bVk_[1];
        if(typeof _bVl_ !== "number" && 1 === _bVl_[0])
         {var
           fmtty_rest$2=_bVl_[1],
           match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
           fmtty$3=match$2[2],
           fmt$3=match$2[1];
          return [0,[3,_bVm_,fmt$3],fmtty$3]}
        throw Type_mismatch;
       case 4:
        var
         fmt_rest$3=fmt[4],
         prec=fmt[3],
         pad$1=fmt[2],
         iconv=fmt[1],
         _bVn_=type_padprec(pad$1,prec,fmtty),
         _bVo_=_bVn_[3],
         _bVp_=_bVn_[2],
         _bVq_=_bVn_[1];
        if(typeof _bVo_ !== "number" && 2 === _bVo_[0])
         {var
           fmtty_rest$3=_bVo_[1],
           match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
           fmtty$4=match$3[2],
           fmt$4=match$3[1];
          return [0,[4,iconv,_bVq_,_bVp_,fmt$4],fmtty$4]}
        throw Type_mismatch;
       case 5:
        var
         fmt_rest$4=fmt[4],
         prec$0=fmt[3],
         pad$2=fmt[2],
         iconv$0=fmt[1],
         _bVr_=type_padprec(pad$2,prec$0,fmtty),
         _bVs_=_bVr_[3],
         _bVt_=_bVr_[2],
         _bVu_=_bVr_[1];
        if(typeof _bVs_ !== "number" && 3 === _bVs_[0])
         {var
           fmtty_rest$4=_bVs_[1],
           match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
           fmtty$5=match$4[2],
           fmt$5=match$4[1];
          return [0,[5,iconv$0,_bVu_,_bVt_,fmt$5],fmtty$5]}
        throw Type_mismatch;
       case 6:
        var
         fmt_rest$5=fmt[4],
         prec$1=fmt[3],
         pad$3=fmt[2],
         iconv$1=fmt[1],
         _bVv_=type_padprec(pad$3,prec$1,fmtty),
         _bVw_=_bVv_[3],
         _bVx_=_bVv_[2],
         _bVy_=_bVv_[1];
        if(typeof _bVw_ !== "number" && 4 === _bVw_[0])
         {var
           fmtty_rest$5=_bVw_[1],
           match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
           fmtty$6=match$5[2],
           fmt$6=match$5[1];
          return [0,[6,iconv$1,_bVy_,_bVx_,fmt$6],fmtty$6]}
        throw Type_mismatch;
       case 7:
        var
         fmt_rest$6=fmt[4],
         prec$2=fmt[3],
         pad$4=fmt[2],
         iconv$2=fmt[1],
         _bVz_=type_padprec(pad$4,prec$2,fmtty),
         _bVA_=_bVz_[3],
         _bVB_=_bVz_[2],
         _bVC_=_bVz_[1];
        if(typeof _bVA_ !== "number" && 5 === _bVA_[0])
         {var
           fmtty_rest$6=_bVA_[1],
           match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
           fmtty$7=match$6[2],
           fmt$7=match$6[1];
          return [0,[7,iconv$2,_bVC_,_bVB_,fmt$7],fmtty$7]}
        throw Type_mismatch;
       case 8:
        var
         fmt_rest$7=fmt[4],
         prec$3=fmt[3],
         pad$5=fmt[2],
         fconv=fmt[1],
         _bVD_=type_padprec(pad$5,prec$3,fmtty),
         _bVE_=_bVD_[3],
         _bVF_=_bVD_[2],
         _bVG_=_bVD_[1];
        if(typeof _bVE_ !== "number" && 6 === _bVE_[0])
         {var
           fmtty_rest$7=_bVE_[1],
           match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
           fmtty$8=match$7[2],
           fmt$8=match$7[1];
          return [0,[8,fconv,_bVG_,_bVF_,fmt$8],fmtty$8]}
        throw Type_mismatch;
       case 9:
        var
         fmt_rest$8=fmt[2],
         pad$6=fmt[1],
         _bVH_=type_padding(pad$6,fmtty),
         _bVI_=_bVH_[2],
         _bVJ_=_bVH_[1];
        if(typeof _bVI_ !== "number" && 7 === _bVI_[0])
         {var
           fmtty_rest$8=_bVI_[1],
           match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
           fmtty$9=match$8[2],
           fmt$9=match$8[1];
          return [0,[9,_bVJ_,fmt$9],fmtty$9]}
        throw Type_mismatch;
       case 10:
        var
         fmt_rest$9=fmt[1],
         match$9=type_format_gen(fmt_rest$9,fmtty),
         fmtty$10=match$9[2],
         fmt$10=match$9[1];
        return [0,[10,fmt$10],fmtty$10];
       case 11:
        var
         fmt_rest$10=fmt[2],
         str=fmt[1],
         match$10=type_format_gen(fmt_rest$10,fmtty),
         fmtty$11=match$10[2],
         fmt$11=match$10[1];
        return [0,[11,str,fmt$11],fmtty$11];
       case 12:
        var
         fmt_rest$11=fmt[2],
         chr=fmt[1],
         match$11=type_format_gen(fmt_rest$11,fmtty),
         fmtty$12=match$11[2],
         fmt$12=match$11[1];
        return [0,[12,chr,fmt$12],fmtty$12];
       case 13:
        if(typeof fmtty !== "number" && 8 === fmtty[0])
         {var
           fmtty_rest$9=fmtty[2],
           sub_fmtty=fmtty[1],
           fmt_rest$12=fmt[3],
           sub_fmtty$0=fmt[2],
           pad_opt=fmt[1];
          if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))throw Type_mismatch;
          var
           match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
           fmtty$13=match$12[2],
           fmt$13=match$12[1];
          return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
        break;
       case 14:
        if(typeof fmtty !== "number" && 9 === fmtty[0])
         {var
           fmtty_rest$10=fmtty[3],
           sub_fmtty1=fmtty[1],
           fmt_rest$13=fmt[3],
           sub_fmtty$1=fmt[2],
           pad_opt$0=fmt[1],
           _bVK_=[0,erase_rel(sub_fmtty1)];
          if(caml_notequal([0,erase_rel(sub_fmtty$1)],_bVK_))
           throw Type_mismatch;
          var
           match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
           fmtty$14=match$13[2],
           fmt$14=match$13[1];
          return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
        break;
       case 15:
        if(typeof fmtty !== "number" && 10 === fmtty[0])
         {var
           fmtty_rest$11=fmtty[1],
           fmt_rest$14=fmt[1],
           match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
           fmtty$15=match$14[2],
           fmt$15=match$14[1];
          return [0,[15,fmt$15],fmtty$15]}
        break;
       case 16:
        if(typeof fmtty !== "number" && 11 === fmtty[0])
         {var
           fmtty_rest$12=fmtty[1],
           fmt_rest$15=fmt[1],
           match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
           fmtty$16=match$15[2],
           fmt$16=match$15[1];
          return [0,[16,fmt$16],fmtty$16]}
        break;
       case 17:
        var
         fmt_rest$16=fmt[2],
         formatting_lit=fmt[1],
         match$16=type_format_gen(fmt_rest$16,fmtty),
         fmtty$17=match$16[2],
         fmt$17=match$16[1];
        return [0,[17,formatting_lit,fmt$17],fmtty$17];
       case 18:
        var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
        if(0 === formatting_gen[0])
         {var
           match$20=formatting_gen[1],
           str$0=match$20[2],
           fmt1=match$20[1],
           match$21=type_format_gen(fmt1,fmtty),
           fmtty2=match$21[2],
           fmt2=match$21[1],
           match$22=type_format_gen(fmt_rest$17,fmtty2),
           fmtty3=match$22[2],
           fmt3=match$22[1];
          return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
        var
         match$23=formatting_gen[1],
         str$1=match$23[2],
         fmt1$0=match$23[1],
         match$24=type_format_gen(fmt1$0,fmtty),
         fmtty2$0=match$24[2],
         fmt2$0=match$24[1],
         match$25=type_format_gen(fmt_rest$17,fmtty2$0),
         fmtty3$0=match$25[2],
         fmt3$0=match$25[1];
        return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
       case 19:
        if(typeof fmtty !== "number" && 13 === fmtty[0])
         {var
           fmtty_rest$13=fmtty[1],
           fmt_rest$18=fmt[1],
           match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
           fmtty$18=match$17[2],
           fmt$18=match$17[1];
          return [0,[19,fmt$18],fmtty$18]}
        break;
       case 20:
        if(typeof fmtty !== "number" && 1 === fmtty[0])
         {var
           fmtty_rest$14=fmtty[1],
           fmt_rest$19=fmt[3],
           char_set=fmt[2],
           width_opt=fmt[1],
           match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
           fmtty$19=match$18[2],
           fmt$19=match$18[1];
          return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
        break;
       case 21:
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var
           fmtty_rest$15=fmtty[1],
           fmt_rest$20=fmt[2],
           counter=fmt[1],
           match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
           fmtty$20=match$19[2],
           fmt$20=match$19[1];
          return [0,[21,counter,fmt$20],fmtty$20]}
        break;
       case 23:
        var rest=fmt[2],ign=fmt[1];
        if(typeof ign === "number")
         switch(ign)
          {case 0:return type_ignored_param_one(ign,rest,fmtty);
           case 1:return type_ignored_param_one(ign,rest,fmtty);
           case 2:
            if(typeof fmtty !== "number" && 14 === fmtty[0])
             {var
               fmtty_rest$16=fmtty[1],
               match$26=type_format_gen(rest,fmtty_rest$16),
               fmtty$21=match$26[2],
               fmt$21=match$26[1];
              return [0,[23,2,fmt$21],fmtty$21]}
            throw Type_mismatch;
           default:return type_ignored_param_one(ign,rest,fmtty)}
        else
         switch(ign[0])
          {case 0:return type_ignored_param_one(ign,rest,fmtty);
           case 1:return type_ignored_param_one(ign,rest,fmtty);
           case 2:return type_ignored_param_one(ign,rest,fmtty);
           case 3:return type_ignored_param_one(ign,rest,fmtty);
           case 4:return type_ignored_param_one(ign,rest,fmtty);
           case 5:return type_ignored_param_one(ign,rest,fmtty);
           case 6:return type_ignored_param_one(ign,rest,fmtty);
           case 7:return type_ignored_param_one(ign,rest,fmtty);
           case 8:
            var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
            return type_ignored_param_one
                    ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
           case 9:
            var
             sub_fmtty$3=ign[2],
             pad_opt$2=ign[1],
             _bVL_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
             match$27=_bVL_[2],
             fmtty$22=match$27[2],
             fmt$22=match$27[1],
             sub_fmtty$4=_bVL_[1];
            return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
           case 10:return type_ignored_param_one(ign,rest,fmtty);
           default:return type_ignored_param_one(ign,rest,fmtty)}
       }
    throw Type_mismatch}
  function type_ignored_param_one(ign,fmt,fmtty)
   {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
    return [0,[23,ign,fmt$0],fmtty$0]}
  function type_format(fmt,fmtty)
   {var _bVg_=type_format_gen(fmt,fmtty);
    if(typeof _bVg_[2] === "number"){var fmt$0=_bVg_[1];return fmt$0}
    throw Type_mismatch}
  function fix_padding(padty,width,str)
   {var
     len=caml_ml_string_length(str),
     padty$0=0 <= width?padty:0,
     width$0=abs(width);
    if(width$0 <= len)return str;
    var _bVf_=2 === padty$0?48:32,res=make(width$0,_bVf_);
    switch(padty$0)
     {case 0:blit$0(str,0,res,0,len);break;
      case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
      default:
       var switch$0=0;
       if(0 < len)
        {var switch$1=0;
         if
          (43
           !==
           caml_string_get(str,0)
           &&
           45
           !==
           caml_string_get(str,0)
           &&
           32
           !==
           caml_string_get(str,0))
          {switch$0 = 1;switch$1 = 1}
         if(! switch$1)
          {caml_bytes_set(res,0,caml_string_get(str,0));
           blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
       else
        switch$0 = 1;
       if(switch$0)
        {var switch$2=0;
         if(1 < len && 48 === caml_string_get(str,0))
          {var switch$3=0;
           if
            (num_120
             !==
             caml_string_get(str,1)
             &&
             88
             !==
             caml_string_get(str,1))
            {switch$2 = 1;switch$3 = 1}
           if(! switch$3)
            {caml_bytes_set(res,1,caml_string_get(str,1));
             blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
         else
          switch$2 = 1;
         if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
    return caml_string_of_bytes(res)}
  function fix_int_precision(prec,str)
   {var
     prec$0=abs(prec),
     len=caml_ml_string_length(str),
     c=caml_string_get(str,0),
     switch$0=0;
    if(58 <= c)
     {if(71 <= c)
       {if(! (5 < (c + num_97 | 0) >>> 0))switch$0 = 1}
      else
       if(65 <= c)switch$0 = 1}
    else
     {var switch$1=0;
      if(32 !== c)
       if(43 <= c)
        {var switcher=c + num_43 | 0;
         switch(switcher)
          {case 5:
            if(len < (prec$0 + 2 | 0) && 1 < len)
             {var switch$2=0;
              if
               (num_120
                ===
                caml_string_get(str,1)
                ||
                88
                ===
                caml_string_get(str,1))
               switch$2 = 1;
              if(switch$2)
               {var res$1=make(prec$0 + 2 | 0,48);
                caml_bytes_set(res$1,1,caml_string_get(str,1));
                blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                return caml_string_of_bytes(res$1)}}
            switch$0 = 1;
            switch$1 = 1;
            break;
           case 0:
           case 2:break;
           case 1:
           case 3:
           case 4:switch$1 = 1;break;
           default:switch$0 = 1;switch$1 = 1}}
       else
        switch$1 = 1;
      if(! switch$1 && len < (prec$0 + 1 | 0))
       {var res$0=make(prec$0 + 1 | 0,48);
        caml_bytes_set(res$0,0,c);
        blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
        return caml_string_of_bytes(res$0)}}
    if(switch$0 && len < prec$0)
     {var res=make(prec$0,48);
      blit$0(str,0,res,prec$0 - len | 0,len);
      return caml_string_of_bytes(res)}
    return str}
  function string_to_caml_string(str)
   {var
     str$0=escaped(str),
     l=caml_ml_string_length(str$0),
     res=make(l + 2 | 0,34);
    caml_blit_string(str$0,0,res,1,l);
    return caml_string_of_bytes(res)}
  function transform_int_alt(iconv,s)
   {if(13 <= iconv)
     {var n=[0,0],_bVa_=caml_ml_string_length(s) - 1 | 0,_bU$_=0;
      if(! (_bVa_ < 0))
       {var i$0=_bU$_;
        for(;;)
         {var
           match=caml_string_unsafe_get(s,i$0),
           switcher$0=match + num_48 | 0;
          if(! (9 < switcher$0 >>> 0))n[1]++;
          var _bVe_=i$0 + 1 | 0;
          if(_bVa_ !== i$0){var i$0=_bVe_;continue}
          break}}
      var
       digits=n[1],
       buf=
        caml_create_bytes
         (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
       pos=[0,0],
       put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
       left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
       _bVc_=caml_ml_string_length(s) - 1 | 0,
       _bVb_=0;
      if(! (_bVc_ < 0))
       {var i=_bVb_;
        for(;;)
         {var c=caml_string_unsafe_get(s,i),switcher=c + num_48 | 0;
          if(9 < switcher >>> 0)
           put(c);
          else
           {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
          var _bVd_=i + 1 | 0;
          if(_bVc_ !== i){var i=_bVd_;continue}
          break}}
      return caml_string_of_bytes(buf)}
    return s}
  function convert_int(iconv,n)
   {switch(iconv)
     {case 1:var _bU__=_bl_;break;
      case 2:var _bU__=_bm_;break;
      case 4:var _bU__=_bo_;break;
      case 5:var _bU__=_bp_;break;
      case 6:var _bU__=_bq_;break;
      case 7:var _bU__=_br_;break;
      case 8:var _bU__=_bs_;break;
      case 9:var _bU__=_bt_;break;
      case 10:var _bU__=_bu_;break;
      case 11:var _bU__=_bv_;break;
      case 0:
      case 13:var _bU__=_bk_;break;
      case 3:
      case 14:var _bU__=_bn_;break;
      default:var _bU__=_bw_}
    return transform_int_alt(iconv,caml_format_int(_bU__,n))}
  function convert_int32(iconv,n)
   {switch(iconv)
     {case 1:var _bU9_=_bL_;break;
      case 2:var _bU9_=_bM_;break;
      case 4:var _bU9_=_bO_;break;
      case 5:var _bU9_=_bP_;break;
      case 6:var _bU9_=_bQ_;break;
      case 7:var _bU9_=_bR_;break;
      case 8:var _bU9_=_bS_;break;
      case 9:var _bU9_=_bT_;break;
      case 10:var _bU9_=_bU_;break;
      case 11:var _bU9_=_bV_;break;
      case 0:
      case 13:var _bU9_=_bK_;break;
      case 3:
      case 14:var _bU9_=_bN_;break;
      default:var _bU9_=_bW_}
    return transform_int_alt(iconv,caml_format_int(_bU9_,n))}
  function convert_nativeint(iconv,n)
   {switch(iconv)
     {case 1:var _bU8_=_bY_;break;
      case 2:var _bU8_=_bZ_;break;
      case 4:var _bU8_=_b1_;break;
      case 5:var _bU8_=_b2_;break;
      case 6:var _bU8_=_b3_;break;
      case 7:var _bU8_=_b4_;break;
      case 8:var _bU8_=_b5_;break;
      case 9:var _bU8_=_b6_;break;
      case 10:var _bU8_=_b7_;break;
      case 11:var _bU8_=_b8_;break;
      case 0:
      case 13:var _bU8_=_bX_;break;
      case 3:
      case 14:var _bU8_=_b0_;break;
      default:var _bU8_=_b9_}
    return transform_int_alt(iconv,caml_format_int(_bU8_,n))}
  function convert_int64(iconv,n)
   {switch(iconv)
     {case 1:var _bU7_=_by_;break;
      case 2:var _bU7_=_bz_;break;
      case 4:var _bU7_=_bB_;break;
      case 5:var _bU7_=_bC_;break;
      case 6:var _bU7_=_bD_;break;
      case 7:var _bU7_=_bE_;break;
      case 8:var _bU7_=_bF_;break;
      case 9:var _bU7_=_bG_;break;
      case 10:var _bU7_=_bH_;break;
      case 11:var _bU7_=_bI_;break;
      case 0:
      case 13:var _bU7_=_bx_;break;
      case 3:
      case 14:var _bU7_=_bA_;break;
      default:var _bU7_=_bJ_}
    return transform_int_alt(iconv,caml_int64_format(_bU7_,n))}
  function convert_float(fconv,prec$0,x)
   {if(6 <= fconv[2])
     {switch(fconv[1])
       {case 0:var sign=45;break;case 1:var sign=43;break;default:var sign=32}
      var s$0=caml_hexstring_of_float(x,prec$0,sign);
      if(7 <= fconv[2])
       {var s=caml_bytes_of_string(s$0);
        return caml_string_of_bytes(map$2(uppercase_ascii,s))}
      return s$0}
    var prec=abs(prec$0);
    if(opt)var sth=opt[1],cF=sth;else var cF=70;
    switch(fconv[2])
     {case 0:var symb=num_102;break;
      case 1:var symb=num_101;break;
      case 2:var symb=69;break;
      case 3:var symb=num_103;break;
      case 4:var symb=71;break;
      case 5:var symb=cF;break;
      case 6:var symb=104;break;
      default:var symb=72}
    var buf=buffer_create(16);
    buffer_add_char(buf,37);
    switch(fconv[1])
     {case 0:break;
      case 1:buffer_add_char(buf,43);break;
      default:buffer_add_char(buf,32)}
    buffer_add_char(buf,46);
    buffer_add_string(buf,caml_string_of_jsbytes(str$59 + prec));
    buffer_add_char(buf,symb);
    var str=caml_format_float(buffer_contents(buf),x);
    if(5 === fconv[2])
     {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
      if(3 === match$0)return x < 0.?_b__:_b$_;
      if(4 <= match$0)return _ca_;
      var i=0;
      for(;;)
       {if(i === len)
         var _bU6_=0;
        else
         {var
           match=caml_string_get(str,i),
           _bU5_=match + num_46 | 0,
           switch$0=0;
          if(23 < _bU5_ >>> 0)
           {if(55 === _bU5_)switch$0 = 1}
          else
           if(21 < (_bU5_ - 1 | 0) >>> 0)switch$0 = 1;
          if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
          var _bU6_=1}
        return _bU6_?str:symbol(str,_cb_)}}
    return str}
  function string_of_fmtty(fmtty)
   {var buf=buffer_create(16);
    bprint_fmtty(buf,fmtty);
    return buffer_contents(buf)}
  function make_printf$0(counter,k,acc,fmt)
   {var k$0=k,acc$0=acc,fmt$0=fmt;
    for(;;)
     if(typeof fmt$0 === "number")
      return caml_call1(k$0,acc$0);
     else
      switch(fmt$0[0])
       {case 0:
         var rest=fmt$0[1];
         return function(c)
          {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
        case 1:
         var rest$0=fmt$0[1];
         return function(c)
          {var switch$0=0;
           if(40 <= c)
            if(92 === c)
             var str=_k_;
            else
             if(num_127 <= c)switch$0 = 1;else switch$0 = 2;
           else
            if(32 <= c)
             if(39 <= c)var str=_l_;else switch$0 = 2;
            else
             if(14 <= c)
              switch$0 = 1;
             else
              switch(c)
               {case 8:var str=_m_;break;
                case 9:var str=_n_;break;
                case 10:var str=_o_;break;
                case 13:var str=_p_;break;
                default:switch$0 = 1}
           switch(switch$0)
            {case 1:
              var s=caml_create_bytes(4);
              caml_bytes_unsafe_set(s,0,92);
              caml_bytes_unsafe_set(s,1,48 + (c / num_100 | 0) | 0);
              caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
              caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
              var str=caml_string_of_bytes(s);
              break;
             case 2:
              var s$0=caml_create_bytes(1);
              caml_bytes_unsafe_set(s$0,0,c);
              var str=caml_string_of_bytes(s$0);
              break
             }
           var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
           caml_blit_string(str,0,res,1,l);
           var new_acc=[4,acc$0,caml_string_of_bytes(res)];
           return make_printf(k$0,new_acc,rest$0)};
        case 2:
         var rest$1=fmt$0[2],pad=fmt$0[1];
         return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
        case 3:
         var rest$2=fmt$0[2],pad$0=fmt$0[1];
         return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
        case 4:
         var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
         return make_int_padding_precision
                 (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
        case 5:
         var rest$4=fmt$0[4],prec$0=fmt$0[3],pad$2=fmt$0[2],iconv$0=fmt$0[1];
         return make_int_padding_precision
                 (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
        case 6:
         var rest$5=fmt$0[4],prec$1=fmt$0[3],pad$3=fmt$0[2],iconv$1=fmt$0[1];
         return make_int_padding_precision
                 (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
        case 7:
         var rest$6=fmt$0[4],prec$2=fmt$0[3],pad$4=fmt$0[2],iconv$2=fmt$0[1];
         return make_int_padding_precision
                 (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
        case 8:
         var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
         if(typeof pad$5 === "number")
          {if(typeof prec$3 === "number")
            return 0 === prec$3
                    ?function(x)
                      {var
                        str=
                         convert_float(fconv,default_float_precision(fconv),x);
                       return make_printf(k$0,[4,acc$0,str],rest$7)}
                    :function(p,x)
                      {var str=convert_float(fconv,p,x);
                       return make_printf(k$0,[4,acc$0,str],rest$7)};
           var p=prec$3[1];
           return function(x)
            {var str=convert_float(fconv,p,x);
             return make_printf(k$0,[4,acc$0,str],rest$7)}}
         else
          {if(0 === pad$5[0])
            {var _bU2_=pad$5[2],_bU3_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_bU3_,_bU2_,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                      :function(p,x)
                        {var str=fix_padding(_bU3_,_bU2_,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p$0=prec$3[1];
             return function(x)
              {var str=fix_padding(_bU3_,_bU2_,convert_float(fconv,p$0,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           var _bU4_=pad$5[1];
           if(typeof prec$3 === "number")
            return 0 === prec$3
                    ?function(w,x)
                      {var
                        str=convert_float(fconv,default_float_precision(fconv),x),
                        str$0=fix_padding(_bU4_,w,str);
                       return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                    :function(w,p,x)
                      {var str=fix_padding(_bU4_,w,convert_float(fconv,p,x));
                       return make_printf(k$0,[4,acc$0,str],rest$7)};
           var p$1=prec$3[1];
           return function(w,x)
            {var str=fix_padding(_bU4_,w,convert_float(fconv,p$1,x));
             return make_printf(k$0,[4,acc$0,str],rest$7)}}
        case 9:
         var rest$8=fmt$0[2],pad$6=fmt$0[1];
         return make_padding(k$0,acc$0,rest$8,pad$6,of_bool);
        case 10:
         var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;continue;
        case 11:
         var
          fmt$2=fmt$0[2],
          str=fmt$0[1],
          acc$2=[2,acc$0,str],
          acc$0=acc$2,
          fmt$0=fmt$2;
         continue;
        case 12:
         var
          fmt$3=fmt$0[2],
          chr=fmt$0[1],
          acc$3=[3,acc$0,chr],
          acc$0=acc$3,
          fmt$0=fmt$3;
         continue;
        case 13:
         var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],ty=string_of_fmtty(sub_fmtty);
         return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
        case 14:
         var rest$10=fmt$0[3],fmtty=fmt$0[2];
         return function(param)
          {var fmt=param[1];
           return make_printf
                   (k$0,
                    acc$0,
                    concat_fmt(type_format(fmt,erase_rel(symm(fmtty))),rest$10))};
        case 15:
         var rest$11=fmt$0[1];
         return function(f,x)
          {return make_printf
                   (k$0,
                    [6,acc$0,function(o){return caml_call2(f,o,x)}],
                    rest$11)};
        case 16:
         var rest$12=fmt$0[1];
         return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
        case 17:
         var
          fmt$4=fmt$0[2],
          fmting_lit=fmt$0[1],
          acc$4=[0,acc$0,fmting_lit],
          acc$0=acc$4,
          fmt$0=fmt$4;
         continue;
        case 18:
         var _bU0_=fmt$0[1];
         if(0 === _bU0_[0])
          {var
            rest$13=fmt$0[2],
            match=_bU0_[1],
            fmt$5=match[1],
            k$3=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[0,kacc]],rest)}
               return k$0},
            k$1=k$3(acc$0,k$0,rest$13),
            k$0=k$1,
            acc$0=0,
            fmt$0=fmt$5;
           continue}
         var
          rest$14=fmt$0[2],
          match$0=_bU0_[1],
          fmt$6=match$0[1],
          k$4=
           function(acc,k,rest)
            {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
             return k$0},
          k$2=k$4(acc$0,k$0,rest$14),
          k$0=k$2,
          acc$0=0,
          fmt$0=fmt$6;
         continue;
        case 19:throw [0,Assert_failure,_cc_];
        case 20:
         var rest$15=fmt$0[3],new_acc=[8,acc$0,_cd_];
         return function(param){return make_printf(k$0,new_acc,rest$15)};
        case 21:
         var rest$16=fmt$0[2];
         return function(n)
          {var new_acc=[4,acc$0,caml_format_int(_ce_,n)];
           return make_printf(k$0,new_acc,rest$16)};
        case 22:
         var rest$17=fmt$0[1];
         return function(c)
          {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
        case 23:
         var rest$18=fmt$0[2],ign=fmt$0[1];
         if(typeof ign === "number")
          switch(ign)
           {case 0:
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 1:
             if(counter < 50)
              {var counter$2=counter + 1 | 0;
               return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 2:throw [0,Assert_failure,_cf_];
            default:
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18])}
         else
          switch(ign[0])
           {case 0:
             if(counter < 50)
              {var counter$4=counter + 1 | 0;
               return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 1:
             if(counter < 50)
              {var counter$5=counter + 1 | 0;
               return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 2:
             if(counter < 50)
              {var counter$6=counter + 1 | 0;
               return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 3:
             if(counter < 50)
              {var counter$7=counter + 1 | 0;
               return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 4:
             if(counter < 50)
              {var counter$8=counter + 1 | 0;
               return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 5:
             if(counter < 50)
              {var counter$9=counter + 1 | 0;
               return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 6:
             if(counter < 50)
              {var counter$10=counter + 1 | 0;
               return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 7:
             if(counter < 50)
              {var counter$11=counter + 1 | 0;
               return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 8:
             if(counter < 50)
              {var counter$12=counter + 1 | 0;
               return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            case 9:
             var fmtty$0=ign[2];
             if(counter < 50)
              {var counter$15=counter + 1 | 0;
               return make_from_fmtty$0(counter$15,k$0,acc$0,fmtty$0,rest$18)}
             return caml_trampoline_return
                     (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
            case 10:
             if(counter < 50)
              {var counter$13=counter + 1 | 0;
               return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18]);
            default:
             if(counter < 50)
              {var counter$14=counter + 1 | 0;
               return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
             return caml_trampoline_return
                     (make_invalid_arg,[0,k$0,acc$0,rest$18])}
        default:
         var rest$19=fmt$0[3],f=fmt$0[2],arity=fmt$0[1],_bU1_=caml_call1(f,0);
         if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_bU1_)}
         return caml_trampoline_return
                 (make_custom$0,[0,k$0,acc$0,rest$19,arity,_bU1_])}}
  function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
   {if(typeof fmtty === "number")
     {if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_invalid_arg(counter$0,k,acc,fmt)}
      return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
    else
     switch(fmtty[0])
      {case 0:
        var rest=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest,fmt)};
       case 1:
        var rest$0=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
       case 2:
        var rest$1=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
       case 3:
        var rest$2=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
       case 4:
        var rest$3=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
       case 5:
        var rest$4=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
       case 6:
        var rest$5=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
       case 7:
        var rest$6=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
       case 8:
        var rest$7=fmtty[2];
        return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
       case 9:
        var rest$8=fmtty[3],ty2=fmtty[2],ty1=fmtty[1],ty=trans(symm(ty1),ty2);
        return function(param)
         {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
       case 10:
        var rest$9=fmtty[1];
        return function(param,_bUZ_)
         {return make_from_fmtty(k,acc,rest$9,fmt)};
       case 11:
        var rest$10=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
       case 12:
        var rest$11=fmtty[1];
        return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
       case 13:throw [0,Assert_failure,_cg_];
       default:throw [0,Assert_failure,_ch_]}}
  function make_invalid_arg(counter,k,acc,fmt)
   {var _bUY_=[8,acc,_ci_];
    if(counter < 50)
     {var counter$0=counter + 1 | 0;
      return make_printf$0(counter$0,k,_bUY_,fmt)}
    return caml_trampoline_return(make_printf$0,[0,k,_bUY_,fmt])}
  function make_custom$0(counter,k,acc,rest,arity,f)
   {if(arity)
     {var arity$0=arity[1];
      return function(x)
       {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
    var _bUX_=[4,acc,f];
    if(counter < 50)
     {var counter$0=counter + 1 | 0;
      return make_printf$0(counter$0,k,_bUX_,rest)}
    return caml_trampoline_return(make_printf$0,[0,k,_bUX_,rest])}
  function make_printf(k,acc,fmt)
   {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
  function make_from_fmtty(k,acc,fmtty,fmt)
   {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
  function make_custom(k,acc,rest,arity,f)
   {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
  function make_padding(k,acc,fmt,pad,trans)
   {if(typeof pad === "number")
     return function(x)
      {var new_acc=[4,acc,caml_call1(trans,x)];
       return make_printf(k,new_acc,fmt)};
    else
     {if(0 === pad[0])
       {var width=pad[2],padty=pad[1];
        return function(x)
         {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}
      var padty$0=pad[1];
      return function(w,x)
       {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
        return make_printf(k,new_acc,fmt)}}}
  function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
   {if(typeof pad === "number")
     {if(typeof match === "number")
       return 0 === match
               ?function(x)
                 {var str=caml_call2(trans,iconv,x);
                  return make_printf(k,[4,acc,str],fmt)}
               :function(p,x)
                 {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                  return make_printf(k,[4,acc,str],fmt)};
      var p=match[1];
      return function(x)
       {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
        return make_printf(k,[4,acc,str],fmt)}}
    else
     {if(0 === pad[0])
       {var _bUU_=pad[2],_bUV_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=fix_padding(_bUV_,_bUU_,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(p,x)
                   {var
                     str=
                      fix_padding
                       (_bUV_,_bUU_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$0=match[1];
        return function(x)
         {var
           str=
            fix_padding
             (_bUV_,_bUU_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}
      var _bUW_=pad[1];
      if(typeof match === "number")
       return 0 === match
               ?function(w,x)
                 {var str=fix_padding(_bUW_,w,caml_call2(trans,iconv,x));
                  return make_printf(k,[4,acc,str],fmt)}
               :function(w,p,x)
                 {var
                   str=
                    fix_padding
                     (_bUW_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                  return make_printf(k,[4,acc,str],fmt)};
      var p$1=match[1];
      return function(w,x)
       {var
         str=
          fix_padding
           (_bUW_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
        return make_printf(k,[4,acc,str],fmt)}}}
  function output_acc(o,acc)
   {var acc$0=acc;
    for(;;)
     if(typeof acc$0 === "number")
      return 0;
     else
      switch(acc$0[0])
       {case 0:
         var
          fmting_lit=acc$0[2],
          p=acc$0[1],
          s=string_of_formatting_lit(fmting_lit);
         output_acc(o,p);
         return output_string(o,s);
        case 1:
         var _bUS_=acc$0[2],_bUT_=acc$0[1];
         if(0 === _bUS_[0])
          {var acc$1=_bUS_[1];
           output_acc(o,_bUT_);
           output_string(o,_cj_);
           var acc$0=acc$1;
           continue}
         var acc$2=_bUS_[1];
         output_acc(o,_bUT_);
         output_string(o,_ck_);
         var acc$0=acc$2;
         continue;
        case 6:
         var f=acc$0[2],p$2=acc$0[1];output_acc(o,p$2);return caml_call1(f,o);
        case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
        case 8:
         var msg=acc$0[2],p$4=acc$0[1];
         output_acc(o,p$4);
         return invalid_arg(msg);
        case 2:
        case 4:
         var s$0=acc$0[2],p$0=acc$0[1];
         output_acc(o,p$0);
         return output_string(o,s$0);
        default:
         var c=acc$0[2],p$1=acc$0[1];
         output_acc(o,p$1);
         return caml_ml_output_char(o,c)}}
  function bufput_acc(b,acc)
   {var acc$0=acc;
    for(;;)
     if(typeof acc$0 === "number")
      return 0;
     else
      switch(acc$0[0])
       {case 0:
         var
          fmting_lit=acc$0[2],
          p=acc$0[1],
          s=string_of_formatting_lit(fmting_lit);
         bufput_acc(b,p);
         return add_string(b,s);
        case 1:
         var _bUQ_=acc$0[2],_bUR_=acc$0[1];
         if(0 === _bUQ_[0])
          {var acc$1=_bUQ_[1];
           bufput_acc(b,_bUR_);
           add_string(b,_cl_);
           var acc$0=acc$1;
           continue}
         var acc$2=_bUQ_[1];
         bufput_acc(b,_bUR_);
         add_string(b,_cm_);
         var acc$0=acc$2;
         continue;
        case 6:
         var f=acc$0[2],p$2=acc$0[1];bufput_acc(b,p$2);return caml_call1(f,b);
        case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
        case 8:
         var msg=acc$0[2],p$3=acc$0[1];
         bufput_acc(b,p$3);
         return invalid_arg(msg);
        case 2:
        case 4:
         var s$0=acc$0[2],p$0=acc$0[1];
         bufput_acc(b,p$0);
         return add_string(b,s$0);
        default:
         var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
  function strput_acc(b,acc)
   {var acc$0=acc;
    for(;;)
     if(typeof acc$0 === "number")
      return 0;
     else
      switch(acc$0[0])
       {case 0:
         var
          fmting_lit=acc$0[2],
          p=acc$0[1],
          s=string_of_formatting_lit(fmting_lit);
         strput_acc(b,p);
         return add_string(b,s);
        case 1:
         var _bUO_=acc$0[2],_bUP_=acc$0[1];
         if(0 === _bUO_[0])
          {var acc$1=_bUO_[1];
           strput_acc(b,_bUP_);
           add_string(b,_cn_);
           var acc$0=acc$1;
           continue}
         var acc$2=_bUO_[1];
         strput_acc(b,_bUP_);
         add_string(b,_co_);
         var acc$0=acc$2;
         continue;
        case 6:
         var f=acc$0[2],p$2=acc$0[1];
         strput_acc(b,p$2);
         return add_string(b,caml_call1(f,0));
        case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
        case 8:
         var msg=acc$0[2],p$3=acc$0[1];
         strput_acc(b,p$3);
         return invalid_arg(msg);
        case 2:
        case 4:
         var s$0=acc$0[2],p$0=acc$0[1];
         strput_acc(b,p$0);
         return add_string(b,s$0);
        default:
         var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
  function failwith_message(param)
   {var fmt=param[1],buf=create$1(num_256);
    function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
    return make_printf(k,0,fmt)}
  function open_box_of_string(str)
   {if(caml_string_equal(str,_cp_))return _cq_;
    var len=caml_ml_string_length(str);
    function invalid_box(param){return caml_call1(failwith_message(_cr_),str)}
    function parse_spaces(i)
     {var i$0=i;
      for(;;)
       {if(i$0 === len)return i$0;
        var match=caml_string_get(str,i$0);
        if(9 !== match && 32 !== match)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function parse_lword(i,j)
     {var j$0=j;
      for(;;)
       {if(j$0 === len)return j$0;
        var match=caml_string_get(str,j$0),switcher=match + num_97 | 0;
        if(25 < switcher >>> 0)return j$0;
        var j$1=j$0 + 1 | 0,j$0=j$1;
        continue}}
    function parse_int(i,j)
     {var j$0=j;
      for(;;)
       {if(j$0 === len)return j$0;
        var match=caml_string_get(str,j$0),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
        return j$0}}
    var
     wstart=parse_spaces(0),
     wend=parse_lword(wstart,wstart),
     box_name=sub$0(str,wstart,wend - wstart | 0),
     nstart=parse_spaces(wend),
     nend=parse_int(nstart,nstart);
    if(nstart === nend)
     var indent=0;
    else
     try
      {var
        _bUM_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
        indent=_bUM_}
     catch(_bUN_)
      {_bUN_ = caml_wrap_exception(_bUN_);
       if(_bUN_[1] !== Failure)throw _bUN_;
       var indent=invalid_box(0)}
    var exp_end=parse_spaces(nend);
    if(exp_end !== len)invalid_box(0);
    var switch$0=0;
    if
     (caml_string_notequal(box_name,_cs_)
      &&
      caml_string_notequal(box_name,_ct_))
     var
      box_type=
       caml_string_notequal(box_name,_cu_)
        ?caml_string_notequal(box_name,_cv_)
          ?caml_string_notequal(box_name,_cw_)
            ?caml_string_notequal(box_name,_cx_)?invalid_box(0):1
            :2
          :3
        :0;
    else
     switch$0 = 1;
    if(switch$0)var box_type=4;
    return [0,indent,box_type]}
  function make_padding_fmt_ebb(pad,fmt)
   {if(typeof pad === "number")
     return [0,0,fmt];
    else
     {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
      var s$0=pad[1];
      return [0,[1,s$0],fmt]}}
  function make_padprec_fmt_ebb(pad,prec,fmt)
   {if(typeof prec === "number")
     var match=0 === prec?[0,0,fmt]:[0,1,fmt];
    else
     var p=prec[1],match=[0,[0,p],fmt];
    var prec$0=match[1];
    if(typeof pad === "number")
     return [0,0,prec$0,fmt];
    else
     {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
      var s$0=pad[1];
      return [0,[1,s$0],prec$0,fmt]}}
  function fmt_ebb_of_string(legacy_behavior,str)
   {if(legacy_behavior)
     var flag=legacy_behavior[1],legacy_behavior$0=flag;
    else
     var legacy_behavior$0=1;
    function invalid_format_message(str_ind,msg)
     {return caml_call3(failwith_message(_cy_),str,str_ind,msg)}
    function unexpected_end_of_format(end_ind)
     {return invalid_format_message(end_ind,_cz_)}
    function invalid_format_without(str_ind,c,s)
     {return caml_call4(failwith_message(_cB_),str,str_ind,c,s)}
    function expected_character(str_ind,expected,read)
     {return caml_call4(failwith_message(_cC_),str,str_ind,expected,read)}
    function add_literal(lit_start,str_ind,fmt)
     {var size=str_ind - lit_start | 0;
      return 0 === size
              ?[0,fmt]
              :1 === size
                ?[0,[12,caml_string_get(str,lit_start),fmt]]
                :[0,[11,sub$0(str,lit_start,size),fmt]]}
    function parse_positive(str_ind,end_ind,acc)
     {var str_ind$0=str_ind,acc$0=acc;
      for(;;)
       {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
        var c=caml_string_get(str,str_ind$0),switcher=c + num_48 | 0;
        if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
        var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
        if(max_string_length < acc$1)
         return caml_call3(failwith_message(_c$_),str,acc$1,max_string_length);
        var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
        continue}}
    function parse_integer(str_ind,end_ind)
     {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
      var match=caml_string_get(str,str_ind);
      if(48 <= match)
       {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
      else
       if(45 === match)
        {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
         var c=caml_string_get(str,str_ind + 1 | 0),switcher=c + num_48 | 0;
         if(9 < switcher >>> 0)
          return expected_character(str_ind + 1 | 0,_db_,c);
         var
          match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
          n=match$0[2],
          next_ind=match$0[1];
         return [0,next_ind,- n | 0]}
      throw [0,Assert_failure,_da_]}
    function parse_spaces(str_ind,end_ind)
     {var str_ind$0=str_ind;
      for(;;)
       {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
        if(32 === caml_string_get(str,str_ind$0))
         {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
        return str_ind$0}}
    function incompatible_flag(pct_ind,str_ind,symb,option)
     {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
      return caml_call5(failwith_message(_dn_),str,pct_ind,option,symb,subfmt)}
    function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
     {var plus$0=plus,hash$0=hash,space$0=space;
      for(;;)
       {var switch$0=0;
        if(0 === plus$0)
         if(0 === hash$0)
          if(0 === space$0)
           {var switcher=symb + num_88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:return 8;
               case 12:return 0;
               case 17:return 3;
               case 23:return 10;
               case 29:return 12;
               case 32:return 6
               }}
          else
           {if(num_100 === symb)return 2;if(num_105 === symb)return 5}
         else
          if(0 === space$0)
           {var switcher$0=symb + num_88 | 0;
            if(32 < switcher$0 >>> 0)
             switch$0 = 1;
            else
             switch(switcher$0)
              {case 0:return 9;
               case 12:return 13;
               case 17:return 14;
               case 23:return 11;
               case 29:return 15;
               case 32:return 7;
               default:switch$0 = 1}}
          else
           switch$0 = 1;
        else
         if(0 === hash$0)
          {if(0 === space$0)
            {if(num_100 === symb)return 1;if(num_105 === symb)return 4}}
         else
          switch$0 = 1;
        if(switch$0)
         {var switcher$1=symb + num_88 | 0;
          if(! (32 < switcher$1 >>> 0))
           switch(switcher$1)
            {case 0:if(legacy_behavior$0)return 9;break;
             case 23:if(legacy_behavior$0)return 11;break;
             case 32:if(legacy_behavior$0)return 7;break;
             case 12:
             case 17:
             case 29:
              if(legacy_behavior$0){var hash$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,symb,_dk_)
             }}
        if(0 === plus$0)
         {if(0 === space$0)throw [0,Assert_failure,_dg_];
          if(legacy_behavior$0){var space$0=0;continue}
          return incompatible_flag(pct_ind,str_ind,symb,_dh_)}
        if(0 === space$0)
         {if(legacy_behavior$0){var plus$0=0;continue}
          return incompatible_flag(pct_ind,str_ind,symb,_di_)}
        if(legacy_behavior$0){var space$0=0;continue}
        return incompatible_flag(pct_ind,str_ind,32,_dj_)}}
    function search_subformat_end(str_ind,end_ind,c)
     {var str_ind$0=str_ind;
      for(;;)
       {if(str_ind$0 === end_ind)
         caml_call3(failwith_message(_dc_),str,c,end_ind);
        var match=caml_string_get(str,str_ind$0);
        if(37 === match)
         {if((str_ind$0 + 1 | 0) === end_ind)
           unexpected_end_of_format(end_ind);
          if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
          var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
          if(95 <= match$0)
           {if(num_123 <= match$0)
             {if(! (num_126 <= match$0))
               {var switcher=match$0 + num_123$0 | 0;
                switch(switcher)
                 {case 0:
                   var
                    sub_end=
                     search_subformat_end(str_ind$0 + 2 | 0,end_ind,num_125),
                    str_ind$2=sub_end + 2 | 0,
                    str_ind$0=str_ind$2;
                   continue;
                  case 1:break;
                  default:
                   return expected_character(str_ind$0 + 1 | 0,_dd_,num_125)}}}
            else
             if(! (96 <= match$0))
              {if((str_ind$0 + 2 | 0) === end_ind)
                unexpected_end_of_format(end_ind);
               var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
               if(40 === match$1)
                {var
                  sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                  str_ind$3=sub_end$0 + 2 | 0,
                  str_ind$0=str_ind$3;
                 continue}
               if(num_123 === match$1)
                {var
                  sub_end$1=
                   search_subformat_end(str_ind$0 + 3 | 0,end_ind,num_125),
                  str_ind$4=sub_end$1 + 2 | 0,
                  str_ind$0=str_ind$4;
                 continue}
               var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
               continue}}
          else
           {if(40 === match$0)
             {var
               sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
               str_ind$6=sub_end$2 + 2 | 0,
               str_ind$0=str_ind$6;
              continue}
            if(41 === match$0)
             return expected_character(str_ind$0 + 1 | 0,_de_,41)}
          var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
          continue}
        var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
        continue}}
    function parse_magic_size(str_ind,end_ind)
     {try
       {var
         str_ind_1=parse_spaces(str_ind,end_ind),
         match$2=caml_string_get(str,str_ind_1),
         switch$0=0;
        if(48 <= match$2)
         {if(! (58 <= match$2))switch$0 = 1}
        else
         if(45 === match$2)switch$0 = 1;
        if(switch$0)
         {var
           match$3=parse_integer(str_ind_1,end_ind),
           size=match$3[2],
           str_ind_2=match$3[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind);
          if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
          var
           s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
           _bUK_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
        else
         var _bUK_=0;
        var _bUJ_=_bUK_}
      catch(_bUL_)
       {_bUL_ = caml_wrap_exception(_bUL_);
        if(_bUL_ !== Not_found && _bUL_[1] !== Failure)throw _bUL_;
        var _bUJ_=0}
      if(_bUJ_)
       {var
         match=_bUJ_[1],
         formatting_lit=match[2],
         next_ind=match[1],
         match$0=parse(next_ind,end_ind),
         fmt_rest=match$0[1];
        return [0,[17,formatting_lit,fmt_rest]]}
      var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
      return [0,[17,_c9_,fmt_rest$0]]}
    function parse_good_break(str_ind,end_ind)
     {try
       {var
         _bUC_=str_ind === end_ind?1:0,
         _bUD_=_bUC_ || (60 !== caml_string_get(str,str_ind)?1:0);
        if(_bUD_)throw Not_found;
        var
         str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
         match$0=caml_string_get(str,str_ind_1),
         switch$0=0;
        if(48 <= match$0)
         {if(! (58 <= match$0))switch$0 = 1}
        else
         if(45 === match$0)switch$0 = 1;
        if(! switch$0)throw Not_found;
        var
         match$1=parse_integer(str_ind_1,end_ind),
         width=match$1[2],
         str_ind_2=match$1[1],
         str_ind_3=parse_spaces(str_ind_2,end_ind),
         match$2=caml_string_get(str,str_ind_3),
         switcher=match$2 + num_45 | 0,
         switch$1=0;
        if(12 < switcher >>> 0)
         if(17 === switcher)
          var
           s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
           _bUE_=[0,s,width,0],
           _bUF_=str_ind_3 + 1 | 0,
           next_ind=_bUF_,
           formatting_lit$0=_bUE_;
         else
          switch$1 = 1;
        else
         {var switcher$0=switcher - 1 | 0;
          if(1 < switcher$0 >>> 0)
           {var
             match$3=parse_integer(str_ind_3,end_ind),
             offset=match$3[2],
             str_ind_4=match$3[1],
             str_ind_5=parse_spaces(str_ind_4,end_ind);
            if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
            var
             s$0=sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
             _bUG_=[0,s$0,width,offset],
             _bUH_=str_ind_5 + 1 | 0,
             next_ind=_bUH_,
             formatting_lit$0=_bUG_}
          else
           switch$1 = 1}
        if(switch$1)throw Not_found}
      catch(_bUI_)
       {_bUI_ = caml_wrap_exception(_bUI_);
        if(_bUI_ !== Not_found && _bUI_[1] !== Failure)throw _bUI_;
        var next_ind=str_ind,formatting_lit$0=formatting_lit}
      var match=parse(next_ind,end_ind),fmt_rest=match[1];
      return [0,[17,formatting_lit$0,fmt_rest]]}
    function parse_tag(is_open_tag,str_ind,end_ind)
     {try
       {if(str_ind === end_ind)throw Not_found;
        var match$0=caml_string_get(str,str_ind);
        if(60 === match$0)
         {var ind=index_from(str,str_ind + 1 | 0,62);
          if(end_ind <= ind)throw Not_found;
          var
           sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
           match$1=parse(ind + 1 | 0,end_ind),
           fmt_rest$0=match$1[1],
           match$2=parse(str_ind,ind + 1 | 0),
           sub_fmt=match$2[1],
           sub_format$0=[0,sub_fmt,sub_str];
          if(is_open_tag)
           var formatting$0=[0,sub_format$0];
          else
           {var switch$0=0;
            if
             (typeof sub_fmt
              !==
              "number"
              &&
              11
              ===
              sub_fmt[0]
              &&
              typeof sub_fmt[2]
              ===
              "number")
             {var str$0=sub_fmt[1];
              try
               {var switch$1=0;open_box_of_string(str$0)}
              catch(_bUB_)
               {_bUB_ = caml_wrap_exception(_bUB_);
                if(_bUB_[1] !== Failure)throw _bUB_;
                switch$0 = 1;
                switch$1 = 1}
              if(! switch$1)switch$0 = 1}
            var formatting$0=[1,sub_format$0]}
          var _bUz_=[0,[18,formatting$0,fmt_rest$0]];
          return _bUz_}
        throw Not_found}
      catch(_bUA_)
       {_bUA_ = caml_wrap_exception(_bUA_);
        if(_bUA_ === Not_found)
         {var
           match=parse(str_ind,end_ind),
           fmt_rest=match[1],
           formatting=is_open_tag?[0,sub_format]:[1,sub_format];
          return [0,[18,formatting,fmt_rest]]}
        throw _bUA_}}
    function parse_flags(pct_ind,str_ind,end_ind,ign)
     {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
      function set_flag(str_ind,flag)
       {var _bUw_=flag[1],_bUx_=_bUw_?1 - legacy_behavior$0:_bUw_;
        if(_bUx_)
         {var _bUy_=caml_string_get(str,str_ind);
          caml_call3(failwith_message(_cD_),str,str_ind,_bUy_)}
        flag[1] = 1;
        return 0}
      var str_ind$0=str_ind;
      for(;;)
       {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind$0),switcher=match + num_32 | 0;
        if(! (16 < switcher >>> 0))
         switch(switcher)
          {case 0:
            set_flag(str_ind$0,space);
            var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
            continue;
           case 3:
            set_flag(str_ind$0,hash);
            var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
            continue;
           case 11:
            set_flag(str_ind$0,plus);
            var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
            continue;
           case 13:
            set_flag(str_ind$0,minus);
            var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
            continue;
           case 16:
            set_flag(str_ind$0,zero);
            var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
            continue
           }
        var
         _bUr_=space[1],
         _bUs_=hash[1],
         _bUt_=plus[1],
         _bUu_=minus[1],
         _bUv_=zero[1];
        if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
        var
         padty=
          0 === _bUv_
           ?0 === _bUu_?1:0
           :0 === _bUu_
             ?2
             :legacy_behavior$0?0:incompatible_flag(pct_ind,str_ind$0,45,_cG_),
         match$0=caml_string_get(str,str_ind$0);
        if(48 <= match$0)
         {if(! (58 <= match$0))
           {var
             match$1=parse_positive(str_ind$0,end_ind,0),
             width=match$1[2],
             new_ind=match$1[1];
            return parse_after_padding
                    (pct_ind,
                     new_ind,
                     end_ind,
                     _bUu_,
                     _bUt_,
                     _bUs_,
                     _bUr_,
                     ign,
                     [0,padty,width])}}
        else
         if(42 === match$0)
          return parse_after_padding
                  (pct_ind,
                   str_ind$0 + 1 | 0,
                   end_ind,
                   _bUu_,
                   _bUt_,
                   _bUs_,
                   _bUr_,
                   ign,
                   [1,padty]);
        switch(padty)
         {case 0:
           if(1 - legacy_behavior$0)
            invalid_format_without(str_ind$0 - 1 | 0,45,_cE_);
           return parse_after_padding
                   (pct_ind,str_ind$0,end_ind,_bUu_,_bUt_,_bUs_,_bUr_,ign,0);
          case 1:
           return parse_after_padding
                   (pct_ind,str_ind$0,end_ind,_bUu_,_bUt_,_bUs_,_bUr_,ign,0);
          default:
           return parse_after_padding
                   (pct_ind,str_ind$0,end_ind,_bUu_,_bUt_,_bUs_,_bUr_,ign,_cF_)}}}
    function parse_after_padding
     (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
     {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
      var symb=caml_string_get(str,str_ind);
      if(46 === symb)
       {var str_ind$0=str_ind + 1 | 0;
        if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
        var
         parse_literal=
          function(minus,str_ind)
           {var
             match=parse_positive(str_ind,end_ind,0),
             prec=match[2],
             new_ind=match[1];
            return parse_after_precision
                    (pct_ind,
                     new_ind,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     [0,prec])},
         symb$0=caml_string_get(str,str_ind$0);
        if(48 <= symb$0)
         {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
        else
         if(42 <= symb$0)
          {var switcher=symb$0 + num_42 | 0;
           switch(switcher)
            {case 0:
              return parse_after_precision
                      (pct_ind,
                       str_ind$0 + 1 | 0,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       1);
             case 1:
             case 3:
              if(legacy_behavior$0)
               {var
                 _bUq_=str_ind$0 + 1 | 0,
                 minus$0=minus || (45 === symb$0?1:0);
                return parse_literal(minus$0,_bUq_)}
              break
             }}
        return legacy_behavior$0
                ?parse_after_precision
                  (pct_ind,
                   str_ind$0,
                   end_ind,
                   minus,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   _cH_)
                :invalid_format_without(str_ind$0 - 1 | 0,46,_cI_)}
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb)}
    function parse_after_precision
     (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
     {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
      function parse_conv(padprec)
       {return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 match,
                 padprec,
                 caml_string_get(str,str_ind))}
      if(typeof pad === "number")
       {if(typeof match === "number" && 0 === match)return parse_conv(0);
        if(0 === minus)
         {if(typeof match === "number")return parse_conv(_cJ_);
          var n=match[1];
          return parse_conv([0,1,n])}
        if(typeof match === "number")return parse_conv(_cK_);
        var n$0=match[1];
        return parse_conv([0,0,n$0])}
      return parse_conv(pad)}
    function parse_conversion
     (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
     {var
       plus_used=[0,0],
       hash_used=[0,0],
       space_used=[0,0],
       ign_used=[0,0],
       pad_used=[0,0],
       prec_used=[0,0];
      function get_plus(param){plus_used[1] = 1;return plus}
      function get_hash(param){hash_used[1] = 1;return hash}
      function get_space(param){space_used[1] = 1;return space}
      function get_ign(param){ign_used[1] = 1;return ign}
      function get_pad(param){pad_used[1] = 1;return pad}
      function get_prec(param){prec_used[1] = 1;return prec}
      function get_padprec(param){pad_used[1] = 1;return padprec}
      function get_int_pad(param)
       {var pad=get_pad(0),match=get_prec(0);
        if(typeof match === "number" && 0 === match)return pad;
        if(typeof pad === "number")
         return 0;
        else
         {if(0 === pad[0])
           {if(2 <= pad[1])
             {var n=pad[2];
              return legacy_behavior$0
                      ?[0,1,n]
                      :incompatible_flag(pct_ind,str_ind,48,_cL_)}
            return pad}
          return 2 <= pad[1]
                  ?legacy_behavior$0
                    ?_cM_
                    :incompatible_flag(pct_ind,str_ind,48,_cN_)
                  :pad}}
      function check_no_0(symb,pad)
       {if(typeof pad === "number")
         return pad;
        else
         {if(0 === pad[0])
           {if(2 <= pad[1])
             {var width=pad[2];
              return legacy_behavior$0
                      ?[0,1,width]
                      :incompatible_flag(pct_ind,str_ind,symb,_cO_)}
            return pad}
          return 2 <= pad[1]
                  ?legacy_behavior$0
                    ?_cP_
                    :incompatible_flag(pct_ind,str_ind,symb,_cQ_)
                  :pad}}
      function opt_of_pad(c,pad)
       {if(typeof pad === "number")
         return 0;
        else
         {if(0 === pad[0])
           switch(pad[1])
            {case 0:
              var width=pad[2];
              return legacy_behavior$0
                      ?[0,width]
                      :incompatible_flag(pct_ind,str_ind,c,_cR_);
             case 1:var width$0=pad[2];return [0,width$0];
             default:
              var width$1=pad[2];
              return legacy_behavior$0
                      ?[0,width$1]
                      :incompatible_flag(pct_ind,str_ind,c,_cS_)}
          return incompatible_flag(pct_ind,str_ind,c,_cT_)}}
      function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
      function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
      var switch$0=0;
      if(num_124 <= symb)
       switch$0 = 1;
      else
       switch(symb)
        {case 33:
          var
           match$6=parse(str_ind,end_ind),
           fmt_rest$5=match$6[1],
           fmt_result=[0,[10,fmt_rest$5]];
          break;
         case 40:
          var
           sub_end=search_subformat_end(str_ind,end_ind,41),
           match$8=parse(sub_end + 2 | 0,end_ind),
           fmt_rest$7=match$8[1],
           match$9=parse(str_ind,sub_end),
           sub_fmt=match$9[1],
           sub_fmtty=fmtty_of_fmt(sub_fmt);
          if(get_ign(0))
           var
            ignored$2=[9,get_pad_opt(95),sub_fmtty],
            _bTZ_=[0,[23,ignored$2,fmt_rest$7]];
          else
           var _bTZ_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
          var fmt_result=_bTZ_;
          break;
         case 44:var fmt_result=parse(str_ind,end_ind);break;
         case 67:
          var
           match$12=parse(str_ind,end_ind),
           fmt_rest$10=match$12[1],
           _bT1_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
           fmt_result=_bT1_;
          break;
         case 78:
          var
           match$16=parse(str_ind,end_ind),
           fmt_rest$14=match$16[1],
           counter$0=2;
          if(get_ign(0))
           var ignored$6=[11,counter$0],_bT7_=[0,[23,ignored$6,fmt_rest$14]];
          else
           var _bT7_=[0,[21,counter$0,fmt_rest$14]];
          var fmt_result=_bT7_;
          break;
         case 83:
          var
           pad$6=check_no_0(symb,get_padprec(0)),
           match$17=parse(str_ind,end_ind),
           fmt_rest$15=match$17[1];
          if(get_ign(0))
           var
            ignored$7=[1,get_padprec_opt(95)],
            _bT8_=[0,[23,ignored$7,fmt_rest$15]];
          else
           var
            match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
            fmt_rest$16=match$18[2],
            pad$7=match$18[1],
            _bT8_=[0,[3,pad$7,fmt_rest$16]];
          var fmt_result=_bT8_;
          break;
         case 91:
          if(str_ind === end_ind)unexpected_end_of_format(end_ind);
          var
           char_set$1=create_char_set(0),
           add_char=function(c){return add_in_char_set(char_set$1,c)},
           add_range=
            function(c$0,c)
             {if(! (c < c$0))
               {var i=c$0;
                for(;;)
                 {add_in_char_set(char_set$1,char_of_int(i));
                  var _bUp_=i + 1 | 0;
                  if(c !== i){var i=_bUp_;continue}
                  break}}
              return 0},
           fail_single_percent=
            function(str_ind)
             {return caml_call2(failwith_message(_c__),str,str_ind)},
           parse_char_set_content=
            function(counter,str_ind,end_ind)
             {var str_ind$0=str_ind;
              for(;;)
               {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                var c=caml_string_get(str,str_ind$0);
                if(45 === c)
                 {add_char(45);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                  continue}
                if(93 === c)return str_ind$0 + 1 | 0;
                var _bUo_=str_ind$0 + 1 | 0;
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return parse_char_set_after_char$0
                          (counter$0,_bUo_,end_ind,c)}
                return caml_trampoline_return
                        (parse_char_set_after_char$0,[0,_bUo_,end_ind,c])}},
           parse_char_set_after_char$0=
            function(counter,str_ind,end_ind,c)
             {var str_ind$0=str_ind,c$0=c;
              for(;;)
               {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                if(46 <= c$1)
                 {if(64 === c$1)
                   switch$0 = 1;
                  else
                   if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                else
                 if(37 === c$1)
                  switch$0 = 1;
                 else
                  if(45 <= c$1)
                   {var str_ind$2=str_ind$0 + 1 | 0;
                    if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                    var c$2=caml_string_get(str,str_ind$2);
                    if(37 === c$2)
                     {if((str_ind$2 + 1 | 0) === end_ind)
                       unexpected_end_of_format(end_ind);
                      var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                      if(37 !== c$3 && 64 !== c$3)
                       return fail_single_percent(str_ind$2);
                      add_range(c$0,c$3);
                      var _bUm_=str_ind$2 + 2 | 0;
                      if(counter < 50)
                       {var counter$2=counter + 1 | 0;
                        return parse_char_set_content(counter$2,_bUm_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_bUm_,end_ind])}
                    if(93 === c$2)
                     {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                    add_range(c$0,c$2);
                    var _bUn_=str_ind$2 + 1 | 0;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return parse_char_set_content(counter$1,_bUn_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_bUn_,end_ind])}
                if(switch$0 && 37 === c$0)
                 {add_char(c$1);
                  var _bUl_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_content(counter$0,_bUl_,end_ind)}
                  return caml_trampoline_return
                          (parse_char_set_content,[0,_bUl_,end_ind])}
                if(37 === c$0)fail_single_percent(str_ind$0);
                add_char(c$0);
                var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                continue}},
           parse_char_set_after_char=
            function(str_ind,end_ind,c)
             {return caml_trampoline
                      (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
          if(str_ind === end_ind)unexpected_end_of_format(end_ind);
          var match$31=caml_string_get(str,str_ind);
          if(94 === match$31)
           var str_ind$0=str_ind + 1 | 0,str_ind$1=str_ind$0,reverse=1;
          else
           var str_ind$1=str_ind,reverse=0;
          if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
          var
           c=caml_string_get(str,str_ind$1),
           next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
           char_set=to_string(char_set$1);
          if(reverse)
           {var char_set$0=create_char_set(0),i=0;
            for(;;)
             {caml_bytes_set
               (char_set$0,
                i,
                char_of_int(caml_string_get(char_set,i) ^ num_255));
              var _bTz_=i + 1 | 0;
              if(31 !== i){var i=_bTz_;continue}
              var char_set$2=caml_string_of_bytes(char_set$0);
              break}}
          else
           var char_set$2=char_set;
          var match$21=parse(next_ind,end_ind),fmt_rest$19=match$21[1];
          if(get_ign(0))
           var
            ignored$9=[10,get_pad_opt(95),char_set$2],
            _bUb_=[0,[23,ignored$9,fmt_rest$19]];
          else
           var _bUb_=[0,[20,get_pad_opt(91),char_set$2,fmt_rest$19]];
          var fmt_result=_bUb_;
          break;
         case 97:
          var
           match$22=parse(str_ind,end_ind),
           fmt_rest$20=match$22[1],
           fmt_result=[0,[15,fmt_rest$20]];
          break;
         case 99:
          var
           char_format=
            function(fmt_rest)
             {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
           match$23=parse(str_ind,end_ind),
           fmt_rest$21=match$23[1],
           match$24=get_pad_opt(99);
          if(match$24)
           {if(0 === match$24[1])
             var
              _bUc_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
              _bUd_=_bUc_;
            else
             var
              _bUd_=
               legacy_behavior$0
                ?char_format(fmt_rest$21)
                :invalid_format_message(str_ind,_cA_);
            var _bUe_=_bUd_}
          else
           var _bUe_=char_format(fmt_rest$21);
          var fmt_result=_bUe_;
          break;
         case 114:
          var
           match$25=parse(str_ind,end_ind),
           fmt_rest$22=match$25[1],
           _bUf_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
           fmt_result=_bUf_;
          break;
         case 115:
          var
           pad$9=check_no_0(symb,get_padprec(0)),
           match$26=parse(str_ind,end_ind),
           fmt_rest$23=match$26[1];
          if(get_ign(0))
           var
            ignored$10=[0,get_padprec_opt(95)],
            _bUg_=[0,[23,ignored$10,fmt_rest$23]];
          else
           var
            match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
            fmt_rest$24=match$27[2],
            pad$10=match$27[1],
            _bUg_=[0,[2,pad$10,fmt_rest$24]];
          var fmt_result=_bUg_;
          break;
         case 116:
          var
           match$28=parse(str_ind,end_ind),
           fmt_rest$25=match$28[1],
           fmt_result=[0,[16,fmt_rest$25]];
          break;
         case 123:
          var
           sub_end$0=search_subformat_end(str_ind,end_ind,num_125),
           match$29=parse(str_ind,sub_end$0),
           sub_fmt$0=match$29[1],
           match$30=parse(sub_end$0 + 2 | 0,end_ind),
           fmt_rest$26=match$30[1],
           sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
          if(get_ign(0))
           var
            ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
            _bUh_=[0,[23,ignored$11,fmt_rest$26]];
          else
           var _bUh_=[0,[13,get_pad_opt(num_123),sub_fmtty$0,fmt_rest$26]];
          var fmt_result=_bUh_;
          break;
         case 66:
         case 98:
          var
           pad$3=check_no_0(symb,get_padprec(0)),
           match$10=parse(str_ind,end_ind),
           fmt_rest$8=match$10[1];
          if(get_ign(0))
           var
            ignored$3=[7,get_padprec_opt(95)],
            _bT0_=[0,[23,ignored$3,fmt_rest$8]];
          else
           var
            match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
            fmt_rest$9=match$11[2],
            pad$4=match$11[1],
            _bT0_=[0,[9,pad$4,fmt_rest$9]];
          var fmt_result=_bT0_;
          break;
         case 37:
         case 64:
          var
           match$7=parse(str_ind,end_ind),
           fmt_rest$6=match$7[1],
           fmt_result=[0,[12,symb,fmt_rest$6]];
          break;
         case 76:
         case 108:
         case 110:
          var switch$1=0;
          if(str_ind !== end_ind)
           {var
             symb$0=caml_string_get(str,str_ind),
             _bUi_=symb$0 + num_88 | 0,
             switch$2=0;
            if(! (32 < _bUi_ >>> 0))
             switch(_bUi_)
              {case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:var _bT6_=1;switch$2 = 1;break
               }
            if(! switch$2)var _bT6_=0;
            if(_bT6_){switch$0 = 1;switch$1 = 1}}
          if(! switch$1)
           {var
             match$15=parse(str_ind,end_ind),
             fmt_rest$13=match$15[1],
             switch$3=0;
            if(num_108 <= symb)
             {if(! (num_111 <= symb))
               {var switcher$0=symb + num_108$0 | 0;
                switch(switcher$0)
                 {case 0:var counter=0;switch$3 = 1;break;
                  case 1:break;
                  default:var counter=1;switch$3 = 1}}}
            else
             if(76 === symb){var counter=2;switch$3 = 1}
            if(! switch$3)throw [0,Assert_failure,_df_];
            if(get_ign(0))
             var ignored$5=[11,counter],_bT5_=[0,[23,ignored$5,fmt_rest$13]];
            else
             var _bT5_=[0,[21,counter,fmt_rest$13]];
            var fmt_result=_bT5_}
          break;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var fmt_result=caml_call3(failwith_message(_c5_),str,pct_ind,symb);
          break;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           _bT9_=get_space(0),
           _bT__=get_hash(0),
           iconv$2=
            compute_int_conv(pct_ind,str_ind,get_plus(0),_bT__,_bT9_,symb),
           match$19=parse(str_ind,end_ind),
           fmt_rest$17=match$19[1];
          if(get_ign(0))
           var
            ignored$8=[2,iconv$2,get_pad_opt(95)],
            _bT$_=[0,[23,ignored$8,fmt_rest$17]];
          else
           var
            _bUa_=get_prec(0),
            match$20=make_padprec_fmt_ebb(get_int_pad(0),_bUa_,fmt_rest$17),
            fmt_rest$18=match$20[3],
            prec$4=match$20[2],
            pad$8=match$20[1],
            _bT$_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
          var fmt_result=_bT$_;
          break;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1=get_space(0),
           plus$2=get_plus(0),
           flag=
            0 === plus$2
             ?0 === space$1?0:2
             :0 === space$1
               ?1
               :legacy_behavior$0?1:incompatible_flag(pct_ind,str_ind,32,_dm_),
           switch$4=0;
          if(73 <= symb)
           {var switcher$1=symb - 101 | 0;
            if(! (3 < switcher$1 >>> 0))
             {switch(switcher$1)
               {case 0:var _bUj_=1;break;
                case 1:var _bUj_=0;break;
                case 2:var _bUj_=3;break;
                default:var _bUj_=6}
              var kind=_bUj_;
              switch$4 = 1}}
          else
           if(69 <= symb)
            {var switcher$2=symb + num_69 | 0;
             switch(switcher$2)
              {case 0:var _bUk_=2;break;
               case 1:var _bUk_=5;break;
               case 2:var _bUk_=4;break;
               default:var _bUk_=7}
             var kind=_bUk_;
             switch$4 = 1}
          if(! switch$4)throw [0,Assert_failure,_dl_];
          var
           fconv=[0,flag,kind],
           match$13=parse(str_ind,end_ind),
           fmt_rest$11=match$13[1];
          if(get_ign(0))
           {var match=get_prec(0);
            if(typeof match === "number")
             var
              _bT2_=
               0 === match?0:incompatible_flag(pct_ind,str_ind,95,_cU_);
            else
             var ndec=match[1],_bT2_=[0,ndec];
            var
             ignored$4=[6,get_pad_opt(95),_bT2_],
             _bT3_=[0,[23,ignored$4,fmt_rest$11]]}
          else
           var
            _bT4_=get_prec(0),
            match$14=make_padprec_fmt_ebb(get_pad(0),_bT4_,fmt_rest$11),
            fmt_rest$12=match$14[3],
            prec$3=match$14[2],
            pad$5=match$14[1],
            _bT3_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
          var fmt_result=_bT3_;
          break;
         default:switch$0 = 1}
      if(switch$0)
       {var switch$5=0;
        if(num_108 <= symb)
         if(num_111 <= symb)
          switch$5 = 1;
         else
          {var switcher=symb + num_108$0 | 0,switch$6=0;
           switch(switcher)
            {case 0:
              var
               _bTJ_=caml_string_get(str,str_ind),
               _bTK_=get_space(0),
               _bTL_=get_hash(0),
               iconv=
                compute_int_conv
                 (pct_ind,str_ind + 1 | 0,get_plus(0),_bTL_,_bTK_,_bTJ_),
               match$0=parse(str_ind + 1 | 0,end_ind),
               fmt_rest=match$0[1];
              if(get_ign(0))
               var
                ignored=[3,iconv,get_pad_opt(95)],
                _bTM_=[0,[23,ignored,fmt_rest]];
              else
               var
                _bTO_=get_prec(0),
                match$1=make_padprec_fmt_ebb(get_int_pad(0),_bTO_,fmt_rest),
                fmt_rest$0=match$1[3],
                prec$0=match$1[2],
                pad$0=match$1[1],
                _bTM_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
              var _bTN_=_bTM_;
              break;
             case 1:switch$5 = 1;switch$6 = 1;break;
             default:
              var
               _bTP_=caml_string_get(str,str_ind),
               _bTQ_=get_space(0),
               _bTR_=get_hash(0),
               iconv$0=
                compute_int_conv
                 (pct_ind,str_ind + 1 | 0,get_plus(0),_bTR_,_bTQ_,_bTP_),
               match$2=parse(str_ind + 1 | 0,end_ind),
               fmt_rest$1=match$2[1];
              if(get_ign(0))
               var
                ignored$0=[4,iconv$0,get_pad_opt(95)],
                _bTS_=[0,[23,ignored$0,fmt_rest$1]];
              else
               var
                _bTT_=get_prec(0),
                match$3=make_padprec_fmt_ebb(get_int_pad(0),_bTT_,fmt_rest$1),
                fmt_rest$2=match$3[3],
                prec$1=match$3[2],
                pad$1=match$3[1],
                _bTS_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
              var _bTN_=_bTS_}
           if(! switch$6)var fmt_result=_bTN_}
        else
         if(76 === symb)
          {var
            _bTU_=caml_string_get(str,str_ind),
            _bTV_=get_space(0),
            _bTW_=get_hash(0),
            iconv$1=
             compute_int_conv
              (pct_ind,str_ind + 1 | 0,get_plus(0),_bTW_,_bTV_,_bTU_),
            match$4=parse(str_ind + 1 | 0,end_ind),
            fmt_rest$3=match$4[1];
           if(get_ign(0))
            var
             ignored$1=[5,iconv$1,get_pad_opt(95)],
             _bTX_=[0,[23,ignored$1,fmt_rest$3]];
           else
            var
             _bTY_=get_prec(0),
             match$5=make_padprec_fmt_ebb(get_int_pad(0),_bTY_,fmt_rest$3),
             fmt_rest$4=match$5[3],
             prec$2=match$5[2],
             pad$2=match$5[1],
             _bTX_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
           var fmt_result=_bTX_}
         else
          switch$5 = 1;
        if(switch$5)
         var
          fmt_result=
           caml_call3(failwith_message(_cV_),str,str_ind - 1 | 0,symb)}
      if(1 - legacy_behavior$0)
       {var _bTA_=1 - plus_used[1],plus$0=_bTA_?plus:_bTA_;
        if(plus$0)incompatible_flag(pct_ind,str_ind,symb,_cW_);
        var _bTB_=1 - hash_used[1],hash$0=_bTB_?hash:_bTB_;
        if(hash$0)incompatible_flag(pct_ind,str_ind,symb,_cX_);
        var _bTC_=1 - space_used[1],space$0=_bTC_?space:_bTC_;
        if(space$0)incompatible_flag(pct_ind,str_ind,symb,_cY_);
        var
         _bTD_=1 - pad_used[1],
         _bTE_=_bTD_?caml_notequal([0,pad],_cZ_):_bTD_;
        if(_bTE_)incompatible_flag(pct_ind,str_ind,symb,_c0_);
        var
         _bTF_=1 - prec_used[1],
         _bTG_=_bTF_?caml_notequal([0,prec],_c1_):_bTF_;
        if(_bTG_)
         {var _bTH_=ign?95:symb;incompatible_flag(pct_ind,str_ind,_bTH_,_c2_)}
        var plus$1=ign?plus:ign;
        if(plus$1)incompatible_flag(pct_ind,str_ind,95,_c3_)}
      var _bTI_=1 - ign_used[1],ign$0=_bTI_?ign:_bTI_;
      if(ign$0)
       {var switch$7=0;
        if(38 <= symb)
         {if(44 !== symb && 64 !== symb)switch$7 = 1}
        else
         if(33 !== symb && ! (37 <= symb))switch$7 = 1;
        var switch$8=0;
        if(switch$7 || ! legacy_behavior$0)switch$8 = 1;
        if(switch$8)incompatible_flag(pct_ind,str_ind,symb,_c4_)}
      return fmt_result}
    function parse(lit_start,end_ind)
     {var str_ind=lit_start;
      for(;;)
       {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
        var match=caml_string_get(str,str_ind);
        if(37 === match)
         {var str_ind$2=str_ind + 1 | 0;
          if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
          var
           match$1=caml_string_get(str,str_ind$2),
           _bTy_=
            95 === match$1
             ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
             :parse_flags(str_ind,str_ind$2,end_ind,0),
           fmt_rest=_bTy_[1];
          return add_literal(lit_start,str_ind,fmt_rest)}
        if(64 === match)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)
           var match$0=_c6_;
          else
           {var c=caml_string_get(str,str_ind$0),switch$0=0;
            if(65 <= c)
             if(94 <= c)
              {var switcher=c + num_123$0 | 0;
               if(2 < switcher >>> 0)
                switch$0 = 1;
               else
                switch(switcher)
                 {case 0:
                   var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                  case 1:switch$0 = 1;break;
                  default:
                   var
                    match$3=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$2=match$3[1],
                    match$0=[0,[17,1,fmt_rest$2]]}}
             else
              if(91 <= c)
               {var switcher$0=c + num_91 | 0;
                switch(switcher$0)
                 {case 0:
                   var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                  case 1:switch$0 = 1;break;
                  default:
                   var
                    match$4=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$3=match$4[1],
                    match$0=[0,[17,0,fmt_rest$3]]}}
              else
               switch$0 = 1;
            else
             if(10 === c)
              var
               match$5=parse(str_ind$0 + 1 | 0,end_ind),
               fmt_rest$4=match$5[1],
               match$0=[0,[17,3,fmt_rest$4]];
             else
              if(32 <= c)
               {var switcher$1=c + num_32 | 0;
                switch(switcher$1)
                 {case 0:
                   var
                    match$6=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$5=match$6[1],
                    match$0=[0,[17,_c7_,fmt_rest$5]];
                   break;
                  case 5:
                   var switch$1=0;
                   if
                    ((str_ind$0 + 1 | 0)
                     <
                     end_ind
                     &&
                     37
                     ===
                     caml_string_get(str,str_ind$0 + 1 | 0))
                    {var
                      match$7=parse(str_ind$0 + 2 | 0,end_ind),
                      fmt_rest$6=match$7[1],
                      match$0=[0,[17,6,fmt_rest$6]];
                     switch$1 = 1}
                   if(! switch$1)
                    var
                     match$8=parse(str_ind$0,end_ind),
                     fmt_rest$7=match$8[1],
                     match$0=[0,[12,64,fmt_rest$7]];
                   break;
                  case 12:
                   var
                    match$9=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$8=match$9[1],
                    match$0=[0,[17,_c8_,fmt_rest$8]];
                   break;
                  case 14:
                   var
                    match$10=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$9=match$10[1],
                    match$0=[0,[17,4,fmt_rest$9]];
                   break;
                  case 27:
                   var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                   break;
                  case 28:
                   var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                   break;
                  case 31:
                   var
                    match$11=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$10=match$11[1],
                    match$0=[0,[17,2,fmt_rest$10]];
                   break;
                  case 32:
                   var
                    match$12=parse(str_ind$0 + 1 | 0,end_ind),
                    fmt_rest$11=match$12[1],
                    match$0=[0,[17,5,fmt_rest$11]];
                   break;
                  default:switch$0 = 1}}
              else
               switch$0 = 1;
            if(switch$0)
             var
              match$2=parse(str_ind$0 + 1 | 0,end_ind),
              fmt_rest$1=match$2[1],
              match$0=[0,[17,[2,c],fmt_rest$1]]}
          var fmt_rest$0=match$0[1];
          return add_literal(lit_start,str_ind,fmt_rest$0)}
        var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
        continue}}
    return parse(0,caml_ml_string_length(str))}
  function fprintf(oc,fmt$0)
   {var fmt=fmt$0[1],_bTx_=0;
    return make_printf(function(acc){output_acc(oc,acc);return 0},_bTx_,fmt)}
  function bprintf(b,fmt$0)
   {var fmt=fmt$0[1],_bTw_=0;
    return make_printf(function(acc){bufput_acc(b,acc);return 0},_bTw_,fmt)}
  function eprintf(fmt){return fprintf(stderr,fmt)}
  function ksprintf(k,param)
   {var fmt=param[1];
    function k$0(acc)
     {var buf=create$1(64);
      strput_acc(buf,acc);
      return caml_call1(k,contents(buf))}
    return make_printf(k$0,0,fmt)}
  function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
  var
   Bad=[num_248,_dp_,caml_fresh_oo_id(0)],
   Help=[num_248,_dq_,caml_fresh_oo_id(0)];
  caml_fresh_oo_id(0);
  var printers=[0,0];
  function field(x,i)
   {var f=x[1 + i];
    return is_block(f)
            ?caml_obj_tag(f) === num_252
              ?caml_call1(sprintf(_dr_),f)
              :caml_obj_tag(f) === num_253?of_float(f):_ds_
            :caml_call1(sprintf(_dt_),f)}
  function other_fields(x,i)
   {if(x.length - 1 <= i)return _du_;
    var _bTu_=other_fields(x,i + 1 | 0),_bTv_=field(x,i);
    return caml_call2(sprintf(_dv_),_bTv_,_bTu_)}
  function to_string$0(e)
   {function conv(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var tl=param$0[2],hd=param$0[1];
          try {var switch$0=0,val=caml_call1(hd,e);switch$0 = 1}catch(_bTt_){}
          if(switch$0 && val){var s=val[1];return [0,s]}
          var param$0=tl;
          continue}
        return 0}}
    var match$0=conv(printers[1]);
    if(match$0){var s=match$0[1];return s}
    if(e === Out_of_memory)return _dA_;
    if(e === Stack_overflow)return _dB_;
    if(e[1] === Match_failure)
     {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
      return caml_call5(sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_dC_)}
    if(e[1] === Assert_failure)
     {var match$2=e[2],char$1=match$2[3],line$0=match$2[2],file$0=match$2[1];
      return caml_call5
              (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_dD_)}
    if(e[1] === Undefined_recursive_module)
     {var match$3=e[2],char$2=match$3[3],line$1=match$3[2],file$1=match$3[1];
      return caml_call5
              (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_dE_)}
    if(0 === caml_obj_tag(e))
     {var constructor=e[1][1],match=e.length - 1;
      if(2 < match >>> 0)
       var
        _bTp_=other_fields(e,2),
        _bTq_=field(e,1),
        _bTs_=caml_call2(sprintf(_dw_),_bTq_,_bTp_);
      else
       switch(match)
        {case 0:var _bTs_=_dx_;break;
         case 1:var _bTs_=_dy_;break;
         default:var _bTr_=field(e,1),_bTs_=caml_call1(sprintf(_dz_),_bTr_)}
      return symbol(constructor,_bTs_)}
    return e[1]}
  function print_backtrace(outchan)
   {var
     bt=caml_get_exception_raw_backtrace(0),
     a=caml_convert_raw_backtrace(bt),
     backtrace=[0,a];
    if(backtrace)
     {var _bTn_=a.length - 1 - 1 | 0,_bTm_=0;
      if(! (_bTn_ < 0))
       {var i=_bTm_;
        for(;;)
         {var
           slot=caml_check_bound(a,i)[1 + i],
           info$0=
            function(i)
             {function info(is_raise)
               {return is_raise?0 === i?_dF_:_dG_:0 === i?_dH_:_dI_}
              return info},
           info=info$0(i);
          if(0 === slot[0])
           var
            _bTf_=slot[5],
            _bTg_=slot[4],
            _bTh_=slot[3],
            _bTi_=slot[6]?_dJ_:_dL_,
            _bTj_=slot[2],
            _bTk_=info(slot[1]),
            match=
             [0,caml_call6(sprintf(_dK_),_bTk_,_bTj_,_bTi_,_bTh_,_bTg_,_bTf_)];
          else
           if(slot[1])
            var match=0;
           else
            var _bTl_=info(0),match=[0,caml_call1(sprintf(_dM_),_bTl_)];
          if(match){var str=match[1];caml_call1(fprintf(outchan,_dN_),str)}
          var _bTo_=i + 1 | 0;
          if(_bTn_ !== i){var i=_bTo_;continue}
          break}}
      return 0}
    return fprintf(outchan,_dO_)}
  function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
  function make_self_init(param)
   {var
     seed$0=caml_sys_random_seed(0),
     result=[0,caml_make_vect(55,0),0],
     seed=0 === seed$0.length - 1?[0,0]:seed$0,
     l=seed.length - 1,
     i$0=0;
    for(;;)
     {caml_check_bound(result[1],i$0)[1 + i$0] = i$0;
      var _bTe_=i$0 + 1 | 0;
      if(54 !== i$0){var i$0=_bTe_;continue}
      var accu=[0,_dP_],_bTa_=54 + max(55,l) | 0,_bS$_=0;
      if(! (_bTa_ < 0))
       {var i=_bS$_;
        for(;;)
         {var
           j=i % 55 | 0,
           k=caml_mod(i,l),
           x=caml_check_bound(seed,k)[1 + k],
           str=symbol(accu[1],caml_string_of_jsbytes(str$59 + x));
          accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
          var
           _bTb_=accu[1],
           _bS7_=caml_string_get(_bTb_,3) << 24,
           _bS8_=caml_string_get(_bTb_,2) << 16,
           _bS9_=caml_string_get(_bTb_,1) << 8,
           _bS__=
            ((caml_string_get(_bTb_,0) + _bS9_ | 0) + _bS8_ | 0)
            +
            _bS7_
            |
            0,
           _bTc_=
            (caml_check_bound(result[1],j)[1 + j] ^ _bS__)
            &
            num_1073741823;
          caml_check_bound(result[1],j)[1 + j] = _bTc_;
          var _bTd_=i + 1 | 0;
          if(_bTa_ !== i){var i=_bTd_;continue}
          break}}
      result[2] = 0;
      return result}}
  function bits(s)
   {s[2] = (s[2] + 1 | 0) % 55 | 0;
    var
     _bS4_=s[2],
     curval=caml_check_bound(s[1],_bS4_)[1 + _bS4_],
     _bS5_=(s[2] + 24 | 0) % 55 | 0,
     newval=
      caml_check_bound(s[1],_bS5_)[1 + _bS5_]
      +
      (curval ^ (curval >>> 25 | 0) & 31)
      |
      0,
     newval30=newval & num_1073741823,
     _bS6_=s[2];
    caml_check_bound(s[1],_bS6_)[1 + _bS6_] = newval30;
    return newval30}
  var s=[0,_dR_.slice(),0];
  function int$0(bound)
   {if(! (num_1073741823 < bound) && 0 < bound)
     for(;;)
      {var r=bits(s),v=caml_mod(r,bound);
       if(((num_1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
       return v}
    return invalid_arg(_dQ_)}
  function hash(x){return caml_hash(10,num_100,0,x)}
  function seeded_hash(seed,x){return caml_hash(10,num_100,seed,x)}
  function ongoing_traversal(h)
   {var _bS2_=h.length - 1 < 4?1:0,_bS3_=_bS2_ || (h[4] < 0?1:0);return _bS3_}
  function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
  try
   {var _aMP_=caml_sys_getenv(_aMO_),params=_aMP_}
  catch(_bS0_)
   {_bS0_ = caml_wrap_exception(_bS0_);
    if(_bS0_ !== Not_found)throw _bS0_;
    try
     {var _aMN_=caml_sys_getenv(_aMM_),_dT_=_aMN_}
    catch(_bS1_)
     {_bS1_ = caml_wrap_exception(_bS1_);
      if(_bS1_ !== Not_found)throw _bS1_;
      var _dT_=_dS_}
    var params=_dT_}
  var
   randomized_default=contains(params,82),
   prng=[num_246,function(_bSZ_){return make_self_init(0)}];
  function create$2(opt,initial_size)
   {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
    var x=16;
    for(;;)
     {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
       {var x$0=x * 2 | 0,x=x$0;continue}
      if(random)
       var
        _bSX_=caml_obj_tag(prng),
        _bSY_=
         num_250 === _bSX_
          ?prng[1]
          :num_246 === _bSX_?force_lazy_block(prng):prng,
        seed=bits(_bSY_);
      else
       var seed=0;
      return [0,0,caml_make_vect(x,0),seed,x]}}
  function clear$2(h)
   {h[1] = 0;
    var len=h[2].length - 1,_bSV_=len - 1 | 0,_bSU_=0;
    if(! (_bSV_ < 0))
     {var i=_bSU_;
      for(;;)
       {caml_check_bound(h[2],i)[1 + i] = 0;
        var _bSW_=i + 1 | 0;
        if(_bSV_ !== i){var i=_bSW_;continue}
        break}}
    return 0}
  function reset$0(h)
   {var len=h[2].length - 1;
    if(4 <= h.length - 1 && len !== abs(h[4]))
     {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
    return clear$2(h)}
  function copy_bucketlist(param)
   {if(param)
     {var
       key=param[1],
       data=param[2],
       next=param[3],
       prec$0=[0,key,data,next],
       prec=prec$0,
       param$0=next;
      for(;;)
       {if(param$0)
         {var
           key$0=param$0[1],
           data$0=param$0[2],
           next$0=param$0[3],
           r=[0,key$0,data$0,next$0];
          if(prec){prec[3] = r;var prec=r,param$0=next$0;continue}
          throw [0,Assert_failure,_dU_]}
        return prec$0}}
    return 0}
  function copy$1(h)
   {var _bSR_=h[4],_bSS_=h[3],_bST_=map$3(copy_bucketlist,h[2]);
    return [0,h[1],_bST_,_bSS_,_bSR_]}
  function length$0(h){return h[1]}
  function resize$0(indexfun,h)
   {var
     odata=h[2],
     osize=odata.length - 1,
     nsize=osize * 2 | 0,
     _bSI_=nsize < max_array_length?1:0;
    if(_bSI_)
     {var
       ndata=caml_make_vect(nsize,0),
       ndata_tail=caml_make_vect(nsize,0),
       inplace=1 - ongoing_traversal(h);
      h[2] = ndata;
      var _bSK_=osize - 1 | 0,_bSJ_=0;
      if(! (_bSK_ < 0))
       {var i$0=_bSJ_;
        a:
        for(;;)
         {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
          for(;;)
           {if(cell)
             {var
               key=cell[1],
               data=cell[2],
               next=cell[3],
               cell$0=inplace?cell:[0,key,data,0],
               nidx=caml_call2(indexfun,h,key),
               match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
              if(match)
               match[3] = cell$0;
              else
               caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
              caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
              var cell=next;
              continue}
            var _bSQ_=i$0 + 1 | 0;
            if(_bSK_ !== i$0){var i$0=_bSQ_;continue a}
            break}
          break}}
      if(inplace)
       {var _bSM_=nsize - 1 | 0,_bSL_=0;
        if(! (_bSM_ < 0))
         {var i=_bSL_;
          for(;;)
           {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
            if(match$0)match$0[3] = 0;
            var _bSP_=i + 1 | 0;
            if(_bSM_ !== i){var i=_bSP_;continue}
            break}}
        var _bSN_=0}
      else
       var _bSN_=inplace;
      var _bSO_=_bSN_}
    else
     var _bSO_=_bSI_;
    return _bSO_}
  function key_index(h,key)
   {return 3 <= h.length - 1
            ?caml_hash(10,num_100,h[3],key) & (h[2].length - 1 - 1 | 0)
            :caml_mod(caml_hash_univ_param(10,num_100,key),h[2].length - 1)}
  function add$0(h,key,data)
   {var
     i=key_index(h,key),
     bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
    caml_check_bound(h[2],i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _bSH_=h[2].length - 1 << 1 < h[1]?1:0;
    return _bSH_?resize$0(key_index,h):_bSH_}
  function find$0(h,key)
   {var _bSG_=key_index(h,key),match=caml_check_bound(h[2],_bSG_)[1 + _bSG_];
    if(match)
     {var k1=match[1],d1=match[2],next1=match[3];
      if(0 === caml_compare(key,k1))return d1;
      if(next1)
       {var k2=next1[1],d2=next1[2],next2=next1[3];
        if(0 === caml_compare(key,k2))return d2;
        if(next2)
         {var k3=next2[1],d3=next2[2],next3=next2[3];
          if(0 === caml_compare(key,k3))return d3;
          var param=next3;
          for(;;)
           {if(param)
             {var k=param[1],data=param[2],next=param[3];
              if(0 === caml_compare(key,k))return data;
              var param=next;
              continue}
            throw Not_found}}
        throw Not_found}
      throw Not_found}
    throw Not_found}
  function replace(h,key,data)
   {var
     i=key_index(h,key),
     param$0=caml_check_bound(h[2],i)[1 + i],
     param=param$0;
    for(;;)
     {if(param)
       {var k=param[1],next=param[3];
        if(0 !== caml_compare(k,key)){var param=next;continue}
        param[1] = key;
        param[2] = data;
        var _bSD_=0}
      else
       var _bSD_=1;
      if(_bSD_)
       {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
        h[1] = h[1] + 1 | 0;
        var _bSE_=h[2].length - 1 << 1 < h[1]?1:0;
        if(_bSE_)return resize$0(key_index,h);
        var _bSF_=_bSE_}
      else
       var _bSF_=_bSD_;
      return _bSF_}}
  function mem$0(h,key)
   {var
     _bSC_=key_index(h,key),
     param$0=caml_check_bound(h[2],_bSC_)[1 + _bSC_],
     param=param$0;
    for(;;)
     {if(param)
       {var k=param[1],next=param[3],_bSB_=0 === caml_compare(k,key)?1:0;
        if(_bSB_)return _bSB_;
        var param=next;
        continue}
      return 0}}
  function iter$3(f,h)
   {function do_bucket(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var key=param$0[1],data=param$0[2],param$1=param$0[3];
          caml_call2(f,key,data);
          var param$0=param$1;
          continue}
        return 0}}
    var old_trav=ongoing_traversal(h);
    if(1 - old_trav)flip_ongoing_traversal(h);
    try
     {var d=h[2],_bSx_=d.length - 1 - 1 | 0,_bSw_=0;
      if(! (_bSx_ < 0))
       {var i=_bSw_;
        for(;;)
         {do_bucket(caml_check_bound(d,i)[1 + i]);
          var _bSA_=i + 1 | 0;
          if(_bSx_ !== i){var i=_bSA_;continue}
          break}}
      var _bSy_=1 - old_trav,_bSz_=_bSy_?flip_ongoing_traversal(h):_bSy_;
      return _bSz_}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      if(old_trav)throw exn;
      flip_ongoing_traversal(h);
      throw exn}}
  function filter_map_inplace_bucket(f,h,i,prec,slot)
   {var prec$0=prec,slot$0=slot;
    for(;;)
     {if(slot$0)
       {var
         key=slot$0[1],
         data=slot$0[2],
         next=slot$0[3],
         match=caml_call2(f,key,data);
        if(match)
         {var data$0=match[1];
          if(prec$0)
           prec$0[3] = slot$0;
          else
           caml_check_bound(h[2],i)[1 + i] = slot$0;
          slot$0[2] = data$0;
          var prec$0=slot$0,slot$0=next;
          continue}
        h[1] = h[1] - 1 | 0;
        var slot$0=next;
        continue}
      return prec$0?(prec$0[3] = 0,0):(caml_check_bound(h[2],i)[1 + i] = 0,0)}}
  function filter_map_inplace(f,h)
   {var d=h[2],old_trav=ongoing_traversal(h);
    if(1 - old_trav)flip_ongoing_traversal(h);
    try
     {var _bSt_=d.length - 1 - 1 | 0,_bSs_=0;
      if(! (_bSt_ < 0))
       {var i=_bSs_;
        for(;;)
         {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
          var _bSv_=i + 1 | 0;
          if(_bSt_ !== i){var i=_bSv_;continue}
          break}}
      var _bSu_=0;
      return _bSu_}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      if(old_trav)throw exn;
      flip_ongoing_traversal(h);
      throw exn}}
  function fold$0(f,h,init)
   {function do_bucket(b,accu)
     {var b$0=b,accu$0=accu;
      for(;;)
       {if(b$0)
         {var
           key=b$0[1],
           data=b$0[2],
           b$1=b$0[3],
           accu$1=caml_call3(f,key,data,accu$0),
           b$0=b$1,
           accu$0=accu$1;
          continue}
        return accu$0}}
    var old_trav=ongoing_traversal(h);
    if(1 - old_trav)flip_ongoing_traversal(h);
    try
     {var d=h[2],accu=[0,init],_bSo_=d.length - 1 - 1 | 0,_bSn_=0;
      if(! (_bSo_ < 0))
       {var i=_bSn_;
        for(;;)
         {var _bSq_=accu[1];
          accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_bSq_);
          var _bSr_=i + 1 | 0;
          if(_bSo_ !== i){var i=_bSr_;continue}
          break}}
      if(1 - old_trav)flip_ongoing_traversal(h);
      var _bSp_=accu[1];
      return _bSp_}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      if(old_trav)throw exn;
      flip_ongoing_traversal(h);
      throw exn}}
  function bucket_length(accu,param)
   {var accu$0=accu,param$0=param;
    for(;;)
     {if(param$0)
       {var
         param$1=param$0[3],
         accu$1=accu$0 + 1 | 0,
         accu$0=accu$1,
         param$0=param$1;
        continue}
      return accu$0}}
  function stats(h)
   {var
     _bSk_=h[2],
     _bSl_=0,
     mbl=
      fold_left$1(function(m,b){return max(m,bucket_length(0,b))},_bSl_,_bSk_),
     histo=caml_make_vect(mbl + 1 | 0,0),
     _bSm_=h[2];
    iter$2
     (function(b)
       {var l=bucket_length(0,b);
        histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
        return 0},
      _bSm_);
    return [0,h[1],h[2].length - 1,mbl,histo]}
  function to_seq(tbl)
   {var tbl_data=tbl[2];
    function aux(i,buck,param)
     {var i$0=i,buck$0=buck;
      for(;;)
       {if(buck$0)
         {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
          return [0,[0,key,data],function(_bSj_){return aux(i$0,next,_bSj_)}]}
        if(i$0 === tbl_data.length - 1)return 0;
        var
         buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
         i$1=i$0 + 1 | 0,
         i$0=i$1,
         buck$0=buck$1;
        continue}}
    var _bSg_=0,_bSh_=0;
    return function(_bSi_){return aux(_bSh_,_bSg_,_bSi_)}}
  function to_seq_keys(m)
   {var _bSc_=to_seq(m);
    function _bSd_(_bSf_){return _bSf_[1]}
    return function(_bSe_){return map(_bSd_,_bSc_,_bSe_)}}
  function to_seq_values(m)
   {var _bR__=to_seq(m);
    function _bR$_(_bSb_){return _bSb_[2]}
    return function(_bSa_){return map(_bR$_,_bR__,_bSa_)}}
  function MakeSeeded(H)
   {function key_index(h,key)
     {var _bR9_=h[2].length - 1 - 1 | 0;
      return caml_call2(H[2],h[3],key) & _bR9_}
    function add(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
      caml_check_bound(h[2],i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _bR8_=h[2].length - 1 << 1 < h[1]?1:0;
      return _bR8_?resize$0(key_index,h):_bR8_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[1 + i],prec=0,c=c$0;
      for(;;)
       {if(c)
         {var k=c[1],next=c[3];
          if(caml_call2(H[1],k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :(caml_check_bound(h[2],i)[1 + i] = next,0)}
          var prec=c,c=next;
          continue}
        return 0}}
    function find(h,key)
     {var
       _bR7_=key_index(h,key),
       match=caml_check_bound(h[2],_bR7_)[1 + _bR7_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(caml_call2(H[1],key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(caml_call2(H[1],key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(caml_call2(H[1],key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(caml_call2(H[1],key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_opt(h,key)
     {var
       _bR6_=key_index(h,key),
       match=caml_check_bound(h[2],_bR6_)[1 + _bR6_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(caml_call2(H[1],key,k1))return [0,d1];
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(caml_call2(H[1],key,k2))return [0,d2];
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(caml_call2(H[1],key,k3))return [0,d3];
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(caml_call2(H[1],key,k))return [0,data];
                var param=next;
                continue}
              return 0}}
          return 0}
        return 0}
      return 0}
    function find_all(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],d=param$0[2],next=param$0[3];
            if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _bR5_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_bR5_)[1 + _bR5_])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(! caml_call2(H[1],k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _bR2_=0}
        else
         var _bR2_=1;
        if(_bR2_)
         {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _bR3_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_bR3_)return resize$0(key_index,h);
          var _bR4_=_bR3_}
        else
         var _bR4_=_bR2_;
        return _bR4_}}
    function mem(h,key)
     {var
       _bR1_=key_index(h,key),
       param$0=caml_check_bound(h[2],_bR1_)[1 + _bR1_],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_bR0_=caml_call2(H[1],k,key);
          if(_bR0_)return _bR0_;
          var param=next;
          continue}
        return 0}}
    function add_seq(tbl,i)
     {return iter
              (function(param){var v=param[2],k=param[1];return add(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq(i){var tbl=create$2(0,16);replace_seq(tbl,i);return tbl}
    return [0,
            create$2,
            clear$2,
            reset$0,
            copy$1,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter$3,
            filter_map_inplace,
            fold$0,
            length$0,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq]}
  function Make(H)
   {var equal=H[1];
    function hash(seed,x){return caml_call1(H[2],x)}
    var
     include=MakeSeeded([0,equal,hash]),
     clear=include[2],
     reset=include[3],
     copy=include[4],
     add=include[5],
     remove=include[6],
     find=include[7],
     find_opt=include[8],
     find_all=include[9],
     replace=include[10],
     mem=include[11],
     iter=include[12],
     filter_map_inplace=include[13],
     fold=include[14],
     length=include[15],
     stats=include[16],
     to_seq=include[17],
     to_seq_keys=include[18],
     to_seq_values=include[19],
     add_seq=include[20],
     replace_seq=include[21],
     _bRZ_=include[1];
    function create(sz){return caml_call2(_bRZ_,_dV_,sz)}
    function of_seq(i)
     {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq]}
  function create$3(l)
   {var _bRX_=0 <= l?1:0,_bRY_=_bRX_?l <= max_ephe_length?1:0:_bRX_;
    if(1 - _bRY_)invalid_arg(_dW_);
    return caml_weak_create(l)}
  function length$1(x){return x.length - 1 - 2 | 0}
  function raise_if_invalid_offset$0(e,o,msg)
   {var
     _bRU_=0 <= o?1:0,
     _bRV_=_bRU_?o < length$1(e)?1:0:_bRU_,
     _bRW_=1 - _bRV_;
    return _bRW_?invalid_arg(msg):_bRW_}
  function set(e,o,x)
   {raise_if_invalid_offset$0(e,o,_dX_);
    if(x){var x$0=x[1];return caml_ephe_set_key(e,o,x$0)}
    return caml_ephe_unset_key(e,o)}
  function get(e,o)
   {raise_if_invalid_offset$0(e,o,_dY_);return caml_weak_get(e,o)}
  function get_copy(e,o)
   {raise_if_invalid_offset$0(e,o,_dZ_);return caml_weak_get_copy(e,o)}
  function check(e,o)
   {raise_if_invalid_offset$0(e,o,_d0_);return caml_weak_check(e,o)}
  function blit$2(e1,o1,e2,o2,l)
   {if
     (0
      <=
      l
      &&
      0
      <=
      o1
      &&
      !
      ((length$1(e1) - l | 0) < o1)
      &&
      0
      <=
      o2
      &&
      !
      ((length$1(e2) - l | 0) < o2))
     {var _bRS_=0 !== l?1:0,_bRT_=_bRS_?caml_weak_blit(e1,o1,e2,o2,l):_bRS_;
      return _bRT_}
    return invalid_arg(_d1_)}
  function Make$0(H)
   {var emptybucket=create$3(0);
    function get_index(t,h)
     {return caml_mod(h & num_2147483647,t[1].length - 1)}
    var limit=7;
    function create(sz)
     {var
       sz$0=7 <= sz?sz:7,
       sz$1=max_array_length < sz$0?max_array_length:sz$0;
      return [0,
              caml_make_vect(sz$1,emptybucket),
              caml_make_vect(sz$1,[0]),
              limit,
              0,
              0]}
    function clear(t)
     {var _bRQ_=t[1].length - 1 - 1 | 0,_bRP_=0;
      if(! (_bRQ_ < 0))
       {var i=_bRP_;
        for(;;)
         {caml_check_bound(t[1],i)[1 + i] = emptybucket;
          caml_check_bound(t[2],i)[1 + i] = [0];
          var _bRR_=i + 1 | 0;
          if(_bRQ_ !== i){var i=_bRR_;continue}
          break}}
      t[3] = limit;
      t[4] = 0;
      return 0}
    function fold(f,t,init)
     {var _bRO_=t[1],i=0;
      return fold_right$0
              (function(b,accu$1)
                {var i$0=i,accu=accu$1;
                 for(;;)
                  {if(length$1(b) <= i$0)return accu;
                   var match=get(b,i$0);
                   if(match)
                    {var
                      v=match[1],
                      accu$0=caml_call2(f,v,accu),
                      i$1=i$0 + 1 | 0,
                      i$0=i$1,
                      accu=accu$0;
                     continue}
                   var i$2=i$0 + 1 | 0,i$0=i$2;
                   continue}},
               _bRO_,
               init)}
    function iter(f,t)
     {var _bRN_=t[1],i=0;
      return iter$2
              (function(b)
                {var i$0=i;
                 for(;;)
                  {if(length$1(b) <= i$0)return 0;
                   var match=get(b,i$0);
                   if(match)
                    {var v=match[1];
                     caml_call1(f,v);
                     var i$1=i$0 + 1 | 0,i$0=i$1;
                     continue}
                   var i$2=i$0 + 1 | 0,i$0=i$2;
                   continue}},
               _bRN_)}
    function count_bucket(i,b,accu)
     {var i$0=i,accu$0=accu;
      for(;;)
       {if(length$1(b) <= i$0)return accu$0;
        var
         _bRM_=check(b,i$0)?1:0,
         accu$1=accu$0 + _bRM_ | 0,
         i$1=i$0 + 1 | 0,
         i$0=i$1,
         accu$0=accu$1;
        continue}}
    function count(t)
     {var _bRH_=0,_bRI_=t[1],_bRJ_=0;
      return fold_right$0
              (function(_bRK_,_bRL_){return count_bucket(_bRJ_,_bRK_,_bRL_)},
               _bRI_,
               _bRH_)}
    function add_aux(t,setter,d,h,index)
     {var
       bucket$0=caml_check_bound(t[1],index)[1 + index],
       hashes=caml_check_bound(t[2],index)[1 + index],
       sz=length$1(bucket$0),
       i$3=0;
      for(;;)
       {if(sz <= i$3)
         {var
           newsz=
            min(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
          if(newsz <= sz)failwith(_d2_);
          var newbucket$0=create$3(newsz),newhashes=caml_make_vect(newsz,0);
          blit$2(bucket$0,0,newbucket$0,0,sz);
          blit$1(hashes,0,newhashes,0,sz);
          caml_call3(setter,newbucket$0,sz,d);
          caml_check_bound(newhashes,sz)[1 + sz] = h;
          caml_check_bound(t[1],index)[1 + index] = newbucket$0;
          caml_check_bound(t[2],index)[1 + index] = newhashes;
          var _bRD_=sz <= t[3]?1:0,_bRE_=_bRD_?t[3] < newsz?1:0:_bRD_;
          if(_bRE_)
           {t[4] = t[4] + 1 | 0;
            var i$4=0;
            for(;;)
             {var
               _bRt_=t[5],
               bucket=caml_check_bound(t[1],_bRt_)[1 + _bRt_],
               _bRu_=t[5],
               hbucket=caml_check_bound(t[2],_bRu_)[1 + _bRu_],
               n=length$1(bucket),
               prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
               live=count_bucket(0,bucket,0);
              if(live <= prev_len)
               {var j$2=length$1(bucket) - 1 | 0,i$0=0,j=j$2;
                for(;;)
                 {if(prev_len <= j)
                   {if(check(bucket,i$0)){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                    if(check(bucket,j))
                     {blit$2(bucket,j,bucket,i$0,1);
                      var _bRv_=caml_check_bound(hbucket,j)[1 + j];
                      caml_check_bound(hbucket,i$0)[1 + i$0] = _bRv_;
                      var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                      continue}
                    var j$1=j - 1 | 0,j=j$1;
                    continue}
                  if(0 === prev_len)
                   {var _bRw_=t[5];
                    caml_check_bound(t[1],_bRw_)[1 + _bRw_] = emptybucket;
                    var _bRx_=t[5];
                    caml_check_bound(t[2],_bRx_)[1 + _bRx_] = [0]}
                  else
                   {var newbucket=create$3(prev_len);
                    blit$2(bucket,0,newbucket,0,prev_len);
                    var _bRA_=t[5];
                    caml_check_bound(t[1],_bRA_)[1 + _bRA_] = newbucket;
                    var _bRB_=sub$1(hbucket,0,prev_len),_bRC_=t[5];
                    caml_check_bound(t[2],_bRC_)[1 + _bRC_] = _bRB_}
                  var
                   _bRy_=t[3] < n?1:0,
                   _bRz_=_bRy_?prev_len <= t[3]?1:0:_bRy_;
                  if(_bRz_)t[4] = t[4] - 1 | 0;
                  break}}
              t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
              var _bRG_=i$4 + 1 | 0;
              if(2 !== i$4){var i$4=_bRG_;continue}
              break}}
          var _bRF_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
          if(_bRF_)
           {var
             n$0=t[1].length - 1,
             newlen=min(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
            if(n$0 < newlen)
             {var newt=create(newlen),_bRs_=t[1],i=0;
              iteri$0
               (function(j,ob)
                 {var i$0=i;
                  for(;;)
                   {if(length$1(ob) <= i$0)return 0;
                    var match=check(ob,i$0);
                    if(0 === match){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                    var
                     oh=caml_check_bound(t[2],j)[1 + j],
                     setter$0=
                      function(i)
                       {function setter(nb,ni,param){return blit$2(ob,i,nb,ni,1)}
                        return setter},
                     setter=setter$0(i$0),
                     h=caml_check_bound(oh,i$0)[1 + i$0];
                    add_aux(newt,setter,0,h,get_index(newt,h));
                    var i$2=i$0 + 1 | 0,i$0=i$2;
                    continue}},
                _bRs_);
              t[1] = newt[1];
              t[2] = newt[2];
              t[3] = newt[3];
              t[4] = newt[4];
              t[5] = caml_mod(t[5],newt[1].length - 1);
              return 0}
            t[3] = max_int_float;
            t[4] = 0;
            return 0}
          return _bRF_}
        if(check(bucket$0,i$3)){var i$5=i$3 + 1 | 0,i$3=i$5;continue}
        caml_call3(setter,bucket$0,i$3,d);
        caml_check_bound(hashes,i$3)[1 + i$3] = h;
        return 0}}
    function add(t,d)
     {var h=caml_call1(H[2],d);return add_aux(t,set,[0,d],h,get_index(t,h))}
    function find_or(t,d,ifnotfound)
     {var
       h=caml_call1(H[2],d),
       index=get_index(t,h),
       bucket=caml_check_bound(t[1],index)[1 + index],
       hashes=caml_check_bound(t[2],index)[1 + index],
       sz=length$1(bucket),
       i=0;
      for(;;)
       {if(sz <= i)return caml_call2(ifnotfound,h,index);
        if(h === caml_check_bound(hashes,i)[1 + i])
         {var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))
             {var match$0=get(bucket,i);
              if(match$0){var v$0=match$0[1];return v$0}
              var i$0=i + 1 | 0,i=i$0;
              continue}}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        var i$2=i + 1 | 0,i=i$2;
        continue}}
    function merge(t,d)
     {return find_or
              (t,d,function(h,index){add_aux(t,set,[0,d],h,index);return d})}
    function find(t,d){return find_or(t,d,function(h,index){throw Not_found})}
    function find_opt(t,d)
     {var
       h=caml_call1(H[2],d),
       index=get_index(t,h),
       bucket=caml_check_bound(t[1],index)[1 + index],
       hashes=caml_check_bound(t[2],index)[1 + index],
       sz=length$1(bucket),
       i=0;
      for(;;)
       {if(sz <= i)return 0;
        if(h === caml_check_bound(hashes,i)[1 + i])
         {var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))
             {var v$0=get(bucket,i);
              if(v$0)return v$0;
              var i$0=i + 1 | 0,i=i$0;
              continue}}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        var i$2=i + 1 | 0,i=i$2;
        continue}}
    function find_shadow(t,d,iffound,ifnotfound)
     {var
       h=caml_call1(H[2],d),
       index=get_index(t,h),
       bucket=caml_check_bound(t[1],index)[1 + index],
       hashes=caml_check_bound(t[2],index)[1 + index],
       sz=length$1(bucket),
       i=0;
      for(;;)
       {if(sz <= i)return ifnotfound;
        if(h === caml_check_bound(hashes,i)[1 + i])
         {var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
          var i$0=i + 1 | 0,i=i$0;
          continue}
        var i$1=i + 1 | 0,i=i$1;
        continue}}
    function remove(t,d)
     {var _bRr_=0;
      return find_shadow(t,d,function(w,i){return set(w,i,0)},_bRr_)}
    function mem(t,d)
     {var _bRq_=0;return find_shadow(t,d,function(w,i){return 1},_bRq_)}
    function find_all(t,d)
     {var
       h=caml_call1(H[2],d),
       index=get_index(t,h),
       bucket=caml_check_bound(t[1],index)[1 + index],
       hashes=caml_check_bound(t[2],index)[1 + index],
       sz=length$1(bucket),
       i=0,
       accu=0;
      for(;;)
       {if(sz <= i)return accu;
        if(h === caml_check_bound(hashes,i)[1 + i])
         {var match=get_copy(bucket,i);
          if(match)
           {var v=match[1];
            if(caml_call2(H[1],v,d))
             {var match$0=get(bucket,i);
              if(match$0)
               {var
                 v$0=match$0[1],
                 accu$0=[0,v$0,accu],
                 i$0=i + 1 | 0,
                 i=i$0,
                 accu=accu$0;
                continue}
              var i$1=i + 1 | 0,i=i$1;
              continue}}
          var i$2=i + 1 | 0,i=i$2;
          continue}
        var i$3=i + 1 | 0,i=i$3;
        continue}}
    function stats(t)
     {var len=t[1].length - 1,a=map$3(length$1,t[1]);
      function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _bRj_=i31 + 1 | 0,_bRk_=caml_check_bound(a,_bRj_)[1 + _bRj_];
          if(caml_int_compare(caml_check_bound(a,i31)[1 + i31],_bRk_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _bRl_=i31 + 2 | 0,
           _bRm_=caml_check_bound(a,_bRl_)[1 + _bRl_],
           _bRn_=x[1];
          if(caml_int_compare(caml_check_bound(a,_bRn_)[1 + _bRn_],_bRm_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _bRo_=i31 + 1 | 0,_bRp_=caml_check_bound(a,_bRo_)[1 + _bRo_];
          if
           (! (0 <= caml_int_compare(caml_check_bound(a,i31)[1 + i31],_bRp_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_int_compare(caml_check_bound(a,j)[1 + j],e))
           {var _bRi_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _bRi_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _bRh_=trickledown(l,i,e);return _bRh_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_bRg_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _bRg_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _bRf_=bubbledown(l,i);return _bRf_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_bQ5_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_bQ5_ < 0))
       {var i$2=_bQ5_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[1 + i$2]);
          var _bQ8_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_bQ8_;continue}
          break}}
      var _bQ6_=l - 1 | 0;
      if(! (_bQ6_ < 2))
       {var i$0=_bQ6_;
        a:
        for(;;)
         {var e$0=caml_check_bound(a,i$0)[1 + i$0];
          a[1 + i$0] = caml_check_bound(a,0)[1];
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_X_];
            if
             (0
              <=
              caml_int_compare(caml_check_bound(a,father)[1 + father],e$0))
             caml_check_bound(a,i)[1 + i] = e$0;
            else
             {var _bQ4_=caml_check_bound(a,father)[1 + father];
              caml_check_bound(a,i)[1 + i] = _bQ4_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _bQ7_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_bQ7_;continue a}
            break}
          break}}
      if(1 < l)
       {var e=caml_check_bound(a,1)[2];
        a[2] = caml_check_bound(a,0)[1];
        a[1] = e}
      var
       _bQ9_=0,
       totlen=
        fold_left$1(function(_bRe_,_bRd_){return _bRe_ + _bRd_ | 0},_bQ9_,a),
       _bQ__=len - 1 | 0,
       _bRa_=len / 2 | 0,
       _bQ$_=caml_check_bound(a,_bQ__)[1 + _bQ__],
       _bRb_=caml_check_bound(a,_bRa_)[1 + _bRa_],
       _bRc_=caml_check_bound(a,0)[1];
      return [0,len,count(t),totlen,_bRc_,_bRb_,_bQ$_]}
    return [0,
            create,
            clear,
            merge,
            add,
            remove,
            find,
            find_opt,
            find_all,
            mem,
            iter,
            fold,
            count,
            stats]}
  function id$0(x){return x}
  var String_tag=[num_248,_d3_,caml_fresh_oo_id(0)],size=0,unknown=-1;
  function pp_enqueue(state,token)
   {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
  var pp_infinity=1000000010;
  function pp_output_string(state,s)
   {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
  function pp_output_newline(state){return caml_call1(state[19],0)}
  function format_pp_text(state,size,text)
   {state[9] = state[9] - size | 0;
    pp_output_string(state,text);
    state[11] = 0;
    return 0}
  function format_string(state,s)
   {var _bQ3_=caml_string_notequal(s,_d4_);
    return _bQ3_?format_pp_text(state,caml_ml_string_length(s),s):_bQ3_}
  function break_new_line(state,param,width)
   {var after=param[3],offset=param[2],before=param[1];
    format_string(state,before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent=(state[6] - width | 0) + offset | 0,
     real_indent=min(state[8],indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    caml_call1(state[21],state[10]);
    return format_string(state,after)}
  function break_line(state,width){return break_new_line(state,_d5_,width)}
  function break_same_line(state,param)
   {var after=param[3],width=param[2],before=param[1];
    format_string(state,before);
    state[9] = state[9] - width | 0;
    caml_call1(state[20],width);
    return format_string(state,after)}
  function advance_left(state)
   {for(;;)
     {var _bQU_=state[28][2];
      if(_bQU_)var content=_bQU_[1],match$12=[0,content];else var match$12=0;
      if(match$12)
       {var
         match$13=match$12[1],
         size$0=match$13[1],
         length$0=match$13[3],
         token=match$13[2],
         pending_count=state[13] - state[12] | 0,
         _bQ1_=0 <= size$0?1:0,
         _bQ2_=_bQ1_ || (state[9] <= pending_count?1:0);
        if(_bQ2_)
         {take(state[28]);
          var size$1=0 <= size$0?size$0:pp_infinity;
          if(typeof token === "number")
           switch(token)
            {case 0:
              var match$3=top_opt(state[3]);
              if(match$3)
               {var
                 match$4=match$3[1],
                 tabs=match$4[1],
                 add_tab=
                  function(n,ls)
                   {if(ls)
                     {var l=ls[2],x=ls[1];
                      return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                    return [0,n,0]};
                tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1])}
              break;
             case 1:pop_opt(state[2]);break;
             case 2:pop_opt(state[3]);break;
             case 3:
              var match$5=top_opt(state[2]);
              if(match$5)
               {var match$6=match$5[1],width$0=match$6[2];
                break_line(state,width$0)}
              else
               pp_output_newline(state);
              break;
             case 4:
              if(state[10] !== (state[6] - state[9] | 0))
               {var _bQY_=state[28],_bQV_=_bQY_[2];
                if(_bQV_)
                 var
                  _bQW_=_bQV_[1],
                  _bQX_=_bQV_[2],
                  match$1=
                   _bQX_
                    ?(_bQY_[1] = _bQY_[1] - 1 | 0,_bQY_[2] = _bQX_,[0,_bQW_])
                    :(clear$0(_bQY_),[0,_bQW_]);
                else
                 var match$1=0;
                if(match$1)
                 {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                  state[12] = state[12] - length | 0;
                  state[9] = state[9] + size | 0}}
              break;
             default:
              var match$7=pop_opt(state[5]);
              if(match$7)
               {var tag_name=match$7[1],marker=caml_call1(state[25],tag_name);
                pp_output_string(state,marker)}}
          else
           switch(token[0])
            {case 0:var s=token[1];format_pp_text(state,size$1,s);break;
             case 1:
              var
               breaks=token[2],
               fits=token[1],
               off=breaks[2],
               before=breaks[1],
               match$8=top_opt(state[2]);
              if(match$8)
               {var
                 match$9=match$8[1],
                 width$1=match$9[2],
                 box_type$0=match$9[1];
                switch(box_type$0)
                 {case 0:break_same_line(state,fits);break;
                  case 1:break_new_line(state,breaks,width$1);break;
                  case 2:break_new_line(state,breaks,width$1);break;
                  case 3:
                   if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                    break_new_line(state,breaks,width$1);
                   else
                    break_same_line(state,fits);
                   break;
                  case 4:
                   if(state[11])
                    break_same_line(state,fits);
                   else
                    if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                     break_new_line(state,breaks,width$1);
                    else
                     if(((state[6] - width$1 | 0) + off | 0) < state[10])
                      break_new_line(state,breaks,width$1);
                     else
                      break_same_line(state,fits);
                   break;
                  default:break_same_line(state,fits)}}
              break;
             case 2:
              var
               off$0=token[2],
               n=token[1],
               insertion_point=state[6] - state[9] | 0,
               match$10=top_opt(state[3]);
              if(match$10)
               {var match$11=match$10[1],tabs$0=match$11[1],_bQZ_=tabs$0[1];
                if(_bQZ_)
                 {var first=_bQZ_[1],param=tabs$0[1];
                  for(;;)
                   {if(param)
                     {var tail=param[2],head=param[1];
                      if(! (insertion_point <= head)){var param=tail;continue}
                      var _bQ0_=head}
                    else
                     var _bQ0_=first;
                    var tab=_bQ0_;
                    break}}
                else
                 var tab=insertion_point;
                var offset=tab - insertion_point | 0;
                if(0 <= offset)
                 break_same_line(state,[0,_d7_,offset + n | 0,_d6_]);
                else
                 break_new_line(state,[0,_d9_,tab + off$0 | 0,_d8_],state[6])}
              break;
             case 3:
              var
               ty=token[2],
               off$1=token[1],
               insertion_point$0=state[6] - state[9] | 0;
              if(state[8] < insertion_point$0)
               {var match=top_opt(state[2]);
                if(match)
                 {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                  if(state[9] < width)
                   {var switcher=box_type - 1 | 0;
                    if(! (3 < switcher >>> 0))break_line(state,width)}}
                else
                 pp_output_newline(state)}
              var
               width$2=state[9] - off$1 | 0,
               box_type$1=1 === ty?1:state[9] < size$1?ty:5;
              push([0,box_type$1,width$2],state[2]);
              break;
             case 4:var tbox=token[1];push(tbox,state[3]);break;
             default:
              var
               tag_name$0=token[1],
               marker$0=caml_call1(state[24],tag_name$0);
              pp_output_string(state,marker$0);
              push(tag_name$0,state[5])}
          state[12] = length$0 + state[12] | 0;
          continue}
        return _bQ2_}
      return 0}}
  function enqueue_advance(state,tok)
   {pp_enqueue(state,tok);return advance_left(state)}
  function enqueue_string_as(state,size,s)
   {return enqueue_advance(state,[0,size,[0,s],size])}
  function initialize_scan_stack(stack)
   {clear(stack);
    var queue_elem=[0,unknown,_d__,0];
    return push([0,-1,queue_elem],stack)}
  function set_size(state,ty)
   {var match=top_opt(state[1]);
    if(match)
     {var
       match$0=match[1],
       queue_elem=match$0[2],
       left_total=match$0[1],
       _bQR_=queue_elem[1];
      if(left_total < state[12])return initialize_scan_stack(state[1]);
      var _bQS_=queue_elem[2];
      if(typeof _bQS_ !== "number")
       switch(_bQS_[0])
        {case 3:
          var _bQT_=1 - ty;
          return _bQT_
                  ?(queue_elem[1] = state[13] + _bQR_ | 0,pop_opt(state[1]),0)
                  :_bQT_;
         case 1:
         case 2:
          return ty
                  ?(queue_elem[1] = state[13] + _bQR_ | 0,pop_opt(state[1]),0)
                  :ty
         }
      return 0}
    return 0}
  function scan_push(state,b,token)
   {pp_enqueue(state,token);
    if(b)set_size(state,1);
    var elem=[0,state[13],token];
    return push(elem,state[1])}
  function pp_open_box_gen(state,indent,br_ty)
   {state[14] = state[14] + 1 | 0;
    if(state[14] < state[15])
     {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
      return scan_push(state,0,elem)}
    var _bQP_=state[14] === state[15]?1:0;
    if(_bQP_)
     {var _bQQ_=state[16];
      return enqueue_string_as(state,caml_ml_string_length(_bQQ_),_bQQ_)}
    return _bQP_}
  function pp_close_box(state,param)
   {var _bQN_=1 < state[14]?1:0;
    if(_bQN_)
     {if(state[14] < state[15])
       {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
      state[14] = state[14] - 1 | 0;
      var _bQO_=0}
    else
     var _bQO_=_bQN_;
    return _bQO_}
  function pp_open_stag(state,tag_name)
   {if(state[22]){push(tag_name,state[4]);caml_call1(state[26],tag_name)}
    var _bQM_=state[23];
    if(_bQM_)
     {var token=[5,tag_name];return pp_enqueue(state,[0,size,token,0])}
    return _bQM_}
  function pp_close_tag(state,param)
   {if(state[23])pp_enqueue(state,[0,size,5,0]);
    var _bQK_=state[22];
    if(_bQK_)
     {var match=pop_opt(state[4]);
      if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
      var _bQL_=0}
    else
     var _bQL_=_bQK_;
    return _bQL_}
  function pp_flush_queue(state,b)
   {var _bQJ_=state[4];
    function f(param){return pp_close_tag(state,0)}
    iter$0(f,_bQJ_[1]);
    for(;;)
     {if(1 < state[14]){pp_close_box(state,0);continue}
      state[13] = pp_infinity;
      advance_left(state);
      if(b)pp_output_newline(state);
      state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}}
  function pp_print_as_size(state,size,s)
   {var _bQI_=state[14] < state[15]?1:0;
    return _bQI_?enqueue_string_as(state,size,s):_bQI_}
  function pp_print_as(state,isize,s){return pp_print_as_size(state,isize,s)}
  function pp(state,s){return pp_print_as(state,caml_ml_string_length(s),s)}
  function pp$0(state,i){return pp(state,caml_string_of_jsbytes(str$59 + i))}
  function pp$1(state,c){return pp_print_as(state,1,make$0(1,c))}
  function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
  function pp_print_flush(state,param)
   {pp_flush_queue(state,0);return caml_call1(state[18],0)}
  function pp_force_newline(state,param)
   {var _bQH_=state[14] < state[15]?1:0;
    return _bQH_?enqueue_advance(state,[0,size,3,0]):_bQH_}
  function pp_print_break(state,width$0,offset)
   {var
     breaks=[0,_ea_,offset,_d$_],
     fits=[0,_ec_,width$0,_eb_],
     after=fits[3],
     width=fits[2],
     before=fits[1],
     _bQG_=state[14] < state[15]?1:0;
    if(_bQG_)
     {var
       size=- state[13] | 0,
       token=[1,fits,breaks],
       length=
        (caml_ml_string_length(before) + width | 0)
        +
        caml_ml_string_length(after)
        |
        0,
       elem=[0,size,token,length];
      return scan_push(state,1,elem)}
    return _bQG_}
  function pp_print_space(state,param){return pp_print_break(state,1,0)}
  function pp_print_cut(state,param){return pp_print_break(state,0,0)}
  var blank_line=make$0(80,32);
  function display_blanks(state,n)
   {var n$0=n;
    for(;;)
     {var _bQF_=0 < n$0?1:0;
      if(_bQF_)
       {if(80 < n$0)
         {caml_call3(state[17],blank_line,0,80);
          var n$1=n$0 + num_80 | 0,n$0=n$1;
          continue}
        return caml_call3(state[17],blank_line,0,n$0)}
      return _bQF_}}
  function default_pp_mark_open_tag(param)
   {if(param[1] === String_tag)
     {var s=param[2];return symbol(_ef_,symbol(s,_ee_))}
    return _eg_}
  function default_pp_mark_close_tag(param)
   {if(param[1] === String_tag)
     {var s=param[2];return symbol(_ei_,symbol(s,_eh_))}
    return _ej_}
  function default_pp_print_open_tag(_bQE_){return 0}
  function default_pp_print_close_tag(_bQD_){return 0}
  function make_formatter(output,flush)
   {function j(_bQC_){return 0}
    function i(_bQB_){return 0}
    function h(_bQA_){return 0}
    var pp_queue=create$0(0),sys_tok=[0,unknown,_ek_,0];
    add(sys_tok,pp_queue);
    var scan_stack=create(0);
    initialize_scan_stack(scan_stack);
    push([0,1,sys_tok],scan_stack);
    var
     _bQu_=create(0),
     _bQv_=create(0),
     _bQw_=create(0),
     ppf=
      [0,
       scan_stack,
       create(0),
       _bQw_,
       _bQv_,
       _bQu_,
       78,
       10,
       68,
       78,
       0,
       1,
       1,
       1,
       1,
       max_int_float,
       _el_,
       output,
       flush,
       h,
       i,
       j,
       0,
       0,
       default_pp_mark_open_tag,
       default_pp_mark_close_tag,
       default_pp_print_open_tag,
       default_pp_print_close_tag,
       pp_queue];
    ppf[19] = function(_bQz_){return caml_call3(ppf[17],_ed_,0,1)};
    ppf[20] = function(_bQy_){return display_blanks(ppf,_bQy_)};
    ppf[21] = function(_bQx_){return display_blanks(ppf,_bQx_)};
    return ppf}
  function formatter_of_out_channel(oc)
   {function _bQt_(param){return caml_ml_flush(oc)}
    return make_formatter
            (function(s,ofs,len)
              {if
                (0
                 <=
                 ofs
                 &&
                 0
                 <=
                 len
                 &&
                 !
                 ((caml_ml_string_length(s) - len | 0) < ofs))
                return caml_ml_output(oc,s,ofs,len);
               return invalid_arg(_g_)},
             _bQt_)}
  function formatter_of_buffer(b)
   {function _bQo_(_bQs_){return 0}
    return make_formatter
            (function(_bQp_,_bQq_,_bQr_)
              {return add_substring(b,_bQp_,_bQq_,_bQr_)},
             _bQo_)}
  var pp_buffer_size=num_512;
  function pp_make_buffer(param){return create$1(pp_buffer_size)}
  var
   stdbuf=pp_make_buffer(0),
   stdout$0=formatter_of_out_channel(stdout),
   stderr$0=formatter_of_out_channel(stderr),
   ppf=formatter_of_buffer(stdbuf);
  function flush_buffer_formatter(buf,ppf)
   {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
  function pp_print_list(opt,pp_v,ppf,param)
   {var opt$0=opt,param$0=param;
    for(;;)
     {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
      if(param$0)
       {var _bQm_=param$0[2],_bQn_=param$0[1];
        if(_bQm_)
         {caml_call2(pp_v,ppf,_bQn_);
          caml_call2(pp_sep,ppf,0);
          var opt$1=[0,pp_sep],opt$0=opt$1,param$0=_bQm_;
          continue}
        return caml_call2(pp_v,ppf,_bQn_)}
      return 0}}
  function pp_print_text(ppf,s)
   {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
    function flush(param)
     {pp(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
      right[1]++;
      left[1] = right[1];
      return 0}
    for(;;)
     {if(right[1] !== len)
       {var match=caml_string_get(s,right[1]);
        if(10 === match)
         {flush(0);pp_force_newline(ppf,0)}
        else
         if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
        continue}
      var _bQl_=left[1] !== len?1:0;
      return _bQl_?flush(0):_bQl_}}
  function compute_tag(output,tag_acc)
   {var b=create$1(16),ppf=formatter_of_buffer(b);
    caml_call2(output,ppf,tag_acc);
    pp_print_flush(ppf,0);
    var len=b[2];
    if(2 <= len)
     {var len$0=len - 2 | 0,ofs=1;
      if(0 <= len$0 && ! ((b[2] - len$0 | 0) < 1))
       return sub_string(b[1],ofs,len$0);
      return invalid_arg(_aA_)}
    return contents(b)}
  function output_formatting_lit(ppf,fmting_lit)
   {if(typeof fmting_lit === "number")
     switch(fmting_lit)
      {case 0:return pp_close_box(ppf,0);
       case 1:return pp_close_tag(ppf,0);
       case 2:return pp_print_flush(ppf,0);
       case 3:return pp_force_newline(ppf,0);
       case 4:pp_flush_queue(ppf,1);return caml_call1(ppf[18],0);
       case 5:return pp$1(ppf,64);
       default:return pp$1(ppf,37)}
    else
     switch(fmting_lit[0])
      {case 0:
        var offset=fmting_lit[3],width=fmting_lit[2];
        return pp_print_break(ppf,width,offset);
       case 1:return 0;
       default:var c=fmting_lit[1];pp$1(ppf,64);return pp$1(ppf,c)}}
  function output_acc$0(ppf,acc)
   {var switch$0=0;
    if(typeof acc === "number")
     return 0;
    else
     switch(acc[0])
      {case 0:
        var f=acc[2],p=acc[1];
        output_acc$0(ppf,p);
        return output_formatting_lit(ppf,f);
       case 1:
        var _bQb_=acc[2],_bQc_=acc[1];
        if(0 === _bQb_[0])
         {var acc$0=_bQb_[1];
          output_acc$0(ppf,_bQc_);
          return pp_open_stag
                  (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
        var acc$1=_bQb_[1];
        output_acc$0(ppf,_bQc_);
        var
         match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
         bty=match[2],
         indent=match[1];
        return pp_open_box_gen(ppf,indent,bty);
       case 2:
        var _bQd_=acc[1],switch$1=0;
        if(typeof _bQd_ !== "number" && 0 === _bQd_[0])
         {var _bQe_=_bQd_[2],switch$2=0;
          if(typeof _bQe_ !== "number" && 1 === _bQe_[0])
           {var p$1=_bQd_[1],size=_bQe_[2],s$0=acc[2];
            switch$1 = 1;
            switch$2 = 1}}
        if(! switch$1){var p$0=_bQd_,s=acc[2];switch$0 = 2}
        break;
       case 3:
        var _bQf_=acc[1],switch$3=0;
        if(typeof _bQf_ !== "number" && 0 === _bQf_[0])
         {var _bQg_=_bQf_[2],switch$4=0;
          if(typeof _bQg_ !== "number" && 1 === _bQg_[0])
           {var p$3=_bQf_[1],size$0=_bQg_[2],c$0=acc[2];
            switch$0 = 1;
            switch$3 = 1;
            switch$4 = 1}}
        if(! switch$3){var p$2=_bQf_,c=acc[2];switch$0 = 3}
        break;
       case 4:
        var _bQh_=acc[1],switch$5=0;
        if(typeof _bQh_ !== "number" && 0 === _bQh_[0])
         {var _bQi_=_bQh_[2],switch$6=0;
          if(typeof _bQi_ !== "number" && 1 === _bQi_[0])
           {var p$1=_bQh_[1],size=_bQi_[2],s$0=acc[2];
            switch$5 = 1;
            switch$6 = 1}}
        if(! switch$5){var p$0=_bQh_,s=acc[2];switch$0 = 2}
        break;
       case 5:
        var _bQj_=acc[1],switch$7=0;
        if(typeof _bQj_ === "number" || ! (0 === _bQj_[0]))
         switch$7 = 1;
        else
         {var _bQk_=_bQj_[2],switch$8=0;
          if(typeof _bQk_ !== "number" && 1 === _bQk_[0])
           {var p$3=_bQj_[1],size$0=_bQk_[2],c$0=acc[2];
            switch$0 = 1;
            switch$8 = 1}
          if(! switch$8)switch$7 = 1}
        if(switch$7){var p$2=_bQj_,c=acc[2];switch$0 = 3}
        break;
       case 6:
        var f$0=acc[2],p$4=acc[1];
        output_acc$0(ppf,p$4);
        return caml_call1(f$0,ppf);
       case 7:
        var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
       default:
        var msg=acc[2],p$6=acc[1];
        output_acc$0(ppf,p$6);
        return invalid_arg(msg)}
    switch(switch$0)
     {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
      case 1:
       output_acc$0(ppf,p$3);
       return pp_print_as_size(ppf,size$0,make$0(1,c$0));
      case 2:output_acc$0(ppf,p$0);return pp(ppf,s);
      default:output_acc$0(ppf,p$2);return pp$1(ppf,c)}}
  function strput_acc$0(ppf,acc)
   {var switch$0=0;
    if(typeof acc === "number")
     return 0;
    else
     switch(acc[0])
      {case 0:
        var f=acc[2],p=acc[1];
        strput_acc$0(ppf,p);
        return output_formatting_lit(ppf,f);
       case 1:
        var _bP1_=acc[2],_bP2_=acc[1];
        if(0 === _bP1_[0])
         {var acc$0=_bP1_[1];
          strput_acc$0(ppf,_bP2_);
          return pp_open_stag
                  (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
        var acc$1=_bP1_[1];
        strput_acc$0(ppf,_bP2_);
        var
         match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
         bty=match[2],
         indent=match[1];
        return pp_open_box_gen(ppf,indent,bty);
       case 2:
        var _bP3_=acc[1],switch$1=0;
        if(typeof _bP3_ !== "number" && 0 === _bP3_[0])
         {var _bP4_=_bP3_[2],switch$2=0;
          if(typeof _bP4_ !== "number" && 1 === _bP4_[0])
           {var p$1=_bP3_[1],size=_bP4_[2],s$0=acc[2];
            switch$1 = 1;
            switch$2 = 1}}
        if(! switch$1){var p$0=_bP3_,s=acc[2];switch$0 = 2}
        break;
       case 3:
        var _bP5_=acc[1],switch$3=0;
        if(typeof _bP5_ !== "number" && 0 === _bP5_[0])
         {var _bP6_=_bP5_[2],switch$4=0;
          if(typeof _bP6_ !== "number" && 1 === _bP6_[0])
           {var p$3=_bP5_[1],size$0=_bP6_[2],c$0=acc[2];
            switch$0 = 1;
            switch$3 = 1;
            switch$4 = 1}}
        if(! switch$3){var p$2=_bP5_,c=acc[2];switch$0 = 3}
        break;
       case 4:
        var _bP7_=acc[1],switch$5=0;
        if(typeof _bP7_ !== "number" && 0 === _bP7_[0])
         {var _bP8_=_bP7_[2],switch$6=0;
          if(typeof _bP8_ !== "number" && 1 === _bP8_[0])
           {var p$1=_bP7_[1],size=_bP8_[2],s$0=acc[2];
            switch$5 = 1;
            switch$6 = 1}}
        if(! switch$5){var p$0=_bP7_,s=acc[2];switch$0 = 2}
        break;
       case 5:
        var _bP9_=acc[1],switch$7=0;
        if(typeof _bP9_ === "number" || ! (0 === _bP9_[0]))
         switch$7 = 1;
        else
         {var _bP__=_bP9_[2],switch$8=0;
          if(typeof _bP__ !== "number" && 1 === _bP__[0])
           {var p$3=_bP9_[1],size$0=_bP__[2],c$0=acc[2];
            switch$0 = 1;
            switch$8 = 1}
          if(! switch$8)switch$7 = 1}
        if(switch$7){var p$2=_bP9_,c=acc[2];switch$0 = 3}
        break;
       case 6:
        var _bP$_=acc[1];
        if(typeof _bP$_ !== "number" && 0 === _bP$_[0])
         {var _bQa_=_bP$_[2];
          if(typeof _bQa_ !== "number" && 1 === _bQa_[0])
           {var f$1=acc[2],size$1=_bQa_[2],p$4=_bP$_[1];
            strput_acc$0(ppf,p$4);
            return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
        var f$0=acc[2];
        strput_acc$0(ppf,_bP$_);
        return pp(ppf,caml_call1(f$0,0));
       case 7:
        var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
       default:
        var msg=acc[2],p$6=acc[1];
        strput_acc$0(ppf,p$6);
        return invalid_arg(msg)}
    switch(switch$0)
     {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
      case 1:
       strput_acc$0(ppf,p$3);
       return pp_print_as_size(ppf,size$0,make$0(1,c$0));
      case 2:strput_acc$0(ppf,p$0);return pp(ppf,s);
      default:strput_acc$0(ppf,p$2);return pp$1(ppf,c)}}
  function kpf(k,ppf,param)
   {var fmt=param[1],_bP0_=0;
    return make_printf
            (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
             _bP0_,
             fmt)}
  function pf(ppf)
   {function _bPX_(_bPZ_){return 0}
    return function(_bPY_){return kpf(_bPX_,ppf,_bPY_)}}
  function pr(fmt){return caml_call1(pf(stdout$0),fmt)}
  function kprintf(k,param)
   {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
    function k$0(acc)
     {strput_acc$0(ppf,acc);
      return caml_call1(k,flush_buffer_formatter(b,ppf))}
    return make_printf(k$0,0,fmt)}
  function sprintf$0(fmt){return kprintf(id$0,fmt)}
  function kstr(k,param)
   {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
    function k$0(acc)
     {output_acc$0(ppf,acc);
      return caml_call1(k,flush_buffer_formatter(b,ppf))}
    return make_printf(k$0,0,fmt)}
  function strf(fmt){return kstr(id$0,fmt)}
  function flush_standard_formatters(param)
   {pp_print_flush(stdout$0,0);return pp_print_flush(stderr$0,0)}
  at_exit(flush_standard_formatters);
  var null_char=0;
  function next_char(ib)
   {try
     {var c=caml_call1(ib[7],0);
      ib[2] = c;
      ib[3] = 1;
      ib[4] = ib[4] + 1 | 0;
      if(10 === c)ib[5] = ib[5] + 1 | 0;
      return c}
    catch(_bPW_)
     {_bPW_ = caml_wrap_exception(_bPW_);
      if(_bPW_ === End_of_file)
       {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
      throw _bPW_}}
  function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
  function checked_peek_char(ib)
   {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
  function end_of_input(ib){peek_char(ib);return ib[1]}
  function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
  function reset_token(ib){return reset(ib[8])}
  function invalidate_current_char(ib){ib[3] = 0;return 0}
  function token_string(ib)
   {var token_buffer=ib[8],tok=contents(token_buffer);
    clear$1(token_buffer);
    ib[6] = ib[6] + 1 | 0;
    return tok}
  function skip_char(width,ib){invalidate_current_char(ib);return width}
  function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
  function store_char(width,ib,c)
   {add_char(ib[8],c);return ignore_char(width,ib)}
  var default_token_buffer_size=num_1024;
  function create$4(iname,next)
   {return [0,
            0,
            null_char,
            0,
            0,
            0,
            0,
            next,
            create$1(default_token_buffer_size),
            iname]}
  var len=num_1024;
  function scan_raise_at_end(ic){throw End_of_file}
  function from_ic(scan_close_ic,iname,ic)
   {var buf=caml_create_bytes(num_1024),i=[0,0],lim=[0,0],eof=[0,0];
    function next(param)
     {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
      if(eof[1])throw End_of_file;
      lim[1] = input(ic,buf,0,len);
      return 0 === lim[1]
              ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
              :(i[1] = 1,caml_bytes_get(buf,0))}
    return create$4(iname,next)}
  from_ic(scan_raise_at_end,[1,_em_,stdin],stdin);
  var Scan_failure=[num_248,_en_,caml_fresh_oo_id(0)];
  function bad_input(s){throw [0,Scan_failure,s]}
  function bad_input_escape(c){return bad_input(caml_call1(sprintf(_eo_),c))}
  function bad_token_length(message)
   {return bad_input(caml_call1(sprintf(_ep_),message))}
  function bad_float(param){return bad_input(_er_)}
  function bad_hex_float(param){return bad_input(_es_)}
  function character_mismatch(c,ci)
   {return bad_input(caml_call2(sprintf(_et_),c,ci))}
  function check_this_char(ib,c)
   {var ci=checked_peek_char(ib);
    return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
  function check_char(ib,c$0)
   {if(10 === c$0)
     {var ci=checked_peek_char(ib);
      return 10 === ci
              ?invalidate_current_char(ib)
              :13 === ci
                ?(invalidate_current_char(ib),check_this_char(ib,10))
                :character_mismatch(10,ci)}
    if(32 === c$0)
     for(;;)
      {var c=peek_char(ib),_bPU_=1 - ib[1];
       if(_bPU_)
        {var _bPV_=c - 9 | 0,switch$0=0;
         if(4 < _bPV_ >>> 0)
          {if(23 === _bPV_)switch$0 = 1}
         else
          if(1 < (_bPV_ - 2 | 0) >>> 0)switch$0 = 1;
         if(switch$0){invalidate_current_char(ib);continue}
         return 0}
       return _bPU_}
    return check_this_char(ib,c$0)}
  function token_char(ib){return caml_string_get(token_string(ib),0)}
  function token_bool(ib)
   {var s=token_string(ib);
    return caml_string_notequal(s,_eu_)
            ?caml_string_notequal(s,_ev_)
              ?bad_input(caml_call1(sprintf(_ew_),s))
              :1
            :0}
  function integer_conversion_of_char(param)
   {var switcher=param + num_88 | 0;
    if(! (32 < switcher >>> 0))
     switch(switcher)
      {case 10:return 0;
       case 12:return 1;
       case 17:return 2;
       case 23:return 3;
       case 29:return 4;
       case 0:
       case 32:return 5
       }
    throw [0,Assert_failure,_ex_]}
  function token_int_literal(conv,ib)
   {switch(conv)
     {case 0:var tok=symbol(_ey_,token_string(ib));break;
      case 3:var tok=symbol(_ez_,token_string(ib));break;
      case 4:var tok=symbol(_eA_,token_string(ib));break;
      case 5:var tok=symbol(_eB_,token_string(ib));break;
      default:var tok=token_string(ib)}
    var l=caml_ml_string_length(tok);
    if(0 !== l && 43 === caml_string_get(tok,0))return sub$0(tok,1,l - 1 | 0);
    return tok}
  function token_float(ib){return caml_float_of_string(token_string(ib))}
  function scan_decimal_digit_star(width,ib)
   {var width$0=width;
    for(;;)
     {if(0 === width$0)return width$0;
      var c=peek_char(ib);
      if(ib[1])return width$0;
      if(58 <= c)
       {if(95 === c)
         {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
      else
       if(48 <= c)
        {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
      return width$0}}
  function scan_decimal_digit_plus(width,ib)
   {if(0 === width)return bad_token_length(_eC_);
    var c=checked_peek_char(ib),switcher=c + num_48 | 0;
    if(9 < switcher >>> 0)return bad_input(caml_call1(sprintf(_eD_),c));
    var width$0=store_char(width,ib,c);
    return scan_decimal_digit_star(width$0,ib)}
  function scan_digit_plus(basis,digitp,width$2,ib)
   {if(0 === width$2)return bad_token_length(_eE_);
    var c$0=checked_peek_char(ib);
    if(caml_call1(digitp,c$0))
     {var width$3=store_char(width$2,ib,c$0),width=width$3;
      for(;;)
       {if(0 === width)return width;
        var c=peek_char(ib);
        if(ib[1])return width;
        if(caml_call1(digitp,c))
         {var width$0=store_char(width,ib,c),width=width$0;continue}
        if(95 === c){var width$1=ignore_char(width,ib),width=width$1;continue}
        return width}}
    return bad_input(caml_call2(sprintf(_eF_),c$0,basis))}
  function is_binary_digit(param)
   {var switcher=param + num_48 | 0;return 1 < switcher >>> 0?0:1}
  function scan_binary_int(_bPS_,_bPT_)
   {return scan_digit_plus(_eG_,is_binary_digit,_bPS_,_bPT_)}
  function is_octal_digit(param)
   {var switcher=param + num_48 | 0;return 7 < switcher >>> 0?0:1}
  function scan_octal_int(_bPQ_,_bPR_)
   {return scan_digit_plus(_eH_,is_octal_digit,_bPQ_,_bPR_)}
  function is_hexa_digit(param)
   {var _bPP_=param + num_48 | 0,switch$0=0;
    if(22 < _bPP_ >>> 0)
     {if(! (5 < (_bPP_ + num_49 | 0) >>> 0))switch$0 = 1}
    else
     if(6 < (_bPP_ + num_10 | 0) >>> 0)switch$0 = 1;
    return switch$0?1:0}
  function scan_hexadecimal_int(_bPN_,_bPO_)
   {return scan_digit_plus(_eI_,is_hexa_digit,_bPN_,_bPO_)}
  function scan_sign(width,ib)
   {var c=checked_peek_char(ib),switcher=c + num_43 | 0;
    if(! (2 < switcher >>> 0))
     switch(switcher)
      {case 0:return store_char(width,ib,c);
       case 1:break;
       default:return store_char(width,ib,c)}
    return width}
  function scan_optionally_signed_decimal(width,ib)
   {var width$0=scan_sign(width,ib);
    return scan_decimal_digit_plus(width$0,ib)}
  function scan_int_conversion(conv,width$1,ib)
   {switch(conv)
     {case 0:return scan_binary_int(width$1,ib);
      case 1:return scan_optionally_signed_decimal(width$1,ib);
      case 2:
       var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
       if(48 === c)
        {var width=store_char(width$0,ib,c);
         if(0 === width)return width;
         var c$0=peek_char(ib);
         if(ib[1])return width;
         var switch$0=0;
         if(99 <= c$0)
          {if(num_111 === c$0)
            return scan_octal_int(store_char(width,ib,c$0),ib);
           if(num_120 === c$0)switch$0 = 1}
         else
          if(88 === c$0)
           switch$0 = 1;
          else
           if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
         return switch$0
                 ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                 :scan_decimal_digit_star(width,ib)}
       return scan_decimal_digit_plus(width$0,ib);
      case 3:return scan_octal_int(width$1,ib);
      case 4:return scan_decimal_digit_plus(width$1,ib);
      default:return scan_hexadecimal_int(width$1,ib)}}
  function scan_fractional_part(width,ib)
   {if(0 === width)return width;
    var c=peek_char(ib);
    if(ib[1])return width;
    var switcher=c + num_48 | 0;
    return 9 < switcher >>> 0
            ?width
            :scan_decimal_digit_star(store_char(width,ib,c),ib)}
  function scan_exponent_part(width,ib)
   {if(0 === width)return width;
    var c=peek_char(ib);
    if(ib[1])return width;
    if(69 !== c && num_101 !== c)return width;
    return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
  function scan_float(width$1,precision,ib)
   {var width=scan_sign(width$1,ib),width$0=scan_decimal_digit_star(width,ib);
    if(0 === width$0)return [0,width$0,precision];
    var c=peek_char(ib);
    if(ib[1])return [0,width$0,precision];
    if(46 === c)
     {var
       width$2=store_char(width$0,ib,c),
       precision$0=min(width$2,precision),
       width$3=
        width$2
        -
        (precision$0 - scan_fractional_part(precision$0,ib) | 0)
        |
        0;
      return [0,scan_exponent_part(width$3,ib),precision$0]}
    return [0,scan_exponent_part(width$0,ib),precision]}
  function check_case_insensitive_string(width,ib,error,str)
   {function lowercase(c)
     {var switcher=c - 65 | 0;
      return 25 < switcher >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
    var
     len=caml_ml_string_length(str),
     width$0=[0,width],
     _bPK_=len - 1 | 0,
     _bPJ_=0;
    if(! (_bPK_ < 0))
     {var i=_bPJ_;
      for(;;)
       {var c=peek_char(ib),_bPL_=lowercase(caml_string_get(str,i));
        if(lowercase(c) !== _bPL_)caml_call1(error,0);
        if(0 === width$0[1])caml_call1(error,0);
        width$0[1] = store_char(width$0[1],ib,c);
        var _bPM_=i + 1 | 0;
        if(_bPK_ !== i){var i=_bPM_;continue}
        break}}
    return width$0[1]}
  function scan_hex_float(width,precision,ib)
   {var _bPw_=0 === width?1:0,_bPx_=_bPw_ || end_of_input(ib);
    if(_bPx_)bad_hex_float(0);
    var
     width$0=scan_sign(width,ib),
     _bPy_=0 === width$0?1:0,
     _bPz_=_bPy_ || end_of_input(ib);
    if(_bPz_)bad_hex_float(0);
    var c=peek_char(ib),switch$0=0;
    if(78 <= c)
     {var switcher=c - 79 | 0;
      if(30 < switcher >>> 0)
       {if(! (32 <= switcher))
         {var
           width$1=store_char(width$0,ib,c),
           _bPA_=0 === width$1?1:0,
           _bPB_=_bPA_ || end_of_input(ib);
          if(_bPB_)bad_hex_float(0);
          return check_case_insensitive_string(width$1,ib,bad_hex_float,_eJ_)}}
      else
       if(26 === switcher)switch$0 = 1}
    else
     {if(48 === c)
       {var
         width$3=store_char(width$0,ib,c),
         _bPE_=0 === width$3?1:0,
         _bPF_=_bPE_ || end_of_input(ib);
        if(_bPF_)bad_hex_float(0);
        var
         width$4=
          check_case_insensitive_string(width$3,ib,bad_hex_float,_eL_);
        if(0 !== width$4 && ! end_of_input(ib))
         {var match=peek_char(ib),_bPG_=match + num_46 | 0,switch$1=0;
          if(34 < _bPG_ >>> 0)
           {if(66 === _bPG_)switch$1 = 1}
          else
           if(32 < (_bPG_ - 1 | 0) >>> 0)switch$1 = 1;
          var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
          if(0 !== width$5 && ! end_of_input(ib))
           {var c$0=peek_char(ib);
            if(46 === c$0)
             {var width$6=store_char(width$5,ib,c$0),switch$2=0;
              if(0 !== width$6 && ! end_of_input(ib))
               {var match$0=peek_char(ib),switch$3=0;
                if(80 !== match$0 && num_112 !== match$0)
                 {var
                   precision$0=min(width$6,precision),
                   width$10=
                    width$6
                    -
                    (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                    |
                    0;
                  switch$3 = 1}
                if(! switch$3)var width$10=width$6;
                var width$7=width$10;
                switch$2 = 1}
              if(! switch$2)var width$7=width$6;
              var width$8=width$7}
            else
             var width$8=width$5;
            if(0 !== width$8 && ! end_of_input(ib))
             {var c$1=peek_char(ib);
              if(80 !== c$1 && num_112 !== c$1)return width$8;
              var
               width$9=store_char(width$8,ib,c$1),
               _bPH_=0 === width$9?1:0,
               _bPI_=_bPH_ || end_of_input(ib);
              if(_bPI_)bad_hex_float(0);
              return scan_optionally_signed_decimal(width$9,ib)}
            return width$8}
          return width$5}
        return width$4}
      if(73 === c)switch$0 = 1}
    if(switch$0)
     {var
       width$2=store_char(width$0,ib,c),
       _bPC_=0 === width$2?1:0,
       _bPD_=_bPC_ || end_of_input(ib);
      if(_bPD_)bad_hex_float(0);
      return check_case_insensitive_string(width$2,ib,bad_hex_float,_eK_)}
    return bad_hex_float(0)}
  function scan_caml_float_rest(width,precision,ib)
   {var _bPs_=0 === width?1:0,_bPt_=_bPs_ || end_of_input(ib);
    if(_bPt_)bad_float(0);
    var
     width$0=scan_decimal_digit_star(width,ib),
     _bPu_=0 === width$0?1:0,
     _bPv_=_bPu_ || end_of_input(ib);
    if(_bPv_)bad_float(0);
    var c=peek_char(ib),switcher=c + num_69 | 0;
    if(32 < switcher >>> 0)
     {if(-23 === switcher)
       {var
         width$1=store_char(width$0,ib,c),
         precision$0=min(width$1,precision),
         width_precision=scan_fractional_part(precision$0,ib),
         frac_width=precision$0 - width_precision | 0,
         width$2=width$1 - frac_width | 0;
        return scan_exponent_part(width$2,ib)}}
    else
     {var switcher$0=switcher - 1 | 0;
      if(30 < switcher$0 >>> 0)return scan_exponent_part(width$0,ib)}
    return bad_float(0)}
  function scan_caml_float(width,precision,ib)
   {var _bPe_=0 === width?1:0,_bPf_=_bPe_ || end_of_input(ib);
    if(_bPf_)bad_float(0);
    var
     width$0=scan_sign(width,ib),
     _bPg_=0 === width$0?1:0,
     _bPh_=_bPg_ || end_of_input(ib);
    if(_bPh_)bad_float(0);
    var c=peek_char(ib);
    if(49 <= c)
     {if(! (58 <= c))
       {var
         width$1=store_char(width$0,ib,c),
         _bPi_=0 === width$1?1:0,
         _bPj_=_bPi_ || end_of_input(ib);
        if(_bPj_)bad_float(0);
        return scan_caml_float_rest(width$1,precision,ib)}}
    else
     if(48 <= c)
      {var
        width$2=store_char(width$0,ib,c),
        _bPk_=0 === width$2?1:0,
        _bPl_=_bPk_ || end_of_input(ib);
       if(_bPl_)bad_float(0);
       var c$0=peek_char(ib);
       if(88 !== c$0 && num_120 !== c$0)
        return scan_caml_float_rest(width$2,precision,ib);
       var
        width$3=store_char(width$2,ib,c$0),
        _bPm_=0 === width$3?1:0,
        _bPn_=_bPm_ || end_of_input(ib);
       if(_bPn_)bad_float(0);
       var
        width$4=scan_hexadecimal_int(width$3,ib),
        _bPo_=0 === width$4?1:0,
        _bPp_=_bPo_ || end_of_input(ib);
       if(_bPp_)bad_float(0);
       var c$1=peek_char(ib),switcher=c$1 + num_80 | 0,switch$0=0;
       if(32 < switcher >>> 0)
        if(num_34 === switcher)
         {var width$5=store_char(width$4,ib,c$1),switch$1=0;
          if(0 !== width$5 && ! end_of_input(ib))
           {var match=peek_char(ib),switch$2=0;
            if(80 !== match && num_112 !== match)
             {var
               precision$0=min(width$5,precision),
               width$10=
                width$5
                -
                (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                |
                0;
              switch$2 = 1}
            if(! switch$2)var width$10=width$5;
            var width$6=width$10;
            switch$1 = 1}
          if(! switch$1)var width$6=width$5;
          var width$7=width$6}
        else
         switch$0 = 1;
       else
        {var switcher$0=switcher - 1 | 0;
         if(30 < switcher$0 >>> 0)var width$7=width$4;else switch$0 = 1}
       var width$8=switch$0?bad_float(0):width$7;
       if(0 !== width$8 && ! end_of_input(ib))
        {var c$2=peek_char(ib);
         if(80 !== c$2 && num_112 !== c$2)return width$8;
         var
          width$9=store_char(width$8,ib,c$2),
          _bPq_=0 === width$9?1:0,
          _bPr_=_bPq_ || end_of_input(ib);
         if(_bPr_)bad_hex_float(0);
         return scan_optionally_signed_decimal(width$9,ib)}
       return width$8}
    return bad_float(0)}
  function scan_string(stp,width,ib)
   {var width$0=width;
    for(;;)
     {if(0 === width$0)return width$0;
      var c=peek_char(ib);
      if(ib[1])return width$0;
      if(stp)
       {var c$0=stp[1];
        if(c === c$0)return skip_char(width$0,ib);
        var width$1=store_char(width$0,ib,c),width$0=width$1;
        continue}
      var _bPd_=c - 9 | 0,switch$0=0;
      if(4 < _bPd_ >>> 0)
       {if(23 === _bPd_)switch$0 = 1}
      else
       if(1 < (_bPd_ - 2 | 0) >>> 0)switch$0 = 1;
      if(switch$0)return width$0;
      var width$2=store_char(width$0,ib,c),width$0=width$2;
      continue}}
  function scan_char(width,ib)
   {return store_char(width,ib,checked_peek_char(ib))}
  function hexadecimal_value_of_char(d)
   {return 97 <= d?d + num_87 | 0:65 <= d?d + num_55 | 0:d - 48 | 0}
  function check_next_char(message,width,ib)
   {if(0 === width)return bad_token_length(message);
    var c=peek_char(ib);
    return ib[1]?bad_input(caml_call1(sprintf(_eq_),message)):c}
  function check_next_char_for_char(_bPb_,_bPc_)
   {return check_next_char(_eO_,_bPb_,_bPc_)}
  function check_next_char_for_string(_bO$_,_bPa_)
   {return check_next_char(_eP_,_bO$_,_bPa_)}
  function scan_backslash_char(width,ib)
   {var c0=check_next_char_for_char(width,ib),switch$0=0;
    if(40 <= c0)
     {if(58 <= c0)
       {var switcher$0=c0 + num_92 | 0;
        if(! (28 < switcher$0 >>> 0))
         switch(switcher$0)
          {case 28:
            var
             get_digit=
              function(param)
               {var c=next_char(ib),_bO__=c + num_48 | 0,switch$0=0;
                if(22 < _bO__ >>> 0)
                 {if(! (5 < (_bO__ + num_49 | 0) >>> 0))switch$0 = 1}
                else
                 if(6 < (_bO__ + num_10 | 0) >>> 0)switch$0 = 1;
                return switch$0?c:bad_input_escape(c)},
             c1=get_digit(0),
             c2=get_digit(0),
             _bO6_=hexadecimal_value_of_char(c2),
             c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _bO6_ | 0,
             switch$1=0;
            if(0 <= c$0 && ! (num_255 < c$0))
             {var _bO8_=char_of_int(c$0);switch$1 = 1}
            if(! switch$1)
             var _bO8_=bad_input(caml_call2(sprintf(_eN_),c1,c2));
            return store_char(width - 2 | 0,ib,_bO8_);
           case 0:
           case 6:
           case 18:
           case 22:
           case 24:switch$0 = 1;break
           }}
      else
       if(48 <= c0)
        {var
          get_digit$0=
           function(param)
            {var c=next_char(ib),switcher=c + num_48 | 0;
             return 9 < switcher >>> 0?bad_input_escape(c):c},
          c1$0=get_digit$0(0),
          c2$0=get_digit$0(0),
          c=
           ((num_100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
           +
           (c2$0 - 48 | 0)
           |
           0,
          switch$2=0;
         if(0 <= c && ! (num_255 < c)){var _bO9_=char_of_int(c);switch$2 = 1}
         if(! switch$2)
          var _bO9_=bad_input(caml_call3(sprintf(_eM_),c0,c1$0,c2$0));
         return store_char(width - 2 | 0,ib,_bO9_)}}
    else
     if(34 === c0 || 39 <= c0)switch$0 = 1;
    if(switch$0)
     {var switch$3=0;
      if(num_110 <= c0)
       if(num_117 <= c0)
        switch$3 = 1;
       else
        {var switcher=c0 + num_110$0 | 0;
         switch(switcher)
          {case 0:var _bO7_=10;break;
           case 4:var _bO7_=13;break;
           case 6:var _bO7_=9;break;
           default:switch$3 = 1}}
      else
       if(98 === c0)var _bO7_=8;else switch$3 = 1;
      if(switch$3)var _bO7_=c0;
      return store_char(width,ib,_bO7_)}
    return bad_input_escape(c0)}
  function scan_caml_char(width,ib)
   {function find_stop(width)
     {var c=check_next_char_for_char(width,ib);
      return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
    var c=checked_peek_char(ib);
    if(39 === c)
     {var
       width$0=ignore_char(width,ib),
       c$0=check_next_char_for_char(width$0,ib);
      return 92 === c$0
              ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
              :find_stop(store_char(width$0,ib,c$0))}
    return character_mismatch(39,c)}
  function scan_caml_string(width,ib)
   {function find_stop$0(counter,width)
     {var width$0=width;
      for(;;)
       {var c=check_next_char_for_string(width$0,ib);
        if(34 === c)return ignore_char(width$0,ib);
        if(92 === c)
         {var
           width$1=ignore_char(width$0,ib),
           match=check_next_char_for_string(width$1,ib);
          if(10 === match)
           {var _bO4_=ignore_char(width$1,ib);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return skip_spaces(counter$0,_bO4_)}
            return caml_trampoline_return(skip_spaces,[0,_bO4_])}
          if(13 === match)
           {var
             width$3=ignore_char(width$1,ib),
             match$0=check_next_char_for_string(width$3,ib);
            if(10 === match$0)
             {var _bO5_=ignore_char(width$3,ib);
              if(counter < 50)
               {var counter$1=counter + 1 | 0;
                return skip_spaces(counter$1,_bO5_)}
              return caml_trampoline_return(skip_spaces,[0,_bO5_])}
            var width$5=store_char(width$3,ib,13),width$0=width$5;
            continue}
          var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
          continue}
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function skip_spaces(counter,width)
     {var width$0=width;
      for(;;)
       {var match=check_next_char_for_string(width$0,ib);
        if(32 === match)
         {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
        if(counter < 50)
         {var counter$0=counter + 1 | 0;return find_stop$0(counter$0,width$0)}
        return caml_trampoline_return(find_stop$0,[0,width$0])}}
    function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
    var c=checked_peek_char(ib);
    return 34 === c?find_stop(ignore_char(width,ib)):character_mismatch(34,c)}
  function scan_chars_in_char_set(char_set,scan_indic,width,ib)
   {function scan_chars(i,stp)
     {var i$0=i;
      for(;;)
       {var c=peek_char(ib),_bO1_=0 < i$0?1:0;
        if(_bO1_)
         {var _bO2_=1 - ib[1];
          if(_bO2_)
           var
            str_ind=c >>> 3 | 0,
            mask=1 << (c & 7),
            _bO0_=0 !== (caml_string_get(char_set,str_ind) & mask)?1:0,
            _bO3_=_bO0_?c !== stp?1:0:_bO0_;
          else
           var _bO3_=_bO2_}
        else
         var _bO3_=_bO1_;
        if(_bO3_)
         {store_char(max_int_float,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
        return _bO3_}}
    if(scan_indic)
     {var c=scan_indic[1];
      scan_chars(width,c);
      var _bOZ_=1 - ib[1];
      if(_bOZ_)
       {var ci=peek_char(ib);
        return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
      return _bOZ_}
    return scan_chars(width,-1)}
  function ef(ib,x)
   {if(x[1] === Scan_failure)
     var s=x[2];
    else
     {if(x[1] !== Failure)throw x;var s=x[2]}
    var i=char_count(ib);
    return bad_input(caml_call2(sprintf(_eR_),i,s))}
  function get_counter(ib,counter)
   {switch(counter)
     {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
  function width_of_pad_opt(pad_opt)
   {if(pad_opt){var width=pad_opt[1];return width}return max_int_float}
  function stopper_of_formatting_lit(fmting)
   {if(6 === fmting)return _eS_;
    var
     str=string_of_formatting_lit(fmting),
     stp=caml_string_get(str,1),
     sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
    return [0,stp,sub_str]}
  function take_format_readers$0(counter,k,fmt)
   {var fmt$0=fmt;
    for(;;)
     if(typeof fmt$0 === "number")
      return caml_call1(k,0);
     else
      switch(fmt$0[0])
       {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
        case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
        case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
        case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
        case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
        case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
        case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
        case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
        case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
        case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
        case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
        case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
        case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
        case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
        case 14:
         var rest=fmt$0[3],fmtty=fmt$0[2],_bOX_=erase_rel(symm(fmtty));
         if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_fmtty_format_readers$0(counter$0,k,_bOX_,rest)}
         return caml_trampoline_return
                 (take_fmtty_format_readers$0,[0,k,_bOX_,rest]);
        case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
        case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
        case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
        case 18:
         var _bOY_=fmt$0[1];
         if(0 === _bOY_[0])
          {var
            rest$0=fmt$0[2],
            match=_bOY_[1],
            fmt$18=match[1],
            fmt$19=concat_fmt(fmt$18,rest$0),
            fmt$0=fmt$19;
           continue}
         var
          rest$1=fmt$0[2],
          match$0=_bOY_[1],
          fmt$20=match$0[1],
          fmt$21=concat_fmt(fmt$20,rest$1),
          fmt$0=fmt$21;
         continue;
        case 19:
         var fmt_rest=fmt$0[1];
         return function(reader)
          {function new_k(readers_rest)
            {return caml_call1(k,[0,reader,readers_rest])}
           return take_format_readers(new_k,fmt_rest)};
        case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
        case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
        case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
        case 23:
         var rest$2=fmt$0[2],ign=fmt$0[1];
         if(typeof ign === "number")
          switch(ign)
           {case 0:var fmt$0=rest$2;continue;
            case 1:var fmt$0=rest$2;continue;
            case 2:
             return function(reader)
              {function new_k(readers_rest)
                {return caml_call1(k,[0,reader,readers_rest])}
               return take_format_readers(new_k,rest$2)};
            default:var fmt$0=rest$2;continue}
         else
          switch(ign[0])
           {case 0:var fmt$0=rest$2;continue;
            case 1:var fmt$0=rest$2;continue;
            case 2:var fmt$0=rest$2;continue;
            case 3:var fmt$0=rest$2;continue;
            case 4:var fmt$0=rest$2;continue;
            case 5:var fmt$0=rest$2;continue;
            case 6:var fmt$0=rest$2;continue;
            case 7:var fmt$0=rest$2;continue;
            case 8:var fmt$0=rest$2;continue;
            case 9:
             var fmtty$0=ign[2];
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return take_fmtty_format_readers$0(counter$1,k,fmtty$0,rest$2)}
             return caml_trampoline_return
                     (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
            case 10:var fmt$0=rest$2;continue;
            default:var fmt$0=rest$2;continue}
        default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
  function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
   {var fmtty$0=fmtty;
    for(;;)
     if(typeof fmtty$0 === "number")
      {if(counter < 50)
        {var counter$0=counter + 1 | 0;
         return take_format_readers$0(counter$0,k,fmt)}
       return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
     else
      switch(fmtty$0[0])
       {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
        case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
        case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
        case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
        case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
        case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
        case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
        case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
        case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
        case 9:
         var
          rest=fmtty$0[3],
          ty2=fmtty$0[2],
          ty1=fmtty$0[1],
          ty=trans(symm(ty1),ty2),
          fmtty$10=concat_fmtty(ty,rest),
          fmtty$0=fmtty$10;
         continue;
        case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
        case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
        case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
        case 13:
         var fmt_rest=fmtty$0[1];
         return function(reader)
          {function new_k(readers_rest)
            {return caml_call1(k,[0,reader,readers_rest])}
           return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
        default:
         var fmt_rest$0=fmtty$0[1];
         return function(reader)
          {function new_k(readers_rest)
            {return caml_call1(k,[0,reader,readers_rest])}
           return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
  function take_format_readers(k,fmt)
   {return caml_trampoline(take_format_readers$0(0,k,fmt))}
  function take_fmtty_format_readers(k,fmtty,fmt)
   {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
  function make_scanf(ib,fmt$0,readers)
   {var fmt$1=fmt$0;
    for(;;)
     if(typeof fmt$1 === "number")
      return 0;
     else
      switch(fmt$1[0])
       {case 0:
         var rest=fmt$1[1];
         scan_char(0,ib);
         var c=token_char(ib);
         return [0,c,make_scanf(ib,rest,readers)];
        case 1:
         var rest$0=fmt$1[1];
         scan_caml_char(0,ib);
         var c$0=token_char(ib);
         return [0,c$0,make_scanf(ib,rest$0,readers)];
        case 2:
         var _bOH_=fmt$1[2],_bOI_=fmt$1[1];
         if(typeof _bOH_ !== "number")
          switch(_bOH_[0])
           {case 17:
             var
              rest$1=_bOH_[2],
              fmting_lit=_bOH_[1],
              match$0=stopper_of_formatting_lit(fmting_lit),
              str=match$0[2],
              stp=match$0[1],
              scan$0=
               function(width,param,ib){return scan_string([0,stp],width,ib)},
              str_rest=[11,str,rest$1];
             return pad_prec_scanf
                     (ib,str_rest,readers,_bOI_,0,scan$0,token_string);
            case 18:
             var _bOJ_=_bOH_[1];
             if(0 === _bOJ_[0])
              {var
                rest$2=_bOH_[2],
                match$1=_bOJ_[1],
                fmt$2=match$1[1],
                scan$1=
                 function(width,param,ib){return scan_string(_eT_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$2),
                        readers,
                        _bOI_,
                        0,
                        scan$1,
                        token_string)}
             var
              rest$3=_bOH_[2],
              match$2=_bOJ_[1],
              fmt$3=match$2[1],
              scan$2=
               function(width,param,ib){return scan_string(_eU_,width,ib)};
             return pad_prec_scanf
                     (ib,
                      concat_fmt(fmt$3,rest$3),
                      readers,
                      _bOI_,
                      0,
                      scan$2,
                      token_string)
            }
         var scan=function(width,param,ib){return scan_string(0,width,ib)};
         return pad_prec_scanf(ib,_bOH_,readers,_bOI_,0,scan,token_string);
        case 3:
         var
          rest$4=fmt$1[2],
          pad=fmt$1[1],
          scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
         return pad_prec_scanf(ib,rest$4,readers,pad,0,scan$3,token_string);
        case 4:
         var
          rest$5=fmt$1[4],
          prec=fmt$1[3],
          pad$0=fmt$1[2],
          iconv=fmt$1[1],
          conv=integer_conversion_of_char(char_of_iconv(iconv)),
          scan$4=
           function(width,param,ib){return scan_int_conversion(conv,width,ib)};
         return pad_prec_scanf
                 (ib,
                  rest$5,
                  readers,
                  pad$0,
                  prec,
                  scan$4,
                  function(ib)
                   {return caml_int_of_string(token_int_literal(conv,ib))});
        case 5:
         var
          rest$6=fmt$1[4],
          prec$0=fmt$1[3],
          pad$1=fmt$1[2],
          iconv$0=fmt$1[1],
          conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
          scan$5=
           function(width,param,ib)
            {return scan_int_conversion(conv$0,width,ib)};
         return pad_prec_scanf
                 (ib,
                  rest$6,
                  readers,
                  pad$1,
                  prec$0,
                  scan$5,
                  function(ib)
                   {return caml_int_of_string(token_int_literal(conv$0,ib))});
        case 6:
         var
          rest$7=fmt$1[4],
          prec$1=fmt$1[3],
          pad$2=fmt$1[2],
          iconv$1=fmt$1[1],
          conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
          scan$6=
           function(width,param,ib)
            {return scan_int_conversion(conv$1,width,ib)};
         return pad_prec_scanf
                 (ib,
                  rest$7,
                  readers,
                  pad$2,
                  prec$1,
                  scan$6,
                  function(ib)
                   {return caml_int_of_string(token_int_literal(conv$1,ib))});
        case 7:
         var
          rest$8=fmt$1[4],
          prec$2=fmt$1[3],
          pad$3=fmt$1[2],
          iconv$2=fmt$1[1],
          conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
          scan$7=
           function(width,param,ib)
            {return scan_int_conversion(conv$2,width,ib)};
         return pad_prec_scanf
                 (ib,
                  rest$8,
                  readers,
                  pad$3,
                  prec$2,
                  scan$7,
                  function(ib)
                   {return caml_int64_of_string(token_int_literal(conv$2,ib))});
        case 8:
         var _bOK_=fmt$1[1][2];
         if(5 === _bOK_)
          {var rest$9=fmt$1[4],prec$3=fmt$1[3],pad$4=fmt$1[2];
           return pad_prec_scanf
                   (ib,rest$9,readers,pad$4,prec$3,scan_caml_float,token_float)}
         if(6 <= _bOK_)
          {var rest$10=fmt$1[4],prec$4=fmt$1[3],pad$5=fmt$1[2];
           return pad_prec_scanf
                   (ib,rest$10,readers,pad$5,prec$4,scan_hex_float,token_float)}
         var rest$11=fmt$1[4],prec$5=fmt$1[3],pad$6=fmt$1[2];
         return pad_prec_scanf
                 (ib,rest$11,readers,pad$6,prec$5,scan_float,token_float);
        case 9:
         var
          rest$12=fmt$1[2],
          pad$7=fmt$1[1],
          scan$8=
           function(param,_bOW_,ib)
            {var
              c=checked_peek_char(ib),
              m=
               num_102 === c
                ?5
                :num_116 === c?4:bad_input(caml_call1(sprintf(_eQ_),c));
             return scan_string(0,m,ib)};
         return pad_prec_scanf(ib,rest$12,readers,pad$7,0,scan$8,token_bool);
        case 10:
         var rest$13=fmt$1[1];
         if(end_of_input(ib)){var fmt$1=rest$13;continue}
         return bad_input(_eV_);
        case 11:
         var fmt$4=fmt$1[2],str$0=fmt$1[1];
         iter$1(function(_bOV_){return check_char(ib,_bOV_)},str$0);
         var fmt$1=fmt$4;
         continue;
        case 12:
         var fmt$5=fmt$1[2],chr=fmt$1[1];
         check_char(ib,chr);
         var fmt$1=fmt$5;
         continue;
        case 13:
         var rest$14=fmt$1[3],fmtty=fmt$1[2],pad_opt=fmt$1[1];
         scan_caml_string(width_of_pad_opt(pad_opt),ib);
         var str$1=token_string(ib);
         try
          {var match=fmt_ebb_of_string(0,str$1),fmt=match[1];
           try
            {var _bOG_=[0,type_format(fmt,fmtty),str$1],_bOL_=_bOG_}
           catch(_bOU_)
            {_bOU_ = caml_wrap_exception(_bOU_);
             if(_bOU_ !== Type_mismatch)throw _bOU_;
             var
              _bOF_=string_of_fmtty(fmtty),
              _bOL_=caml_call2(failwith_message(_do_),str$1,_bOF_)}
           var fmt$6=_bOL_}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           if(exn[1] !== Failure)throw exn;
           var msg=exn[2],fmt$6=bad_input(msg)}
         return [0,fmt$6,make_scanf(ib,rest$14,readers)];
        case 14:
         var rest$15=fmt$1[3],fmtty$0=fmt$1[2],pad_opt$0=fmt$1[1];
         scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
         var s=token_string(ib);
         try
          {var
            match$3=fmt_ebb_of_string(0,s),
            fmt$9=match$3[1],
            match$4=fmt_ebb_of_string(0,s),
            fmt$10=match$4[1],
            fmt$11=type_format(fmt$10,erase_rel(symm(fmtty$0))),
            _bON_=type_format(fmt$9,erase_rel(fmtty$0)),
            fmt$8=_bON_,
            fmt$7=fmt$11}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           if(exn[1] !== Failure)throw exn;
           var
            msg$0=exn[2],
            _bOM_=bad_input(msg$0),
            fmt$8=_bOM_[1],
            fmt$7=_bOM_[2]}
         return [0,
                 [0,fmt$8,s],
                 make_scanf(ib,concat_fmt(fmt$7,rest$15),readers)];
        case 15:return invalid_arg(_eW_);
        case 16:return invalid_arg(_eX_);
        case 17:
         var
          fmt$12=fmt$1[2],
          formatting_lit=fmt$1[1],
          _bOO_=string_of_formatting_lit(formatting_lit);
         iter$1(function(_bOT_){return check_char(ib,_bOT_)},_bOO_);
         var fmt$1=fmt$12;
         continue;
        case 18:
         var _bOP_=fmt$1[1];
         if(0 === _bOP_[0])
          {var rest$16=fmt$1[2],match$5=_bOP_[1],fmt$13=match$5[1];
           check_char(ib,64);
           check_char(ib,num_123);
           var fmt$14=concat_fmt(fmt$13,rest$16),fmt$1=fmt$14;
           continue}
         var rest$17=fmt$1[2],match$6=_bOP_[1],fmt$15=match$6[1];
         check_char(ib,64);
         check_char(ib,91);
         var fmt$16=concat_fmt(fmt$15,rest$17),fmt$1=fmt$16;
         continue;
        case 19:
         var fmt_rest=fmt$1[1];
         if(readers)
          {var
            readers_rest=readers[2],
            reader=readers[1],
            x=caml_call1(reader,ib);
           return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
         return invalid_arg(_eY_);
        case 20:
         var _bOQ_=fmt$1[3],_bOR_=fmt$1[2],_bOS_=fmt$1[1];
         if(typeof _bOQ_ !== "number" && 17 === _bOQ_[0])
          {var
            rest$18=_bOQ_[2],
            fmting_lit$0=_bOQ_[1],
            match$7=stopper_of_formatting_lit(fmting_lit$0),
            str$2=match$7[2],
            stp$0=match$7[1],
            width$0=width_of_pad_opt(_bOS_);
           scan_chars_in_char_set(_bOR_,[0,stp$0],width$0,ib);
           var s$1=token_string(ib),str_rest$0=[11,str$2,rest$18];
           return [0,s$1,make_scanf(ib,str_rest$0,readers)]}
         var width=width_of_pad_opt(_bOS_);
         scan_chars_in_char_set(_bOR_,0,width,ib);
         var s$0=token_string(ib);
         return [0,s$0,make_scanf(ib,_bOQ_,readers)];
        case 21:
         var rest$19=fmt$1[2],counter=fmt$1[1],count=get_counter(ib,counter);
         return [0,count,make_scanf(ib,rest$19,readers)];
        case 22:
         var rest$20=fmt$1[1],c$1=checked_peek_char(ib);
         return [0,c$1,make_scanf(ib,rest$20,readers)];
        case 23:
         var
          rest$21=fmt$1[2],
          ign=fmt$1[1],
          match$8=param_format_of_ignored_format(ign,rest$21),
          fmt$17=match$8[1],
          match$9=make_scanf(ib,fmt$17,readers);
         if(match$9){var arg_rest=match$9[2];return arg_rest}
         throw [0,Assert_failure,_eZ_];
        default:return invalid_arg(_e0_)}}
  function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
   {if(typeof pad === "number")
     {if(typeof prec === "number")
       {if(0 === prec)
         {caml_call3(scan,max_int_float,max_int_float,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        return invalid_arg(_e1_)}
      var p=prec[1];
      caml_call3(scan,max_int_float,p,ib);
      var x$0=caml_call1(token,ib);
      return [0,x$0,make_scanf(ib,fmt,readers)]}
    else
     {if(0 === pad[0])
       {if(0 === pad[1])return invalid_arg(_e2_);
        var _bOE_=pad[2];
        if(typeof prec === "number")
         {if(0 === prec)
           {caml_call3(scan,_bOE_,max_int_float,ib);
            var x$1=caml_call1(token,ib);
            return [0,x$1,make_scanf(ib,fmt,readers)]}
          return invalid_arg(_e3_)}
        var p$0=prec[1];
        caml_call3(scan,_bOE_,p$0,ib);
        var x$2=caml_call1(token,ib);
        return [0,x$2,make_scanf(ib,fmt,readers)]}
      return invalid_arg(_e4_)}}
  function sscanf(s,fmt$0)
   {var i=[0,0],len=caml_ml_string_length(s);
    function next(param)
     {if(len <= i[1])throw End_of_file;
      var c=caml_string_get(s,i[1]);
      i[1]++;
      return c}
    var ib=create$4(1,next),str=fmt$0[2],fmt=fmt$0[1];
    function apply(f,args)
     {var f$0=f,args$0=args;
      for(;;)
       {if(args$0)
         {var
           args$1=args$0[2],
           x=args$0[1],
           f$1=caml_call1(f$0,x),
           f$0=f$1,
           args$0=args$1;
          continue}
        return f$0}}
    function k(readers,f)
     {reset_token(ib);
      try
       {var _bOD_=[0,make_scanf(ib,fmt,readers)],_bOC_=_bOD_}
      catch(exc)
       {exc = caml_wrap_exception(exc);
        var switch$0=0;
        if
         (exc[1]
          !==
          Scan_failure
          &&
          exc[1]
          !==
          Failure
          &&
          exc
          !==
          End_of_file)
         {if(exc[1] !== Invalid_argument)throw exc;
          var
           msg=exc[2],
           _bOB_=
            invalid_arg(symbol(msg,symbol(_e6_,symbol(escaped(str),_e5_))));
          switch$0 = 1}
        if(! switch$0)var _bOB_=[1,exc];
        var _bOC_=_bOB_}
      if(0 === _bOC_[0]){var args=_bOC_[1];return apply(f,args)}
      var exc=_bOC_[1];
      return ef(ib,exc)}
    return take_format_readers(k,fmt)}
  function register_exception(name,exn)
   {var slot=caml_obj_tag(exn) === num_248?exn:exn[1];
    return caml_register_named_value(name,slot)}
  var initial_object_size=2;
  function public_method_label(s)
   {var accu=[0,0],_bOy_=caml_ml_string_length(s) - 1 | 0,_bOx_=0;
    if(! (_bOy_ < 0))
     {var i=_bOx_;
      for(;;)
       {var _bOz_=caml_string_get(s,i);
        accu[1] = (num_223 * accu[1] | 0) + _bOz_ | 0;
        var _bOA_=i + 1 | 0;
        if(_bOy_ !== i){var i=_bOA_;continue}
        break}}
    accu[1] = accu[1] & num_2147483647;
    var tag=num_1073741823 < accu[1]?accu[1] - num_2147483648 | 0:accu[1];
    return tag}
  var
   compare$1=caml_string_compare,
   Vars=_au_([0,compare$1]),
   compare$2=caml_string_compare,
   Meths=_au_([0,compare$2]),
   compare$3=caml_int_compare,
   Labs=_au_([0,compare$3]),
   table_count=[0,0],
   dummy_met=caml_obj_block(0,0);
  function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
  function new_table(pub_labels)
   {table_count[1]++;
    var
     len=pub_labels.length - 1,
     methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
    caml_check_bound(methods,0)[1] = len;
    var _bOr_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
    caml_check_bound(methods,1)[2] = _bOr_;
    var _bOt_=len - 1 | 0,_bOs_=0;
    if(! (_bOt_ < 0))
     {var i=_bOs_;
      for(;;)
       {var
         _bOv_=(i * 2 | 0) + 3 | 0,
         _bOu_=caml_check_bound(pub_labels,i)[1 + i];
        caml_check_bound(methods,_bOv_)[1 + _bOv_] = _bOu_;
        var _bOw_=i + 1 | 0;
        if(_bOt_ !== i){var i=_bOw_;continue}
        break}}
    return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
  function resize$1(array,new_size)
   {var old_size=array[2].length - 1,_bOp_=old_size < new_size?1:0;
    if(_bOp_)
     {var new_buck=caml_make_vect(new_size,dummy_met);
      blit$1(array[2],0,new_buck,0,old_size);
      array[2] = new_buck;
      var _bOq_=0}
    else
     var _bOq_=_bOp_;
    return _bOq_}
  var method_count=[0,0],inst_var_count=[0,0];
  function new_method(table)
   {var index=table[2].length - 1;resize$1(table,index + 1 | 0);return index}
  function get_method_label(table,name)
   {try
     {var _bOn_=caml_call2(Meths[27],name,table[3]);return _bOn_}
    catch(_bOo_)
     {_bOo_ = caml_wrap_exception(_bOo_);
      if(_bOo_ === Not_found)
       {var label=new_method(table);
        table[3] = caml_call3(Meths[4],name,label,table[3]);
        table[4] = caml_call3(Labs[4],label,1,table[4]);
        return label}
      throw _bOo_}}
  function get_method_labels(table,names)
   {return map$3(function(_bOm_){return get_method_label(table,_bOm_)},names)}
  function set_method(table,label,element)
   {method_count[1]++;
    return caml_call2(Labs[27],label,table[4])
            ?(resize$1(table,label + 1 | 0),
              caml_check_bound(table[2],label)[1 + label]
              =
              element,
              0)
            :(table[6] = [0,[0,label,element],table[6]],0)}
  function get_method(table,label)
   {try
     {var _bOk_=assoc(label,table[6]);return _bOk_}
    catch(_bOl_)
     {_bOl_ = caml_wrap_exception(_bOl_);
      if(_bOl_ === Not_found)
       return caml_check_bound(table[2],label)[1 + label];
      throw _bOl_}}
  function to_list$0(arr){return 0 === arr?0:to_list(arr)}
  function new_slot(table)
   {var index=table[1];table[1] = index + 1 | 0;return index}
  function new_variable(table,name)
   {try
     {var _bOi_=caml_call2(Vars[27],name,table[7]);return _bOi_}
    catch(_bOj_)
     {_bOj_ = caml_wrap_exception(_bOj_);
      if(_bOj_ === Not_found)
       {var index=new_slot(table);
        if(caml_string_notequal(name,_e7_))
         table[7] = caml_call3(Vars[4],name,index,table[7]);
        return index}
      throw _bOj_}}
  function to_array(arr){return caml_equal(arr,0)?[0]:arr}
  function new_methods_variables(table,meths,vals)
   {var
     meths$0=to_array(meths),
     nmeths=meths$0.length - 1,
     nvals=vals.length - 1,
     res=caml_make_vect(nmeths + nvals | 0,0),
     _bOa_=nmeths - 1 | 0,
     _bN$_=0;
    if(! (_bOa_ < 0))
     {var i$0=_bN$_;
      for(;;)
       {var
         _bOg_=
          get_method_label(table,caml_check_bound(meths$0,i$0)[1 + i$0]);
        caml_check_bound(res,i$0)[1 + i$0] = _bOg_;
        var _bOh_=i$0 + 1 | 0;
        if(_bOa_ !== i$0){var i$0=_bOh_;continue}
        break}}
    var _bOc_=nvals - 1 | 0,_bOb_=0;
    if(! (_bOc_ < 0))
     {var i=_bOb_;
      for(;;)
       {var
         _bOe_=i + nmeths | 0,
         _bOd_=new_variable(table,caml_check_bound(vals,i)[1 + i]);
        caml_check_bound(res,_bOe_)[1 + _bOe_] = _bOd_;
        var _bOf_=i + 1 | 0;
        if(_bOc_ !== i){var i=_bOf_;continue}
        break}}
    return res}
  function get_variable(table,name)
   {try
     {var _bN9_=caml_call2(Vars[27],name,table[7]);return _bN9_}
    catch(_bN__)
     {_bN__ = caml_wrap_exception(_bN__);
      if(_bN__ === Not_found)throw [0,Assert_failure,_e8_];
      throw _bN__}}
  function create_table(public_methods)
   {if(0 === public_methods)return new_table([0]);
    var tags=map$3(public_method_label,public_methods),table=new_table(tags);
    iteri$0
     (function(i,met)
       {var lab=(i * 2 | 0) + 2 | 0;
        table[3] = caml_call3(Meths[4],met,lab,table[3]);
        table[4] = caml_call3(Labs[4],lab,1,table[4]);
        return 0},
      public_methods);
    return table}
  function init_class(table)
   {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
    table[8] = rev(table[8]);
    return resize$1
            (table,
             3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
  function inherits(cla,vals,virt_meths$1,concr_meths$0,param,top)
   {var
     env=param[4],
     super$0=param[2],
     vars=to_list$0(vals),
     virt_meths=to_list$0(virt_meths$1),
     concr_meths=to_list$0(concr_meths$0),
     virt_meth_labs=
      map$1(function(_bN8_){return get_method_label(cla,_bN8_)},virt_meths),
     concr_meth_labs=
      map$1(function(_bN7_){return get_method_label(cla,_bN7_)},concr_meths);
    cla[5] = [0,[0,cla[3],cla[4],cla[6],cla[7],virt_meth_labs,vars],cla[5]];
    var _bNR_=Vars[1],_bNS_=cla[7];
    function _bNT_(lab,info,tvars)
     {return mem(lab,vars)?caml_call3(Vars[4],lab,info,tvars):tvars}
    cla[7] = caml_call3(Vars[13],_bNT_,_bNS_,_bNR_);
    var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
    iter2
     (function(met,label)
       {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
        var _bN3_=by_label[1];
        try
         {var _bN5_=caml_call2(Labs[27],label,cla[4]),_bN4_=_bN5_}
        catch(_bN6_)
         {_bN6_ = caml_wrap_exception(_bN6_);
          if(_bN6_ !== Not_found)throw _bN6_;
          var _bN4_=1}
        by_label[1] = caml_call3(Labs[4],label,_bN4_,_bN3_);
        return 0},
      concr_meths,
      concr_meth_labs);
    iter2
     (function(met,label)
       {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
        by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
        return 0},
      virt_meths,
      virt_meth_labs);
    cla[3] = by_name[1];
    cla[4] = by_label[1];
    var _bNU_=0,_bNV_=cla[6];
    cla[6]
    =
    fold_right
     (function(met,hm)
       {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
      _bNV_,
      _bNU_);
    var
     init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla),
     match=hd(cla[5]),
     vars$0=match[6],
     virt_meths$0=match[5],
     saved_vars=match[4],
     saved_hidden_meths=match[3],
     by_label$0=match[2],
     by_name$0=match[1];
    cla[5] = tl(cla[5]);
    cla[7]
    =
    fold_left$0
     (function(s,v)
       {var _bN2_=caml_call2(Vars[27],v,cla[7]);
        return caml_call3(Vars[4],v,_bN2_,s)},
      saved_vars,
      vars$0);
    cla[3] = by_name$0;
    cla[4] = by_label$0;
    var _bNW_=cla[6];
    cla[6]
    =
    fold_right
     (function(met,hm)
       {var lab=met[1];return mem(lab,virt_meths$0)?hm:[0,met,hm]},
      _bNW_,
      saved_hidden_meths);
    var
     _bNX_=0,
     _bNY_=to_array(concr_meths$0),
     _bNZ_=
      [0,
       map$3
        (function(nm){return get_method(cla,get_method_label(cla,nm))},_bNY_),
       _bNX_],
     _bN0_=to_array(vals);
    return caml_array_concat
            ([0,
              [0,init],
              [0,
               map$3(function(_bN1_){return get_variable(cla,_bN1_)},_bN0_),
               _bNZ_]])}
  function make_class(pub_meths,class_init)
   {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
    init_class(table);
    return [0,caml_call1(env_init,0),class_init,env_init,0]}
  function create_object_opt(obj_0,table)
   {if(obj_0)return obj_0;
    var obj=caml_obj_block(num_248,table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj)}
  function run_initializers_opt(obj_0,obj,table)
   {if(obj_0)return obj;
    var inits=table[8];
    if(0 !== inits)
     {var param=inits;
      for(;;)
       {if(param)
         {var param$0=param[2],f=param[1];
          caml_call1(f,obj);
          var param=param$0;
          continue}
        break}}
    return obj}
  function new_cache(table)
   {var n=new_method(table),switch$0=0;
    if
     (0
      !==
      (n % 2 | 0)
      &&
      !
      ((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n))
     {var n$0=new_method(table);switch$0 = 1}
    if(! switch$0)var n$0=n;
    caml_check_bound(table[2],n$0)[1 + n$0] = 0;
    return n$0}
  function set_methods(table,methods)
   {var len=methods.length - 1,i=[0,0];
    for(;;)
     {if(i[1] < len)
       {var
         _bNL_=i[1],
         label=caml_check_bound(methods,_bNL_)[1 + _bNL_],
         next=
          function(param)
           {i[1]++;
            var _bNQ_=i[1];
            return caml_check_bound(methods,_bNQ_)[1 + _bNQ_]},
         clo=next(0);
        if(typeof clo === "number")
         switch(clo)
          {case 0:
            var
             x=next(0),
             clo$0=function(x){return function(obj){return x}}(x);
            break;
           case 1:
            var
             n=next(0),
             clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
            break;
           case 2:
            var
             e=next(0),
             n$0=next(0),
             clo$0=
              function(e,n){return function(obj){return obj[1 + e][1 + n]}}
               (e,n$0);
            break;
           case 3:
            var
             n$1=next(0),
             clo$0=
              function(n)
                {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
               (n$1);
            break;
           case 4:
            var
             n$2=next(0),
             clo$0=
              function(n){return function(obj,x){obj[1 + n] = x;return 0}}
               (n$2);
            break;
           case 5:
            var
             f=next(0),
             x$0=next(0),
             clo$0=
              function(f,x){return function(obj){return caml_call1(f,x)}}
               (f,x$0);
            break;
           case 6:
            var
             f$0=next(0),
             n$3=next(0),
             clo$0=
              function(f,n)
                {return function(obj){return caml_call1(f,obj[1 + n])}}
               (f$0,n$3);
            break;
           case 7:
            var
             f$1=next(0),
             e$0=next(0),
             n$4=next(0),
             clo$0=
              function(f,e,n)
                {return function(obj){return caml_call1(f,obj[1 + e][1 + n])}}
               (f$1,e$0,n$4);
            break;
           case 8:
            var
             f$2=next(0),
             n$5=next(0),
             clo$0=
              function(f,n)
                {return function(obj)
                  {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
               (f$2,n$5);
            break;
           case 9:
            var
             f$3=next(0),
             x$1=next(0),
             y=next(0),
             clo$0=
              function(f,x,y){return function(obj){return caml_call2(f,x,y)}}
               (f$3,x$1,y);
            break;
           case 10:
            var
             f$4=next(0),
             x$2=next(0),
             n$6=next(0),
             clo$0=
              function(f,x,n)
                {return function(obj){return caml_call2(f,x,obj[1 + n])}}
               (f$4,x$2,n$6);
            break;
           case 11:
            var
             f$5=next(0),
             x$3=next(0),
             e$1=next(0),
             n$7=next(0),
             clo$0=
              function(f,x,e,n)
                {return function(obj)
                  {return caml_call2(f,x,obj[1 + e][1 + n])}}
               (f$5,x$3,e$1,n$7);
            break;
           case 12:
            var
             f$6=next(0),
             x$4=next(0),
             n$8=next(0),
             clo$0=
              function(f,x,n)
                {return function(obj)
                  {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
               (f$6,x$4,n$8);
            break;
           case 13:
            var
             f$7=next(0),
             n$9=next(0),
             x$5=next(0),
             clo$0=
              function(f,n,x)
                {return function(obj){return caml_call2(f,obj[1 + n],x)}}
               (f$7,n$9,x$5);
            break;
           case 14:
            var
             f$8=next(0),
             e$2=next(0),
             n$10=next(0),
             x$6=next(0),
             clo$0=
              function(f,e,n,x)
                {return function(obj)
                  {return caml_call2(f,obj[1 + e][1 + n],x)}}
               (f$8,e$2,n$10,x$6);
            break;
           case 15:
            var
             f$9=next(0),
             n$11=next(0),
             x$7=next(0),
             clo$0=
              function(f,n,x)
                {return function(obj)
                  {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
               (f$9,n$11,x$7);
            break;
           case 16:
            var
             n$12=next(0),
             x$8=next(0),
             clo$0=
              function(n,x)
                {return function(obj){return caml_call2(obj[1][1 + n],obj,x)}}
               (n$12,x$8);
            break;
           case 17:
            var
             n$13=next(0),
             m=next(0),
             clo$0=
              function(n,m)
                {return function(obj)
                  {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
               (n$13,m);
            break;
           case 18:
            var
             n$14=next(0),
             e$3=next(0),
             m$0=next(0),
             clo$0=
              function(n,e,m)
                {return function(obj)
                  {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
               (n$14,e$3,m$0);
            break;
           case 19:
            var
             n$15=next(0),
             m$1=next(0),
             clo$0=
              function(n,m)
                {return function(obj)
                  {var _bNO_=caml_call1(obj[1][1 + m],obj);
                   return caml_call2(obj[1][1 + n],obj,_bNO_)}}
               (n$15,m$1);
            break;
           case 20:
            var
             m$2=next(0),
             x$9=next(0),
             c=new_cache(table),
             clo$0=
              function(m,x,c)
                {return function(obj)
                  {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
               (m$2,x$9,c);
            break;
           case 21:
            var
             m$3=next(0),
             n$16=next(0),
             c$0=new_cache(table),
             clo$0=
              function(m,n,c)
                {return function(obj)
                  {var _bNN_=obj[1 + n];
                   return caml_call2(caml_get_public_method(_bNN_,m,0),_bNN_,c)}}
               (m$3,n$16,c$0);
            break;
           case 22:
            var
             m$4=next(0),
             e$4=next(0),
             n$17=next(0),
             c$1=new_cache(table),
             clo$0=
              function(m,e,n,c)
                {return function(obj)
                  {var _bNM_=obj[1 + e][1 + n];
                   return caml_call2(caml_get_public_method(_bNM_,m,0),_bNM_,c)}}
               (m$4,e$4,n$17,c$1);
            break;
           default:
            var
             m$5=next(0),
             n$18=next(0),
             c$2=new_cache(table),
             clo$0=
              function(m,n,c)
                {return function(obj)
                  {var _bNP_=caml_call1(obj[1][1 + n],obj);
                   return caml_call2(caml_get_public_method(_bNP_,m,0),_bNP_,c)}}
               (m$5,n$18,c$2)}
        else
         var clo$0=clo;
        set_method(table,label,clo$0);
        i[1]++;
        continue}
      return 0}}
  function create$5(param)
   {if(1 - (1 <= max_ephe_length?1:0))invalid_arg(_O_);
    return caml_ephe_create(1)}
  function get_key(t)
   {raise_if_invalid_offset(t,0,_P_);return caml_ephe_get_key(t,0)}
  function set_key(t,k)
   {raise_if_invalid_offset(t,0,_Q_);return caml_ephe_set_key(t,0,k)}
  function generic_basename(is_dir_sep,current_dir_name,name)
   {if(caml_string_equal(name,_e9_))return current_dir_name;
    var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
    for(;;)
     {if(0 <= n)
       {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
        var p=n + 1 | 0,n$1=n;
        for(;;)
         {if(0 <= n$1)
           {if(caml_call2(is_dir_sep,name,n$1))
             return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
            var n$2=n$1 - 1 | 0,n$1=n$2;
            continue}
          return sub$0(name,0,p)}}
      return sub$0(name,0,1)}}
  function generic_dirname(is_dir_sep,current_dir_name,name)
   {if(caml_string_equal(name,_e__))return current_dir_name;
    var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
    for(;;)
     {if(0 <= n)
       {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
        var n$1=n;
        for(;;)
         {if(0 <= n$1)
           {if(caml_call2(is_dir_sep,name,n$1))
             {var n$3=n$1;
              for(;;)
               {if(0 <= n$3)
                 {if(caml_call2(is_dir_sep,name,n$3))
                   {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                  return sub$0(name,0,n$3 + 1 | 0)}
                return sub$0(name,0,1)}}
            var n$2=n$1 - 1 | 0,n$1=n$2;
            continue}
          return current_dir_name}}
      return sub$0(name,0,1)}}
  function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
  try
   {var _aML_=caml_sys_getenv(_aMK_),temp_dir_name=_aML_}
  catch(_bNK_)
   {_bNK_ = caml_wrap_exception(_bNK_);
    if(_bNK_ !== Not_found)throw _bNK_;
    var temp_dir_name=_e$_}
  function quote(s)
   {var l=caml_ml_string_length(s),b=create$1(l + 20 | 0);
    add_char(b,39);
    var _bNI_=l - 1 | 0,_bNH_=0;
    if(! (_bNI_ < 0))
     {var i=_bNH_;
      for(;;)
       {if(39 === caml_string_get(s,i))
         add_string(b,quotequote);
        else
         add_char(b,caml_string_get(s,i));
        var _bNJ_=i + 1 | 0;
        if(_bNI_ !== i){var i=_bNJ_;continue}
        break}}
    add_char(b,39);
    return contents(b)}
  function is_dir_sep$0(s,i)
   {var c=caml_string_get(s,i),_bNE_=47 === c?1:0;
    if(_bNE_)
     var _bNF_=_bNE_;
    else
     var _bNG_=92 === c?1:0,_bNF_=_bNG_ || (58 === c?1:0);
    return _bNF_}
  function is_relative(n)
   {var
     _bNy_=caml_ml_string_length(n) < 1?1:0,
     _bNz_=_bNy_ || (47 !== caml_string_get(n,0)?1:0);
    if(_bNz_)
     {var
       _bNA_=caml_ml_string_length(n) < 1?1:0,
       _bNB_=_bNA_ || (92 !== caml_string_get(n,0)?1:0);
      if(_bNB_)
       var
        _bNC_=caml_ml_string_length(n) < 2?1:0,
        _bND_=_bNC_ || (58 !== caml_string_get(n,1)?1:0);
      else
       var _bND_=_bNB_}
    else
     var _bND_=_bNz_;
    return _bND_}
  function is_implicit(n)
   {var _bNp_=is_relative(n);
    if(_bNp_)
     {var
       _bNq_=caml_ml_string_length(n) < 2?1:0,
       _bNr_=_bNq_ || caml_string_notequal(sub$0(n,0,2),_fd_);
      if(_bNr_)
       {var
         _bNs_=caml_ml_string_length(n) < 2?1:0,
         _bNt_=_bNs_ || caml_string_notequal(sub$0(n,0,2),_fc_);
        if(_bNt_)
         {var
           _bNu_=caml_ml_string_length(n) < 3?1:0,
           _bNv_=_bNu_ || caml_string_notequal(sub$0(n,0,3),_fb_);
          if(_bNv_)
           var
            _bNw_=caml_ml_string_length(n) < 3?1:0,
            _bNx_=_bNw_ || caml_string_notequal(sub$0(n,0,3),_fa_);
          else
           var _bNx_=_bNv_}
        else
         var _bNx_=_bNt_}
      else
       var _bNx_=_bNr_}
    else
     var _bNx_=_bNp_;
    return _bNx_}
  function check_suffix(name,suff)
   {var _bNm_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
    if(_bNm_)
     var
      s=
       sub$0
        (name,
         caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
         caml_ml_string_length(suff)),
      _bNn_=f(suff),
      _bNo_=caml_string_equal(f(s),_bNn_);
    else
     var _bNo_=_bNm_;
    return _bNo_}
  function chop_suffix_opt(suffix,filename)
   {var
     len_s=caml_ml_string_length(suffix),
     len_f=caml_ml_string_length(filename);
    if(len_s <= len_f)
     {var r=sub$0(filename,len_f - len_s | 0,len_s),_bNl_=f(suffix);
      return caml_string_equal(f(r),_bNl_)
              ?[0,sub$0(filename,0,len_f - len_s | 0)]
              :0}
    return 0}
  try
   {var _aMJ_=caml_sys_getenv(_aMI_),temp_dir_name$0=_aMJ_}
  catch(_bNk_)
   {_bNk_ = caml_wrap_exception(_bNk_);
    if(_bNk_ !== Not_found)throw _bNk_;
    var temp_dir_name$0=_fe_}
  function quote$0(s)
   {var l=caml_ml_string_length(s),b=create$1(l + 20 | 0);
    add_char(b,34);
    function add_bs(n)
     {var _bNi_=1;
      if(! (n < 1))
       {var j=_bNi_;
        for(;;)
         {add_char(b,92);
          var _bNj_=j + 1 | 0;
          if(n !== j){var j=_bNj_;continue}
          break}}
      return 0}
    function loop$0(counter,i)
     {var i$0=i;
      for(;;)
       {if(i$0 === l)return add_char(b,34);
        var c=caml_string_get(s,i$0);
        if(34 === c)
         {var _bNg_=0;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;return loop_bs(counter$1,_bNg_,i$0)}
          return caml_trampoline_return(loop_bs,[0,_bNg_,i$0])}
        if(92 === c)
         {var _bNh_=0;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop_bs(counter$0,_bNh_,i$0)}
          return caml_trampoline_return(loop_bs,[0,_bNh_,i$0])}
        add_char(b,c);
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function loop_bs(counter,n,i)
     {var n$0=n,i$0=i;
      for(;;)
       {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
        var match=caml_string_get(s,i$0);
        if(34 === match)
         {add_bs((2 * n$0 | 0) + 1 | 0);
          add_char(b,34);
          var _bNf_=i$0 + 1 | 0;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;return loop$0(counter$1,_bNf_)}
          return caml_trampoline_return(loop$0,[0,_bNf_])}
        if(92 === match)
         {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
        add_bs(n$0);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
        return caml_trampoline_return(loop$0,[0,i$0])}}
    function loop(i){return caml_trampoline(loop$0(0,i))}
    loop(0);
    return contents(b)}
  function drive_and_path(s)
   {var _bNb_=2 <= caml_ml_string_length(s)?1:0;
    if(_bNb_)
     {var param=caml_string_get(s,0),switch$0=0;
      if(91 <= param)
       {if(! (25 < (param + num_97 | 0) >>> 0))switch$0 = 1}
      else
       if(65 <= param)switch$0 = 1;
      var _bNc_=switch$0?1:0,_bNd_=_bNc_?58 === caml_string_get(s,1)?1:0:_bNc_}
    else
     var _bNd_=_bNb_;
    if(_bNd_)
     {var _bNe_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
      return [0,sub$0(s,0,2),_bNe_]}
    return [0,_ff_,s]}
  function dirname(s)
   {var
     match=drive_and_path(s),
     path=match[2],
     drive=match[1],
     dir=generic_dirname(is_dir_sep$0,current_dir_name,path);
    return symbol(drive,dir)}
  function basename(s)
   {var match=drive_and_path(s),path=match[2];
    return generic_basename(is_dir_sep$0,current_dir_name,path)}
  function basename$0(_bNa_)
   {return generic_basename(is_dir_sep$0,current_dir_name$0,_bNa_)}
  function dirname$0(_bM$_)
   {return generic_dirname(is_dir_sep$0,current_dir_name$0,_bM$_)}
  var switch$0=0;
  if(caml_string_notequal(os_type,_fg_))
   if(caml_string_notequal(os_type,_fh_))
    {var dir_sep$2=dir_sep,is_dir_sep$1=is_dir_sep;switch$0 = 1}
   else
    var
     _aMH_=
      [0,
       current_dir_name,
       parent_dir_name,
       dir_sep$0,
       is_dir_sep$0,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       temp_dir_name$0,
       quote$0,
       basename,
       dirname];
  else
   var
    _aMH_=
     [0,
      current_dir_name$0,
      parent_dir_name$0,
      dir_sep$1,
      is_dir_sep$0,
      is_relative,
      is_implicit,
      check_suffix,
      chop_suffix_opt,
      temp_dir_name,
      quote,
      basename$0,
      dirname$0];
  if(! switch$0)var dir_sep$2=_aMH_[3],is_dir_sep$1=is_dir_sep$0;
  var char$0=12,c_layout=0;
  function create$6(kind,layout,dim)
   {return caml_ba_create(kind,layout,[0,dim])}
  function pp_t(ppf,t)
   {var _bM8_=caml_ba_dim_1(t[1]),_bM9_=t[3],_bM__=t[2];
    return caml_call4(pf(ppf),_fi_,_bM__,_bM9_,_bM8_)}
  function string_t(ppf,str)
   {return caml_call2(pf(ppf),_fj_,caml_ml_string_length(str))}
  function err(fmt)
   {var b=create$1(20),ppf=formatter_of_buffer(b);
    function k(ppf){pp_print_flush(ppf,0);return invalid_arg(contents(b))}
    return kpf(k,ppf,fmt)}
  function create_unsafe(len)
   {var buffer=create$6(char$0,c_layout,len);return [0,buffer,0,len]}
  create_unsafe(0);
  function blitfun(src,srcoff,dst,dstoff,len)
   {if
     (0
      <=
      len
      &&
      0
      <=
      srcoff
      &&
      0
      <=
      dstoff
      &&
      !
      ((caml_ml_string_length(src) - srcoff | 0) < len))
     return (dst[3] - dstoff | 0) < len
             ?caml_call2
               (caml_call4(err(_fm_),string_t,src,pp_t,dst),dstoff,len)
             :caml_blit_string_to_bigstring
               (src,srcoff,dst[1],dst[2] + dstoff | 0,len);
    return caml_call2(caml_call4(err(_fl_),string_t,src,pp_t,dst),srcoff,len)}
  function of_string(allocator,off$0,len$1,buf)
   {if(off$0)var sth=off$0[1],off=sth;else var off=0;
    if(len$1)
     var len$0=len$1[1],buflen=len$0;
    else
     var buflen=caml_ml_string_length(buf);
    if(allocator)
     {var fn=allocator[1],t=caml_call1(fn,buflen);
      blitfun(buf,off,t,0,buflen);
      if(0 <= buflen)
       {var
         len=t[2] + buflen | 0,
         _bM6_=0 <= len?1:0,
         _bM7_=_bM6_?len <= caml_ba_dim_1(t[1])?1:0:_bM6_;
        if(_bM7_)return [0,t[1],t[2],buflen]}
      return caml_call1(caml_call2(err(_fk_),pp_t,t),buflen)}
    var c=create_unsafe(buflen);
    blitfun(buf,off,c,0,buflen);
    return c}
  function hexdump_pp(fmt,t)
   {function before(fmt,param)
     {return 0 === param
              ?0
              :8 === param?caml_call1(pf(fmt),_fn_):caml_call1(pf(fmt),_fo_)}
    function after(fmt,param){return 15 === param?caml_call1(pf(fmt),_fp_):0}
    pp_open_box_gen(fmt,0,1);
    var _bM4_=t[3] - 1 | 0,_bM3_=0;
    if(! (_bM4_ < 0))
     {var i=_bM3_;
      for(;;)
       {var column=i % 16 | 0,c=caml_ba_get_1(t[1],t[2] + i | 0);
        caml_call6(pf(fmt),_fq_,before,column,c,after,column);
        var _bM5_=i + 1 | 0;
        if(_bM4_ !== i){var i=_bM5_;continue}
        break}}
    return pp_close_box(fmt,0)}
  caml_call1(pr(_fr_),hexdump_pp);
  function invalid_arg$0(fmt)
   {return ksprintf(function(str){throw [0,Invalid_argument,str]},fmt)}
  function arg(ignore,s)
   {if(ignore)
     {var
       ignore$0=ignore[1],
       len$0=caml_ml_string_length(s),
       buf$0=create$1(len$0),
       _bM1_=len$0 - 1 | 0,
       _bM0_=0;
      if(! (_bM1_ < 0))
       {var i$0=_bM0_;
        for(;;)
         {var c=caml_string_get(s,i$0);
          if(! mem(c,ignore$0))
           {var
             y=caml_string_get(hexa,c & 15),
             x=caml_string_get(hexa,c >>> 4 | 0);
            add_char(buf$0,x);
            add_char(buf$0,y)}
          var _bM2_=i$0 + 1 | 0;
          if(_bM1_ !== i$0){var i$0=_bM2_;continue}
          break}}
      return [0,num_3603131,contents(buf$0)]}
    var
     len=caml_ml_string_length(s),
     buf=caml_create_bytes(len * 2 | 0),
     _bMY_=len - 1 | 0,
     _bMX_=0;
    if(! (_bMY_ < 0))
     {var i=_bMX_;
      for(;;)
       {caml_bytes_unsafe_set
         (buf,
          i * 2 | 0,
          caml_string_unsafe_get(hexa1,caml_string_unsafe_get(s,i)));
        caml_bytes_unsafe_set
         (buf,
          (i * 2 | 0) + 1 | 0,
          caml_string_unsafe_get(hexa2,caml_string_unsafe_get(s,i)));
        var _bMZ_=i + 1 | 0;
        if(_bMY_ !== i){var i=_bMZ_;continue}
        break}}
    return [0,num_3603131,to_string(buf)]}
  function arg$0(ignore,b){return arg(ignore,to_string(b))}
  function to_bytes$0(hex)
   {var s=hex[2];
    if(caml_string_equal(s,_ft_))return empty_return;
    var n=caml_ml_string_length(s),buf=caml_create_bytes(n / 2 | 0),i=0,j=1;
    for(;;)
     {if(! (n <= i))
       {if(! (n <= j))
         {var
           y=caml_string_get(s,j),
           x=caml_string_get(s,i),
           code=
            function(c)
             {if(65 <= c)
               {if(97 <= c)
                 {if(! (num_103 <= c))return c + num_87 | 0}
                else
                 if(! (71 <= c))return c + num_55 | 0}
              else
               {var switcher=c + num_48 | 0;
                if(! (9 < switcher >>> 0))return c + num_48 | 0}
              return caml_call1(invalid_arg$0(_fs_),c)},
           _bMW_=code(y);
          caml_bytes_set(buf,i / 2 | 0,chr((code(x) << 4) + _bMW_ | 0));
          var j$0=j + 2 | 0,i$0=j + 1 | 0,i=i$0,j=j$0;
          continue}
        invalid_arg$0(_fu_)}
      return buf}}
  function to_string$1(hex){return to_string(to_bytes$0(hex))}
  of_string(0,0,0,_fv_);
  function pp$2(ppf,param){var hex=param[2];return pp(ppf,hex)}
  var _fx_=[num_248,_fw_,caml_fresh_oo_id(0)];
  ml_z_init(0);
  register_exception(_fy_,_fx_);
  var zero$0=ml_z_of_int(0),one=ml_z_of_int(1);
  function _fA_(_bMV_){return ml_z_format(_fz_,_bMV_)}
  function _fB_(_bMU_)
   {return ml_z_of_substring_base(0,_bMU_,0,caml_ml_string_length(_bMU_))}
  caml_fresh_oo_id(0);
  function create$7(param)
   {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
  var compare$4=caml_compare,Storage_map=_au_([0,compare$4]);
  function state_of_result(param)
   {if(0 === param[0]){var x=param[1];return [0,x]}
    var exn=param[1];
    return [1,exn]}
  function underlying(p)
   {var _bMT_=p[1];
    switch(_bMT_[0])
     {case 0:return p;
      case 1:return p;
      case 2:return p;
      default:
       var p$0=_bMT_[1],p$1=underlying(p$0);
       if(1 - (p$1 === p$0?1:0))p[1] = [3,p$1];
       return p$1}}
  function set_promise_state(p,state){p[1] = state;return p}
  var next_key_id=[0,0];
  function new_key(param)
   {var id=next_key_id[1];next_key_id[1] = id + 1 | 0;return [0,id,0]}
  var current_storage=[0,Storage_map[1]];
  function with_value(key,value,f)
   {if(value)
     var
      refresh=function(param){key[2] = value;return 0},
      new_storage=caml_call3(Storage_map[4],key[1],refresh,current_storage[1]);
    else
     var new_storage=caml_call2(Storage_map[7],key[1],current_storage[1]);
    var saved_storage=current_storage[1];
    current_storage[1] = new_storage;
    try
     {var result=caml_call1(f,0);
      current_storage[1] = saved_storage;
      return result}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      current_storage[1] = saved_storage;
      throw exn}}
  function concat_regular_callbacks(l1,l2)
   {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]}
  function clean_up_callback_cells(callbacks)
   {if(typeof callbacks !== "number")
     switch(callbacks[0])
      {case 0:
        var
         l2=callbacks[2],
         l1=callbacks[1],
         l1$0=clean_up_callback_cells(l1),
         l2$0=clean_up_callback_cells(l2);
        return concat_regular_callbacks(l1$0,l2$0);
       case 2:if(! callbacks[1][1])return 0;break
       }
    return callbacks}
  function clear_explicitly_removable_cal(cell,ps)
   {cell[1] = 0;
    return iter$0
            (function(p)
              {var _bMR_=underlying(p)[1];
               switch(_bMR_[0])
                {case 1:return 0;
                 case 2:
                  var callbacks=_bMR_[1],_bMS_=callbacks[1];
                  if(typeof _bMS_ !== "number" && 2 === _bMS_[0])
                   {callbacks[1] = 0;return 0}
                  var cleanups_deferred=callbacks[4] + 1 | 0;
                  return 42 < cleanups_deferred
                          ?(callbacks[4]
                            =
                            0,
                            callbacks[1]
                            =
                            clean_up_callback_cells(callbacks[1]),
                            0)
                          :(callbacks[4] = cleanups_deferred,0);
                 default:return 0}},
             ps)}
  function add_regular_callback_list_node(callbacks,node)
   {var
     _bMQ_=callbacks[1],
     node$0=typeof _bMQ_ === "number"?node:[0,node,_bMQ_];
    callbacks[1] = node$0;
    return 0}
  function add_implicitly_removed_callbac(callbacks,f)
   {return add_regular_callback_list_node(callbacks,[1,f])}
  function add_cancel_callback(callbacks,f)
   {var
     node=[1,current_storage[1],f],
     node$0=typeof callbacks[2] === "number"?node:[0,node,callbacks[2]];
    callbacks[2] = node$0;
    return 0}
  var
   async_exception_hook=
    [0,
     function(exn)
      {prerr_string(_fE_);
       prerr_string(to_string$0(exn));
       caml_ml_output_char(stderr,10);
       print_backtrace(stderr);
       caml_ml_flush(stderr);
       do_at_exit(0);
       return caml_sys_exit(2)}];
  function handle_with_async_exception_ho(f,v)
   {try
     {var _bMP_=caml_call1(f,v);return _bMP_}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      return caml_call1(async_exception_hook[1],exn)}}
  var Canceled=[num_248,_fF_,caml_fresh_oo_id(0)];
  function run_callbacks(callbacks,result)
   {if(1 === result[0])
     var _bMN_=result[1] === Canceled?1:0,is_canceled=_bMN_;
    else
     var is_canceled=0;
    if(is_canceled)
     {var
       _bML_=callbacks[2],
       iter_callback_list$2=
        function(counter,fs,rest)
         {var fs$0=fs,rest$0=rest;
          for(;;)
           if(typeof fs$0 === "number")
            {if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return iter_list$0(counter$0,rest$0)}
             return caml_trampoline_return(iter_list$0,[0,rest$0])}
           else
            switch(fs$0[0])
             {case 0:
               var
                fs$1=fs$0[2],
                fs$2=fs$0[1],
                rest$1=[0,fs$1,rest$0],
                fs$0=fs$2,
                rest$0=rest$1;
               continue;
              case 1:
               var f=fs$0[2],storage=fs$0[1];
               current_storage[1] = storage;
               handle_with_async_exception_ho(f,0);
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return iter_list$0(counter$1,rest$0)}
               return caml_trampoline_return(iter_list$0,[0,rest$0]);
              default:
               var node=fs$0[1];
               if(node[4])
                {node[4] = 0;node[1][2] = node[2];node[2][1] = node[1]}
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return iter_list$0(counter$2,rest$0)}
               return caml_trampoline_return(iter_list$0,[0,rest$0])}},
       iter_list$0=
        function(counter,rest)
         {if(rest)
           {var rest$0=rest[2],fs=rest[1];
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return iter_callback_list$2(counter$0,fs,rest$0)}
            return caml_trampoline_return(iter_callback_list$2,[0,fs,rest$0])}
          return 0},
       iter_callback_list=
        function(fs,rest)
         {return caml_trampoline(iter_callback_list$2(0,fs,rest))};
      iter_callback_list(_bML_,0)}
    var _bMM_=callbacks[1];
    function iter_callback_list$1(counter,fs,rest)
     {var fs$0=fs,rest$0=rest;
      for(;;)
       if(typeof fs$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;return iter_list(counter$0,rest$0)}
         return caml_trampoline_return(iter_list,[0,rest$0])}
       else
        switch(fs$0[0])
         {case 0:
           var
            fs$1=fs$0[2],
            fs$2=fs$0[1],
            rest$1=[0,fs$1,rest$0],
            fs$0=fs$2,
            rest$0=rest$1;
           continue;
          case 1:
           var f=fs$0[1];
           caml_call1(f,result);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;return iter_list(counter$1,rest$0)}
           return caml_trampoline_return(iter_list,[0,rest$0]);
          default:
           var _bMO_=fs$0[1][1];
           if(_bMO_)
            {var f$0=_bMO_[1];
             caml_call1(f$0,result);
             if(counter < 50)
              {var counter$2=counter + 1 | 0;
               return iter_list(counter$2,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0])}
           if(counter < 50)
            {var counter$3=counter + 1 | 0;return iter_list(counter$3,rest$0)}
           return caml_trampoline_return(iter_list,[0,rest$0])}}
    function iter_list(counter,rest)
     {if(rest)
       {var rest$0=rest[2],fs=rest[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return iter_callback_list$1(counter$0,fs,rest$0)}
        return caml_trampoline_return(iter_callback_list$1,[0,fs,rest$0])}
      return 0}
    function iter_callback_list$0(fs,rest)
     {return caml_trampoline(iter_callback_list$1(0,fs,rest))}
    return iter_callback_list$0(_bMM_,0)}
  var
   current_callback_nesting_depth=[0,0],
   q=create$0(0),
   default_maximum_callback_nesti=42;
  function run_in_resolution_loop(f)
   {current_callback_nesting_depth[1]
    =
    current_callback_nesting_depth[1]
    +
    1
    |
    0;
    var storage_snapshot=current_storage[1],result$0=caml_call1(f,0);
    if(1 === current_callback_nesting_depth[1])
     for(;;)
      {if(0 !== q[1])
        {var match=take(q),result=match[2],callbacks=match[1];
         run_callbacks(callbacks,result);
         continue}
       break}
    current_callback_nesting_depth[1]
    =
    current_callback_nesting_depth[1]
    -
    1
    |
    0;
    current_storage[1] = storage_snapshot;
    return result$0}
  function run_callbacks_or_defer_them(opt,_bMK_,callbacks,result)
   {if(opt)var sth=opt[1],allow_deferring=sth;else var allow_deferring=1;
    if(_bMK_)
     var sth$0=_bMK_[1],maximum_callback_nesting_depth=sth$0;
    else
     var maximum_callback_nesting_depth=default_maximum_callback_nesti;
    var
     should_defer=
      allow_deferring
       ?maximum_callback_nesting_depth <= current_callback_nesting_depth[1]
         ?1
         :0
       :allow_deferring;
    return should_defer
            ?add([0,callbacks,result],q)
            :run_in_resolution_loop
              (function(param){return run_callbacks(callbacks,result)})}
  function resolve(allow_deferring,maximum_callback_nesting_depth,p,result)
   {var match=p[1],callbacks=match[1],p$0=set_promise_state(p,result);
    run_callbacks_or_defer_them
     (allow_deferring,maximum_callback_nesting_depth,callbacks,result);
    return p$0}
  function run_callback_or_defer_it(opt,f,if_deferred)
   {if(opt)
     var sth=opt[1],run_immediately_and_ensure_tai=sth;
    else
     var run_immediately_and_ensure_tai=0;
    if(run_immediately_and_ensure_tai)return caml_call1(f,0);
    var should_defer=42 <= current_callback_nesting_depth[1]?1:0;
    if(should_defer)
     {var
       match=caml_call1(if_deferred,0),
       deferred_result=match[3],
       deferred_callback=match[2],
       immediate_result=match[1],
       deferred_record=[0,[1,deferred_callback],0,0,0];
      add([0,deferred_record,deferred_result],q);
      return immediate_result}
    return run_in_resolution_loop(function(param){return caml_call1(f,0)})}
  function wakeup(r,v)
   {var result$0=[0,v],p=underlying(r),_bMJ_=p[1];
    switch(_bMJ_[0])
     {case 1:
       return _bMJ_[1] === Canceled
               ?0
               :caml_call1(ksprintf(invalid_arg,_fH_),api_function_name);
      case 2:
       var result=state_of_result(result$0);resolve(_fI_,0,p,result);return 0;
      default:return caml_call1(ksprintf(invalid_arg,_fG_),api_function_name)}}
  function wakeup_later_general(api_function_name,match,result)
   {var p=underlying(match),_bMI_=p[1];
    switch(_bMI_[0])
     {case 1:
       return _bMI_[1] === Canceled
               ?0
               :caml_call1(ksprintf(invalid_arg,_fK_),api_function_name);
      case 2:
       var result$0=state_of_result(result);
       resolve(0,_fL_,p,result$0);
       return 0;
      default:return caml_call1(ksprintf(invalid_arg,_fJ_),api_function_name)}}
  function wakeup_later(r,v){return wakeup_later_general(_fM_,r,[0,v])}
  function cancel(match)
   {var canceled_result=[1,Canceled];
    function cancel_and_collect_callbacks(callbacks_accumulator,p)
     {var p$0=p;
      for(;;)
       {var p$1=underlying(p$0),_bMG_=p$1[1];
        switch(_bMG_[0])
         {case 1:return callbacks_accumulator;
          case 2:
           var callbacks=_bMG_[1],_bMH_=callbacks[3];
           if(typeof _bMH_ === "number")
            return 0 === _bMH_
                    ?callbacks_accumulator
                    :(set_promise_state(p$1,canceled_result),
                      [0,callbacks,callbacks_accumulator]);
           else
            {if(0 === _bMH_[0]){var p$2=_bMH_[1],p$0=p$2;continue}
             var ps=_bMH_[1];
             return fold_left$0
                     (cancel_and_collect_callbacks,callbacks_accumulator,ps)}
          default:return callbacks_accumulator}}}
    var callbacks=cancel_and_collect_callbacks(0,match);
    return iter$0
            (function(param)
              {return run_callbacks_or_defer_them
                       (_fO_,0,param,canceled_result)},
             callbacks)}
  function return$1(v){return [0,[0,v]]}
  function fail(exn){return [0,[1,exn]]}
  var return_unit=return$1(0),return_none=return$1(0);
  function return_some(x){return return$1([0,x])}
  function return_ok(x){return return$1([0,x])}
  function return_error(x){return return$1([1,x])}
  function fail_with(msg){return [0,[1,[0,Failure,msg]]]}
  function new_pending(how_to_cancel)
   {var state=[2,[0,0,0,how_to_cancel,0]];return [0,state]}
  function wait(param){var p=new_pending(0);return [0,p,p]}
  function task(param){var p=new_pending(1);return [0,p,p]}
  function protected$0(p)
   {switch(underlying(p)[1][0])
     {case 1:return p;
      case 2:
       var
        match=new_pending(1),
        f=
         function(p_result)
          {var p=underlying(match);resolve(_fP_,0,p,p_result);return 0},
        ps=[0,p,0],
        cell=[],
        self_removing_callback_wrapper=
         function _bMF_(_bME_){return _bMF_.fun(_bME_)};
       caml_update_dummy(cell,[0,[0,self_removing_callback_wrapper]]);
       caml_update_dummy
        (self_removing_callback_wrapper,
         function(result)
          {clear_explicitly_removable_cal(cell,ps);return f(result)});
       var node=[2,cell];
       iter$0
        (function(p)
          {var _bMD_=underlying(p)[1];
           switch(_bMD_[0])
            {case 1:throw [0,Assert_failure,_fD_];
             case 2:
              var callbacks=_bMD_[1];
              return add_regular_callback_list_node(callbacks,node);
             default:throw [0,Assert_failure,_fC_]}},
         ps);
       var
        remove_the_callback=
         function(param){return clear_explicitly_removable_cal(cell,ps)},
        match$0=match[1],
        p_callbacks=match$0[1];
       add_cancel_callback(p_callbacks,remove_the_callback);
       return match;
      default:return p}}
  function make_into_proxy(outer_promise,user_provided_promise)
   {var p=underlying(user_provided_promise);
    if(p === outer_promise)return p;
    var _bMC_=p[1];
    switch(_bMC_[0])
     {case 1:return resolve(_fR_,0,outer_promise,p[1]);
      case 2:
       var
        p_callbacks=_bMC_[1],
        match=outer_promise[1],
        outer_callbacks=match[1],
        regular_callbacks=
         concat_regular_callbacks(outer_callbacks[1],p_callbacks[1]),
        cleanups_deferred=outer_callbacks[4] + p_callbacks[4] | 0;
       if(42 < cleanups_deferred)
        var
         regular_callbacks$0=clean_up_callback_cells(regular_callbacks),
         cleanups_deferred$0=0;
       else
        var
         regular_callbacks$0=regular_callbacks,
         cleanups_deferred$0=cleanups_deferred;
       var
        _bMA_=p_callbacks[2],
        _bMB_=outer_callbacks[2],
        cancel_callbacks=
         typeof _bMB_ === "number"
          ?_bMA_
          :typeof _bMA_ === "number"?_bMB_:[0,_bMB_,_bMA_];
       outer_callbacks[1] = regular_callbacks$0;
       outer_callbacks[2] = cancel_callbacks;
       outer_callbacks[4] = cleanups_deferred$0;
       outer_callbacks[3] = p_callbacks[3];
       set_promise_state(p,[3,outer_promise]);
       return outer_promise;
      default:return resolve(_fQ_,0,outer_promise,p[1])}}
  function symbol_bind(match,f)
   {var p=underlying(match);
    function create_result_promise_and_call(param)
     {var match=new_pending([0,p]),saved_storage=current_storage[1];
      function callback(p_result)
       {if(1 === p_result[0])
         {var p$1=underlying(match);resolve(_fS_,0,p$1,p_result);return 0}
        var v=p_result[1];
        current_storage[1] = saved_storage;
        try
         {var _bMz_=caml_call1(f,v),p=_bMz_}
        catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
        var p$0=underlying(match);
        make_into_proxy(p$0,p);
        return 0}
      return [0,match,callback]}
    var _bMx_=p[1];
    switch(_bMx_[0])
     {case 1:return [0,_bMx_];
      case 2:
       var
        p_callbacks=_bMx_[1],
        match$0=create_result_promise_and_call(0),
        callback=match$0[2],
        p$0=match$0[1];
       add_implicitly_removed_callbac(p_callbacks,callback);
       return p$0;
      default:
       var
        v=_bMx_[1],
        _bMy_=
         function(param)
          {var
            match=create_result_promise_and_call(0),
            callback=match[2],
            p$0=match[1];
           return [0,p$0,callback,p[1]]};
       return run_callback_or_defer_it
               (_fT_,function(param){return caml_call1(f,v)},_bMy_)}}
  function symbol$1(f,match)
   {var p=underlying(match);
    function create_result_promise_and_call(param)
     {var match=new_pending([0,p]),saved_storage=current_storage[1];
      function callback(p_result)
       {if(1 === p_result[0])
         {var p$0=underlying(match);resolve(_fV_,0,p$0,p_result);return 0}
        var v=p_result[1];
        current_storage[1] = saved_storage;
        try
         {var _bMw_=[0,caml_call1(f,v)],p_result$0=_bMw_}
        catch(exn){exn = caml_wrap_exception(exn);var p_result$0=[1,exn]}
        var p=underlying(match);
        resolve(_fU_,0,p,p_result$0);
        return 0}
      return [0,match,callback]}
    var _bMs_=p[1];
    switch(_bMs_[0])
     {case 1:return [0,_bMs_];
      case 2:
       var
        p_callbacks=_bMs_[1],
        match$0=create_result_promise_and_call(0),
        callback=match$0[2],
        p$0=match$0[1];
       add_implicitly_removed_callbac(p_callbacks,callback);
       return p$0;
      default:
       var
        v=_bMs_[1],
        _bMt_=
         function(param)
          {var
            match=create_result_promise_and_call(0),
            callback=match[2],
            p$0=match[1];
           return [0,p$0,callback,p[1]]};
       return run_callback_or_defer_it
               (_fW_,
                function(param)
                 {try
                   {var _bMv_=[0,caml_call1(f,v)],_bMu_=_bMv_}
                  catch(exn){exn = caml_wrap_exception(exn);var _bMu_=[1,exn]}
                  return [0,_bMu_]},
                _bMt_)}}
  function catch$0(f,h)
   {try
     {var _bMq_=caml_call1(f,0),p=_bMq_}
    catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
    var p$0=underlying(p);
    function create_result_promise_and_call(param)
     {var match=new_pending([0,p$0]),saved_storage=current_storage[1];
      function callback(p_result)
       {if(1 === p_result[0])
         {var exn=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _bMr_=caml_call1(h,exn),p$0=_bMr_}
          catch(exn){exn = caml_wrap_exception(exn);var p$0=fail(exn)}
          var p$1=underlying(match);
          make_into_proxy(p$1,p$0);
          return 0}
        var p=underlying(match);
        resolve(_fX_,0,p,p_result);
        return 0}
      return [0,match,callback]}
    var _bMo_=p$0[1];
    switch(_bMo_[0])
     {case 1:
       var
        exn=_bMo_[1],
        _bMp_=
         function(param)
          {var
            match=create_result_promise_and_call(0),
            callback=match[2],
            p=match[1];
           return [0,p,callback,p$0[1]]};
       return run_callback_or_defer_it
               (_fY_,function(param){return caml_call1(h,exn)},_bMp_);
      case 2:
       var
        p_callbacks=_bMo_[1],
        match=create_result_promise_and_call(0),
        callback=match[2],
        p$1=match[1];
       add_implicitly_removed_callbac(p_callbacks,callback);
       return p$1;
      default:return p$0}}
  function try_bind(f$0,f,h)
   {try
     {var _bMl_=caml_call1(f$0,0),p=_bMl_}
    catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
    var p$0=underlying(p);
    function create_result_promise_and_call(param)
     {var match=new_pending([0,p$0]),saved_storage=current_storage[1];
      function callback(p_result)
       {if(1 === p_result[0])
         {var exn=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _bMn_=caml_call1(h,exn),p$1=_bMn_}
          catch(exn){exn = caml_wrap_exception(exn);var p$1=fail(exn)}
          var p$2=underlying(match);
          make_into_proxy(p$2,p$1);
          return 0}
        var v=p_result[1];
        current_storage[1] = saved_storage;
        try
         {var _bMm_=caml_call1(f,v),p=_bMm_}
        catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
        var p$0=underlying(match);
        make_into_proxy(p$0,p);
        return 0}
      return [0,match,callback]}
    var _bMi_=p$0[1];
    switch(_bMi_[0])
     {case 1:
       var
        exn=_bMi_[1],
        _bMk_=
         function(param)
          {var
            match=create_result_promise_and_call(0),
            callback=match[2],
            p=match[1];
           return [0,p,callback,p$0[1]]};
       return run_callback_or_defer_it
               (_f0_,function(param){return caml_call1(h,exn)},_bMk_);
      case 2:
       var
        p_callbacks=_bMi_[1],
        match=create_result_promise_and_call(0),
        callback=match[2],
        p$1=match[1];
       add_implicitly_removed_callbac(p_callbacks,callback);
       return p$1;
      default:
       var
        v=_bMi_[1],
        _bMj_=
         function(param)
          {var
            match=create_result_promise_and_call(0),
            callback=match[2],
            p=match[1];
           return [0,p,callback,p$0[1]]};
       return run_callback_or_defer_it
               (_fZ_,function(param){return caml_call1(f,v)},_bMj_)}}
  function on_cancel(match,f)
   {var p=underlying(match),_bMg_=p[1];
    switch(_bMg_[0])
     {case 1:
       if(_bMg_[1] === Canceled)
        {var
          _bMh_=
           function(param)
            {return [0,
                     0,
                     function(param){return handle_with_async_exception_ho(f,0)},
                     _f1_]};
         return run_callback_or_defer_it
                 (_f2_,
                  function(param){return handle_with_async_exception_ho(f,0)},
                  _bMh_)}
       return 0;
      case 2:var callbacks=_bMg_[1];return add_cancel_callback(callbacks,f);
      default:return 0}}
  function async(f)
   {try
     {var _bMf_=caml_call1(f,0),p=_bMf_}
    catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
    var _bMe_=underlying(p)[1];
    switch(_bMe_[0])
     {case 1:var exn=_bMe_[1];return caml_call1(async_exception_hook[1],exn);
      case 2:
       var
        p_callbacks=_bMe_[1],
        callback=
         function(result)
          {if(1 === result[0])
            {var exn=result[1];return caml_call1(async_exception_hook[1],exn)}
           return 0};
       return add_implicitly_removed_callbac(p_callbacks,callback);
      default:return 0}}
  function join_p(ps)
   {var p=new_pending([1,ps]),number_pending_in_ps=[0,0],join_result=[0,_f6_];
    function callback(new_result)
     {if(1 === new_result[0] && 1 !== join_result[1][0])
       join_result[1] = new_result;
      number_pending_in_ps[1] = number_pending_in_ps[1] - 1 | 0;
      var _bMb_=0 === number_pending_in_ps[1]?1:0;
      if(_bMb_)
       {var p$0=underlying(p),_bMc_=join_result[1];
        resolve(_f7_,0,underlying(p$0),_bMc_);
        var _bMd_=0}
      else
       var _bMd_=_bMb_;
      return _bMd_}
    var ps$0=ps;
    for(;;)
     {if(ps$0)
       {var ps$1=ps$0[2],p$0=ps$0[1],_bMa_=underlying(p$0)[1];
        switch(_bMa_[0])
         {case 1:
           if(1 !== join_result[1][0])join_result[1] = _bMa_;
           var ps$0=ps$1;
           continue;
          case 2:
           var p_callbacks=_bMa_[1];
           number_pending_in_ps[1] = number_pending_in_ps[1] + 1 | 0;
           add_implicitly_removed_callbac(p_callbacks,callback);
           var ps$0=ps$1;
           continue;
          default:var ps$0=ps$1;continue}}
      return 0 === number_pending_in_ps[1]?[0,join_result[1]]:p}}
  function both_p(p1,p2)
   {var
     v1=[0,0],
     v2=[0,0],
     p1$0=symbol_bind(p1,function(v){v1[1] = [0,v];return return_unit}),
     p2$0=symbol_bind(p2,function(v){v2[1] = [0,v];return return_unit}),
     _bL9_=join_p([0,p1$0,[0,p2$0,0]]);
    return symbol$1
            (function(param)
              {var _bL__=v1[1],_bL$_=v2[1];
               if(_bL__ && _bL$_)
                {var v2$0=_bL$_[1],v1$0=_bL__[1];return [0,v1$0,v2$0]}
               throw [0,Assert_failure,_f8_]},
             _bL9_)}
  function all_p(ps)
   {var
     vs=caml_make_vect(length(ps),0),
     _bL8_=
      join_p
       (mapi
         (function(index,p)
           {return symbol_bind
                    (p,
                     function(v)
                      {caml_check_bound(vs,index)[1 + index] = [0,v];
                       return return_unit})},
          ps));
    return symbol$1
            (function(param)
              {return to_list
                       (map$3
                         (function(v)
                           {if(v){var v$0=v[1];return v$0}
                            throw [0,Assert_failure,_f9_]},
                          vs))},
             _bL8_)}
  function state(p)
   {var _bL7_=underlying(p)[1];
    switch(_bL7_[0])
     {case 1:var exn=_bL7_[1];return [1,exn];
      case 2:return 0;
      default:var v=_bL7_[1];return [0,v]}}
  function is_sleeping(p)
   {switch(underlying(p)[1][0])
     {case 1:return 0;case 2:return 1;default:return 0}}
  function apply(f,x)
   {try
     {var _bL6_=caml_call1(f,x);return _bL6_}
    catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
  var pause_hook=[0,function(_bL5_){return 0}],seq=create$7(0),_f__=[0,0];
  function wakeup_paused(param)
   {if(seq[2] === seq){_f__[1] = 0;return 0}
    var seq$0=create$7(0);
    seq$0[1][2] = seq[2];
    seq[2][1] = seq$0[1];
    seq$0[1] = seq[1];
    seq[1][2] = seq$0;
    seq[1] = seq;
    seq[2] = seq;
    _f__[1] = 0;
    var curr=seq$0[2];
    for(;;)
     {var _bL4_=curr !== seq$0?1:0;
      if(_bL4_)
       {if(curr[4])wakeup(curr[3],0);var curr$0=curr[2],curr=curr$0;continue}
      return _bL4_}}
  function register_pause_notifier(f){pause_hook[1] = f;return 0}
  function symbol$2(p,f){return symbol$1(f,p)}
  var
   exn=[num_248,_gb_,caml_fresh_oo_id(0)],
   Full=[num_248,_gc_,caml_fresh_oo_id(0)];
  caml_fresh_oo_id(0);
  function new_node(param)
   {var node=[];caml_update_dummy(node,[0,node,0]);return node}
  function from_source(source)
   {var last=new_node(0),match=wait(0),close=match[2];
    return [0,source,close,last,[0,last]]}
  function enqueue(e,last)
   {var node=last[1],new_last=new_node(0);
    node[2] = e;
    node[1] = new_last;
    last[1] = new_last;
    return 0}
  function enqueue$0(e,s){return enqueue(e,s[4])}
  function create$8(param)
   {var
     match=wait(0),
     push_signal_resolver=match[2],
     push_signal=match[1],
     push_signal_resolver$0=[0,push_signal_resolver],
     source=[0,push_signal,0,0],
     source$0=from_source([2,source]),
     close=source$0[2],
     last=source$0[4];
    function push(x)
     {if(1 - is_sleeping(close))throw exn;
      enqueue(x,last);
      if(source[2])
       {source[2] = 0;
        var
         old_push_signal_resolver=push_signal_resolver$0[1],
         match=wait(0),
         new_push_signal_resolver=match[2],
         new_waiter=match[1];
        source[1] = new_waiter;
        push_signal_resolver$0[1] = new_push_signal_resolver;
        wakeup_later(old_push_signal_resolver,0)}
      var _bL3_=0 === x?1:0;
      return _bL3_?wakeup(close,0):_bL3_}
    return [0,source$0,push]}
  function of_list$0(l)
   {var match=create$8(0),push=match[2],stream=match[1];
    iter$0(function(x){return caml_call1(push,[0,x])},l);
    caml_call1(push,0);
    return stream}
  function notify_pusher(info,last)
   {enqueue(info[5],last);
    info[5] = 0;
    var old_wakener=info[7],match=task(0),wakener=match[2],waiter=match[1];
    info[6] = waiter;
    info[7] = wakener;
    return wakeup_later(old_wakener,0)}
  make_class
   (shared,
    function(_bLw_)
     {var
       _bLx_=new_variable(_bLw_,_ge_),
       _bLy_=new_variable(_bLw_,_gf_),
       _bLz_=new_variable(_bLw_,_gg_),
       _bLA_=new_variable(_bLw_,_gh_),
       _bLB_=new_methods_variables(_bLw_,_f$_,_ga_),
       _bLK_=_bLB_[9],
       _bLC_=_bLB_[1],
       _bLD_=_bLB_[2],
       _bLE_=_bLB_[3],
       _bLF_=_bLB_[4],
       _bLG_=_bLB_[5],
       _bLH_=_bLB_[6],
       _bLI_=_bLB_[7],
       _bLJ_=_bLB_[8];
      function _bLL_(self_1,x){self_1[1 + _bLx_][8] = x;return 0}
      function _bLM_(self_1){return self_1[1 + _bLK_]}
      function _bLN_(self_1){return 0 !== self_1[1 + _bLx_][5]?1:0}
      function _bLO_(self_1){return self_1[1 + _bLx_][4]}
      function _bLP_(self_1)
       {var _bL2_=1 - self_1[1 + _bLK_];
        if(_bL2_)
         {self_1[1 + _bLK_] = 1;
          var node=self_1[1 + _bLz_][1],new_last=new_node(0);
          node[2] = 0;
          node[1] = new_last;
          self_1[1 + _bLz_][1] = new_last;
          if(0 !== self_1[1 + _bLx_][5])
           {self_1[1 + _bLx_][5] = 0;
            wakeup_later_general(_fN_,self_1[1 + _bLx_][7],[1,exn])}
          if(self_1[1 + _bLx_][2])
           {self_1[1 + _bLx_][2] = 0;
            var old_wakener=self_1[1 + _bLy_][1];
            wakeup_later(old_wakener,0)}
          return wakeup(self_1[1 + _bLA_],0)}
        return _bL2_}
      function _bLQ_(self_1,x)
       {if(self_1[1 + _bLK_])return fail(exn);
        if(0 === self_1[1 + _bLx_][5])
         {if(self_1[1 + _bLx_][3] <= self_1[1 + _bLx_][4])
           {self_1[1 + _bLx_][5] = [0,x];
            var
             _bL1_=
              function(exn)
               {if(exn === Canceled)
                 {self_1[1 + _bLx_][5] = 0;
                  var match=task(0),wakener=match[2],waiter=match[1];
                  self_1[1 + _bLx_][6] = waiter;
                  self_1[1 + _bLx_][7] = wakener;
                  return fail(exn)}
                return fail(exn)};
            return catch$0(function(param){return self_1[1 + _bLx_][6]},_bL1_)}
          enqueue([0,x],self_1[1 + _bLz_]);
          self_1[1 + _bLx_][4] = self_1[1 + _bLx_][4] + 1 | 0;
          if(self_1[1 + _bLx_][2])
           {self_1[1 + _bLx_][2] = 0;
            var
             old_wakener=self_1[1 + _bLy_][1],
             match=wait(0),
             new_wakener=match[2],
             new_waiter=match[1];
            self_1[1 + _bLx_][1] = new_waiter;
            self_1[1 + _bLy_][1] = new_wakener;
            wakeup_later(old_wakener,0)}
          return return_unit}
        return fail(Full)}
      function _bLR_(self_1,size)
       {if(size < 0)invalid_arg(_gi_);
        self_1[1 + _bLx_][3] = size;
        var
         _bLZ_=self_1[1 + _bLx_][4] < self_1[1 + _bLx_][3]?1:0,
         _bL0_=_bLZ_?0 !== self_1[1 + _bLx_][5]?1:0:_bLZ_;
        return _bL0_
                ?(self_1[1 + _bLx_][4]
                  =
                  self_1[1 + _bLx_][4]
                  +
                  1
                  |
                  0,
                  notify_pusher(self_1[1 + _bLx_],self_1[1 + _bLz_]))
                :_bL0_}
      set_methods
       (_bLw_,
        [0,
         _bLC_,
         function(self_1){return self_1[1 + _bLx_][3]},
         _bLE_,
         _bLR_,
         _bLF_,
         _bLQ_,
         _bLI_,
         _bLP_,
         _bLG_,
         _bLO_,
         _bLJ_,
         _bLN_,
         _bLH_,
         _bLM_,
         _bLD_,
         _bLL_]);
      return function(_bLX_,_bLW_,_bLV_,_bLU_,_bLT_,_bLS_)
       {var _bLY_=create_object_opt(_bLW_,_bLw_);
        _bLY_[1 + _bLA_] = _bLS_;
        _bLY_[1 + _bLz_] = _bLT_;
        _bLY_[1 + _bLy_] = _bLU_;
        _bLY_[1 + _bLx_] = _bLV_;
        _bLY_[1 + _bLK_] = 0;
        return _bLY_}});
  function feed(s)
   {var _bLu_=s[1];
    switch(_bLu_[0])
     {case 0:
       var from=_bLu_[1];
       if(is_sleeping(from[2]))return protected$0(from[2]);
       var
        _bLv_=
         function(x)
          {enqueue$0(x,s);if(0 === x)wakeup(s[2],0);return return_unit},
        thread=symbol_bind(caml_call1(from[1],0),_bLv_);
       from[2] = thread;
       return protected$0(thread);
      case 1:
       var f=_bLu_[1],x=caml_call1(f,0);
       enqueue$0(x,s);
       if(0 === x)wakeup(s[2],0);
       return return_unit;
      case 2:var push=_bLu_[1];push[2] = 1;return protected$0(push[1]);
      default:var push$0=_bLu_[1];push$0[2] = 1;return protected$0(push$0[1])}}
  function consume(s,node)
   {var _bLs_=node === s[3]?1:0;
    if(_bLs_)
     {s[3] = node[1];
      var _bLt_=s[1];
      if(3 === _bLt_[0])
       {var info=_bLt_[1];
        return 0 === info[5]
                ?(info[4] = info[4] - 1 | 0,0)
                :notify_pusher(info,s[4])}
      return 0}
    return _bLs_}
  function get_rec(s,node)
   {if(node === s[4][1])
     {var _bLr_=function(param){return get_rec(s,node)};
      return symbol_bind(feed(s),_bLr_)}
    if(0 !== node[2])consume(s,node);
    return return$1(node[2])}
  function get$0(s){return get_rec(s,s[3])}
  function junk_while_rec(node,f,s)
   {var node$0=node;
    for(;;)
     {if(node$0 === s[4][1])
       {var _bLp_=function(param){return junk_while_rec(node$0,f,s)};
        return symbol_bind(feed(s),_bLp_)}
      var _bLq_=node$0[2];
      if(_bLq_)
       {var x=_bLq_[1],test=caml_call1(f,x);
        if(test)
         {consume(s,node$0);var node$1=node$0[1],node$0=node$1;continue}
        return return_unit}
      return return_unit}}
  function is_empty(s)
   {if(s[3] === s[4][1])
     {var _bLo_=function(param){return is_empty(s)};
      return symbol_bind(feed(s),_bLo_)}
    return return$1(0 === s[3][2]?1:0)}
  function iter_rec(node,f,s)
   {var node$0=node;
    for(;;)
     {if(node$0 === s[4][1])
       {var _bLm_=function(param){return iter_rec(node$0,f,s)};
        return symbol_bind(feed(s),_bLm_)}
      var _bLn_=node$0[2];
      if(_bLn_)
       {var x=_bLn_[1];
        consume(s,node$0);
        caml_call1(f,x);
        var node$1=node$0[1],node$0=node$1;
        continue}
      return return_unit}}
  var Set=_al_([0,compare_decoded]);
  function split(delim,opt,_bLj_,path)
   {if(opt)var sth=opt[1],dup=sth;else var dup=1;
    if(_bLj_)var sth$0=_bLj_[1],limit=sth$0;else var limit=max_int_float;
    var l=caml_ml_string_length(path);
    function do_slashes$0(counter,acc,limit,i)
     {var i$0=i;
      for(;;)
       {if(l <= i$0)return rev(acc);
        if(caml_string_get(path,i$0) === delim)
         {if(dup){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
          var _bLl_=i$0 + 1 | 0;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return do_split(counter$0,acc,limit,_bLl_)}
          return caml_trampoline_return(do_split,[0,acc,limit,_bLl_])}
        if(counter < 50)
         {var counter$1=counter + 1 | 0;
          return do_split(counter$1,acc,limit,i$0)}
        return caml_trampoline_return(do_split,[0,acc,limit,i$0])}}
    function do_split(counter,acc,limit,i)
     {if(0 < limit)
       {var limit$0=limit - 1 | 0,j=i;
        for(;;)
         {if(l <= j)
           return i === j?rev(acc):rev([0,sub$0(path,i,j - i | 0),acc]);
          if(caml_string_get(path,j) === delim)
           {var _bLk_=[0,sub$0(path,i,j - i | 0),acc];
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return do_slashes$0(counter$0,_bLk_,limit$0,j)}
            return caml_trampoline_return(do_slashes$0,[0,_bLk_,limit$0,j])}
          var j$0=j + 1 | 0,j=j$0;
          continue}}
      return i === l?rev(acc):rev([0,sub$0(path,i,l - i | 0),acc])}
    function do_slashes(acc,limit,i)
     {return caml_trampoline(do_slashes$0(0,acc,limit,i))}
    return 0 < limit?do_slashes(0,limit,0):[0,path,0]}
  function has_prefix(prefix,s)
   {var
     x=caml_ml_string_length(prefix),
     n=caml_ml_string_length(s),
     _bLh_=x <= n?1:0,
     _bLi_=_bLh_?caml_string_equal(sub$0(s,0,x),prefix):_bLh_;
    return _bLi_}
  function remove_prefix(prefix,s)
   {var x=caml_ml_string_length(prefix),n=caml_ml_string_length(s);
    if(x <= n && caml_string_equal(sub$0(s,0,x),prefix))
     return [0,sub$0(s,x,n - x | 0)];
    return 0}
  function mem_char(s,c)
   {var lim=caml_ml_string_length(s),i=0;
    for(;;)
     {if(lim <= i)
       var _bLg_=0;
      else
       {if(caml_string_unsafe_get(s,i) !== c)
         {var i$0=i + 1 | 0,i=i$0;continue}
        var _bLg_=[0,i]}
      return 0 !== _bLg_?1:0}}
  function fold_left$2(f,init,s)
   {var acc=[0,init];
    iter$1(function(c){acc[1] = caml_call2(f,acc[1],c);return 0},s);
    return acc[1]}
  function symbol_bind$0(x,f){return bind(x,f)}
  function symbol_map(x,f){return map$0(f,x)}
  function last_exn(param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var _bLe_=param$0[2],_bLf_=param$0[1];
        if(_bLe_){var param$0=_bLe_;continue}
        return _bLf_}
      throw Not_found}}
  function def(opt,name,pp)
   {if(opt)var sth=opt[1],doc=sth;else var doc=_gl_;
    var Me=[num_248,_gk_,caml_fresh_oo_id(0)],uid=id(of_val(Me));
    return [0,name,doc,pp,0,Me,uid]}
  function pp_def(ppf,d){var _bLd_=d[1];return caml_call2(pf(ppf),_gm_,_bLd_)}
  function compare$5(param,_bLc_)
   {var k1=_bLc_[1],k0=param[1];return caml_compare([0,k0[5]],[0,k1[5]])}
  var Key=[0,compare$5],TagSet=_au_(Key);
  function pp$3(ppf,param)
   {var v=param[2],tag=param[1],_bLb_=tag[3];
    return caml_call5(pf(ppf),_gn_,pp_def,tag,_bLb_,v)}
  var empty$0=TagSet[1];
  function pp_set(ppf,s)
   {caml_call1(pf(ppf),_go_);
    var _bK$_=caml_call1(TagSet[19],s);
    pp_print_list(0,pp$3,ppf,map$1(function(_bLa_){return _bLa_[2]},_bK$_));
    return caml_call1(pf(ppf),_gp_)}
  function Make$1(P)
   {var compare=P[1];
    function symbol(a,b){return 0 === caml_call2(compare,a,b)?1:0}
    function symbol$0(a,b){return 0 !== caml_call2(compare,a,b)?1:0}
    function symbol$1(a,b){return caml_call2(compare,a,b) < 0?1:0}
    function symbol$2(a,b){return caml_call2(compare,a,b) <= 0?1:0}
    function symbol$3(a,b){return 0 <= caml_call2(compare,a,b)?1:0}
    function symbol$4(a,b){return 0 < caml_call2(compare,a,b)?1:0}
    function max(x,y){return symbol$3(x,y)?x:y}
    function min(x,y){return symbol$2(x,y)?x:y}
    return [0,
            compare,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            symbol,
            max,
            min]}
  var
   Int32=Make$1([0,compare]),
   Int64=Make$1([0,compare$0]),
   String$0=Make$1([0,compare_decoded]),
   equal$1=String$0[8],
   compare$6=String$0[1],
   symbol$3=Int64[5],
   symbol$4=Int64[4],
   _gq_=Int32[4],
   _gr_=Int32[2];
  function _gs_(_bK9_)
   {var _bK__=Make$1(_bK9_);
    return [0,
            _bK__[2],
            _bK__[3],
            _bK__[4],
            _bK__[5],
            _bK__[6],
            _bK__[7],
            _bK__[1],
            _bK__[8],
            _bK__[9],
            _bK__[10]]}
  var _gx_=1;
  function split$0(max,s,on)
   {if(max)
     {var max$0=max[1];
      if(caml_string_equal(s,_gt_))return 0;
      if(1 === max$0)return [0,s,0];
      var
       loop=
        function(offset,tokens)
         {if(tokens === (max$0 - 1 | 0))
           return [0,sub$0(s,offset,caml_ml_string_length(s) - offset | 0),0];
          try
           {var index=index_from(s,offset,on);
            if(index === offset)
             var _bK7_=[0,_gu_,loop(offset + 1 | 0,tokens + 1 | 0)];
            else
             var
              token=sub$0(s,offset,index - offset | 0),
              _bK7_=[0,token,loop(index + 1 | 0,tokens + 1 | 0)];
            return _bK7_}
          catch(_bK8_)
           {_bK8_ = caml_wrap_exception(_bK8_);
            if(_bK8_ === Not_found)
             return [0,
                     sub$0(s,offset,caml_ml_string_length(s) - offset | 0),
                     0];
            throw _bK8_}};
      return loop(0,0)}
    if(caml_string_equal(s,_gv_))return 0;
    function loop$0(acc,offset)
     {try
       {var index=rindex_from(s,offset,on);
        if(index === offset)
         var _bK5_=loop$0([0,_gw_,acc],index - 1 | 0);
        else
         var
          token=sub$0(s,index + 1 | 0,offset - index | 0),
          _bK5_=loop$0([0,token,acc],index - 1 | 0);
        return _bK5_}
      catch(_bK6_)
       {_bK6_ = caml_wrap_exception(_bK6_);
        if(_bK6_ === Not_found)return [0,sub$0(s,0,offset + 1 | 0),acc];
        throw _bK6_}}
    return loop$0(0,caml_ml_string_length(s) - 1 | 0)}
  var Found_int=[num_248,_gz_,caml_fresh_oo_id(0)];
  function find_from(opt,str,pattern)
   {if(opt)var sth=opt[1],start$0=sth;else var start$0=0;
    try
     {var
       _bK0_=
        caml_ml_string_length(str) - caml_ml_string_length(pattern) | 0;
      if(! (_bK0_ < start$0))
       {var sth$0=start$0;
        for(;;)
         {var opt$0=[0,sth$0],start=opt$0?sth$0:0;
          try
           {var _bKW_=caml_ml_string_length(pattern) - 1 | 0,_bKV_=0;
            if(! (_bKW_ < 0))
             {var i=_bKV_;
              for(;;)
               {var _bKY_=caml_string_get(pattern,i);
                if(caml_string_get(str,i + start | 0) !== _bKY_)throw Exit;
                var _bKZ_=i + 1 | 0;
                if(_bKW_ !== i){var i=_bKZ_;continue}
                break}}
            var _bKX_=1,_bK2_=_bKX_}
          catch(_bK4_){var _bK2_=0}
          if(_bK2_)throw [0,Found_int,sth$0];
          var _bK3_=sth$0 + 1 | 0;
          if(_bK0_ !== sth$0){var sth$0=_bK3_;continue}
          break}}
      var _bK1_=0;
      return _bK1_}
    catch(exn)
     {exn = caml_wrap_exception(exn);
      if(exn[1] === Found_int){var i$0=exn[2];return [0,i$0]}
      return 0}}
  caml_fresh_oo_id(0);
  function create$9(size){return create$6(char$0,c_layout,size)}
  create$9(0);
  function substring(t,off,len)
   {var buffer_len=caml_ba_dim_1(t),_bKS_=len < 0?1:0;
    if(_bKS_)
     var _bKT_=_bKS_;
    else
     var _bKU_=off < 0?1:0,_bKT_=_bKU_ || ((buffer_len - off | 0) < len?1:0);
    if(_bKT_)
     {var message=caml_call4(sprintf(_gA_),op,buffer_len,off,len);
      throw [0,Invalid_argument,message]}
    var b=caml_create_bytes(len);
    bigstringaf_blit_to_bytes(t,off,b,0,len);
    return caml_string_of_bytes(b)}
  function length$2(t){return t[2] + t[4] | 0}
  function bytes_for_client_to_commit(t){return t[1] - t[2] | 0}
  function offset_in_buffer(t,pos){return (t[3] + pos | 0) - t[2] | 0}
  function apply$0(t,pos,len,f)
   {var off=offset_in_buffer(t,pos);return caml_call3(f,t[5],off,len)}
  function unsafe_get_char(t,pos)
   {var off=offset_in_buffer(t,pos);return caml_ba_get_1(t[5],off)}
  function count_while(t,pos,f)
   {var
     buffer=t[5],
     off=offset_in_buffer(t,pos),
     i=[0,off],
     limit=t[3] + t[4] | 0;
    for(;;)
     {if(i[1] < limit && caml_call1(f,caml_ba_get_1(buffer,i[1])))
       {i[1]++;continue}
      return i[1] - off | 0}}
  function fail_k(input,pos,param,marks,msg)
   {return [3,pos - input[2] | 0,marks,msg]}
  function succeed_k(input,pos,param,v){return [2,pos - input[2] | 0,v]}
  function to_exported_state(param)
   {var param$0=param;
    for(;;)
     switch(param$0[0])
      {case 0:
        var match=param$0[1],continue$0=match[2],committed=match[1];
        return [0,
                [0,
                 committed,
                 function(bs,off,len,more)
                  {return to_exported_state
                           (caml_call4(continue$0,bs,off,len,more))}]];
       case 1:
        var
         x=param$0[1],
         _bKR_=caml_obj_tag(x),
         param$1=
          num_250 === _bKR_?x[1]:num_246 === _bKR_?force_lazy_block(x):x,
         param$0=param$1;
        continue;
       case 2:var x$0=param$0[2],i=param$0[1];return [1,i,x$0];
       default:
        var s=param$0[3],sl=param$0[2],i$0=param$0[1];return [2,i$0,sl,s]}}
  function return$2(v)
   {return [0,
            function(input,pos,more,fail,succ)
             {return caml_call4(succ,input,pos,more,v)}]}
  function fail$0(msg)
   {return [0,
            function(input,pos,more,fail,succ)
             {return caml_call5(fail,input,pos,more,0,msg)}]}
  function symbol_bind$1(p,f)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ$0(input,pos,more,v)
               {return caml_call5(caml_call1(f,v)[1],input,pos,more,fail,succ)}
              return caml_call5(p[1],input,pos,more,fail,succ$0)}]}
  function symbol_map$0(p,f)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ$0(input,pos,more,v)
               {return caml_call4(succ,input,pos,more,caml_call1(f,v))}
              return caml_call5(p[1],input,pos,more,fail,succ$0)}]}
  function symbol$5(f,m){return symbol_map$0(m,f)}
  function symbol$6(f,m)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ0(input0,pos0,more0,f)
               {function succ1(input1,pos1,more1,m)
                 {return caml_call4(succ,input1,pos1,more1,caml_call1(f,m))}
                return caml_call5(m[1],input0,pos0,more0,fail,succ1)}
              return caml_call5(f[1],input,pos,more,fail,succ0)}]}
  function lift(f,m){return symbol$5(f,m)}
  function lift2(f,m1,m2)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ1(input1,pos1,more1,m1)
               {function succ2(input2,pos2,more2,m2)
                 {return caml_call4
                          (succ,input2,pos2,more2,caml_call2(f,m1,m2))}
                return caml_call5(m2[1],input1,pos1,more1,fail,succ2)}
              return caml_call5(m1[1],input,pos,more,fail,succ1)}]}
  function lift3(f,m1,m2,m3)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ1(input1,pos1,more1,m1)
               {function succ2(input2,pos2,more2,m2)
                 {function succ3(input3,pos3,more3,m3)
                   {return caml_call4
                            (succ,input3,pos3,more3,caml_call3(f,m1,m2,m3))}
                  return caml_call5(m3[1],input2,pos2,more2,fail,succ3)}
                return caml_call5(m2[1],input1,pos1,more1,fail,succ2)}
              return caml_call5(m1[1],input,pos,more,fail,succ1)}]}
  function lift4(f,m1,m2,m3,m4)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ1(input1,pos1,more1,m1)
               {function succ2(input2,pos2,more2,m2)
                 {function succ3(input3,pos3,more3,m3)
                   {function succ4(input4,pos4,more4,m4)
                     {return caml_call4
                              (succ,input4,pos4,more4,caml_call4(f,m1,m2,m3,m4))}
                    return caml_call5(m4[1],input3,pos3,more3,fail,succ4)}
                  return caml_call5(m3[1],input2,pos2,more2,fail,succ3)}
                return caml_call5(m2[1],input1,pos1,more1,fail,succ2)}
              return caml_call5(m1[1],input,pos,more,fail,succ1)}]}
  function symbol$7(a,b)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ$0(input,pos,more,param)
               {return caml_call5(b[1],input,pos,more,fail,succ)}
              return caml_call5(a[1],input,pos,more,fail,succ$0)}]}
  function symbol$8(a,b)
   {return [0,
            function(input,pos,more,fail,succ)
             {function succ0(input0,pos0,more0,x)
               {function succ1(input1,pos1,more1,param)
                 {return caml_call4(succ,input1,pos1,more1,x)}
                return caml_call5(b[1],input0,pos0,more0,fail,succ1)}
              return caml_call5(a[1],input,pos,more,fail,succ0)}]}
  function symbol$9(p,q)
   {return [0,
            function(input,pos,more,fail,succ)
             {function fail$0(input,pos$0,more$0,marks,msg)
               {return pos < input[1]
                        ?caml_call5(fail,input,pos$0,more,marks,msg)
                        :caml_call5(q[1],input,pos,more$0,fail,succ)}
              return caml_call5(p[1],input,pos,more,fail$0,succ)}]}
  function prompt(input,pos,fail,succ)
   {var
     _bKQ_=bytes_for_client_to_commit(input),
     parser_uncommitted_bytes=input[4] - _bKQ_ | 0,
     parser_committed_bytes=input[1];
    function continue$0(input,off,len,more)
     {if(len < parser_uncommitted_bytes)failwith(_gE_);
      var
       input$0=
        [0,parser_committed_bytes,parser_committed_bytes,off,len,input];
      return len === parser_uncommitted_bytes
              ?0 === more
                ?caml_call3(fail,input$0,pos,0)
                :prompt(input$0,pos,fail,succ)
              :caml_call3(succ,input$0,pos,more)}
    return [0,[0,bytes_for_client_to_commit(input),continue$0]]}
  var
   demand_input=
    [0,
     function(input,pos,more,fail,succ)
      {if(0 === more)return caml_call5(fail,input,pos,more,0,_gF_);
       function succ$0(input,pos,more)
        {return caml_call4(succ,input,pos,more,0)}
       function fail$0(input,pos,more)
        {return caml_call5(fail,input,pos,more,0,_gG_)}
       return prompt(input,pos,fail$0,succ$0)}];
  function ensure_suspended(n,input,pos,more,fail,succ)
   {var go=[];
    caml_update_dummy
     (go,
      [0,
       function(input,pos,more,fail,succ)
        {return (pos + n | 0) <= length$2(input)
                 ?caml_call4(succ,input,pos,more,0)
                 :caml_call5
                   (symbol$7(demand_input,go)[1],input,pos,more,fail,succ)}]);
    return caml_call5(symbol$7(demand_input,go)[1],input,pos,more,fail,succ)}
  function ensure(n,p)
   {return [0,
            function(input,pos,more,fail,succ)
             {if((pos + n | 0) <= length$2(input))
               return caml_call5(p[1],input,pos,more,fail,succ);
              function succ$0(input,pos,more,param)
               {return caml_call5(p[1],input,pos,more,fail,succ)}
              return ensure_suspended(n,input,pos,more,fail,succ$0)}]}
  var
   at_end_of_input=
    [0,
     function(input,pos,more,param,succ)
      {if(pos < length$2(input))return caml_call4(succ,input,pos,more,0);
       if(0 === more)return caml_call4(succ,input,pos,more,1);
       function succ$0(input,pos,more)
        {return caml_call4(succ,input,pos,more,0)}
       function fail(input,pos,more){return caml_call4(succ,input,pos,more,1)}
       return prompt(input,pos,fail,succ$0)}],
   end_of_input$0=
    symbol_bind$1
     (at_end_of_input,
      function(param){return 0 === param?fail$0(_gH_):return$2(0)}),
   peek_char$0=
    [0,
     function(input,pos,more,fail,succ)
      {if(pos < length$2(input))
        return caml_call4(succ,input,pos,more,[0,unsafe_get_char(input,pos)]);
       if(0 === more)return caml_call4(succ,input,pos,more,0);
       function succ$0(input,pos,more)
        {return caml_call4(succ,input,pos,more,[0,unsafe_get_char(input,pos)])}
       function fail$0(input,pos,more)
        {return caml_call4(succ,input,pos,more,0)}
       return prompt(input,pos,fail$0,succ$0)}],
   peek_char_fail=[];
  caml_update_dummy
   (peek_char_fail,
    [0,
     function(input,pos,more,fail,succ)
      {if(pos < length$2(input))
        return caml_call4(succ,input,pos,more,unsafe_get_char(input,pos));
       function succ$0(input,pos,more,param)
        {return caml_call5(peek_char_fail[1],input,pos,more,fail,succ)}
       return ensure_suspended(1,input,pos,more,fail,succ$0)}]);
  function satisfy(f)
   {return [0,
            function(input,pos,more,fail,succ)
             {if(pos < length$2(input))
               {var c=unsafe_get_char(input,pos);
                return caml_call1(f,c)
                        ?caml_call4(succ,input,pos + 1 | 0,more,c)
                        :caml_call1
                          (ksprintf(caml_call4(fail,input,pos,more,0),_gI_),c)}
              function succ$0(input,pos,more,param)
               {var c=unsafe_get_char(input,pos);
                return caml_call1(f,c)
                        ?caml_call4(succ,input,pos + 1 | 0,more,c)
                        :caml_call1
                          (ksprintf(caml_call4(fail,input,pos,more,0),_gJ_),c)}
              return ensure_suspended(1,input,pos,more,fail,succ$0)}]}
  function char$1(c)
   {var
     p=
      [0,
       function(input,pos,more,fail,succ)
        {return unsafe_get_char(input,pos) === c
                 ?caml_call4(succ,input,pos + 1 | 0,more,c)
                 :caml_call5
                   (fail,input,pos,more,0,caml_call1(sprintf(_gK_),c))}];
    return ensure(1,p)}
  function count_while$0(init,f,with_buffer)
   {return [0,
            function(input,pos,more,fail,succ)
             {var
               len=count_while(input,pos + init | 0,f),
               input_len=length$2(input),
               init$0=init + len | 0;
              if(! ((pos + init$0 | 0) < input_len) && 0 !== more)
               {var
                 succ$0=
                  function(input,pos,more)
                   {return caml_call5
                            (count_while$0(init$0,f,with_buffer)[1],
                             input,
                             pos,
                             more,
                             fail,
                             succ)},
                 fail$0=
                  function(input,pos,more)
                   {return caml_call4
                            (succ,
                             input,
                             pos + init$0 | 0,
                             more,
                             apply$0(input,pos,init$0,with_buffer))};
                return prompt(input,pos,fail$0,succ$0)}
              return caml_call4
                      (succ,
                       input,
                       pos + init$0 | 0,
                       more,
                       apply$0(input,pos,init$0,with_buffer))}]}
  function count_while1(f,with_buffer)
   {return [0,
            function(input,pos,more,fail,succ)
             {var len=count_while(input,pos,f),input_len=length$2(input);
              if(1 <= len)
               {if(! ((pos + len | 0) < input_len) && 0 !== more)
                 {var
                   succ$0=
                    function(input,pos,more)
                     {return caml_call5
                              (count_while$0(len,f,with_buffer)[1],
                               input,
                               pos,
                               more,
                               fail,
                               succ)},
                   fail$0=
                    function(input,pos,more)
                     {return caml_call4
                              (succ,
                               input,
                               pos + len | 0,
                               more,
                               apply$0(input,pos,len,with_buffer))};
                  return prompt(input,pos,fail$0,succ$0)}
                return caml_call4
                        (succ,
                         input,
                         pos + len | 0,
                         more,
                         apply$0(input,pos,len,with_buffer))}
              if(! (pos < input_len) && 0 !== more)
               {var
                 succ$1=
                  function(input,pos,more)
                   {return caml_call5
                            (count_while1(f,with_buffer)[1],input,pos,more,fail,succ)},
                 fail$1=
                  function(input,pos,more)
                   {return caml_call5(fail,input,pos,more,0,_gM_)};
                return prompt(input,pos,fail$1,succ$1)}
              return caml_call5(fail,input,pos,more,0,_gL_)}]}
  function string(s)
   {var len=caml_ml_string_length(s);
    function f(buffer,off,len)
     {var i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var _bKP_=caml_string_unsafe_get(s,i[1]);
          if(equal(caml_ba_get_1(buffer,off + i[1] | 0),_bKP_))
           {i[1]++;continue}}
        return len === i[1]?[0,substring(buffer,off,len)]:_gN_}}
    return ensure
            (len,
             [0,
              function(input,pos,more,fail,succ)
               {var match=apply$0(input,pos,len,f);
                if(0 === match[0])
                 {var x=match[1];
                  return caml_call4(succ,input,pos + len | 0,more,x)}
                var e=match[1];
                return caml_call5(fail,input,pos,more,0,e)}])}
  function take_while(f){return count_while$0(0,f,substring)}
  function take_while1(f){return count_while1(f,substring)}
  function take_till(f)
   {return take_while(function(c){return 1 - caml_call1(f,c)})}
  function choice(opt,ps)
   {if(opt)var sth=opt[1],failure_msg=sth;else var failure_msg=_gO_;
    return fold_right(symbol$9,ps,fail$0(failure_msg))}
  function fix_direct(f)
   {var p=[],r=[];
    caml_update_dummy(p,[num_246,function(_bKO_){return caml_call1(f,r)}]);
    caml_update_dummy
     (r,
      [0,
       function(buf,pos,more,fail,succ)
        {var
          _bKM_=caml_obj_tag(p),
          _bKN_=num_250 === _bKM_?p[1]:num_246 === _bKM_?force_lazy_block(p):p;
         return caml_call5(_bKN_[1],buf,pos,more,fail,succ)}]);
    return r}
  function fix_lazy(f)
   {var steps=[0,20],p=[],r=[],max_steps=20;
    caml_update_dummy(p,[num_246,function(_bKL_){return caml_call1(f,r)}]);
    caml_update_dummy
     (r,
      [0,
       function(buf,pos,more,fail,succ)
        {steps[1] += -1;
         if(0 <= steps[1])
          {var
            _bKG_=caml_obj_tag(p),
            _bKH_=
             num_250 === _bKG_?p[1]:num_246 === _bKG_?force_lazy_block(p):p;
           return caml_call5(_bKH_[1],buf,pos,more,fail,succ)}
         steps[1] = max_steps;
         return [1,
                 [num_246,
                  function(_bKI_)
                   {var
                     _bKJ_=caml_obj_tag(p),
                     _bKK_=
                      num_250 === _bKJ_
                       ?p[1]
                       :num_246 === _bKJ_?force_lazy_block(p):p;
                    return caml_call5(_bKK_[1],buf,pos,more,fail,succ)}]]}]);
    return r}
  var
   fix=
    typeof match$0 === "number"?0 === match$0?fix_direct:fix_direct:fix_lazy;
  function cons(x,xs){return [0,x,xs]}
  function list(ps)
   {if(ps){var ps$0=ps[2],p=ps[1];return lift2(cons,p,list(ps$0))}
    return return$2(0)}
  function count(n,p)
   {if(0 <= n)
     {var
       loop=
        function(n){return 0 === n?return$2(0):lift2(cons,p,loop(n - 1 | 0))};
      return loop(n)}
    return fail$0(_gP_)}
  function many(p)
   {return fix
            (function(m)
              {var _bKF_=return$2(0);return symbol$9(lift2(cons,p,m),_bKF_)})}
  function parse_string(consume,p$0,s)
   {var len=caml_ml_string_length(s),bs=create$9(len);
    bigstringaf_blit_from_bytes(s,0,bs,0,len);
    var
     p=0 === consume?p$0:symbol$8(p$0,end_of_input$0),
     input=[0,0,0,0,caml_ba_dim_1(bs),bs],
     x=to_exported_state(caml_call5(p[1],input,0,0,fail_k,succeed_k));
    switch(x[0])
     {case 0:return _gD_;
      case 1:var v=x[2];return [0,v];
      default:
       var err=x[3],marks=x[2],_bKE_=symbol(_gB_,err);
       return [1,symbol(concat$0(_gC_,marks),_bKE_)]}}
  function iter_concat(fn,sep,buf,param)
   {var param$0=param;
    for(;;)
     {if(param$0)
       {var _bKC_=param$0[2],_bKD_=param$0[1];
        if(_bKC_)
         {caml_call2(fn,buf,_bKD_);
          add_string(buf,sep);
          var param$0=_bKC_;
          continue}
        return caml_call2(fn,buf,_bKD_)}
      return 0}}
  function compare_opt(c,t$0,t)
   {if(t$0)
     {var _bKB_=t$0[1];if(t){var b=t[1];return caml_call2(c,_bKB_,b)}return 1}
    return t?-1:0}
  function compare_list(f,t$0,t)
   {var t$2=t$0,t$1=t;
    for(;;)
     {if(t$2)
       {var _bKz_=t$2[2],_bKA_=t$2[1];
        if(t$1)
         {var ys=t$1[2],y=t$1[1],c=caml_call2(f,_bKA_,y);
          if(0 === c){var t$2=_bKz_,t$1=ys;continue}
          return c}
        return 1}
      return t$1?-1:0}}
  function sub_delims(a)
   {var i=0;
    for(;;)
     {var c=caml_string_get(subd,i);
      caml_check_bound(a,c)[1 + c] = 1;
      var _bKy_=i + 1 | 0;
      if(10 !== i){var i=_bKy_;continue}
      return a}}
  var a=caml_make_vect(num_256,0),i$0=0;
  for(;;)
   {var c=caml_string_get(always_safe,i$0);
    caml_check_bound(a,c)[1 + c] = 1;
    var _aMG_=i$0 + 1 | 0;
    if(65 !== i$0){var i$0=_aMG_;continue}
    var pchar=sub_delims(copy$0(a));
    caml_check_bound(pchar,58)[59] = 1;
    caml_check_bound(pchar,64)[65] = 1;
    var safe_chars_for_scheme=copy$0(a);
    caml_check_bound(safe_chars_for_scheme,43)[44] = 1;
    var safe_chars_for_path=sub_delims(copy$0(pchar));
    caml_check_bound(safe_chars_for_path,47)[48] = 0;
    var safe_chars_for_query=copy$0(pchar);
    caml_check_bound(safe_chars_for_query,47)[48] = 1;
    caml_check_bound(safe_chars_for_query,63)[64] = 1;
    caml_check_bound(safe_chars_for_query,38)[39] = 0;
    caml_check_bound(safe_chars_for_query,59)[60] = 0;
    caml_check_bound(safe_chars_for_query,43)[44] = 0;
    var safe_chars_for_query_key=copy$0(safe_chars_for_query);
    caml_check_bound(safe_chars_for_query_key,61)[62] = 0;
    var safe_chars_for_query_value=copy$0(safe_chars_for_query);
    caml_check_bound(safe_chars_for_query_value,44)[45] = 0;
    var safe_chars_for_userinfo=copy$0(a);
    caml_check_bound(safe_chars_for_userinfo,58)[59] = 0;
    var
     safe_chars_for_component=
      function(param)
       {if(typeof param === "number")
         if(-145160102 <= param)
          {if(127343601 <= param)
            {if(num_795008922 === param)return safe_chars_for_query_value;
             if(num_892015045 === param)return safe_chars_for_path}
           else
            if(num_61643255 !== param && num_127343600 <= param)
             return safe_chars_for_query}
         else
          if(-250086679 <= param)
           {if(num_178940859 === param)return safe_chars_for_scheme;
            if(num_145160103 <= param)return safe_chars_for_userinfo}
          else
           {if(num_911188600 === param)return safe_chars_for_query_key;
            if(num_250086680 <= param)return safe_chars_for_query}
        else
         if(num_198771759 === param[1])
          {var
            match=param[2],
            unsafe=match[3],
            safe=match[2],
            component=match[1],
            safe_chars=safe_chars_for_component(component),
            _bKt_=caml_ml_string_length(safe) - 1 | 0,
            _bKs_=0;
           if(! (_bKt_ < 0))
            {var i$0=_bKs_;
             for(;;)
              {var c$0=caml_string_get(safe,i$0);
               caml_check_bound(safe_chars,c$0)[1 + c$0] = 1;
               var _bKx_=i$0 + 1 | 0;
               if(_bKt_ !== i$0){var i$0=_bKx_;continue}
               break}}
           var _bKv_=caml_ml_string_length(unsafe) - 1 | 0,_bKu_=0;
           if(! (_bKv_ < 0))
            {var i=_bKu_;
             for(;;)
              {var c=caml_string_get(unsafe,i);
               caml_check_bound(safe_chars,c)[1 + c] = 0;
               var _bKw_=i + 1 | 0;
               if(_bKv_ !== i){var i=_bKw_;continue}
               break}}
           return safe_chars}
        return a},
     normalize_host=function(hso){return hso},
     canonicalize_port=function(port){return port},
     canonicalize_path=function(path){return path},
     Generic=
      [0,
       safe_chars_for_component,
       normalize_host,
       canonicalize_port,
       canonicalize_path],
     safe_chars_for_component$0=Generic[1],
     normalize_host$0=
      function(param){if(param){var hs=param[1];return [0,f(hs)]}return 0},
     canonicalize_port$0=
      function(param)
       {if(param){var _bKr_=param[1];return 80 === _bKr_?0:[0,_bKr_]}return 0},
     canonicalize_path$0=function(x){return x?x:_gQ_},
     Http=
      [0,
       safe_chars_for_component$0,
       normalize_host$0,
       canonicalize_port$0,
       canonicalize_path$0],
     safe_chars_for_component$1=Http[1],
     normalize_host$1=Http[2],
     canonicalize_path$1=Http[4],
     canonicalize_port$1=
      function(param)
       {if(param){var _bKq_=param[1];return 443 === _bKq_?0:[0,_bKq_]}
        return 0},
     Https=
      [0,
       safe_chars_for_component$1,
       normalize_host$1,
       canonicalize_port$1,
       canonicalize_path$1],
     safe_chars_for_component$2=Generic[1],
     canonicalize_port$2=Generic[3],
     canonicalize_path$2=Generic[4],
     normalize_host$2=
      function(param)
       {if(param)
         {var hs=param[1],hs$0=f(hs);
          return caml_string_equal(hs$0,_gR_)?_gS_:[0,hs$0]}
        return 0},
     File=
      [0,
       safe_chars_for_component$2,
       normalize_host$2,
       canonicalize_port$2,
       canonicalize_path$2],
     safe_chars_for_component$3=Generic[1],
     normalize_host$3=Generic[2],
     canonicalize_port$3=Generic[3],
     canonicalize_path$3=Generic[4],
     Urn=
      [0,
       safe_chars_for_component$3,
       normalize_host$3,
       canonicalize_port$3,
       canonicalize_path$3],
     module_of_scheme=
      function(param)
       {if(param)
         {var s=param[1],match=f(s);
          return caml_string_notequal(match,_gT_)
                  ?caml_string_notequal(match,_gU_)
                    ?caml_string_notequal(match,_gV_)
                      ?caml_string_notequal(match,_gW_)?Generic:Urn
                      :Https
                    :Http
                  :File}
        return Generic},
     encode=
      function(scheme,opt,b)
       {if(opt)var sth=opt[1],component=sth;else var component=num_892015045;
        var
         Scheme=module_of_scheme(scheme),
         safe_chars=caml_call1(Scheme[1],component),
         len=caml_ml_string_length(b),
         buf=create$1(len),
         start=0,
         cur=0;
        for(;;)
         {if(len <= cur)
           {add_substring(buf,b,start,cur - start | 0);return contents(buf)}
          var c=caml_string_get(b,cur);
          if(caml_check_bound(safe_chars,c)[1 + c])
           {var cur$0=cur + 1 | 0,cur=cur$0;continue}
          if(start < cur)add_substring(buf,b,start,cur - start | 0);
          add_string(buf,caml_call1(sprintf(_gX_),c));
          var cur$1=cur + 1 | 0,start$0=cur + 1 | 0,start=start$0,cur=cur$1;
          continue}},
     int_of_hex_char=
      function(c)
       {var c$0=uppercase_ascii(c) + num_48 | 0;
        if(9 < c$0)
         {if(16 < c$0 && ! (23 <= c$0))return c$0 - 7 | 0;
          return failwith(_gY_)}
        return 0 <= c$0?c$0:failwith(_gZ_)},
     decode=
      function(b)
       {var len=caml_ml_string_length(b),buf=create$1(len);
        function scan(start,cur)
         {var start$0=start,cur$0=cur;
          for(;;)
           {if(len <= cur$0)
             return add_substring(buf,b,start$0,cur$0 - start$0 | 0);
            if(37 === caml_string_get(b,cur$0))
             {add_substring(buf,b,start$0,cur$0 - start$0 | 0);
              var cur$1=cur$0 + 1 | 0;
              if(len <= cur$1)return add_char(buf,37);
              try
               {var highbits=int_of_hex_char(caml_string_get(b,cur$1))}
              catch(_bKp_)
               {add_char(buf,37);var start$0=cur$1,cur$0=cur$1;continue}
              var cur$2=cur$1 + 1 | 0;
              if(len <= cur$2)
               {add_char(buf,37);
                return add_char(buf,caml_string_get(b,cur$2 - 1 | 0))}
              try
               {var
                 switch$0=0,
                 lowbits=int_of_hex_char(caml_string_get(b,cur$2));
                switch$0 = 1}
              catch(_bKo_)
               {add_char(buf,37);
                add_char(buf,caml_string_get(b,cur$2 - 1 | 0));
                var cur$3=cur$2}
              if(switch$0)
               {add_char(buf,chr((highbits << 4) + lowbits | 0));
                var cur$3=cur$2 + 1 | 0}
              var start$0=cur$3,cur$0=cur$3;
              continue}
            var cur$4=cur$0 + 1 | 0,cur$0=cur$4;
            continue}}
        scan(0,0);
        return contents(buf)},
     pct_encode=
      function(scheme,opt,s)
       {if(opt)var sth=opt[1],component=sth;else var component=num_892015045;
        return encode(scheme,[0,component],s)},
     pct_encoder=
      function(opt,_bKn_,_bKm_,_bKl_,_bKk_,_bKj_,_bKi_,param)
       {if(opt)var sth=opt[1],scheme=sth;else var scheme=num_178940859;
        if(_bKn_)
         var sth$0=_bKn_[1],userinfo=sth$0;
        else
         var userinfo=num_145160103;
        if(_bKm_)var sth$1=_bKm_[1],host=sth$1;else var host=num_803994504;
        if(_bKl_)var sth$2=_bKl_[1],path=sth$2;else var path=num_892015045;
        if(_bKk_)
         var sth$3=_bKk_[1],query_key=sth$3;
        else
         var query_key=num_911188600;
        if(_bKj_)
         var sth$4=_bKj_[1],query_value=sth$4;
        else
         var query_value=num_795008922;
        if(_bKi_)
         var sth$5=_bKi_[1],fragment=sth$5;
        else
         var fragment=num_127343600;
        return [0,scheme,userinfo,host,path,query_key,query_value,fragment]},
     pct_decode=function(s){return decode(s)},
     compare$7=
      function(param,_bKh_)
       {var
         p=_bKh_[2],
         u=_bKh_[1],
         p$0=param[2],
         u$0=param[1],
         c=caml_string_compare(u$0,u);
        return 0 === c?compare_opt(compare_decoded,p$0,p):c},
     userinfo_of_encoded=
      function(us)
       {var match=split$0(_g0_,us,58);
        if(match)
         {var _bKe_=match[2],_bKf_=match[1];
          if(_bKe_)
           {var p=_bKe_[1],_bKg_=[0,pct_decode(p)];
            return [0,pct_decode(_bKf_),_bKg_]}
          return [0,pct_decode(_bKf_),0]}
        return _g1_},
     encoded_of_userinfo=
      function(scheme,component)
       {return function(param)
         {var po=param[2],u=param[1];
          if(po)var p=po[1],_bKd_=caml_ml_string_length(p);else var _bKd_=0;
          var
           len=(1 + caml_ml_string_length(u) | 0) + _bKd_ | 0,
           buf=create$1(len);
          add_string(buf,pct_encode(scheme,[0,component],u));
          if(po)
           {var p$0=po[1];
            add_char(buf,58);
            add_string(buf,pct_encode(scheme,[0,component],p$0))}
          return contents(buf)}},
     path_of_encoded=
      function(ps)
       {var on=47;
        if(caml_string_equal(ps,_gy_))
         var tokl=0;
        else
         var
          sep=make$0(_gx_,on),
          loop=
           function(acc,offset)
            {try
              {var index=rindex_from(ps,offset,on);
               if(index === offset)
                var _bKb_=loop([0,sep,acc],index - 1 | 0);
               else
                var
                 token=sub$0(ps,index + 1 | 0,offset - index | 0),
                 _bKb_=loop([0,sep,[0,token,acc]],index - 1 | 0);
               return _bKb_}
             catch(_bKc_)
              {_bKc_ = caml_wrap_exception(_bKc_);
               if(_bKc_ === Not_found)
                return 0 <= offset?[0,sub$0(ps,0,offset + 1 | 0),acc]:acc;
               throw _bKc_}},
          tokl=loop(0,caml_ml_string_length(ps) - 1 | 0);
        return map$1(pct_decode,tokl)},
     remove_dot_segments=
      function(p)
       {var param$1=rev(p),ascension=0,outp=0,param$2=param$1;
        for(;;)
         {var switch$0=0;
          if(param$2)
           {var _bJ9_=param$2[1],switch$1=0;
            if(caml_string_notequal(_bJ9_,_g2_))
             {var switch$2=0;
              if(caml_string_notequal(_bJ9_,_g3_))
               if(caml_string_notequal(_bJ9_,_g4_))
                {switch$1 = 1;switch$2 = 1}
               else
                {var _bJ$_=param$2[2];
                 if(_bJ$_)
                  {var _bKa_=_bJ$_[1];
                   if(caml_string_notequal(_bKa_,_g8_))
                    if(caml_string_notequal(_bKa_,_g9_))
                     {if(! caml_string_notequal(_bKa_,_g__))
                       {var r$0=_bJ$_[2];
                        if(0 < ascension)
                         {var
                           param$4=[0,_g$_,r$0],
                           ascension$1=ascension - 1 | 0,
                           ascension=ascension$1,
                           param$2=param$4;
                          continue}}
                      var r=_bJ$_[2];
                      if(0 < ascension)
                       {var
                         ascension$0=ascension - 1 | 0,
                         ascension=ascension$0,
                         param$2=r;
                        continue}
                      switch$1 = 1;
                      switch$2 = 1}
                    else
                     var param$5=_bJ$_[2];
                   else
                    {var param$6=_bJ$_[2];switch$2 = 1}}
                 else
                  {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               var param$5=param$2[2];
              if(! switch$2)
               {var
                 ascension$2=ascension + 1 | 0,
                 ascension=ascension$2,
                 param$2=param$5;
                continue}}
            else
             var param$6=param$2[2];
            if(! switch$1){var param$2=param$6;continue}}
          else
           switch$0 = 1;
          if(switch$0 && 0 < length(p) && caml_string_equal(hd(p),_ha_))
           return [0,_hb_,outp];
          if(param$2)
           {var
             param$3=param$2[2],
             s=param$2[1],
             outp$0=[0,s,outp],
             ascension=0,
             outp=outp$0,
             param$2=param$3;
            continue}
          if(0 < ascension)
           {var lst=to_list(caml_make_vect(ascension,_g5_));
            if(lst)
             {var t=lst[2],h=lst[1],acc$1=[0,h,0],acc=acc$1,param=t;
              for(;;)
               {if(param)
                 {var
                   param$0=param[2],
                   x=param[1],
                   acc$0=[0,x,[0,e,acc]],
                   acc=acc$0,
                   param=param$0;
                  continue}
                var _bJ__=acc;
                break}}
            else
             var _bJ__=0;
            return rev_append([0,_g6_,_bJ__],outp)}
          if(0 < length(outp) && caml_string_equal(hd(outp),_g7_))
           return tl(outp);
          return outp}},
     encoded_of_path=
      function(scheme,component)
       {return function(p)
         {var
           _bJ8_=0,
           len=
            fold_left$0
             (function(c,tok){return caml_ml_string_length(tok) + c | 0},
              _bJ8_,
              p),
           buf=create$1(len);
          iter_concat
           (function(buf,seg)
             {return caml_string_notequal(seg,_hd_)
                      ?add_string(buf,pct_encode(scheme,[0,component],seg))
                      :add_char(buf,47)},
            _hc_,
            buf,
            p);
          return contents(buf)}},
     query_of_encoded=
      function(qs)
       {var els=split$0(0,qs,38);
        function plus_to_space(s)
         {var
           s$0=caml_bytes_of_string(s),
           _bJ6_=caml_ml_bytes_length(s$0) - 1 | 0,
           _bJ5_=0;
          if(! (_bJ6_ < 0))
           {var i=_bJ5_;
            for(;;)
             {if(43 === caml_bytes_get(s$0,i))caml_bytes_set(s$0,i,32);
              var _bJ7_=i + 1 | 0;
              if(_bJ6_ !== i){var i=_bJ7_;continue}
              break}}
          return caml_string_of_bytes(s$0)}
        if(els)
         {var
           param$2=rev_map(function(el){return split$0(_hk_,el,61)},els),
           acc=0,
           param=param$2;
          for(;;)
           {if(param)
             {var _bJ0_=param[1];
              if(_bJ0_)
               {var _bJ1_=_bJ0_[2],_bJ2_=_bJ0_[1];
                if(_bJ1_)
                 {var
                   tl=param[2],
                   v=_bJ1_[1],
                   l=split$0(0,plus_to_space(v),44),
                   l$0=l || _hi_,
                   n=[0,plus_to_space(_bJ2_),l$0],
                   acc$0=[0,n,acc],
                   acc=acc$0,
                   param=tl;
                  continue}
                var
                 param$0=param[2],
                 n$0=[0,plus_to_space(_bJ2_),0],
                 acc$1=[0,n$0,acc],
                 acc=acc$1,
                 param=param$0;
                continue}
              var param$1=param[2],acc$2=[0,_hj_,acc],acc=acc$2,param=param$1;
              continue}
            var _bJ3_=acc;
            break}}
        else
         var _bJ3_=_hl_;
        return map$1
                (function(param)
                  {var v=param[2],k=param[1],_bJ4_=map$1(pct_decode,v);
                   return [0,pct_decode(k),_bJ4_]},
                 _bJ3_)},
     encoded_of_query=
      function(scheme,opt,l)
       {if(opt)
         var sth=opt[1],pct_encoder$0=sth;
        else
         var pct_encoder$0=pct_encoder(0,0,0,0,0,0,0,0);
        var
         _bJX_=-1,
         len=
          fold_left$0
           (function(a,param)
             {var v=param[2],k=param[1],_bJZ_=0;
              return ((a + caml_ml_string_length(k) | 0)
                      +
                      fold_left$0
                       (function(a,s)
                         {return (a + caml_ml_string_length(s) | 0) + 1 | 0},
                        _bJZ_,
                        v)
                      |
                      0)
                     +
                     2
                     |
                     0},
            _bJX_,
            l),
         buf=create$1(len);
        iter_concat
         (function(buf,param)
           {var v=param[2],k=param[1];
            add_string(buf,pct_encode(scheme,[0,pct_encoder$0[5]],k));
            var _bJY_=0 !== v?1:0;
            return _bJY_
                    ?(add_char(buf,61),
                      iter_concat
                       (function(buf,s)
                         {return add_string
                                  (buf,pct_encode(scheme,[0,pct_encoder$0[6]],s))},
                        _hn_,
                        buf,
                        v))
                    :_bJY_},
          _hm_,
          buf,
          l);
        return contents(buf)},
     of_raw=
      function(qs)
       {var lazy_query=from_fun(function(param){return query_of_encoded(qs)});
        return [1,[0,qs],lazy_query]},
     encoded_of_query$0=
      function(scheme)
       {return function(_bJV_,_bJW_)
         {return encoded_of_query(scheme,_bJV_,_bJW_)}},
     empty$1=[0,0,0,0,0,0,[1,0,from_val(0)],0],
     compare_decoded_opt=
      function(_bJT_,_bJU_){return compare_opt(compare_decoded,_bJT_,_bJU_)},
     equal$2=
      function(t$0,t)
       {var c=compare_decoded_opt(t$0[3],t[3]);
        if(0 === c)
         {var c$0=compare_decoded_opt(t$0[1],t[1]);
          if(0 === c$0)
           {var
             _bJN_=t[4],
             _bJO_=t$0[4],
             c$1=
              compare_opt
               (function(p$0,p){return p$0 < p?-1:p < p$0?1:0},_bJO_,_bJN_);
            if(0 === c$1)
             {var c$2=compare_opt(compare$7,t$0[2],t[2]);
              if(0 === c$2)
               {var c$4=compare_list(compare_decoded,t$0[5],t[5]);
                if(0 === c$4)
                 {var _bJP_=t[6],_bJQ_=t$0[6],switch$0=0;
                  if(0 === _bJQ_[0])
                   {var _bJF_=_bJQ_[1];
                    if(0 === _bJP_[0])
                     var kvl$0=_bJF_,kvl=_bJP_[1];
                    else
                     var
                      _bJG_=_bJP_[2],
                      _bJH_=caml_obj_tag(_bJG_),
                      _bJI_=
                       num_250 === _bJH_
                        ?_bJG_[1]
                        :num_246 === _bJH_?force_lazy_block(_bJG_):_bJG_,
                      kvl$0=_bJF_,
                      kvl=_bJI_}
                  else
                   {var _bJJ_=_bJQ_[2],_bJK_=_bJQ_[1];
                    if(0 === _bJP_[0])
                     var
                      _bJL_=caml_obj_tag(_bJJ_),
                      _bJM_=
                       num_250 === _bJL_
                        ?_bJJ_[1]
                        :num_246 === _bJL_?force_lazy_block(_bJJ_):_bJJ_,
                      kvl$0=_bJM_,
                      kvl=_bJP_[1];
                    else
                     {var
                       raw=_bJP_[1],
                       c$3=compare_opt(compare_decoded,_bJK_,raw);
                      switch$0 = 1}}
                  if(! switch$0)
                   var
                    c$3=
                     compare_list
                      (function(param,_bJS_)
                        {var
                          vl=_bJS_[2],
                          k=_bJS_[1],
                          vl$0=param[2],
                          k$0=param[1],
                          c=caml_string_compare(k$0,k);
                         return 0 === c?compare_list(compare_decoded,vl$0,vl):c},
                       kvl$0,
                       kvl);
                  var _bJR_=0 === c$3?compare_decoded_opt(t$0[7],t[7]):c$3}
                else
                 var _bJR_=c$4}
              else
               var _bJR_=c$2}
            else
             var _bJR_=c$1}
          else
           var _bJR_=c$0}
        else
         var _bJR_=c;
        return 0 === _bJR_?1:0},
     uncast_opt=
      function(param){if(param){var h=param[1];return [0,h]}return 0},
     normalize=
      function(schem,uri)
       {var
         Scheme=module_of_scheme(uncast_opt(schem)),
         _bJw_=uri[7],
         _bJx_=uri[6],
         _bJy_=uri[5],
         _bJz_=uri[4],
         _bJA_=uncast_opt(uri[3]),
         param=caml_call1(Scheme[2],_bJA_);
        if(param)var h=param[1],_bJB_=[0,h];else var _bJB_=0;
        var _bJD_=uri[1],_bJC_=uri[2];
        if(_bJD_)var x=_bJD_[1],_bJE_=[0,f(x)];else var _bJE_=0;
        return [0,_bJE_,_bJC_,_bJB_,_bJz_,_bJy_,_bJx_,_bJw_]},
     make$1=
      function(scheme,userinfo,host,port,path,query,fragment,param)
       {function decode(param){if(param){var x=param[1];return [0,x]}return 0}
        var switch$0=0;
        if(! host)
         {var switch$1=0;
          if(! port && ! userinfo)switch$1 = 1;
          if(! switch$1){var host$0=_hr_;switch$0 = 1}}
        if(! switch$0)var host$0=host;
        if(userinfo)
         var u=userinfo[1],userinfo$0=[0,userinfo_of_encoded(u)];
        else
         var userinfo$0=0;
        if(path)
         {var p=path[1],match=path_of_encoded(p),switch$2=0;
          if(host$0 && match && caml_string_notequal(match[1],_ho_))
           {var _bJu_=[0,_hp_,match];switch$2 = 1}
          if(! switch$2)var _bJu_=match;
          var path$0=_bJu_}
        else
         var path$0=0;
        if(query)var p$0=query[1],query$0=[0,p$0];else var query$0=_hq_;
        var scheme$0=decode(scheme),_bJv_=decode(fragment);
        return normalize
                (scheme$0,
                 [0,
                  scheme$0,
                  userinfo$0,
                  decode(host$0),
                  port,
                  path$0,
                  query$0,
                  _bJv_])},
     arg$1=
      function(opt,uri)
       {if(opt)
         var sth=opt[1],pct_encoder$0=sth;
        else
         var pct_encoder$0=pct_encoder(0,0,0,0,0,0,0,0);
        var _bJc_=uri[1];
        if(_bJc_)var s=_bJc_[1],scheme=[0,s];else var scheme=0;
        var buf=create$1(num_128);
        function add_pct_string(opt,x)
         {if(opt)
           var sth=opt[1],component=sth;
          else
           var component=num_892015045;
          return add_string(buf,encode(scheme,[0,component],x))}
        var _bJd_=uri[1];
        if(_bJd_)
         {var x=_bJd_[1];
          add_pct_string([0,pct_encoder$0[1]],x);
          add_char(buf,58)}
        var switch$0=0,_bJe_=uri[3],_bJf_=uri[4];
        if(! uri[2] && ! _bJe_ && ! _bJf_){var _bJg_=0;switch$0 = 1}
        if(! switch$0)var _bJg_=1;
        if(_bJg_)add_string(buf,_hs_);
        var _bJh_=uri[2];
        if(_bJh_)
         {var userinfo=_bJh_[1];
          add_string
           (buf,
            caml_call1(encoded_of_userinfo(scheme,pct_encoder$0[2]),userinfo));
          add_char(buf,64)}
        var _bJi_=uri[3];
        if(_bJi_){var host=_bJi_[1];add_pct_string([0,pct_encoder$0[3]],host)}
        var _bJj_=uri[4];
        if(_bJj_)
         {var port=_bJj_[1];
          add_char(buf,58);
          add_string(buf,caml_string_of_jsbytes(str$59 + port))}
        var _bJk_=uri[5];
        if(_bJk_)
         {var _bJl_=_bJk_[1];
          if(caml_string_notequal(_bJl_,_ht_))
           {if(uri[3])
             add_char(buf,47);
            else
             {var match=find_from(0,_bJl_,_hu_);
              if(match && ! scheme)add_string(buf,_hv_)}
            var _bJm_=uri[5];
            add_string
             (buf,caml_call1(encoded_of_path(scheme,pct_encoder$0[4]),_bJm_))}
          else
           {var _bJt_=uri[5];
            add_string
             (buf,caml_call1(encoded_of_path(scheme,pct_encoder$0[4]),_bJt_))}}
        var _bJn_=uri[6],switch$1=0;
        if(0 === _bJn_[0])
         {var _bJo_=_bJn_[1];if(_bJo_){var q=_bJo_;switch$1 = 1}}
        else
         if(_bJn_[1])
          {var
            _bJq_=_bJn_[2],
            _bJr_=caml_obj_tag(_bJq_),
            _bJs_=
             num_250 === _bJr_
              ?_bJq_[1]
              :num_246 === _bJr_?force_lazy_block(_bJq_):_bJq_,
            q=_bJs_;
           switch$1 = 1}
        if(switch$1)
         {add_char(buf,63);
          add_string(buf,encoded_of_query(scheme,[0,pct_encoder$0],q))}
        var _bJp_=uri[7];
        if(_bJp_)
         {var f=_bJp_[1];
          add_char(buf,35);
          add_pct_string([0,pct_encoder$0[7]],f)}
        return contents(buf)},
     get_decoded_opt=
      function(param){if(param){var x=param[1];return [0,x]}return 0},
     scheme=function(uri){return get_decoded_opt(uri[1])},
     host=function(uri){return get_decoded_opt(uri[3])},
     with_host=
      function(uri,param)
       {if(param)
         {var host=param[1];
          return [0,uri[1],uri[2],[0,host],uri[4],uri[5],uri[6],uri[7]]}
        return [0,uri[1],uri[2],0,uri[4],uri[5],uri[6],uri[7]]},
     with_port=
      function(uri,port)
       {var match=host(uri);
        return match
                ?[0,uri[1],uri[2],uri[3],port,uri[5],uri[6],uri[7]]
                :port
                  ?[0,uri[1],uri[2],[0,_hx_],port,uri[5],uri[6],uri[7]]
                  :[0,uri[1],uri[2],0,0,uri[5],uri[6],uri[7]]},
     path=
      function(opt,uri)
       {if(opt)
         var sth=opt[1],pct_encoder$0=sth;
        else
         var pct_encoder$0=pct_encoder(0,0,0,0,0,0,0,0);
        var _bI__=uri[1];
        if(_bI__)
         var
          s=_bI__[1],
          _bI$_=uri[5],
          _bJa_=caml_call1(encoded_of_path([0,s],pct_encoder$0[4]),_bI$_);
        else
         var
          _bJb_=uri[5],
          _bJa_=caml_call1(encoded_of_path(0,pct_encoder$0[4]),_bJb_);
        return _bJa_},
     with_path=
      function(uri,path)
       {var match=path_of_encoded(path);
        if(host(uri) && match && caml_string_notequal(match[1],_hy_))
         return [0,uri[1],uri[2],uri[3],uri[4],[0,_hz_,match],uri[6],uri[7]];
        return [0,uri[1],uri[2],uri[3],uri[4],match,uri[6],uri[7]]},
     fragment=function(uri){return get_decoded_opt(uri[7])},
     with_fragment=
      function(uri,param)
       {if(param)
         {var frag=param[1];
          return [0,uri[1],uri[2],uri[3],uri[4],uri[5],uri[6],[0,frag]]}
        return [0,uri[1],uri[2],uri[3],uri[4],uri[5],uri[6],0]},
     query=
      function(uri)
       {var _bI9_=uri[6];
        if(0 === _bI9_[0])
         var kv=_bI9_[1];
        else
         var
          _bI6_=_bI9_[2],
          _bI7_=caml_obj_tag(_bI6_),
          _bI8_=
           num_250 === _bI7_
            ?_bI6_[1]
            :num_246 === _bI7_?force_lazy_block(_bI6_):_bI6_,
          kv=_bI8_;
        return kv},
     with_query=
      function(uri,query)
       {return [0,uri[1],uri[2],uri[3],uri[4],uri[5],[0,query],uri[7]]},
     path_and_query=
      function(uri)
       {var match=path(0,uri),match$0=query(uri);
        if(caml_string_notequal(match,_hA_))
         {if(match$0)
           {var
             scheme=uncast_opt(uri[1]),
             _bI4_=caml_call2(encoded_of_query$0(scheme),0,match$0);
            return caml_call2(sprintf(_hB_),match,_bI4_)}
          return match}
        if(match$0)
         {var
           scheme$0=uncast_opt(uri[1]),
           _bI5_=caml_call2(encoded_of_query$0(scheme$0),0,match$0);
          return caml_call1(sprintf(_hC_),_bI5_)}
        return _hD_},
     resolve$0=
      function(schem,base,uri)
       {var match$0=scheme(base);
        if(match$0)
         var scheme$0=match$0[1],scheme$1=scheme$0;
        else
         var scheme$1=schem;
        var
         schem$0=[0,scheme$1],
         match$1=scheme(uri),
         pct_encoder$0=pct_encoder(0,0,0,0,0,0,0,0),
         _bII_=uri[2];
        if(_bII_)
         {var userinfo=_bII_[1],_bIJ_=uri[1];
          if(_bIJ_)
           var
            s=_bIJ_[1],
            _bIK_=
             caml_call1(encoded_of_userinfo([0,s],pct_encoder$0[2]),userinfo);
          else
           var
            _bIK_=
             caml_call1(encoded_of_userinfo(0,pct_encoder$0[2]),userinfo);
          var match$2=[0,_bIK_]}
        else
         var match$2=0;
        var match$3=host(uri);
        if(match$1)
         var
          _bIL_=uri[7],
          _bIM_=uri[6],
          _bIN_=remove_dot_segments(uri[5]),
          _bIO_=[0,uri[1],uri[2],uri[3],uri[4],_bIN_,_bIM_,_bIL_];
        else
         {var switch$0=0;
          if(match$2 || match$3)
           switch$0 = 1;
          else
           {var
             uri$0=[0,base[1],base[2],base[3],base[4],uri[5],uri[6],uri[7]],
             path_str=path(0,uri$0);
            if(caml_string_equal(path_str,_hE_))
             var
              _bIS_=uri$0[7],
              _bIT_=uri$0[6][1]?uri$0[6]:base[6],
              _bIU_=
               [0,uri$0[1],uri$0[2],uri$0[3],uri$0[4],base[5],_bIT_,_bIS_];
            else
             if(47 === caml_string_get(path_str,0))
              var
               _bIV_=uri$0[7],
               _bIW_=uri$0[6],
               _bIX_=remove_dot_segments(uri$0[5]),
               _bIU_=[0,uri$0[1],uri$0[2],uri$0[3],uri$0[4],_bIX_,_bIW_,_bIV_];
             else
              {var
                _bI0_=uri$0[5],
                _bIY_=uri$0[7],
                _bIZ_=uri$0[6],
                _bI1_=base[3],
                match=rev(base[5]),
                switch$1=0;
               if(_bI1_ && ! match)var _bI2_=[0,_hh_,_bI0_];else switch$1 = 1;
               if(switch$1)
                {var switch$2=0;
                 if(match)
                  {var switch$3=0;
                   if(caml_string_notequal(match[1],_he_))
                    {var _bIH_=match[2];
                     if(_bIH_ && ! caml_string_notequal(_bIH_[1],_hf_))
                      var rbpath=_bIH_[2];
                     else
                      switch$3 = 1}
                   else
                    var rbpath=match[2];
                   if(! switch$3)
                    {var _bI2_=rev_append([0,_hg_,rbpath],_bI0_);switch$2 = 1}}
                 if(! switch$2)var _bI2_=_bI0_}
               var
                _bI3_=remove_dot_segments(_bI2_),
                _bIU_=
                 [0,uri$0[1],uri$0[2],uri$0[3],uri$0[4],_bI3_,_bIZ_,_bIY_]}
            var _bIO_=_bIU_}
          if(switch$0)
           var
            _bIP_=uri[7],
            _bIQ_=uri[6],
            _bIR_=remove_dot_segments(uri[5]),
            _bIO_=[0,base[1],uri[2],uri[3],uri[4],_bIR_,_bIQ_,_bIP_]}
        return normalize(schem$0,_bIO_)},
     canonicalize=
      function(uri)
       {var
         uri$0=resolve$0(_hF_,empty$1,uri),
         Scheme=module_of_scheme(uncast_opt(uri$0[1])),
         _bID_=uri$0[7],
         _bIE_=uri$0[6],
         _bIF_=caml_call1(Scheme[4],uri$0[5]),
         _bIG_=caml_call1(Scheme[3],uri$0[4]);
        return [0,uri$0[1],uri$0[2],uri$0[3],_bIG_,_bIF_,_bIE_,_bID_]},
     pp_hum=function(ppf,uri){return pp(ppf,arg$1(0,uri))},
     _hG_=1,
     string_of_char=function(_bIC_){return make$0(_hG_,_bIC_)},
     string_of_char_list=
      function(chars){return concat$0(_hH_,map$1(string_of_char,chars))},
     _hI_=return$2(0),
     _hJ_=char$1(58),
     _hK_=
      symbol$8
       (take_while
         (function(c)
           {var _bIy_=58 !== c?1:0;
            if(_bIy_)
             {var _bIz_=47 !== c?1:0;
              if(_bIz_)
               var _bIA_=63 !== c?1:0,_bIB_=_bIA_?35 !== c?1:0:_bIA_;
              else
               var _bIB_=_bIz_}
            else
             var _bIB_=_bIy_;
            return _bIB_}),
        _hJ_),
     scheme$0=symbol$9(lift(function(s){return [0,decode(s)]},_hK_),_hI_),
     is_digit=
      function(param)
       {var switcher=param + num_48 | 0;return 9 < switcher >>> 0?0:1},
     hex_digit=
      satisfy
       (function(param)
         {var _bIx_=param + num_48 | 0,switch$0=0;
          if(22 < _bIx_ >>> 0)
           {if(! (5 < (_bIx_ + num_49 | 0) >>> 0))switch$0 = 1}
          else
           if(6 < (_bIx_ + num_10 | 0) >>> 0)switch$0 = 1;
          return switch$0?1:0}),
     hexadecimal=lift(string_of_char_list,many(hex_digit)),
     c_dot=char$1(46),
     c_at=char$1(64),
     c_colon=char$1(58),
     _hL_=
      function(num)
       {return num_256 <= caml_int_of_string(num)?fail$0(_hM_):return$2(num)},
     dec_octet=
      symbol_bind$1
       (take_while1
         (function(param)
           {var switcher=param + num_48 | 0;return 9 < switcher >>> 0?0:1}),
        _hL_),
     _hN_=count(3,symbol$8(dec_octet,c_dot)),
     ipv4_address=
      lift2
       (function(three,one)
         {var _bIw_=symbol(_hO_,one);
          return symbol(concat$0(_hP_,three),_bIw_)},
        _hN_,
        dec_octet),
     after_double_colon=
      fix
       (function(f)
         {var
           _bIt_=return$2(0),
           _bIu_=symbol$9(symbol$7(c_colon,f),_bIt_),
           _bIv_=lift2(function(x,y){return [0,x,y]},hexadecimal,_bIu_);
          return symbol$9(list([0,ipv4_address,0]),_bIv_)}),
     double_colon=
      function(count)
       {var _bIs_=return$2(_hQ_);
        return symbol$9
                (symbol_bind$1
                  (after_double_colon,
                   function(rest)
                    {var filler_length=(8 - count | 0) - length(rest) | 0;
                     return 0 < filler_length
                             ?return$2([0,_hR_,rest])
                             :fail$0(_hS_)}),
                 _bIs_)},
     hex_part=
      function(n)
       {var
         _bIq_=part(n + 1 | 0),
         _bIr_=
          symbol$7
           (c_colon,symbol$9(symbol$7(c_colon,double_colon(n + 1 | 0)),_bIq_));
        return lift2(function(x,y){return [0,x,y]},hexadecimal,_bIr_)},
     part=
      function(n)
       {if(6 === n)
         {var _bIp_=hex_part(6);
          return symbol$9(list([0,ipv4_address,0]),_bIp_)}
        return 7 === n
                ?lift(function(x){return [0,x,0]},hexadecimal)
                :hex_part(n)},
     split_with=
      function(f,xs)
       {if(xs)
         {var ys=xs[2],y=xs[1];
          if(caml_call1(f,y))
           {var match=split_with(f,ys),ts=match[2],zs=match[1];
            return [0,[0,y,zs],ts]}
          return [0,0,xs]}
        return _hT_},
     format_addr=
      function(segments)
       {var
         match=
          split_with
           (function(segment){return caml_string_notequal(segment,_hU_)},
            segments),
         after_double_colon=match[2],
         before_double_colon=match[1],
         before=concat$0(_hV_,before_double_colon),
         switch$0=0;
        if
         (after_double_colon
          &&
          !
          caml_string_notequal(after_double_colon[1],_hW_))
         {var
           xs=after_double_colon[2],
           res=symbol(before,symbol(_hY_,concat$0(_hX_,xs)));
          switch$0 = 1}
        if(! switch$0)var res=before;
        return res},
     _hZ_=part(0),
     _h0_=double_colon(0),
     ipv6=
      lift
       (format_addr,symbol$9(symbol$7(symbol$7(c_colon,c_colon),_h0_),_hZ_)),
     _h1_=char$1(93),
     _h2_=char$1(91),
     ipv6_address=
      lift3
       (function(lb,ip,rb)
         {var _bIo_=[0,ip,[0,string_of_char(rb),0]];
          return concat$0(_h3_,[0,string_of_char(lb),_bIo_])},
        _h2_,
        ipv6,
        _h1_),
     _h4_=count(2,hex_digit),
     _h5_=char$1(37),
     pct_encoded=
      lift2
       (function(pct,digits){return string_of_char_list([0,pct,digits])},
        _h5_,
        _h4_),
     sub_delims$0=
      satisfy
       (function(param)
         {var _bIm_=param - 59 | 0,switch$0=0;
          if(2 < _bIm_ >>> 0)
           {var _bIn_=_bIm_ + 26 | 0;
            if(! (11 < _bIn_ >>> 0))
             switch(_bIn_){case 1:case 2:case 4:break;default:switch$0 = 1}}
          else
           if(1 !== _bIm_)switch$0 = 1;
          return switch$0?1:0}),
     unreserved=
      satisfy
       (function(param)
         {var switch$0=0;
          if(91 <= param)
           {var _bIk_=param - 95 | 0;
            if(27 < _bIk_ >>> 0)
             {if(31 === _bIk_)switch$0 = 1}
            else
             if(1 !== _bIk_)switch$0 = 1}
          else
           {var _bIl_=param + num_45 | 0;
            if(12 < _bIl_ >>> 0)
             {if(20 <= _bIl_)switch$0 = 1}
            else
             if(2 !== _bIl_)switch$0 = 1}
          return switch$0?1:0}),
     _h6_=[0,pct_encoded,[0,symbol$5(string_of_char,sub_delims$0),0]],
     _h7_=many(choice(0,[0,symbol$5(string_of_char,unreserved),_h6_])),
     reg_name=lift(function(_bIj_){return concat$0(_h8_,_bIj_)},_h7_),
     _h9_=choice(0,[0,reg_name,[0,ipv4_address,[0,ipv6_address,0]]]),
     host$0=lift(function(s){return decode(s)},_h9_),
     _h__=return$2(0),
     _h$_=[0,symbol$5(string_of_char,c_colon),0],
     _ia_=[0,pct_encoded,[0,symbol$5(string_of_char,sub_delims$0),_h$_]],
     _ib_=
      symbol$8
       (many(choice(0,[0,symbol$5(string_of_char,unreserved),_ia_])),c_at),
     userinfo=
      symbol$9
       (lift
         (function(x)
           {var s=concat$0(_ic_,x);return [0,userinfo_of_encoded(s)]},
          _ib_),
        _h__),
     port=
      symbol_bind$1
       (peek_char$0,
        function(param)
         {if(param && 58 === param[1])
           {var
             _bIg_=
              function(port)
               {var decoded=decode(port);
                try
                 {var _bIh_=[0,caml_int_of_string(decoded)];return _bIh_}
                catch(_bIi_){return 0}};
            return symbol_map$0(symbol$7(c_colon,take_while(is_digit)),_bIg_)}
          return return$2(0)}),
     _ie_=return$2(_id_),
     _if_=
      lift3
       (function(userinfo,host,port){return [0,userinfo,[0,host],port]},
        userinfo,
        host$0,
        port),
     authority=symbol$9(symbol$7(string(_ig_),_if_),_ie_),
     path$0=
      lift
       (path_of_encoded,
        take_while
         (function(param){if(35 !== param && 63 !== param)return 1;return 0})),
     _ih_=return$2([1,0,from_val(0)]),
     _ii_=take_till(function(param){return 35 === param?1:0}),
     query$0=symbol$9(lift(of_raw,symbol$7(char$1(63),_ii_)),_ih_),
     _ij_=return$2(0),
     _ik_=take_while(function(param){return 1}),
     _il_=symbol$7(char$1(35),_ik_),
     fragment$0=symbol$9(lift(function(s){return [0,decode(s)]},_il_),_ij_),
     uri_reference=
      symbol$6
       (lift4
         (function(scheme,param,path,query,fragment)
           {var port=param[3],host=param[2],userinfo=param[1];
            return normalize
                    (scheme,[0,scheme,userinfo,host,port,path,query,fragment])},
          scheme$0,
          authority,
          path$0,
          query$0),
        fragment$0),
     _im_=
      function(s)
       {var match=parse_string(1,uri_reference,s);
        if(0 === match[0]){var t=match[1];return t}
        return empty$1},
     uri_reference$0=
      symbol_map$0(take_while(function(param){return 10 === param?0:1}),_im_),
     of_string$0=
      function(s)
       {var match=parse_string(0,uri_reference$0,s);
        if(0 === match[0]){var t=match[1];return t}
        return empty$1},
     repr_uid=function(param){return [0,0]},
     view=function(v){return v},
     repr=function(v){return v},
     repr_uid$0=repr_uid(0),
     Ezjsonm=[0,view,repr,repr_uid$0],
     convert=
      function(Repr_f,Repr_t,v)
       {var _bIb_=Repr_t[3],_bIc_=Repr_f[3];
        _bIb_[1] = 0;
        _bIc_[1] = [0,v];
        var _bIa_=_bIb_[1];
        if(_bIa_){var r=_bIa_[1];return r}
        function conv(v)
         {var v$0=caml_call1(Repr_f[1],v);
          if(typeof v$0 !== "number")
           {var _bId_=v$0[1];
            if(65 === _bId_)
             {var values=v$0[2],_bIe_=[0,65,map$1(conv,values)];
              return caml_call1(Repr_t[2],_bIe_)}
            if(79 === _bId_)
             {var
               values$0=v$0[2],
               _bIf_=
                [0,
                 79,
                 map$1
                  (function(param)
                    {var v=param[2],k=param[1];return [0,k,conv(v)]},
                   values$0)];
              return caml_call1(Repr_t[2],_bIf_)}}
          return caml_call1(Repr_t[2],v$0)}
        return conv(v)},
     pp_string=
      function(ppf,s)
       {caml_call1(pf(ppf),_in_);
        var _bH__=caml_ml_string_length(s) - 1 | 0,_bH9_=0;
        if(! (_bH__ < 0))
         {var i=_bH9_;
          for(;;)
           {var c=caml_string_get(s,i);
            if(34 === c)
             caml_call1(pf(ppf),_ip_);
            else
             if(32 <= c)
              if(92 === c)
               caml_call1(pf(ppf),_iq_);
              else
               caml_call2(pf(ppf),_ir_,c);
             else
              {var switch$0=0;
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:caml_call1(pf(ppf),_it_);break;
                  case 9:caml_call1(pf(ppf),_iu_);break;
                  case 10:caml_call1(pf(ppf),_iv_);break;
                  case 13:caml_call1(pf(ppf),_iw_);break;
                  default:switch$0 = 1}
               if(switch$0)caml_call2(pf(ppf),_is_,c)}
            var _bH$_=i + 1 | 0;
            if(_bH__ !== i){var i=_bH$_;continue}
            break}}
        return caml_call1(pf(ppf),_io_)},
     pp$4=
      function(opt,_bHO_,Repr,ppf,v)
       {if(opt)var sth=opt[1],compact=sth;else var compact=0;
        if(_bHO_)
         var sth$0=_bHO_[1],pp_string$0=sth$0;
        else
         var pp_string$0=pp_string;
        function pp_compact(ppf,v)
         {var match=caml_call1(Repr[1],v);
          if(typeof match === "number")return caml_call1(pf(ppf),_ix_);
          var _bH0_=match[1];
          if(65 === _bH0_)
           {var
             l=match[2],
             pp_sep=function(ppf,param){return caml_call1(pf(ppf),_iy_)},
             _bH1_=[0,pp_sep],
             _bH2_=
              function(_bH7_,_bH8_)
               {return pp_print_list(_bH1_,pp_compact,_bH7_,_bH8_)};
            return caml_call3(pf(ppf),_iz_,_bH2_,l)}
          if(num_365180284 <= _bH0_)
           {if(num_737456202 <= _bH0_)
             return 0 === match[2]
                     ?caml_call1(pf(ppf),_iA_)
                     :caml_call1(pf(ppf),_iB_);
            var
             f=match[2],
             match$0=caml_modf_float(f),
             intr=match$0[2],
             fract=match$0[1];
            return fract == 0.
                    ?caml_call2(pf(ppf),_iC_,intr)
                    :caml_call2(pf(ppf),_iD_,f)}
          if(79 <= _bH0_)
           {var
             l$0=match[2],
             pp_sep$0=function(ppf,param){return caml_call1(pf(ppf),_iE_)},
             pp_field=
              function(ppf,param)
               {var v=param[2],name=param[1];
                return caml_call5(pf(ppf),_iF_,pp_string$0,name,pp_compact,v)},
             _bH3_=[0,pp_sep$0],
             _bH4_=
              function(_bH5_,_bH6_)
               {return pp_print_list(_bH3_,pp_field,_bH5_,_bH6_)};
            return caml_call3(pf(ppf),_iG_,_bH4_,l$0)}
          var s=match[2];
          return caml_call2(pp_string$0,ppf,s)}
        function pp_box(ppf,v)
         {var match=caml_call1(Repr[1],v);
          if(typeof match !== "number")
           {var _bHP_=match[1];
            if(65 === _bHP_)
             {var _bHQ_=match[2];
              if(_bHQ_)
               {var
                 pp_sep=function(ppf,param){return caml_call1(pf(ppf),_iH_)},
                 _bHR_=[0,pp_sep],
                 _bHS_=
                  function(_bHY_,_bHZ_)
                   {return pp_print_list(_bHR_,pp_box,_bHY_,_bHZ_)};
                return caml_call3(pf(ppf),_iI_,_bHS_,_bHQ_)}
              return caml_call1(pf(ppf),_iJ_)}
            if(79 === _bHP_)
             {var _bHT_=match[2];
              if(_bHT_)
               {var
                 pp_sep$0=function(ppf,param){return caml_call1(pf(ppf),_iK_)},
                 pp_field=
                  function(ppf,param)
                   {var v=param[2],name=param[1];
                    return caml_call5(pf(ppf),_iL_,pp_string$0,name,pp_box,v)},
                 _bHU_=[0,pp_sep$0],
                 _bHV_=
                  function(_bHW_,_bHX_)
                   {return pp_print_list(_bHU_,pp_field,_bHW_,_bHX_)};
                return caml_call3(pf(ppf),_iM_,_bHV_,_bHT_)}
              return caml_call1(pf(ppf),_iN_)}}
          return pp_compact(ppf,v)}
        return compact?pp_compact(ppf,v):pp_box(ppf,v)},
     any_to_repr=
      function(repr_t,param)
       {var v=param[2],repr_f=param[1];return convert(repr_f,repr_t,v)},
     from_any=function(repr){var res=any_to_repr(Ezjsonm,repr);return res},
     Illegal_pointer_notation=[num_248,_iO_,caml_fresh_oo_id(0)],
     Unsupported_path_item=[num_248,_iP_,caml_fresh_oo_id(0)],
     Cannot_merge=[num_248,_iQ_,caml_fresh_oo_id(0)],
     print_path_as_json_path=
      function(opt,ppf,nonempty)
       {if(opt)var sth=opt[1],wildcards=sth;else var wildcards=1;
        if(nonempty)
         {var
           print=
            function(ppf,param)
             {if(param)
               {var _bHN_=param[1];
                if(typeof _bHN_ === "number")
                 {if(num_926224370 <= _bHN_)
                   {var rem=param[2];
                    if(wildcards)return caml_call3(pf(ppf),_iR_,print,rem)}
                  else
                   {var rem$0=param[2];
                    if(wildcards)return caml_call3(pf(ppf),_iT_,print,rem$0)}
                  throw [0,Unsupported_path_item,num_926224370,_iS_]}
                if(num_331416730 <= _bHN_[1])
                 {var rem$1=param[2],n=_bHN_[2];
                  return caml_call4(pf(ppf),_iU_,n,print,rem$1)}
                var rem$2=param[2],n$0=_bHN_[2];
                return caml_call4(pf(ppf),_iV_,n$0,print,rem$2)}
              return 0};
          return print(ppf,nonempty)}
        return caml_call1(pf(ppf),_iW_)},
     print_path_as_json_pointer=
      function(opt,ppf,nonempty)
       {if(opt)var sth=opt[1],wildcards=sth;else var wildcards=1;
        if(nonempty)
         {var
           print=
            function(ppf,param)
             {if(param)
               {var _bHM_=param[1];
                if(typeof _bHM_ === "number")
                 {if(num_926224370 <= _bHM_)
                   throw [0,Unsupported_path_item,num_926224370,_iX_];
                  var rem=param[2];
                  if(wildcards)return caml_call3(pf(ppf),_iY_,print,rem);
                  throw [0,Unsupported_path_item,num_926224370,_iZ_]}
                if(num_331416730 <= _bHM_[1])
                 {var rem$0=param[2],n=_bHM_[2];
                  return caml_call4(pf(ppf),_i0_,n,print,rem$0)}
                var rem$1=param[2],n$0=_bHM_[2];
                return caml_call4(pf(ppf),_i1_,n$0,print,rem$1)}
              return 0};
          return print(ppf,nonempty)}
        return caml_call1(pf(ppf),_i2_)},
     json_pointer_of_path=
      function(wildcards,path)
       {function _bHJ_(_bHK_,_bHL_)
         {return print_path_as_json_pointer(wildcards,_bHK_,_bHL_)}
        return caml_call2(strf(_i3_),_bHJ_,path)},
     path_of_json_pointer=
      function(opt,str)
       {if(opt)var sth=opt[1],wildcards=sth;else var wildcards=1;
        var buf=create$1(num_100),len=caml_ml_string_length(str);
        function interp(param)
         {var field=contents(buf);
          clear$1(buf);
          if(caml_string_equal(field,_i6_))
           {if(wildcards)return num_870035731;
            throw [0,Unsupported_path_item,num_870035731,_i7_]}
          try
           {var _bHH_=[0,num_784200974,caml_int_of_string(field)];
            return _bHH_}
          catch(_bHI_){return [0,num_331416730,field]}}
        if(0 === len)return 0;
        if(47 === caml_string_get(str,0))
         {var acc=0,i=1;
          a:
          for(;;)
           {if(len <= i)return rev(acc);
            if(47 === caml_string_get(str,i))
             {var i$0=i + 1 | 0,i=i$0;continue}
            var i$1=i;
            for(;;)
             {if(len <= i$1)return rev([0,interp(0),acc]);
              var unescaped=caml_string_get(str,i$1);
              if(47 === unescaped)
               {var acc$0=[0,interp(0),acc],acc=acc$0,i=i$1;continue a}
              if(num_126 === unescaped)
               {if(len <= (i$1 + 1 | 0))
                 throw [0,Illegal_pointer_notation,str,i$1,_i4_];
                var illegal=caml_string_get(str,i$1);
                if(48 === illegal)
                 add_char(buf,num_126);
                else
                 {if(49 !== illegal)
                   throw [0,Illegal_pointer_notation,str,i$1 + 1 | 0,_i5_];
                  add_char(buf,47)}
                var i$2=i$1 + 1 | 0,i$1=i$2;
                continue}
              add_char(buf,unescaped);
              var i$3=i$1 + 1 | 0,i$1=i$3;
              continue}}}
        throw [0,Illegal_pointer_notation,str,0,_i8_]},
     element=function(kind){return [0,0,0,0,0,kind,0,0]},
     option_map=
      function(f,param)
       {if(param){var v=param[1];return [0,caml_call1(f,v)]}return 0},
     eq_array_specs=
      function(a,b)
       {var _bHB_=a[1] === b[1]?1:0;
        if(_bHB_)
         {var _bHC_=caml_equal(a[2],b[2]);
          if(_bHC_)
           {var _bHD_=a[3] === b[3]?1:0;
            if(_bHD_)
             {var _bHE_=a[4],_bHF_=b[4];
              if(_bHE_)
               {if(_bHF_)
                 {var b$0=_bHF_[1],a$0=_bHE_[1];return eq_element(a$0,b$0)}}
              else
               if(! _bHF_)return 1;
              var _bHG_=0}
            else
             var _bHG_=_bHD_}
          else
           var _bHG_=_bHC_}
        else
         var _bHG_=_bHB_;
        return _bHG_},
     eq_element=
      function(a,b)
       {var _bGv_=a === b?1:0;
        if(_bGv_)
         var _bGw_=_bGv_;
        else
         {var _bGx_=caml_equal(a[1],b[1]);
          if(_bGx_)
           {var _bGy_=caml_equal(a[2],b[2]);
            if(_bGy_)
             {var
               _bGz_=option_map(from_any,b[3]),
               _bGA_=caml_equal(option_map(from_any,a[3]),_bGz_);
              if(_bGA_)
               {var
                 _bGB_=b[4],
                 _bGC_=
                  option_map
                   (function(_bHA_){return map$1(from_any,_bHA_)},_bGB_),
                 _bGD_=a[4],
                 _bGE_=
                  caml_equal
                   (option_map
                     (function(_bHz_){return map$1(from_any,_bHz_)},_bGD_),
                    _bGC_);
                if(_bGE_)
                 {var _bGF_=b[5],_bGG_=a[5],switch$0=0;
                  if(typeof _bGG_ === "number")
                   switch(_bGG_)
                    {case 0:
                      if(typeof _bGF_ === "number" && 0 === _bGF_)
                       {var _bGH_=1;switch$0 = 1}
                      break;
                     case 1:
                      if(typeof _bGF_ === "number" && 1 === _bGF_)
                       {var _bGH_=1;switch$0 = 1}
                      break;
                     case 2:
                      if(typeof _bGF_ === "number" && 2 === _bGF_)
                       {var _bGH_=1;switch$0 = 1}
                      break;
                     default:
                      if(typeof _bGF_ === "number" && 3 <= _bGF_)
                       {var _bGH_=1;switch$0 = 1}}
                  else
                   switch(_bGG_[0])
                    {case 0:
                      if(typeof _bGF_ !== "number" && 0 === _bGF_[0])
                       {var
                         ab=_bGF_[1],
                         aa=_bGG_[1],
                         _bGT_=aa[4] === ab[4]?1:0,
                         switch$1=0;
                        if(_bGT_)
                         {var _bGU_=caml_equal(aa[5],ab[5]);
                          if(_bGU_)
                           {var
                             _bGV_=fast_sort(caml_compare,ab[7]),
                             _bGW_=caml_equal(fast_sort(caml_compare,aa[7]),_bGV_);
                            if(_bGW_)
                             {var _bGX_=aa[3],_bGY_=ab[3],switch$2=0;
                              if(_bGX_)
                               if(_bGY_)
                                var b$0=_bGY_[1],a$0=_bGX_[1],_bGZ_=eq_element(a$0,b$0);
                               else
                                switch$2 = 1;
                              else
                               if(_bGY_)switch$2 = 1;else var _bGZ_=1;
                              if(switch$2)var _bGZ_=0;
                              if(_bGZ_)
                               {var _bG0_=length(ab[2]),_bG1_=length(aa[2]) === _bG0_?1:0;
                                if(_bG1_)
                                 {var
                                   _bG2_=ab[2],
                                   _bG3_=
                                    fast_sort
                                     (function(param,_bHy_)
                                       {var y=_bHy_[1],x=param[1];return caml_string_compare(x,y)},
                                      _bG2_),
                                   _bG4_=aa[2],
                                   _bG5_=
                                    fast_sort
                                     (function(param,_bHx_)
                                       {var y=_bHx_[1],x=param[1];return caml_string_compare(x,y)},
                                      _bG4_),
                                   _bG6_=
                                    for_all2
                                     (function(param,_bHv_)
                                       {var
                                         eb=_bHv_[2],
                                         nb=_bHv_[1],
                                         ea=param[2],
                                         na=param[1],
                                         _bHw_=caml_string_equal(na,nb);
                                        return _bHw_?eq_element(ea,eb):_bHw_},
                                      _bG5_,
                                      _bG3_);
                                  if(_bG6_)
                                   {var _bG7_=length(ab[6]),_bG8_=length(aa[6]) === _bG7_?1:0;
                                    if(_bG8_)
                                     {var
                                       _bG9_=ab[6],
                                       _bG__=
                                        fast_sort
                                         (function(param,_bHu_)
                                           {var y=_bHu_[1],x=param[1];return caml_string_compare(x,y)},
                                          _bG9_),
                                       _bG$_=aa[6],
                                       _bHa_=
                                        fast_sort
                                         (function(param,_bHt_)
                                           {var y=_bHt_[1],x=param[1];return caml_string_compare(x,y)},
                                          _bG$_),
                                       _bHb_=
                                        for_all2
                                         (function(param,_bHr_)
                                           {var
                                             eb=_bHr_[2],
                                             nb=_bHr_[1],
                                             ea=param[2],
                                             na=param[1],
                                             _bHs_=caml_string_equal(na,nb);
                                            return _bHs_?eq_element(ea,eb):_bHs_},
                                          _bHa_,
                                          _bG__);
                                      if(_bHb_)
                                       {var _bHc_=length(ab[1]),_bHd_=length(aa[1]) === _bHc_?1:0;
                                        if(_bHd_)
                                         {var
                                           _bHe_=ab[1],
                                           _bHf_=
                                            fast_sort
                                             (function(param,_bHq_)
                                               {var y=_bHq_[1],x=param[1];return caml_string_compare(x,y)},
                                              _bHe_),
                                           _bHg_=aa[1],
                                           _bHh_=
                                            fast_sort
                                             (function(param,_bHp_)
                                               {var y=_bHp_[1],x=param[1];return caml_string_compare(x,y)},
                                              _bHg_),
                                           _bGJ_=
                                            for_all2
                                             (function(param,_bHj_)
                                               {var
                                                 db=_bHj_[4],
                                                 rb=_bHj_[3],
                                                 eb=_bHj_[2],
                                                 nb=_bHj_[1],
                                                 da=param[4],
                                                 ra=param[3],
                                                 ea=param[2],
                                                 na=param[1],
                                                 _bHk_=caml_string_equal(na,nb);
                                                if(_bHk_)
                                                 {var _bHl_=eq_element(ea,eb);
                                                  if(_bHl_)
                                                   {var _bHm_=ra === rb?1:0;
                                                    if(_bHm_)
                                                     var
                                                      _bHn_=option_map(from_any,db),
                                                      _bHo_=caml_equal(option_map(from_any,da),_bHn_);
                                                    else
                                                     var _bHo_=_bHm_}
                                                  else
                                                   var _bHo_=_bHl_}
                                                else
                                                 var _bHo_=_bHk_;
                                                return _bHo_},
                                              _bHh_,
                                              _bHf_);
                                          switch$1 = 1}
                                        else
                                         var _bHi_=_bHd_}
                                      else
                                       var _bHi_=_bHb_}
                                    else
                                     var _bHi_=_bG8_}
                                  else
                                   var _bHi_=_bG6_}
                                else
                                 var _bHi_=_bG1_}
                              else
                               var _bHi_=_bGZ_}
                            else
                             var _bHi_=_bGW_}
                          else
                           var _bHi_=_bGU_}
                        else
                         var _bHi_=_bGT_;
                        if(! switch$1)var _bGJ_=_bHi_;
                        var _bGH_=_bGJ_;
                        switch$0 = 1}
                      break;
                     case 1:
                      if(typeof _bGF_ !== "number" && 1 === _bGF_[0])
                       {var
                         sb=_bGF_[2],
                         esb=_bGF_[1],
                         sa=_bGG_[2],
                         esa=_bGG_[1],
                         _bGK_=length(esb),
                         _bGL_=length(esa) === _bGK_?1:0,
                         switch$3=0;
                        if(_bGL_)
                         {var _bGM_=for_all2(eq_element,esa,esb);
                          if(_bGM_)
                           {var _bGH_=eq_array_specs(sa,sb);switch$0 = 1;switch$3 = 1}
                          else
                           var _bGN_=_bGM_}
                        else
                         var _bGN_=_bGL_;
                        if(! switch$3){var _bGH_=_bGN_;switch$0 = 1}}
                      break;
                     case 2:
                      if(typeof _bGF_ !== "number" && 2 === _bGF_[0])
                       {var
                         sb$0=_bGF_[2],
                         eb=_bGF_[1],
                         sa$0=_bGG_[2],
                         ea=_bGG_[1],
                         _bGO_=eq_element(ea,eb);
                        if(_bGO_)
                         {var _bGH_=eq_array_specs(sa$0,sb$0);switch$0 = 1}
                        else
                         {var _bGH_=_bGO_;switch$0 = 1}}
                      break;
                     case 3:
                      if(typeof _bGF_ !== "number" && 3 === _bGF_[0])
                       {var
                         esb$0=_bGF_[2],
                         cb=_bGF_[1],
                         esa$0=_bGG_[2],
                         ca=_bGG_[1],
                         _bGP_=ca === cb?1:0,
                         switch$4=0;
                        if(_bGP_)
                         {var _bGQ_=length(esb$0),_bGR_=length(esa$0) === _bGQ_?1:0;
                          if(_bGR_)
                           {var _bGH_=for_all2(eq_element,esa$0,esb$0);
                            switch$0 = 1;
                            switch$4 = 1}
                          else
                           var _bGS_=_bGR_}
                        else
                         var _bGS_=_bGP_;
                        if(! switch$4){var _bGH_=_bGS_;switch$0 = 1}}
                      break;
                     case 4:
                      if(typeof _bGF_ !== "number" && 4 === _bGF_[0])
                       {var pb=_bGF_[1],pa=_bGG_[1],_bGH_=caml_equal(pa,pb);
                        switch$0 = 1}
                      break;
                     case 5:
                      if(typeof _bGF_ !== "number" && 5 === _bGF_[0])
                       {var rb=_bGF_[1],ra=_bGG_[1],_bGH_=caml_string_equal(ra,rb);
                        switch$0 = 1}
                      break;
                     case 6:
                      if(typeof _bGF_ !== "number" && 6 === _bGF_[0])
                       {var
                         rb$0=_bGF_[1],
                         ra$0=_bGG_[1],
                         _bGH_=caml_equal(ra$0,rb$0);
                        switch$0 = 1}
                      break;
                     case 7:
                      if(typeof _bGF_ !== "number" && 7 === _bGF_[0])
                       {var
                         sb$1=_bGF_[1],
                         sa$1=_bGG_[1],
                         _bGH_=caml_equal(sa$1,sb$1);
                        switch$0 = 1}
                      break;
                     case 8:
                      if(typeof _bGF_ !== "number" && 8 === _bGF_[0])
                       {var nb=_bGF_[1],na=_bGG_[1],_bGH_=caml_equal(na,nb);
                        switch$0 = 1}
                      break;
                     default:
                      if(typeof _bGF_ !== "number" && 9 === _bGF_[0])
                       {var
                         nb$0=_bGF_[1],
                         na$0=_bGG_[1],
                         _bGH_=caml_equal(na$0,nb$0);
                        switch$0 = 1}}
                  if(! switch$0)var _bGH_=0;
                  if(_bGH_)
                   var
                    _bGI_=caml_equal(a[6],b[6]),
                    _bGw_=_bGI_?caml_equal(a[7],b[7]):_bGI_;
                  else
                   var _bGw_=_bGH_}
                else
                 var _bGw_=_bGE_}
              else
               var _bGw_=_bGA_}
            else
             var _bGw_=_bGy_}
          else
           var _bGw_=_bGx_}
        return _bGw_},
     pp_string$0=
      function(ppf,s){return pp$4(0,0,Ezjsonm,ppf,[0,num_976970511,s])},
     pp_num=
      function(ppf,m)
       {if(Math.abs(m) < num_1000)return caml_call2(pf(ppf),_ji_,m);
        if(m < 0.)var pos=0,m$0=- m;else var pos=1,m$0=m;
        var _bGn_=0;
        return fold_left$0
                 (function(acc,d)
                   {if(acc)return acc;
                    var v=Math.log(m$0 + d) / 0.693147180559945286;
                    if(Math.abs(Math.ceil(v) - v) < 1e-05)
                     {var _bGo_=pos?_jk_:_jo_;
                      caml_call3(pf(ppf),_jl_,_bGo_,v);
                      var _bGp_=pos?d < 0.?1:0:pos;
                      if(_bGp_)
                       var _bGq_=_bGp_;
                      else
                       var _bGu_=1 - pos,_bGq_=_bGu_?0. < d?1:0:_bGu_;
                      if(_bGq_)caml_call2(pf(ppf),_jm_,Math.abs(d));
                      var _bGr_=pos?0. < d?1:0:pos;
                      if(_bGr_)
                       var _bGs_=_bGr_;
                      else
                       var _bGt_=1 - pos,_bGs_=_bGt_?d < 0.?1:0:_bGt_;
                      if(_bGs_)caml_call2(pf(ppf),_jn_,Math.abs(d));
                      return 1}
                    return 0},
                  _bGn_,
                  _jj_)
                ?0
                :caml_call2(pf(ppf),_jp_,m$0)},
     pp_numeric_specs=
      function(ppf,param)
       {var
         maximum=param[3],
         minimum=param[2],
         multiple_of=param[1],
         _bGb_=[0,minimum,maximum];
        function _bGc_(ppf,param)
         {var _bGg_=param[1];
          if(! _bGg_ && ! param[2])return 0;
          var maximum=param[2];
          function _bGh_(ppf,param)
           {if(param)
             {var _bGl_=param[1],_bGm_=_bGl_[1];
              return num_672226188 <= _bGl_[2]
                      ?caml_call3(pf(ppf),_jq_,pp_num,_bGm_)
                      :caml_call3(pf(ppf),_jr_,pp_num,_bGm_)}
            return caml_call1(pf(ppf),_js_)}
          function _bGi_(ppf,param)
           {if(param)
             {var _bGj_=param[1],_bGk_=_bGj_[1];
              return num_672226188 <= _bGj_[2]
                      ?caml_call3(pf(ppf),_jt_,pp_num,_bGk_)
                      :caml_call3(pf(ppf),_ju_,pp_num,_bGk_)}
            return caml_call1(pf(ppf),_jv_)}
          return caml_call5(pf(ppf),_jw_,_bGi_,_bGg_,_bGh_,maximum)}
        var _bGd_=[0,multiple_of,minimum,maximum];
        function _bGe_(ppf,param)
         {if(param[1])
           {var switch$0=0;
            if(! param[2] && ! param[3])switch$0 = 1;
            if(! switch$0)return caml_call1(pf(ppf),_jx_)}
          return 0}
        function _bGf_(ppf,param)
         {if(param){var v=param[1];return caml_call2(pf(ppf),_jy_,v)}return 0}
        return caml_call7
                (pf(ppf),_jz_,_bGf_,multiple_of,_bGe_,_bGd_,_bGc_,_bGb_)},
     pp_path=
      function(ppf,path)
       {if(path)
         {var _bF__=path[1];
          if
           (typeof _bF__
            !==
            "number"
            &&
            num_331416730
            ===
            _bF__[1]
            &&
            !
            caml_string_notequal(_bF__[2],_jB_))
           {var _bF$_=path[2];
            if(_bF$_)
             {var _bGa_=_bF$_[1];
              if
               (typeof _bGa_
                !==
                "number"
                &&
                num_331416730
                ===
                _bGa_[1]
                &&
                !
                _bF$_[2])
               {var name=_bGa_[2];return caml_call2(pf(ppf),_jC_,name)}}}}
        return print_path_as_json_path(_jA_,ppf,path)},
     pp_element=
      function(ppf,element)
       {var _bFy_=element[7];
        if(_bFy_){var id=_bFy_[1];return caml_call2(pf(ppf),_jF_,id)}
        var _bFz_=element[6];
        if(_bFz_){var format=_bFz_[1];return caml_call2(pf(ppf),_jG_,format)}
        var _bFA_=element[4];
        if(_bFA_)
         {var
           cases=_bFA_[1],
           pp_sep=function(ppf,param){return caml_call1(pf(ppf),_jH_)},
           pp_string=0,
           _bFB_=
            function(ppf,_bF9_)
             {var v=_bF9_[2],repr=_bF9_[1];
              return pp$4(compact,pp_string,repr,ppf,v)},
           _bFC_=[0,pp_sep],
           _bFD_=
            function(_bF7_,_bF8_)
             {return pp_print_list(_bFC_,_bFB_,_bF7_,_bF8_)};
          return caml_call3(pf(ppf),_jI_,_bFD_,cases)}
        var _bFu_=element[1],switch$0=0;
        if(_bFu_)
         {var _bFv_=element[2],_bFw_=_bFu_[1];
          if(_bFv_)
           var
            description=_bFv_[1],
            match=
             [0,
              function(ppf,param)
               {return caml_call5
                        (pf(ppf),_jD_,pp_print_text,_bFw_,pp_print_text,description)}];
          else
           {var text=_bFw_;switch$0 = 1}}
        else
         {var _bFx_=element[2];
          if(_bFx_){var text=_bFx_[1];switch$0 = 1}else var match=0}
        if(switch$0)
         var
          match=
           [0,
            function(ppf,param)
             {return caml_call3(pf(ppf),_jE_,pp_print_text,text)}];
        if(match)
         {var
           pp_desc=match[1],
           stripped=
            [0,0,0,element[3],element[4],element[5],element[6],element[7]],
           _bFE_=element[5];
          if(typeof _bFE_ !== "number")
           switch(_bFE_[0])
            {case 0:
              var specs=_bFE_[1];
              return caml_call5
                      (pf(ppf),_jK_,pp_desc,0,pp_object_contents,specs);
             case 3:
              return caml_call5(pf(ppf),_jL_,pp_desc,0,pp_element,stripped)
             }
          return caml_call5(pf(ppf),_jJ_,pp_element,stripped,pp_desc,0)}
        var _bFF_=element[5];
        if(typeof _bFF_ === "number")
         switch(_bFF_)
          {case 0:return caml_call1(pf(ppf),_jM_);
           case 1:return caml_call1(pf(ppf),_jN_);
           case 2:return caml_call1(pf(ppf),_jO_);
           default:throw [0,Assert_failure,_jP_]}
        else
         switch(_bFF_[0])
          {case 0:
            var _bFG_=_bFF_[1];
            if(! _bFG_[1] && ! _bFG_[2] && ! _bFG_[3] && 0 === _bFG_[4])
             {var _bFH_=_bFG_[5];
              if(_bFH_ && 0 === _bFH_[1] && ! _bFG_[6] && ! _bFG_[7])
               return caml_call1(pf(ppf),_jR_)}
            return caml_call3(pf(ppf),_jQ_,pp_object_contents,_bFG_);
           case 1:
            var _bFI_=_bFF_[2],_bFJ_=_bFI_[2],switch$1=0,_bFK_=_bFF_[1];
            if(_bFJ_ && 0 === _bFJ_[1])switch$1 = 1;
            if(! switch$1)
             {var
               additional_items=_bFI_[4],
               first=[0,1],
               pp_sep$0=
                function(ppf,param)
                 {return first[1]?(first[1] = 0,0):caml_call1(pf(ppf),_jT_)};
              caml_call1(pf(ppf),_jU_);
              iter$0
               (function(elt)
                 {return caml_call5(pf(ppf),_jV_,pp_sep$0,0,pp_element,elt)},
                _bFK_);
              if(additional_items)
               {var _bFL_=additional_items[1],_bFM_=_bFL_[5],switch$2=0;
                if(typeof _bFM_ === "number" && 2 === _bFM_)
                 {caml_call3(pf(ppf),_jW_,pp_sep$0,0);switch$2 = 1}
                if(! switch$2)
                 caml_call5(pf(ppf),_jY_,pp_sep$0,0,pp_element,_bFL_)}
              return caml_call1(pf(ppf),_jX_)}
            break;
           case 2:
            var _bFN_=_bFF_[2],_bFO_=_bFN_[2],_bFP_=_bFF_[1],switch$3=0;
            if(_bFO_ && 0 === _bFO_[1])switch$3 = 1;
            if(! switch$3)
             {var _bFQ_=_bFN_[4];
              if(_bFQ_)
               {var _bFR_=_bFQ_[1],_bFS_=_bFR_[5];
                if(typeof _bFS_ === "number" && 2 === _bFS_)
                 return caml_call3(pf(ppf),_jZ_,pp_element,_bFP_);
                return caml_call5
                        (pf(ppf),_j0_,pp_element,_bFP_,pp_element,_bFR_)}
              return caml_call3(pf(ppf),_j1_,pp_element,_bFP_)}
            break;
           case 3:
            var _bFT_=_bFF_[1];
            if(3 <= _bFT_)
             {var _bFU_=_bFF_[2];
              if(_bFU_ && ! _bFU_[2])
               {var elt=_bFU_[1];
                return caml_call3(pf(ppf),_j7_,pp_element,elt)}}
            var
             elts=_bFF_[2],
             pp_sep$1=
              function(ppf,param)
               {switch(_bFT_)
                 {case 0:return caml_call1(pf(ppf),_j2_);
                  case 1:return caml_call1(pf(ppf),_j3_);
                  case 2:return caml_call1(pf(ppf),_j4_);
                  default:throw [0,Assert_failure,_j5_]}},
             _bFV_=[0,pp_sep$1],
             _bFW_=
              function(_bF5_,_bF6_)
               {return pp_print_list(_bFV_,pp_element,_bF5_,_bF6_)};
            return caml_call3(pf(ppf),_j6_,_bFW_,elts);
           case 4:
            var path=_bFF_[1];return caml_call3(pf(ppf),_j8_,pp_path,path);
           case 5:var id$0=_bFF_[1];return caml_call2(pf(ppf),_j9_,id$0);
           case 6:var uri=_bFF_[1];return caml_call3(pf(ppf),_j__,pp_hum,uri);
           case 7:
            var _bFX_=_bFF_[1],_bFY_=_bFX_[1];
            if(_bFY_)
             {if(0 === _bFX_[2] && ! _bFX_[3])
               {var pat=_bFY_[1];return caml_call2(pf(ppf),_ke_,pat)}}
            else
             if(0 === _bFX_[2] && ! _bFX_[3])return caml_call1(pf(ppf),_kf_);
            var
             max_length=_bFX_[3],
             min_length=_bFX_[2],
             _bFZ_=
              function(ppf,param)
               {if(param){var m=param[1];return caml_call2(pf(ppf),_j$_,m)}
                return 0},
             _bF0_=
              function(ppf,n)
               {var _bF4_=0 < n?1:0;
                return _bF4_?caml_call2(pf(ppf),_ka_,n):_bF4_},
             _bF1_=
              function(ppf,param)
               {if(param)
                 {var pat=param[1];return caml_call2(pf(ppf),_kb_,pat)}
                return caml_call1(pf(ppf),_kc_)};
            return caml_call7
                    (pf(ppf),_kd_,_bF1_,_bFY_,_bF0_,min_length,_bFZ_,max_length);
           case 8:
            var _bF2_=_bFF_[1];
            if(! _bF2_[1] && ! _bF2_[2] && ! _bF2_[3])
             return caml_call1(pf(ppf),_kh_);
            return caml_call3(pf(ppf),_kg_,pp_numeric_specs,_bF2_);
           default:
            var _bF3_=_bFF_[1];
            if(! _bF3_[1] && ! _bF3_[2] && ! _bF3_[3])
             return caml_call1(pf(ppf),_kj_);
            return caml_call3(pf(ppf),_ki_,pp_numeric_specs,_bF3_)}
        return caml_call1(pf(ppf),_jS_)},
     pp_object_contents=
      function(ppf,param)
       {var
         additional_properties=param[3],
         pattern_properties=param[2],
         properties=param[1],
         first=[0,1];
        function pp_sep(ppf,param)
         {return first[1]?(first[1] = 0,0):caml_call1(pf(ppf),_kk_)}
        iter$0
         (function(param)
           {var req=param[3],elt=param[2],name=param[1],_bFt_=req?_kl_:_kn_;
            return caml_call8
                    (pf(ppf),
                     _km_,
                     pp_sep,
                     0,
                     pp_string$0,
                     name,
                     _bFt_,
                     pp_element,
                     elt)},
          properties);
        iter$0
         (function(param)
           {var elt=param[2],name=param[1];
            return caml_call6(pf(ppf),_ko_,pp_sep,0,name,pp_element,elt)},
          pattern_properties);
        if(additional_properties)
         {var _bFr_=additional_properties[1],_bFs_=_bFr_[5];
          if(typeof _bFs_ === "number" && 2 === _bFs_)
           return caml_call3(pf(ppf),_kp_,pp_sep,0);
          return caml_call5(pf(ppf),_kq_,pp_sep,0,pp_element,_bFr_)}
        return 0},
     Cannot_parse=[num_248,_kr_,caml_fresh_oo_id(0)],
     Dangling_reference=[num_248,_ks_,caml_fresh_oo_id(0)],
     Bad_reference=[num_248,_kt_,caml_fresh_oo_id(0)],
     Unexpected=[num_248,_ku_,caml_fresh_oo_id(0)],
     Duplicate_definition=[num_248,_kv_,caml_fresh_oo_id(0)],
     print_error=
      function(print_unknown$0,ppf,exn)
       {if(exn[1] === Cannot_parse)
         {var
           exn$0=exn[3],
           path=exn[2],
           _bFf_=
            function(_bFp_,_bFq_)
             {return print_error(print_unknown$0,_bFp_,_bFq_)},
           _bFg_=
            function(_bFn_,_bFo_)
             {return print_path_as_json_path(_kw_,_bFn_,_bFo_)};
          return caml_call5(pf(ppf),_kx_,_bFg_,path,_bFf_,exn$0)}
        if(exn[1] === Dangling_reference)
         {var uri=exn[2],_bFh_=arg$1(0,uri);
          return caml_call2(pf(ppf),_ky_,_bFh_)}
        if(exn[1] === Bad_reference)
         {var str=exn[2];return caml_call2(pf(ppf),_kz_,str)}
        if(exn[1] === Unexpected)
         {var ex=exn[3],unex=exn[2];return caml_call3(pf(ppf),_kA_,unex,ex)}
        if(exn[1] === Duplicate_definition)
         {var
           defelt=exn[4],
           elt=exn[3],
           name=exn[2],
           _bFi_=
            function(_bFl_,_bFm_)
             {return print_path_as_json_pointer(_kB_,_bFl_,_bFm_)};
          return caml_call7
                  (pf(ppf),_kC_,_bFi_,name,pp_element,elt,pp_element,defelt)}
        if(exn[1] === Illegal_pointer_notation)
         {var msg=exn[4],pos=exn[3],notation=exn[2];
          return caml_call4(pf(ppf),_jc_,pos,notation,msg)}
        if(exn[1] === Unsupported_path_item)
         {var
           msg$0=exn[3],
           item=exn[2],
           _bFb_=
            typeof item === "number"
             ?num_926224370 <= item?_i__:_i$_
             :num_331416730 <= item[1]?_ja_:_jb_;
          return caml_call3(pf(ppf),_jd_,_bFb_,msg$0)}
        if(exn[1] === Cannot_merge)
         {var _bFc_=exn[2];
          if(_bFc_)
           {var
             _bFd_=
              function(_bFj_,_bFk_)
               {return print_path_as_json_path(_je_,_bFj_,_bFk_)};
            return caml_call3(pf(ppf),_jf_,_bFd_,_bFc_)}
          return caml_call1(pf(ppf),_jg_)}
        if(print_unknown$0)
         {var print_unknown=print_unknown$0[1];
          return caml_call2(print_unknown,ppf,exn)}
        var _bFe_=to_string$0(exn);
        return caml_call2(pf(ppf),_jh_,_bFe_)},
     _kD_=function(name,defs){return assoc(name,defs)},
     _kE_=function(name,defs){return mem_assoc(name,defs)},
     insert_definition=
      function(name,elt,defs)
       {function insert(param)
         {if(param)
           {var
             def=param[1],
             defelt=def[2],
             match=defelt[5],
             defname=def[1],
             rem=param[2];
            if(caml_notequal(defname,name))return [0,def,insert(rem)];
            if(typeof match === "number" && 3 <= match)
             {var rem$0=param[2];return [0,[0,name,elt],rem$0]}
            var rem$1=param[2];
            if(1 - eq_element(elt,defelt))
             throw [0,Duplicate_definition,name,elt,defelt];
            return [0,[0,name,elt],rem$1]}
          return [0,[0,name,elt],0]}
        return insert(defs)},
     Make$2=
      function(Repr)
       {function query(path,json)
         {var path$0=path,json$0=json;
          for(;;)
           {var match=caml_call1(Repr[1],json$0);
            if(path$0)
             {var _bE2_=path$0[1];
              if(typeof _bE2_ === "number")
               {if(num_926224370 === _bE2_ && typeof match !== "number")
                 {var _bE3_=match[1],_bE4_=path$0[2];
                  if(65 === _bE3_)
                   {var _bE5_=match[2];
                    if(_bE5_)
                     {var rem=_bE5_[2],v=_bE5_[1];
                      try
                       {var _bE6_=query(_bE4_,v);return _bE6_}
                      catch(_bE$_)
                       {_bE$_ = caml_wrap_exception(_bE$_);
                        if(_bE$_ === Not_found)
                         {var json$1=caml_call1(Repr[2],[0,65,rem]),json$0=json$1;
                          continue}
                        throw _bE$_}}}
                  else
                   if(79 === _bE3_)
                    {var _bE7_=match[2];
                     if(_bE7_)
                      {var rem$0=_bE7_[2],match$0=_bE7_[1],v$0=match$0[2];
                       try
                        {var _bE8_=query(_bE4_,v$0);return _bE8_}
                       catch(_bFa_)
                        {_bFa_ = caml_wrap_exception(_bFa_);
                         if(_bFa_ === Not_found)
                          {var json$2=caml_call1(Repr[2],[0,79,rem$0]),json$0=json$2;
                           continue}
                         throw _bFa_}}}}}
              else
               {var _bE9_=_bE2_[1];
                if(num_784200974 === _bE9_)
                 {if(typeof match !== "number" && 65 === match[1])
                   {var
                     cells=match[2],
                     rempath=path$0[2],
                     i=_bE2_[2],
                     i$0=0 <= i?i:length(cells) - i | 0,
                     json$3=nth(cells,i$0),
                     path$0=rempath,
                     json$0=json$3;
                    continue}}
                else
                 if
                  (num_331416730
                   ===
                   _bE9_
                   &&
                   typeof match
                   !==
                   "number"
                   &&
                   79
                   ===
                   match[1])
                  {var _bE__=match[2];
                   if(_bE__)
                    {var
                      rem$1=_bE__[2],
                      match$1=_bE__[1],
                      v$1=match$1[2],
                      n=match$1[1],
                      rempath$0=path$0[2],
                      n$0=_bE2_[2];
                     if(caml_string_equal(n$0,n))
                      {var path$0=rempath$0,json$0=v$1;continue}
                     var json$4=caml_call1(Repr[2],[0,79,rem$1]),json$0=json$4;
                     continue}}}
              throw Not_found}
            return json$0}}
        function query_all(path,json)
         {var res=[0,0];
          function query(path,json)
           {var path$0=path,json$0=json;
            for(;;)
             {var match=caml_call1(Repr[1],json$0);
              if(path$0)
               {var _bEW_=path$0[1];
                if(typeof _bEW_ === "number")
                 {if(num_926224370 === _bEW_ && typeof match !== "number")
                   {var _bEX_=match[1],_bEY_=path$0[2];
                    if(65 === _bEX_)
                     {var cells=match[2];
                      return iter$0
                              (function(_bE1_){return query(_bEY_,_bE1_)},cells)}
                    if(79 === _bEX_)
                     {var fields=match[2];
                      return iter$0
                              (function(param){var v=param[2];return query(_bEY_,v)},
                               fields)}}}
                else
                 {var _bEZ_=_bEW_[1];
                  if(num_784200974 === _bEZ_)
                   {if(typeof match !== "number" && 65 === match[1])
                     {var
                       cells$0=match[2],
                       rempath=path$0[2],
                       i=_bEW_[2],
                       i$0=0 <= i?i:length(cells$0) - i | 0,
                       json$1=nth(cells$0,i$0),
                       path$0=rempath,
                       json$0=json$1;
                      continue}}
                  else
                   if
                    (num_331416730
                     ===
                     _bEZ_
                     &&
                     typeof match
                     !==
                     "number"
                     &&
                     79
                     ===
                     match[1])
                    {var _bE0_=match[2];
                     if(_bE0_)
                      {var
                        rem=_bE0_[2],
                        match$0=_bE0_[1],
                        v=match$0[2],
                        n=match$0[1],
                        rempath$0=path$0[2],
                        n$0=_bEW_[2];
                       if(caml_string_equal(n$0,n))
                        {var path$0=rempath$0,json$0=v;continue}
                       var json$2=caml_call1(Repr[2],[0,79,rem]),json$0=json$2;
                       continue}}}
                return 0}
              res[1] = [0,json$0,res[1]];
              return 0}}
          query(path,json);
          return res[1]}
        function _bBI_(param,_bEV_)
         {var r=_bEV_[1],l=param[1];return caml_string_compare(l,r)}
        function sort_fields(_bEU_){return fast_sort(_bBI_,_bEU_)}
        function merge(l,r)
         {function merge(path,l,r)
           {var
             match=caml_call1(Repr[1],l),
             match$0=caml_call1(Repr[1],r),
             switch$0=0;
            if(typeof match === "number")
             {if(num_870828711 === match){var v=match$0;switch$0 = 1}}
            else
             {var _bEN_=match[1];
              if(65 === _bEN_)
               {if(typeof match$0 !== "number" && 65 === match$0[1])
                 {var r$0=match$0[2],l$0=match[2],i=0,acc=0,l$2=l$0,r$2=r$0;
                  for(;;)
                   {if(l$2)
                     {if(r$2)
                       {var
                         r$3=r$2[2],
                         r$4=r$2[1],
                         l$3=l$2[2],
                         l$4=l$2[1],
                         item=merge([0,[0,num_784200974,i],path],l$4,r$4),
                         acc$0=[0,item,acc],
                         i$0=i + 1 | 0,
                         i=i$0,
                         acc=acc$0,
                         l$2=l$3,
                         r$2=r$3;
                        continue}
                      var rem=l$2}
                    else
                     var rem=r$2;
                    var _bEO_=[0,65,rev_append(acc,rem)];
                    return caml_call1(Repr[2],_bEO_)}}}
              else
               if
                (79
                 ===
                 _bEN_
                 &&
                 typeof match$0
                 !==
                 "number"
                 &&
                 79
                 ===
                 match$0[1])
                {var
                  r$1=match$0[2],
                  l$1=match[2],
                  last=sort_fields(append(l$1,r$1)),
                  last$0=last;
                 for(;;)
                  {if(last$0)
                    {var _bEP_=last$0[2];
                     if(_bEP_)
                      {var
                        rem$0=_bEP_[2],
                        _bEQ_=_bEP_[1],
                        rv=_bEQ_[2],
                        rf=_bEQ_[1],
                        match$1=last$0[1],
                        lv=match$1[2],
                        lf=match$1[1];
                       if(caml_string_equal(lf,rf))
                        {merge([0,[0,num_331416730,lf],path],lv,rv);
                         var last$0=rem$0;
                         continue}
                       var last$0=_bEP_;
                       continue}}
                   return caml_call1(Repr[2],[0,79,last$0])}}}
            if(! switch$0)
             {if(num_870828711 !== match$0)
               {var
                 canon=
                  function(v)
                   {var match=caml_call1(Repr[1],v);
                    if(typeof match !== "number")
                     {var _bER_=match[1];
                      if(65 === _bER_)
                       {var l=match[2],_bES_=[0,65,map$1(canon,l)];
                        return caml_call1(Repr[2],_bES_)}
                      if(79 === _bER_)
                       {var
                         l$0=match[2],
                         _bET_=
                          [0,
                           79,
                           sort_fields
                            (map$1
                              (function(param)
                                {var o=param[2],n=param[1];return [0,n,canon(o)]},
                               l$0))];
                        return caml_call1(Repr[2],_bET_)}}
                    return v},
                 _bEM_=canon(r);
                if(caml_equal(canon(l),_bEM_))return l;
                throw [0,Cannot_merge,rev(path)]}
              var v=match}
            return caml_call1(Repr[2],v)}
          return merge(0,l,r)}
        function _bBJ_(opt,path,value,root)
         {if(opt)var sth=opt[1],merge$0=sth;else var merge$0=merge;
          function revpath(sub)
           {var acc=0,l=path;
            for(;;)
             {if(l === sub)return rev(acc);
              if(l)
               {var l$0=l[2],item=l[1],acc$0=[0,item,acc],acc=acc$0,l=l$0;
                continue}
              throw [0,Assert_failure,_i9_]}}
          function merge$1(path,l,r)
           {try
             {var _bEL_=caml_call2(merge$0,l,r);return _bEL_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] === Cannot_merge)
               {var sub=exn[2];
                throw [0,Cannot_merge,append(revpath(path),sub)]}
              throw exn}}
          function nulls(acc,n,last)
           {var acc$0=acc,n$0=n;
            for(;;)
             {if(0 < n$0)
               {var
                 n$1=n$0 - 1 | 0,
                 acc$1=[0,caml_call1(Repr[2],num_870828711),acc$0],
                 acc$0=acc$1,
                 n$0=n$1;
                continue}
              return rev([0,last,acc$0])}}
          function insert(root,path)
           {if(root)
             var repr=root[1],root$0=[0,caml_call1(Repr[1],repr)];
            else
             var root$0=0;
            if(path)
             {var _bEo_=path[1],switch$0=0;
              if(typeof _bEo_ === "number")
               if(num_926224370 <= _bEo_)
                {var _bEp_=path[2];
                 if(root$0)
                  {var _bEq_=root$0[1];
                   if(typeof _bEq_ !== "number")
                    {var _bEs_=_bEq_[1];
                     if(65 === _bEs_)
                      {var
                        cells=_bEq_[2],
                        _bEt_=
                         [0,
                          65,
                          map$1(function(root){return insert([0,root],_bEp_)},cells)];
                       return caml_call1(Repr[2],_bEt_)}
                     if(79 === _bEs_)
                      {var
                        fields=_bEq_[2],
                        _bEu_=
                         [0,
                          79,
                          map$1
                           (function(param)
                             {var root=param[2],n=param[1];
                              return [0,n,insert([0,root],_bEp_)]},
                            fields)];
                       return caml_call1(Repr[2],_bEu_)}}
                   if(! _bEp_)
                    {var root$1=root$0[1];
                     return merge$1(path,value,caml_call1(Repr[2],root$1))}}}
               else
                {var _bEv_=path[2];
                 if(root$0)
                  {var _bEw_=root$0[1];
                   if(typeof _bEw_ !== "number" && 65 === _bEw_[1])
                    {var
                      cells$0=_bEw_[2],
                      _bEx_=[0,insert(0,_bEv_),0],
                      _bEy_=[0,65,rev_append(rev(cells$0),_bEx_)];
                     return caml_call1(Repr[2],_bEy_)}}}
              else
               if(num_331416730 <= _bEo_[1])
                {var _bEz_=path[2],_bEA_=_bEo_[2];
                 if(! root$0)
                  {var _bED_=[0,79,[0,[0,_bEA_,insert(0,_bEz_)],0]];
                   return caml_call1(Repr[2],_bED_)}
                 var _bEB_=root$0[1];
                 if(typeof _bEB_ === "number")
                  switch$0 = 1;
                 else
                  {if(79 === _bEB_[1])
                    {var fields$0=_bEB_[2],acc=0,fields$1=fields$0;
                     for(;;)
                      {if(fields$1)
                        {var
                          rem=fields$1[2],
                          other=fields$1[1],
                          root$2=other[2],
                          n=other[1];
                         if(! caml_string_equal(_bEA_,n))
                          {var acc$0=[0,other,acc],acc=acc$0,fields$1=rem;continue}
                         var
                          _bEC_=
                           rev_append([0,[0,_bEA_,insert([0,root$2],_bEz_)],acc],rem)}
                       else
                        var _bEC_=rev([0,[0,_bEA_,insert(0,_bEz_)],acc]);
                       return caml_call1(Repr[2],[0,79,_bEC_])}}
                   switch$0 = 1}}
               else
                {var _bEE_=_bEo_[2];
                 if(root$0)
                  {var _bEF_=root$0[1];
                   if(typeof _bEF_ !== "number" && 65 === _bEF_[1])
                    {var
                      cells$1=_bEF_[2],
                      rempath$1=path[2],
                      i=0 <= _bEE_?_bEE_:length(cells$1) - _bEE_ | 0;
                     if(i < 0)throw [0,Cannot_merge,revpath(path)];
                     var acc$1=0,n$0=i,cells$2=cells$1;
                     for(;;)
                      {if(cells$2)
                        {var _bEJ_=cells$2[2],_bEK_=cells$2[1];
                         if(0 !== n$0)
                          {var
                            n$1=n$0 - 1 | 0,
                            acc$2=[0,_bEK_,acc$1],
                            acc$1=acc$2,
                            n$0=n$1,
                            cells$2=_bEJ_;
                           continue}
                         var
                          _bEI_=
                           rev_append([0,insert([0,_bEK_],rempath$1),acc$1],_bEJ_)}
                       else
                        var _bEI_=nulls(acc$1,n$0,insert(0,rempath$1));
                       return caml_call1(Repr[2],[0,65,_bEI_])}}}
                 if(0 !== _bEE_)
                  {if(! root$0)
                    {var rempath$0=path[2];
                     if(_bEE_ < 0)throw [0,Cannot_merge,revpath(path)];
                     var
                      _bEG_=insert(0,rempath$0),
                      _bEH_=[0,65,nulls(0,max(0,_bEE_ - 1 | 0),_bEG_)];
                     return caml_call1(Repr[2],_bEH_)}
                   switch$0 = 1}}
              if(! switch$0 && ! root$0)
               {var rempath=path[2],_bEr_=[0,65,[0,insert(0,rempath),0]];
                return caml_call1(Repr[2],_bEr_)}
              throw [0,Cannot_merge,revpath(path)]}
            if(root$0)
             {var value$0=root$0[1];
              return merge$1(path,value,caml_call1(Repr[2],value$0))}
            return value}
          return insert([0,root],path)}
        function replace(path,value,root)
         {return _bBJ_([0,function(value,prev){return value}],path,value,root)}
        function insert(path,value,root){return _bBJ_(0,path,value,root)}
        var Query=[0,query,query_all,insert,replace,merge];
        function to_json(schema)
         {function obj(l){return caml_call1(Repr[2],[0,79,l])}
          function set_always(f,v){return [0,[0,f,caml_call1(Repr[2],v)],0]}
          function set_if_some(f,v,cb)
           {if(v)
             {var v$0=v[1],_bEn_=caml_call1(cb,v$0);
              return [0,[0,f,caml_call1(Repr[2],_bEn_)],0]}
            return 0}
          function set_if_cons(f,v,cb)
           {if(v)
             {var _bEm_=caml_call1(cb,v);
              return [0,[0,f,caml_call1(Repr[2],_bEm_)],0]}
            return 0}
          function set_if_neq(f,v$0,v,cb)
           {if(caml_notequal(v$0,v))
             {var _bEl_=caml_call1(cb,v$0);
              return [0,[0,f,caml_call1(Repr[2],_bEl_)],0]}
            return 0}
          function format_element(param)
           {var
             format=param[6],
             kind=param[5],
             enum$0=param[4],
             default$0=param[3],
             description=param[2],
             title=param[1],
             _bC$_=
              set_if_some(_kF_,format,function(s){return [0,num_976970511,s]}),
             _bDa_=
              append
               (set_if_some
                 (_kG_,
                  enum$0,
                  function(js)
                   {return [0,
                            65,
                            map$1(function(_bEk_){return any_to_repr(Repr,_bEk_)},js)]}),
                _bC$_),
             _bDb_=
              append
               (set_if_some
                 (_kH_,
                  default$0,
                  function(j)
                   {var _bEj_=any_to_repr(Repr,j);
                    return caml_call1(Repr[1],_bEj_)}),
                _bDa_);
            if(typeof kind === "number")
             switch(kind)
              {case 0:var _bDc_=set_always(_kJ_,_kI_);break;
               case 1:var _bDc_=set_always(_kN_,_kM_);break;
               case 2:var _bDc_=0;break;
               default:var _bDc_=invalid_arg(_kO_)}
            else
             switch(kind[0])
              {case 0:
                var
                 specs=kind[1],
                 _bDf_=specs[1],
                 _bDg_=0,
                 required=
                  fold_left$0
                   (function(r,param)
                     {var p=param[3],n=param[1];
                      return p?[0,caml_call1(Repr[2],[0,num_976970511,n]),r]:r},
                    _bDg_,
                    _bDf_),
                 _bDh_=specs[1],
                 properties=
                  map$1
                   (function(param)
                     {var elt=param[2],n=param[1];
                      return [0,n,obj(format_element(elt))]},
                    _bDh_),
                 _bDi_=
                  function(fs)
                   {var
                     property_dependencies=
                      map$1
                       (function(param)
                         {var
                           ls=param[2],
                           n=param[1],
                           _bEi_=
                            [0,
                             65,
                             map$1
                              (function(s){return caml_call1(Repr[2],[0,num_976970511,s])},
                               ls)];
                          return [0,n,caml_call1(Repr[2],_bEi_)]},
                        fs);
                    return [0,79,property_dependencies]},
                 _bDj_=set_if_cons(_kP_,specs[7],_bDi_),
                 _bDk_=
                  function(fs)
                   {return [0,
                            79,
                            map$1
                             (function(param)
                               {var elt=param[2],n=param[1];
                                return [0,n,obj(format_element(elt))]},
                              fs)]},
                 _bDl_=append(set_if_cons(_kQ_,specs[6],_bDk_),_bDj_),
                 _bDm_=function(i){return [0,num_365180284,i]},
                 _bDn_=append(set_if_some(_kR_,specs[5],_bDm_),_bDl_),
                 _bDo_=function(i){return [0,num_365180284,i]},
                 _bDp_=append(set_if_neq(_kS_,specs[4],0,_bDo_),_bDn_),
                 _bDq_=
                  function(param)
                   {if(param)
                     {var elt=param[1];return [0,79,format_element(elt)]}
                    return _kT_},
                 _bDr_=[0,element(2)],
                 _bDs_=append(set_if_neq(_kU_,specs[3],_bDr_,_bDq_),_bDp_),
                 _bDt_=
                  function(fs)
                   {return [0,
                            79,
                            map$1
                             (function(param)
                               {var elt=param[2],n=param[1];
                                return [0,n,obj(format_element(elt))]},
                              fs)]},
                 _bDu_=append(set_if_cons(_kV_,specs[2],_bDt_),_bDs_),
                 _bDv_=
                  append
                   (set_if_cons(_kW_,required,function(l){return [0,65,l]}),
                    _bDu_),
                 _bDw_=append(set_always(_kX_,[0,79,properties]),_bDv_),
                 _bDc_=append(set_always(_kZ_,_kY_),_bDw_);
                break;
               case 1:
                var
                 specs$0=kind[2],
                 elts=kind[1],
                 _bDx_=
                  function(param)
                   {if(param)
                     {var elt=param[1];return [0,79,format_element(elt)]}
                    return _k0_},
                 _bDy_=[0,element(2)],
                 _bDz_=set_if_neq(_k1_,specs$0[4],_bDy_,_bDx_),
                 _bDA_=function(b){return [0,num_737456202,b]},
                 _bDB_=append(set_if_neq(_k2_,specs$0[3],0,_bDA_),_bDz_),
                 _bDC_=function(i){return [0,num_365180284,i]},
                 _bDD_=append(set_if_some(_k3_,specs$0[2],_bDC_),_bDB_),
                 _bDE_=function(i){return [0,num_365180284,i]},
                 _bDF_=append(set_if_neq(_k4_,specs$0[1],0,_bDE_),_bDD_),
                 _bDG_=
                  append
                   (set_always
                     (_k5_,
                      [0,
                       65,
                       map$1(function(elt){return obj(format_element(elt))},elts)]),
                    _bDF_),
                 _bDc_=append(set_always(_k7_,_k6_),_bDG_);
                break;
               case 2:
                var
                 match=kind[2],
                 unique_items=match[3],
                 max_items=match[2],
                 min_items=match[1],
                 elt=kind[1],
                 _bDH_=
                  set_if_neq
                   (_k8_,
                    unique_items,
                    0,
                    function(b){return [0,num_737456202,b]}),
                 _bDI_=
                  append
                   (set_if_some
                     (_k9_,max_items,function(i){return [0,num_365180284,i]}),
                    _bDH_),
                 _bDJ_=
                  append
                   (set_if_neq
                     (_k__,min_items,0,function(i){return [0,num_365180284,i]}),
                    _bDI_),
                 _bDK_=
                  append(set_always(_k$_,[0,79,format_element(elt)]),_bDJ_),
                 _bDc_=append(set_always(_lb_,_la_),_bDK_);
                break;
               case 3:
                var
                 elts$0=kind[2],
                 c=kind[1],
                 _bDL_=
                  [0,
                   65,
                   map$1(function(elt){return obj(format_element(elt))},elts$0)];
                switch(c)
                 {case 0:var _bDM_=_lc_;break;
                  case 1:var _bDM_=_ld_;break;
                  case 2:var _bDM_=_le_;break;
                  default:var _bDM_=_lf_}
                var _bDc_=set_always(_bDM_,_bDL_);
                break;
               case 4:
                var
                 path=kind[1],
                 _bDc_=
                  set_always
                   (_lh_,
                    [0,num_976970511,symbol(_lg_,json_pointer_of_path(0,path))]);
                break;
               case 5:
                var
                 name=kind[1],
                 _bDc_=set_always(_lj_,[0,num_976970511,symbol(_li_,name)]);
                break;
               case 6:
                var
                 uri=kind[1],
                 _bDc_=set_always(_lk_,[0,num_976970511,arg$1(0,uri)]);
                break;
               case 7:
                var
                 match$0=kind[1],
                 max_length=match$0[3],
                 min_length=match$0[2],
                 pattern=match$0[1],
                 _bDN_=
                  set_if_some
                   (_ll_,pattern,function(s){return [0,num_976970511,s]}),
                 _bDO_=
                  append
                   (set_if_some
                     (_lm_,max_length,function(i){return [0,num_365180284,i]}),
                    _bDN_),
                 _bDP_=
                  append
                   (set_if_neq
                     (_ln_,min_length,0,function(i){return [0,num_365180284,i]}),
                    _bDO_),
                 _bDc_=append(set_always(_lp_,_lo_),_bDP_);
                break;
               case 8:
                var specs$1=kind[1],_bDQ_=specs$1[3];
                if(_bDQ_)
                 {var _bDR_=_bDQ_[1],_bDS_=_bDR_[1];
                  if(num_672226188 <= _bDR_[2])
                   var
                    _bDT_=
                     [0,[0,_lq_,caml_call1(Repr[2],[0,num_365180284,_bDS_])],0];
                  else
                   var
                    _bD4_=[0,[0,_lz_,caml_call1(Repr[2],_ly_)],0],
                    _bDT_=
                     [0,
                      [0,_lA_,caml_call1(Repr[2],[0,num_365180284,_bDS_])],
                      _bD4_];
                  var _bDU_=_bDT_}
                else
                 var _bDU_=0;
                var _bDV_=specs$1[2];
                if(_bDV_)
                 {var _bDW_=_bDV_[1],_bDX_=_bDW_[1];
                  if(num_672226188 <= _bDW_[2])
                   var
                    _bDY_=
                     [0,[0,_lr_,caml_call1(Repr[2],[0,num_365180284,_bDX_])],0];
                  else
                   var
                    _bD3_=[0,[0,_lw_,caml_call1(Repr[2],_lv_)],0],
                    _bDY_=
                     [0,
                      [0,_lx_,caml_call1(Repr[2],[0,num_365180284,_bDX_])],
                      _bD3_];
                  var _bDZ_=_bDY_}
                else
                 var _bDZ_=0;
                var
                 _bD0_=append(_bDZ_,_bDU_),
                 _bD1_=function(v){return [0,num_365180284,v]},
                 _bD2_=append(set_if_some(_ls_,specs$1[1],_bD1_),_bD0_),
                 _bDc_=append(set_always(_lu_,_lt_),_bD2_);
                break;
               default:
                var specs$2=kind[1],_bD5_=specs$2[3];
                if(_bD5_)
                 {var _bD6_=_bD5_[1],_bD7_=_bD6_[1];
                  if(num_672226188 <= _bD6_[2])
                   var
                    _bD8_=
                     [0,[0,_lB_,caml_call1(Repr[2],[0,num_365180284,_bD7_])],0];
                  else
                   var
                    _bEh_=[0,[0,_lK_,caml_call1(Repr[2],_lJ_)],0],
                    _bD8_=
                     [0,
                      [0,_lL_,caml_call1(Repr[2],[0,num_365180284,_bD7_])],
                      _bEh_];
                  var _bD9_=_bD8_}
                else
                 var _bD9_=0;
                var _bD__=specs$2[2];
                if(_bD__)
                 {var _bD$_=_bD__[1],_bEa_=_bD$_[1];
                  if(num_672226188 <= _bD$_[2])
                   var
                    _bEb_=
                     [0,[0,_lC_,caml_call1(Repr[2],[0,num_365180284,_bEa_])],0];
                  else
                   var
                    _bEg_=[0,[0,_lH_,caml_call1(Repr[2],_lG_)],0],
                    _bEb_=
                     [0,
                      [0,_lI_,caml_call1(Repr[2],[0,num_365180284,_bEa_])],
                      _bEg_];
                  var _bEc_=_bEb_}
                else
                 var _bEc_=0;
                var
                 _bEd_=append(_bEc_,_bD9_),
                 _bEe_=function(v){return [0,num_365180284,v]},
                 _bEf_=append(set_if_some(_lD_,specs$2[1],_bEe_),_bEd_),
                 _bDc_=append(set_always(_lF_,_lE_),_bEf_)}
            var
             _bDd_=append(_bDc_,_bDb_),
             _bDe_=
              append
               (set_if_some
                 (_kK_,description,function(s){return [0,num_976970511,s]}),
                _bDd_);
            return append
                    (set_if_some
                      (_kL_,title,function(s){return [0,num_976970511,s]}),
                     _bDe_)}
          var
           _bC7_=schema[3],
           _bC8_=format_element(schema[1]),
           _bC9_=obj(append(set_always(_lM_,[0,num_976970511,version]),_bC8_));
          return fold_left$0
                  (function(acc,param)
                    {var elt=param[2],n=param[1],_bC__=obj(format_element(elt));
                     return caml_call3(Query[3],n,_bC__,acc)},
                   _bC9_,
                   _bC7_)}
        function unexpected(kind,expected)
         {if(typeof kind === "number")
           var kind$0=_lN_;
          else
           {var _bC2_=kind[1];
            if(65 === _bC2_)
             var _bC3_=kind[2]?_lO_:_lP_,_bC4_=_bC3_;
            else
             if(num_365180284 <= _bC2_)
              var _bC4_=num_737456202 <= _bC2_?_lQ_:_lR_;
             else
              if(79 <= _bC2_)
               var _bC5_=kind[2]?_lS_:_lT_,_bC4_=_bC5_;
              else
               var
                _bC6_=caml_string_notequal(kind[2],_lU_)?_lV_:_lW_,
                _bC4_=_bC6_;
            var kind$0=_bC4_}
          return [0,Cannot_parse,0,[0,Unexpected,kind$0,expected]]}
        function at_path(p,exn)
         {if(exn[1] === Cannot_parse)
           {var err=exn[3],l=exn[2];return [0,Cannot_parse,append(p,l),err]}
          return exn}
        function at_field(n)
         {var _bC0_=[0,[0,num_331416730,n],0];
          return function(_bC1_){return at_path(_bC0_,_bC1_)}}
        function at_index(i)
         {var _bCY_=[0,[0,num_784200974,i],0];
          return function(_bCZ_){return at_path(_bCY_,_bCZ_)}}
        function of_json(json)
         {function opt_field_view(obj,n)
           {var match=caml_call1(Repr[1],obj);
            if(typeof match !== "number" && 79 === match[1])
             {var ls=match[2];
              try
               {var _bCV_=assoc(n,ls),_bCW_=[0,caml_call1(Repr[1],_bCV_)];
                return _bCW_}
              catch(_bCX_)
               {_bCX_ = caml_wrap_exception(_bCX_);
                if(_bCX_ === Not_found)return 0;
                throw _bCX_}}
            return 0}
          function opt_string_field(obj,n)
           {var match=opt_field_view(obj,n);
            if(match)
             {var _bCT_=match[1];
              if(typeof _bCT_ !== "number" && num_976970511 === _bCT_[1])
               {var s=_bCT_[2];return [0,s]}
              var _bCU_=unexpected(_bCT_,_lX_);
              throw caml_call1(at_field(n),_bCU_)}
            return 0}
          function opt_bool_field(def,obj,n)
           {var match=opt_field_view(obj,n);
            if(match)
             {var _bCR_=match[1];
              if(typeof _bCR_ !== "number" && num_737456202 === _bCR_[1])
               {var b=_bCR_[2];return b}
              var _bCS_=unexpected(_bCR_,_lY_);
              throw caml_call1(at_field(n),_bCS_)}
            return def}
          function opt_int_field(obj,n)
           {var match=opt_field_view(obj,n);
            if(match)
             {var _bCP_=match[1];
              if(typeof _bCP_ !== "number" && num_365180284 === _bCP_[1])
               {var f=_bCP_[2];
                if
                 (caml_modf_float(f)[1]
                  ==
                  0.
                  &&
                  f
                  <=
                  9007199254740992.
                  &&
                  -9007199254740992.
                  <=
                  f)
                 return [0,f]}
              var _bCQ_=unexpected(_bCP_,_lZ_);
              throw caml_call1(at_field(n),_bCQ_)}
            return 0}
          function opt_length_field(obj,n)
           {var match=opt_field_view(obj,n);
            if(match)
             {var _bCN_=match[1];
              if(typeof _bCN_ !== "number" && num_365180284 === _bCN_[1])
               {var f=_bCN_[2];
                if(caml_modf_float(f)[1] == 0. && f <= 1073741824. && 0. <= f)
                 return [0,f | 0]}
              var _bCO_=unexpected(_bCN_,_l0_);
              throw caml_call1(at_field(n),_bCO_)}
            return 0}
          function opt_float_field(obj,n)
           {var match=opt_field_view(obj,n);
            if(match)
             {var _bCL_=match[1];
              if(typeof _bCL_ !== "number" && num_365180284 === _bCL_[1])
               {var f=_bCL_[2];return [0,f]}
              var _bCM_=unexpected(_bCL_,_l1_);
              throw caml_call1(at_field(n),_bCM_)}
            return 0}
          function opt_array_field(obj,n)
           {var match=opt_field_view(obj,n);
            if(match)
             {var _bCJ_=match[1];
              if(typeof _bCJ_ !== "number" && 65 === _bCJ_[1])
               {var s=_bCJ_[2];return [0,s]}
              var _bCK_=unexpected(_bCJ_,_l2_);
              throw caml_call1(at_field(n),_bCK_)}
            return 0}
          function opt_uri_field(obj,n)
           {var match=opt_string_field(obj,n);
            if(match)
             {var uri=match[1];
              try
               {var uri$0=canonicalize(of_string$0(uri))}
              catch(_bCI_)
               {throw [0,Cannot_parse,0,[0,Bad_reference,symbol(uri,_l3_)]]}
              return [0,uri$0]}
            return 0}
          var match=opt_uri_field(json,_l4_);
          if(match)
           var uri=match[1],schema_source=with_fragment(uri,0);
          else
           var schema_source=empty$1;
          var collected_definitions=[0,0],collected_id_refs=[0,0],ids=0;
          function parse_element_kind(source,json,name)
           {function integer_specs(json)
             {var multiple_of=opt_int_field(json,_mr_);
              if(opt_bool_field(0,json,_ms_))
               {var match=opt_int_field(json,_mt_);
                if(! match)throw [0,Failure,err$1];
                var v=match[1],minimum=[0,[0,v,num_672226188]]}
              else
               {var match$2=opt_int_field(json,_mx_);
                if(match$2)
                 var v$2=match$2[1],_bCH_=[0,[0,v$2,num_407121086]];
                else
                 var _bCH_=0;
                var minimum=_bCH_}
              if(opt_bool_field(0,json,_mu_))
               {var match$0=opt_int_field(json,_mv_);
                if(! match$0)throw [0,Failure,err$0];
                var v$0=match$0[1],maximum=[0,[0,v$0,num_672226188]]}
              else
               {var match$1=opt_int_field(json,_mw_);
                if(match$1)
                 var v$1=match$1[1],_bCG_=[0,[0,v$1,num_407121086]];
                else
                 var _bCG_=0;
                var maximum=_bCG_}
              return [0,multiple_of,minimum,maximum]}
            function numeric_specs(json)
             {var multiple_of=opt_float_field(json,_my_);
              if(opt_bool_field(0,json,_mz_))
               {var match=opt_float_field(json,_mA_);
                if(! match)throw [0,Failure,err$3];
                var v=match[1],minimum=[0,[0,v,num_672226188]]}
              else
               {var match$2=opt_float_field(json,_mE_);
                if(match$2)
                 var v$2=match$2[1],_bCF_=[0,[0,v$2,num_407121086]];
                else
                 var _bCF_=0;
                var minimum=_bCF_}
              if(opt_bool_field(0,json,_mB_))
               {var match$0=opt_float_field(json,_mC_);
                if(! match$0)throw [0,Failure,err$2];
                var v$0=match$0[1],maximum=[0,[0,v$0,num_672226188]]}
              else
               {var match$1=opt_float_field(json,_mD_);
                if(match$1)
                 var v$1=match$1[1],_bCE_=[0,[0,v$1,num_407121086]];
                else
                 var _bCE_=0;
                var maximum=_bCE_}
              return [0,multiple_of,minimum,maximum]}
            if(caml_string_notequal(name,_mF_))
             {if(caml_string_notequal(name,_mG_))
               {if(caml_string_notequal(name,_mH_))
                 {if(caml_string_notequal(name,_mI_))
                   {if(caml_string_notequal(name,_mJ_))
                     {if(caml_string_notequal(name,_mK_))
                       {if(caml_string_notequal(name,_mL_))
                         throw [0,Cannot_parse,0,[0,Unexpected,name,_mM_]];
                        var
                         pattern=opt_string_field(json,_mN_),
                         min_length=opt_length_field(json,_mO_),
                         max_length=opt_length_field(json,_mP_);
                        if(min_length)
                         var l=min_length[1],min_length$0=l;
                        else
                         var min_length$0=0;
                        var specs=[0,pattern,min_length$0,max_length];
                        return [7,specs]}
                      var match=opt_array_field(json,_mQ_);
                      if(match)
                       var
                        l$0=match[1],
                        items=
                         function(i,acc,param)
                          {var i$0=i,acc$0=acc,param$0=param;
                           for(;;)
                            {if(param$0)
                              {var _bCB_=param$0[1];
                               if(typeof _bCB_ !== "number" && num_976970511 === _bCB_[1])
                                {var
                                  param$1=param$0[2],
                                  s=_bCB_[2],
                                  acc$1=[0,s,acc$0],
                                  i$1=i$0 + 1 | 0,
                                  i$0=i$1,
                                  acc$0=acc$1,
                                  param$0=param$1;
                                 continue}
                               var
                                _bCC_=unexpected(_bCB_,_mR_),
                                _bCD_=caml_call1(at_index(i$0),_bCC_);
                               throw caml_call1(at_field(_mS_),_bCD_)}
                             return rev(acc$0)}},
                        required=items(0,0,map$1(Repr[1],l$0));
                      else
                       var required=0;
                      var match$0=opt_field_view(json,_mT_);
                      if(match$0)
                       {var _bCe_=match$0[1],switch$0=0;
                        if(typeof _bCe_ !== "number" && 79 === _bCe_[1])
                         {var props=_bCe_[2],acc=0,param=props;
                          for(;;)
                           {if(param)
                             {var
                               tl=param[2],
                               match$1=param[1],
                               elt=match$1[2],
                               n=match$1[1];
                              try
                               {var elt$0=parse_element(source,elt)}
                              catch(err$0)
                               {err$0 = caml_wrap_exception(err$0);
                                var _bCg_=caml_call1(at_field(n),err$0);
                                throw caml_call1(at_field(_mW_),_bCg_);
                                var err=err$0}
                              var
                               req=mem(n,required),
                               acc$0=[0,[0,n,elt$0,req,0],acc],
                               acc=acc$0,
                               param=tl;
                              continue}
                            var properties=rev(acc);
                            switch$0 = 1;
                            break}}
                        if(! switch$0)
                         {var _bCf_=unexpected(_bCe_,_mU_);
                          throw caml_call1(at_field(_mV_),_bCf_)}}
                      else
                       var properties=0;
                      var match$2=opt_field_view(json,_mX_),switch$1=0;
                      if(match$2)
                       {var _bCh_=match$2[1],switch$2=0;
                        if(typeof _bCh_ !== "number" && num_737456202 === _bCh_[1])
                         if(0 === _bCh_[2])
                          {var _bCi_=0;switch$2 = 1}
                         else
                          switch$2 = 2;
                        var switch$3=0;
                        switch(switch$2)
                         {case 2:switch$3 = 1;break;
                          case 0:
                           try
                            {var elt$1=parse_element(source,caml_call1(Repr[2],_bCh_))}
                           catch(err)
                            {err = caml_wrap_exception(err);
                             throw caml_call1(at_field(_mY_),err)}
                           var _bCi_=[0,elt$1];
                           break
                          }
                        if(! switch$3){var additional_properties=_bCi_;switch$1 = 1}}
                      if(! switch$1)var additional_properties=[0,element(2)];
                      var match$3=opt_field_view(json,_mZ_);
                      if(match$3)
                       {var _bCj_=match$3[1],switch$4=0;
                        if(typeof _bCj_ !== "number" && 79 === _bCj_[1])
                         {var
                           l$1=_bCj_[2],
                           sets=
                            function(sacc,param)
                             {var sacc$0=sacc,param$0=param;
                              a:
                              for(;;)
                               {if(param$0)
                                 {var _bCs_=param$0[1],_bCt_=_bCs_[2],_bCu_=_bCs_[1];
                                  if(typeof _bCt_ !== "number" && 65 === _bCt_[1])
                                   {var
                                     param$1=param$0[2],
                                     l=_bCt_[2],
                                     param$4=map$1(Repr[1],l),
                                     j=0,
                                     acc=0,
                                     param$2=param$4;
                                    for(;;)
                                     {if(param$2)
                                       {var _bCx_=param$2[1];
                                        if(typeof _bCx_ !== "number" && num_976970511 === _bCx_[1])
                                         {var
                                           param$3=param$2[2],
                                           s=_bCx_[2],
                                           acc$0=[0,s,acc],
                                           j$0=j + 1 | 0,
                                           j=j$0,
                                           acc=acc$0,
                                           param$2=param$3;
                                          continue}
                                        var
                                         _bCy_=unexpected(_bCx_,_m4_),
                                         _bCz_=caml_call1(at_index(j),_bCy_),
                                         _bCA_=caml_call1(at_field(_bCu_),_bCz_);
                                        throw caml_call1(at_field(_m5_),_bCA_)}
                                      var
                                       sacc$1=[0,[0,_bCu_,rev(acc)],sacc$0],
                                       sacc$0=sacc$1,
                                       param$0=param$1;
                                      continue a}}
                                  var
                                   _bCv_=unexpected(_bCt_,_m2_),
                                   _bCw_=caml_call1(at_field(_bCu_),_bCv_);
                                  throw caml_call1(at_field(_m3_),_bCw_)}
                                return rev(sacc$0)}},
                           property_dependencies=
                            sets
                             (0,
                              map$1
                               (function(param)
                                 {var v=param[2],n=param[1];
                                  return [0,n,caml_call1(Repr[1],v)]},
                                l$1));
                          switch$4 = 1}
                        if(! switch$4)
                         {var _bCk_=unexpected(_bCj_,_m0_);
                          throw caml_call1(at_field(_m1_),_bCk_)}}
                      else
                       var property_dependencies=0;
                      var
                       parse_element_assoc=
                        function(field)
                         {var match=opt_field_view(json,field);
                          if(match)
                           {var _bCp_=match[1];
                            if(typeof _bCp_ !== "number" && 79 === _bCp_[1])
                             {var
                               props=_bCp_[2],
                               items=
                                function(acc,param)
                                 {var acc$0=acc,param$0=param;
                                  for(;;)
                                   {if(param$0)
                                     {var tl=param$0[2],match=param$0[1],elt=match[2],n=match[1];
                                      try
                                       {var elt$0=parse_element(source,elt)}
                                      catch(err$0)
                                       {err$0 = caml_wrap_exception(err$0);
                                        var _bCr_=caml_call1(at_field(n),err$0);
                                        throw caml_call1(at_field(field),_bCr_);
                                        var err=err$0}
                                      var acc$1=[0,[0,n,elt$0],acc$0],acc$0=acc$1,param$0=tl;
                                      continue}
                                    return rev(acc$0)}};
                              return items(0,props)}
                            var _bCq_=unexpected(_bCp_,_m6_);
                            throw caml_call1(at_field(field),_bCq_)}
                          return 0},
                       pattern_properties=parse_element_assoc(_m7_),
                       schema_dependencies=parse_element_assoc(_m8_),
                       match$4=opt_length_field(json,_m9_);
                      if(match$4)
                       var l$2=match$4[1],min_properties=l$2;
                      else
                       var min_properties=0;
                      var max_properties=opt_length_field(json,_m__);
                      return [0,
                              [0,
                               properties,
                               pattern_properties,
                               additional_properties,
                               min_properties,
                               max_properties,
                               schema_dependencies,
                               property_dependencies]]}
                    return [9,numeric_specs(json)]}
                  return 1}
                return [8,integer_specs(json)]}
              return 0}
            var
             unique_items=opt_bool_field(0,json,_m$_),
             min_items=opt_length_field(json,_na_),
             max_items=opt_length_field(json,_nb_);
            if(min_items)
             var l$3=min_items[1],min_items$0=l$3;
            else
             var min_items$0=0;
            var match$5=opt_field_view(json,_nc_),switch$5=0;
            if(match$5)
             {var _bCl_=match$5[1],switch$6=0;
              if(typeof _bCl_ !== "number" && num_737456202 === _bCl_[1])
               if(0 === _bCl_[2])
                switch$6 = 2;
               else
                {var
                  _bCm_=
                   [0,min_items$0,max_items,unique_items,[0,element(2)]];
                 switch$6 = 1}
              var switch$7=0;
              switch(switch$6)
               {case 2:switch$7 = 1;break;
                case 0:
                 try
                  {var elt$2=parse_element(source,caml_call1(Repr[2],_bCl_))}
                 catch(err)
                  {err = caml_wrap_exception(err);
                   throw caml_call1(at_field(_nd_),err)}
                 var _bCm_=[0,min_items$0,max_items,unique_items,[0,elt$2]];
                 break
                }
              if(! switch$7){var specs$0=_bCm_;switch$5 = 1}}
            if(! switch$5)
             var specs$0=[0,min_items$0,max_items,unique_items,0];
            var match$6=opt_field_view(json,_ne_);
            if(match$6)
             {var _bCn_=match$6[1];
              if(typeof _bCn_ !== "number" && 65 === _bCn_[1])
               {var elts=_bCn_[2],i=0,acc$1=0,param$0=elts;
                for(;;)
                 {if(param$0)
                   {var tl$0=param$0[2],elt$4=param$0[1];
                    try
                     {var elt$5=parse_element(source,elt$4)}
                    catch(err)
                     {err = caml_wrap_exception(err);
                      var _bCo_=caml_call1(at_index(i),err);
                      throw caml_call1(at_field(_ng_),_bCo_);
                      var err$4=err}
                    var
                     acc$2=[0,elt$5,acc$1],
                     i$0=i + 1 | 0,
                     i=i$0,
                     acc$1=acc$2,
                     param$0=tl$0;
                    continue}
                  return [1,rev(acc$1),specs$0]}}
              try
               {var elt$3=parse_element(source,caml_call1(Repr[2],_bCn_))}
              catch(err)
               {err = caml_wrap_exception(err);
                throw caml_call1(at_field(_nf_),err)}
              return [2,elt$3,specs$0]}
            return [2,element(2),specs$0]}
          function parse_element(source,json)
           {var id=opt_uri_field(json,_l7_);
            if(id)
             var
              uri=id[1],
              uri$0=canonicalize(resolve$0(_l8_,source,uri)),
              source$0=with_fragment(uri$0,0),
              id$0=fragment(uri$0),
              source$1=source$0;
            else
             var id$0=0,source$1=source;
            if(caml_notequal(source$1,schema_source))
             return element([6,with_fragment(source$1,id$0)]);
            if(id$0)
             {var id$1=id$0[1];
              if(contains(id$1,47))
               {var
                 _bB0_=
                  [0,Cannot_parse,0,[0,Bad_reference,symbol(id$1,_l9_)]];
                throw caml_call1(at_field(_l__),_bB0_)}
              var id$2=[0,id$1]}
            else
             var id$2=0;
            var match$0=opt_field_view(json,_l$_);
            if(match$0)
             {var _bB1_=match$0[1],switch$0=0;
              if(typeof _bB1_ !== "number")
               {var _bB3_=_bB1_[1],switch$1=0;
                if(num_976970511 === _bB3_)
                 var
                  name=_bB1_[2],
                  _bB4_=[0,element(parse_element_kind(source$1,json,name))];
                else
                 if(65 === _bB3_)
                  {var _bB5_=_bB1_[2];
                   if(! _bB5_)
                    {var _bB6_=unexpected(_bB1_,_mp_);
                     throw caml_call1(at_field(_mq_),_bB6_)}
                   var
                    items=
                     function(i,acc,param)
                      {var i$0=i,acc$0=acc,param$0=param;
                       for(;;)
                        {if(param$0)
                          {var _bCb_=param$0[1];
                           if(typeof _bCb_ !== "number" && num_976970511 === _bCb_[1])
                            {var
                              param$1=param$0[2],
                              name=_bCb_[2],
                              kind=parse_element_kind(source$1,json,name),
                              case$0=element(kind),
                              acc$1=[0,case$0,acc$0],
                              i$1=i$0 + 1 | 0,
                              i$0=i$1,
                              acc$0=acc$1,
                              param$0=param$1;
                             continue}
                           var
                            _bCc_=unexpected(_bCb_,_mn_),
                            _bCd_=caml_call1(at_index(i$0),_bCc_);
                           throw caml_call1(at_field(_mo_),_bCd_)}
                         var kind$0=[3,0,rev(acc$0)];
                         return [0,element(kind$0)]}},
                    _bB4_=items(0,0,map$1(Repr[1],_bB5_))}
                 else
                  switch$1 = 1;
                if(! switch$1){var as_kind=_bB4_;switch$0 = 1}}
              if(! switch$0)
               {var _bB2_=unexpected(_bB1_,_ma_);
                throw caml_call1(at_field(_mb_),_bB2_)}}
            else
             var as_kind=0;
            var match$1=opt_uri_field(json,_mc_);
            if(match$1)
             var
              uri$1=match$1[1],
              path=collect_definition(uri$1),
              as_ref=[0,element(path)];
            else
             var as_ref=0;
            function as_nary(name,combinator,others)
             {function build(cases)
               {if(cases)
                 {if(cases[2])
                   {var kind=[3,combinator,cases];return [0,element(kind)]}
                  var case$0=cases[1];
                  return [0,case$0]}
                return 0}
              var match=opt_field_view(json,name);
              if(match)
               {var _bB9_=match[1];
                if(typeof _bB9_ !== "number" && 65 === _bB9_[1])
                 {var _bB$_=_bB9_[2];
                  if(_bB$_)
                   {var
                     items=
                      function(i,acc,param)
                       {var i$0=i,acc$0=acc,param$0=param;
                        for(;;)
                         {if(param$0)
                           {var tl=param$0[2],elt=param$0[1];
                            try
                             {var elt$0=parse_element(source$1,elt)}
                            catch(err$0)
                             {err$0 = caml_wrap_exception(err$0);
                              var _bCa_=caml_call1(at_index(i$0),err$0);
                              throw caml_call1(at_field(name),_bCa_);
                              var err=err$0}
                            var
                             acc$1=[0,elt$0,acc$0],
                             i$1=i$0 + 1 | 0,
                             i$0=i$1,
                             acc$0=acc$1,
                             param$0=tl;
                            continue}
                          return build(append(others,rev(acc$0)))}};
                    return items(0,0,_bB$_)}}
                var _bB__=unexpected(_bB9_,_md_);
                throw caml_call1(at_field(name),_bB__)}
              return build(others)}
            var match$2=opt_field_view(json,_me_);
            if(match$2)
             {var elt=match$2[1];
              try
               {var elt$0=parse_element(source$1,caml_call1(Repr[2],elt))}
              catch(err)
               {err = caml_wrap_exception(err);
                throw caml_call1(at_field(_mf_),err)}
              var kind=[3,3,[0,elt$0,0]],as_not=[0,element(kind)]}
            else
             var as_not=0;
            var
             title=opt_string_field(json,_mg_),
             description=opt_string_field(json,_mh_),
             match=caml_call1(Repr[1],json),
             switch$2=0;
            if(typeof match === "number" || ! (79 === match[1]))
             switch$2 = 1;
            else
             {var ls=match[2];
              try
               {var switch$3=0,_bBZ_=[0,assoc(n,ls)]}
              catch(_bB8_)
               {_bB8_ = caml_wrap_exception(_bB8_);
                if(_bB8_ !== Not_found)throw _bB8_;
                var match$3=0;
                switch$3 = 1}
              if(! switch$3)var match$3=_bBZ_}
            if(switch$2)var match$3=0;
            if(match$3)
             var v=match$3[1],default$0=[0,[0,Repr,v]];
            else
             var default$0=0;
            var match$4=opt_array_field(json,_mi_);
            if(match$4)
             var
              v$0=match$4[1],
              enum$0=[0,map$1(function(_bB7_){return [0,Repr,_bB7_]},v$0)];
            else
             var enum$0=0;
            var
             format=opt_string_field(json,_mj_),
             as_one_of=as_nary(_mk_,1,0),
             as_any_of=as_nary(_ml_,0,0),
             all=
              [0,as_kind,[0,as_ref,[0,as_not,[0,as_one_of,[0,as_any_of,0]]]]],
             cases=
              flatten
               (map$1
                 (function(param)
                   {if(param){var e=param[1];return [0,e,0]}return 0},
                  all)),
             match$5=as_nary(_mm_,2,cases);
            if(match$5)
             var match$6=match$5[1],kind$0=match$6[5],kind$1=kind$0;
            else
             var kind$1=2;
            return [0,title,description,default$0,enum$0,kind$1,format,id$2]}
          function collect_definition(uri)
           {var match=host(uri),match$0=fragment(uri);
            if(match)return [6,uri];
            if(match$0)
             {var fragment$0=match$0[1];
              if(contains(fragment$0,47))
               {try
                 {var path=path_of_json_pointer(_l5_,fragment$0)}
                catch(err)
                 {err = caml_wrap_exception(err);throw [0,Cannot_parse,0,err]}
                try
                 {var raw=caml_call2(Query[1],path,json);
                  if(1 - _kE_(path,collected_definitions[1]))
                   {var _bBW_=collected_definitions[1];
                    collected_definitions[1]
                    =
                    insert_definition(path,element(3),_bBW_);
                    try
                     {var elt=parse_element(schema_source,raw)}
                    catch(err)
                     {err = caml_wrap_exception(err);throw at_path(path,err)}
                    collected_definitions[1]
                    =
                    insert_definition(path,elt,collected_definitions[1])}
                  var _bBX_=[4,path];
                  return _bBX_}
                catch(_bBY_)
                 {_bBY_ = caml_wrap_exception(_bBY_);
                  if(_bBY_ === Not_found)
                   throw [0,Cannot_parse,0,[0,Dangling_reference,uri]];
                  throw _bBY_}}
              collected_id_refs[1] = [0,fragment$0,collected_id_refs[1]];
              return [5,fragment$0]}
            throw [0,
                   Cannot_parse,
                   0,
                   [0,Bad_reference,symbol(arg$1(0,uri),_l6_)]]}
          var root=parse_element(empty$1,json);
          try
           {var
             switch$0=0,
             _bBT_=caml_call2(Query[1],_nh_,json),
             val=caml_call1(Repr[1],_bBT_);
            switch$0 = 1}
          catch(_bBV_)
           {_bBV_ = caml_wrap_exception(_bBV_);
            if(_bBV_ !== Not_found)throw _bBV_}
          if(switch$0)
           {var switch$1=0;
            if(typeof val !== "number" && 79 === val[1])
             {var
               all=val[2],
               all$0=
                map$1
                 (function(param)
                   {var n=param[1];return of_string$0(symbol(_ni_,n))},
                  all);
              iter$0(function(uri){collect_definition(uri);return 0},all$0);
              switch$1 = 1}}
          var _bBS_=collected_id_refs[1];
          iter$0
           (function(id)
             {var _bBU_=1 - mem_assoc(id,ids);
              if(_bBU_)
               throw [0,
                      Cannot_parse,
                      0,
                      [0,Dangling_reference,with_fragment(empty$1,[0,id])]];
              return _bBU_},
            _bBS_);
          var definitions=collected_definitions[1];
          return [0,root,schema_source,definitions,ids,0]}
        function check_definitions(root,definitions)
         {var collected_id_defs=[0,0],collected_id_refs=[0,0];
          function check(elt)
           {var elt$0=elt;
            for(;;)
             {var id=elt$0[7],kind=elt$0[5];
              if(id)
               {var id$0=id[1];
                collected_id_defs[1] = [0,[0,id$0,elt$0],collected_id_defs[1]]}
              if(typeof kind !== "number")
               switch(kind[0])
                {case 0:
                  var
                   match=kind[1],
                   schema_dependencies=match[6],
                   additional_properties=match[3],
                   pattern_properties=match[2],
                   properties=match[1];
                  iter$0
                   (function(param){var e=param[2];return check(e)},properties);
                  iter$0
                   (function(param){var e=param[2];return check(e)},
                    pattern_properties);
                  iter$0
                   (function(param){var e=param[2];return check(e)},
                    schema_dependencies);
                  if(additional_properties)
                   {var elt$1=additional_properties[1],elt$0=elt$1;continue}
                  return 0;
                 case 1:
                  var match$0=kind[2],additional_items=match$0[4],es=kind[1];
                  iter$0(check,es);
                  if(additional_items)
                   {var elt$2=additional_items[1],elt$0=elt$2;continue}
                  return 0;
                 case 2:
                  var match$1=kind[2],additional_items$0=match$1[4],e=kind[1];
                  check(e);
                  if(additional_items$0)
                   {var elt$3=additional_items$0[1],elt$0=elt$3;continue}
                  return 0;
                 case 3:var es$0=kind[2];return iter$0(check,es$0);
                 case 4:
                  var path=kind[1],_bBR_=1 - _kE_(path,definitions);
                  if(_bBR_)
                   {var path$0=json_pointer_of_path(0,path);
                    throw [0,
                           Dangling_reference,
                           with_fragment(empty$1,[0,path$0])]}
                  return _bBR_;
                 case 5:
                  var id$1=kind[1];
                  collected_id_refs[1] = [0,id$1,collected_id_refs[1]];
                  return 0
                 }
              return 0}}
          check(root);
          iter$0
           (function(param){var root=param[2];return check(root)},definitions);
          var _bBP_=collected_id_refs[1];
          iter$0
           (function(id)
             {var _bBQ_=1 - mem_assoc(id,collected_id_defs[1]);
              if(_bBQ_)
               throw [0,Dangling_reference,with_fragment(empty$1,[0,id])];
              return _bBQ_},
            _bBP_);
          return collected_id_defs[1]}
        function create(root)
         {var ids=check_definitions(root,0);return [0,root,empty$1,0,ids,0]}
        function root(param){var root=param[1];return root}
        function update(root,sch)
         {var ids=check_definitions(root,sch[3]);
          return [0,root,sch[2],sch[3],ids,sch[5]]}
        var
         sacc=create(element(2)),
         self=[0,element([6,of_string$0(version)]),empty$1,0,0,0];
        function simplify(schema)
         {var res=[0,0];
          function collect(param)
           {var param$0=param;
            for(;;)
             {var kind=param$0[5];
              if(typeof kind !== "number")
               switch(kind[0])
                {case 0:
                  var
                   match=kind[1],
                   schema_dependencies=match[6],
                   additional_properties=match[3],
                   pattern_properties=match[2],
                   properties=match[1];
                  iter$0
                   (function(param){var e=param[2];return collect(e)},
                    properties);
                  iter$0
                   (function(param){var e=param[2];return collect(e)},
                    pattern_properties);
                  iter$0
                   (function(param){var e=param[2];return collect(e)},
                    schema_dependencies);
                  if(additional_properties)
                   {var param$1=additional_properties[1],param$0=param$1;
                    continue}
                  return 0;
                 case 1:
                  var match$0=kind[2],additional_items=match$0[4],es=kind[1];
                  iter$0(collect,es);
                  if(additional_items)
                   {var param$2=additional_items[1],param$0=param$2;continue}
                  return 0;
                 case 2:
                  var match$1=kind[2],additional_items$0=match$1[4],e=kind[1];
                  collect(e);
                  if(additional_items$0)
                   {var param$3=additional_items$0[1],param$0=param$3;continue}
                  return 0;
                 case 3:var es$0=kind[2];return iter$0(collect,es$0);
                 case 4:
                  var path=kind[1],def=_kD_(path,schema[3]);
                  res[1] = insert_definition(path,def,res[1]);
                  return 0
                 }
              return 0}}
          collect(schema[1]);
          return [0,schema[1],schema[2],res[1],schema[4],schema[5]]}
        function definition_path_of_name(opt,name)
         {if(opt)
           var sth=opt[1],definitions_path=sth;
          else
           var definitions_path=_nk_;
          try
           {var val=caml_string_get(name,0)}
          catch(_bBO_){throw [0,Bad_reference,name]}
          var name$0=47 === val?name:symbol(definitions_path,name);
          return path_of_json_pointer(_nj_,name$0)}
        function find_definition(definitions_path,name,schema)
         {var path=definition_path_of_name(definitions_path,name);
          return _kD_(path,schema[3])}
        function definition_ref(definitions_path,name)
         {var path=definition_path_of_name(definitions_path,name);
          return element([4,path])}
        function definition_exists(definitions_path,name,schema)
         {var path=definition_path_of_name(definitions_path,name);
          return _kE_(path,schema[3])}
        function add_definition(definitions_path,name,elt,schema)
         {var
           path=definition_path_of_name(definitions_path,name),
           definitions=insert_definition(path,elt,schema[3]),
           _bBN_=element([4,path]);
          return [0,
                  [0,schema[1],schema[2],definitions,schema[4],schema[5]],
                  _bBN_]}
        function merge_definitions(param)
         {var sb=param[2],sa=param[1];
          function sorted_merge(rem)
           {if(rem)
             {var _bBM_=rem[2];
              if(_bBM_)
               {var
                 tl=_bBM_[2],
                 b=_bBM_[1],
                 db=b[2],
                 nb=b[1],
                 a=rem[1],
                 da=a[2],
                 na=a[1];
                if(caml_equal(na,nb))
                 {if(3 !== da[5] && 3 !== db[5] && ! eq_element(da,db))
                   throw [0,Duplicate_definition,na,da,db];
                  return [0,[0,na,da],sorted_merge(tl)]}
                return [0,a,sorted_merge([0,b,tl])]}}
            return rem}
          var
           definitions=
            sorted_merge(fast_sort(caml_compare,append(sa[3],sb[3])));
          return [0,
                  [0,sa[1],sa[2],definitions,sa[4],sa[5]],
                  [0,sb[1],sb[2],definitions,sb[4],sb[5]]]}
        function combine(op,param)
         {var sacc$0=sacc,eacc=0,param$0=param;
          for(;;)
           {if(param$0)
             {var
               param$1=param$0[2],
               s=param$0[1],
               match=merge_definitions([0,sacc$0,s]),
               s$0=match[2],
               sacc$1=match[1],
               eacc$0=[0,s$0[1],eacc],
               sacc$0=sacc$1,
               eacc=eacc$0,
               param$0=param$1;
              continue}
            return update(element([3,op,eacc]),sacc$0)}}
        function is_nullable(param)
         {var ids=param[4],definitions=param[3],root=param[1];
          function nullable(param)
           {var param$0=param;
            for(;;)
             {var kind=param$0[5],switch$0=0;
              if(typeof kind === "number")
               switch(kind)
                {case 0:switch$0 = 1;break;case 3:break;default:return 1}
              else
               switch(kind[0])
                {case 3:
                  var _bBK_=kind[1];
                  if(2 === _bBK_)
                   {var elts=kind[2];return for_all(nullable,elts)}
                  if(! (3 <= _bBK_))
                   {var elts$0=kind[2];return exists(nullable,elts$0)}
                  var _bBL_=kind[2];
                  if(_bBL_ && ! _bBL_[2])
                   {var elt=_bBL_[1];return 1 - nullable(elt)}
                  break;
                 case 4:
                  var
                   path=kind[1],
                   param$1=assoc(path,definitions),
                   param$0=param$1;
                  continue;
                 case 5:
                  var id=kind[1],param$2=assoc(id,ids),param$0=param$2;
                  continue;
                 default:switch$0 = 1}
              if(switch$0)return 0;
              throw [0,Assert_failure,_nl_]}}
          return nullable(root)}
        var object_specs=[0,0,0,[0,element(2)],0,0,0,0];
        return [0,
                Query,
                to_json,
                unexpected,
                at_path,
                at_field,
                at_index,
                of_json,
                check_definitions,
                create,
                root,
                update,
                sacc,
                self,
                simplify,
                definition_path_of_name,
                find_definition,
                definition_ref,
                definition_exists,
                add_definition,
                merge_definitions,
                combine,
                is_nullable,
                array_specs,
                object_specs,
                string_specs,
                numeric_specs]},
     include=Make$2(Ezjsonm),
     to_json=include[2],
     of_json=include[7],
     create$10=include[9],
     root=include[10],
     update=include[11],
     any=include[12],
     self$0=include[13],
     definition_ref=include[17],
     definition_exists=include[18],
     add_definition=include[19],
     merge_definitions=include[20],
     is_nullable=include[22],
     array_specs$0=include[23],
     init$2=include[24],
     string_specs$0=include[25],
     numeric_specs$0=include[26],
     Unexpected$0=[num_248,_nm_,caml_fresh_oo_id(0)],
     No_case_matched=[num_248,_nn_,caml_fresh_oo_id(0)],
     Bad_array_size=[num_248,_no_,caml_fresh_oo_id(0)],
     Missing_field=[num_248,_np_,caml_fresh_oo_id(0)],
     Unexpected_field=[num_248,_nq_,caml_fresh_oo_id(0)],
     Bad_schema=[num_248,_nr_,caml_fresh_oo_id(0)],
     Cannot_destruct=[num_248,_ns_,caml_fresh_oo_id(0)],
     unexpected=
      function(kind,expected)
       {if(typeof kind === "number")
         var kind$0=_nt_;
        else
         {var _bBE_=kind[1];
          if(65 === _bBE_)
           var _bBF_=kind[2]?_nu_:_nv_,_bBG_=_bBF_;
          else
           if(num_365180284 <= _bBE_)
            var _bBG_=num_737456202 <= _bBE_?_nw_:_nx_;
           else
            if(79 <= _bBE_)
             var _bBH_=kind[2]?_ny_:_nz_,_bBG_=_bBH_;
            else
             var _bBG_=_nA_;
          var kind$0=_bBG_}
        return [0,Cannot_destruct,[0,0,[0,Unexpected$0,kind$0,expected]]]},
     Make$3=
      function(Repr)
       {function construct(enc,v)
         {function construct(enc)
           {var enc$0=enc;
            for(;;)
             if(typeof enc$0 === "number")
              switch(enc$0)
               {case 0:
                 return function(param)
                  {return caml_call1(Repr[2],num_870828711)};
                case 1:
                 return function(param){return caml_call1(Repr[2],_nB_)};
                case 2:
                 return function(param){return caml_call1(Repr[2],_nC_)};
                case 3:
                 return function(b)
                  {return caml_call1(Repr[2],[0,num_737456202,b])};
                default:
                 return function(s)
                  {return caml_call1(Repr[2],[0,num_976970511,s])}}
             else
              switch(enc$0[0])
               {case 0:
                 var t=enc$0[1];
                 return function(param)
                  {if(param){var v=param[1];return caml_call1(construct(t),v)}
                   return caml_call1(Repr[2],num_870828711)};
                case 1:
                 var str=enc$0[1];
                 return function(param)
                  {return caml_call1(Repr[2],[0,num_976970511,str])};
                case 2:
                 var
                  match=enc$0[1],
                  upper_bound=match[5],
                  lower_bound=match[4],
                  to_float=match[3],
                  int_name=match[1];
                 return function(i)
                  {var
                    _bBB_=caml_lessthan(i,lower_bound),
                    _bBC_=_bBB_ || caml_greaterthan(i,upper_bound);
                   if(_bBC_)invalid_arg(symbol(_nE_,symbol(int_name,_nD_)));
                   var _bBD_=[0,num_365180284,caml_call1(to_float,i)];
                   return caml_call1(Repr[2],_bBD_)};
                case 3:
                 var _bBl_=enc$0[1];
                 if(_bBl_)
                  {var
                    match$0=_bBl_[1],
                    maximum=match$0[3],
                    minimum=match$0[2],
                    float_name=match$0[1],
                    err=symbol(_nG_,symbol(float_name,_nF_));
                   return function(float$0)
                    {var
                      _bBz_=float$0 < minimum?1:0,
                      _bBA_=_bBz_ || (maximum < float$0?1:0);
                     if(_bBA_)invalid_arg(err);
                     return caml_call1(Repr[2],[0,num_365180284,float$0])}}
                 return function(float$0)
                  {return caml_call1(Repr[2],[0,num_365180284,float$0])};
                case 4:
                 var
                  t$0=enc$0[1],
                  w=function(v){return caml_call1(construct(t$0),v)};
                 return function(arr)
                  {var _bBy_=[0,65,to_list(map$3(w,arr))];
                   return caml_call1(Repr[2],_bBy_)};
                case 5:
                 var _bBm_=enc$0[1];
                 switch(_bBm_[0])
                  {case 0:
                    var t$1=_bBm_[2],n=_bBm_[1];
                    return function(v)
                     {var _bBw_=[0,79,[0,[0,n,caml_call1(construct(t$1),v)],0]];
                      return caml_call1(Repr[2],_bBw_)};
                   case 1:
                    var t$2=_bBm_[2],n$0=_bBm_[1];
                    return function(param)
                     {if(param)
                       {var
                         v=param[1],
                         _bBv_=[0,79,[0,[0,n$0,caml_call1(construct(t$2),v)],0]];
                        return caml_call1(Repr[2],_bBv_)}
                      return caml_call1(Repr[2],_nH_)};
                   default:
                    var d=_bBm_[5],t$3=_bBm_[2],n$1=_bBm_[1];
                    return function(v)
                     {var
                       _bBx_=
                        caml_notequal(v,d)
                         ?[0,[0,n$1,caml_call1(construct(t$3),v)],0]
                         :0;
                      return caml_call1(Repr[2],[0,79,_bBx_])}}
                case 6:
                 var o2=enc$0[2],o1=enc$0[1];
                 return function(param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    _bBs_=caml_call1(construct(o1),v1),
                    match=caml_call1(Repr[1],_bBs_),
                    _bBt_=caml_call1(construct(o2),v2),
                    match$0=caml_call1(Repr[1],_bBt_);
                   if(typeof match === "number")
                    {if(num_870828711 === match)num_870828711 === match$0}
                   else
                    if
                     (79
                      ===
                      match[1]
                      &&
                      typeof match$0
                      !==
                      "number"
                      &&
                      79
                      ===
                      match$0[1])
                     {var l2=match$0[2],l1=match[2],_bBu_=[0,79,append(l1,l2)];
                      return caml_call1(Repr[2],_bBu_)}
                   return invalid_arg(_nI_)};
                case 7:
                 var t$4=enc$0[1];
                 return function(v)
                  {var _bBr_=[0,65,[0,caml_call1(construct(t$4),v),0]];
                   return caml_call1(Repr[2],_bBr_)};
                case 8:
                 var o2$0=enc$0[2],o1$0=enc$0[1];
                 return function(param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    _bBo_=caml_call1(construct(o1$0),v1),
                    match=caml_call1(Repr[1],_bBo_),
                    _bBp_=caml_call1(construct(o2$0),v2),
                    match$0=caml_call1(Repr[1],_bBp_);
                   if
                    (typeof match
                     !==
                     "number"
                     &&
                     65
                     ===
                     match[1]
                     &&
                     typeof match$0
                     !==
                     "number"
                     &&
                     65
                     ===
                     match$0[1])
                    {var l2=match$0[2],l1=match[2],_bBq_=[0,65,append(l1,l2)];
                     return caml_call1(Repr[2],_bBq_)}
                   return invalid_arg(_nJ_)};
                case 9:
                 var match$1=enc$0[1],write=match$1[1];
                 return function(j){return caml_call2(write,Repr,j)};
                case 10:
                 var t$5=enc$0[3],ffrom=enc$0[1];
                 return function(v)
                  {var _bBn_=caml_call1(ffrom,v);
                   return caml_call1(construct(t$5),_bBn_)};
                case 11:var enc$1=enc$0[4],enc$0=enc$1;continue;
                case 12:
                 var self=enc$0[4],enc$2=caml_call1(self,enc$0),enc$0=enc$2;
                 continue;
                default:
                 var cases=enc$0[1];
                 return function(v)
                  {var param=cases;
                   for(;;)
                    {if(param)
                      {var
                        rest=param[2],
                        match=param[1],
                        proj=match[4],
                        encoding=match[1],
                        match$0=caml_call1(proj,v);
                       if(match$0)
                        {var v$0=match$0[1];
                         return caml_call1(construct(encoding),v$0)}
                       var param=rest;
                       continue}
                     return invalid_arg(_nK_)}}}}
          return caml_call1(construct(enc),v)}
        function destruct(enc)
         {var enc$0=enc;
          for(;;)
           if(typeof enc$0 === "number")
            switch(enc$0)
             {case 0:
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(num_870828711 === k)return 0;
                 throw unexpected(k,_nL_)};
              case 1:
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && 79 === k[1])
                  {var _bBc_=k[2];
                   if(! _bBc_)return 0;
                   if(! _bBc_[2])
                    {var match=_bBc_[1],f=match[1];
                     throw [0,Cannot_destruct,[0,0,[0,Unexpected_field,f]]]}}
                 throw unexpected(k,_nM_)};
              case 2:return function(v){caml_call1(Repr[1],v);return 0};
              case 3:
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && num_737456202 === k[1])
                  {var b=k[2];return b}
                 throw unexpected(k,_nN_)};
              default:
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && num_976970511 === k[1])
                  {var s=k[2];return s}
                 throw unexpected(k,_nO_)}}
           else
            switch(enc$0[0])
             {case 0:
               var t=enc$0[1];
               return function(v)
                {var match=caml_call1(Repr[1],v);
                 return num_870828711 === match
                         ?0
                         :[0,caml_call1(destruct(t),v)]};
              case 1:
               var str=enc$0[1];
               return function(v)
                {var x=caml_call1(Repr[1],v);
                 if(typeof x !== "number" && num_976970511 === x[1])
                  {var s=x[2];if(caml_string_equal(s,str))return 0}
                 throw unexpected(x,str)};
              case 2:
               var
                match=enc$0[1],
                upper_bound=match[5],
                lower_bound=match[4],
                to_float=match[3],
                of_float=match[2],
                int_name=match[1],
                lower_bound$0=caml_call1(to_float,lower_bound),
                upper_bound$0=caml_call1(to_float,upper_bound);
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && num_365180284 === k[1])
                  {var
                    v$0=k[2],
                    match=caml_modf_float(v$0),
                    v$1=match[2],
                    rest=match[1];
                   if(rest != 0.)
                    {var exn=[0,Failure,symbol(int_name,_nQ_)];
                     throw [0,Cannot_destruct,[0,0,exn]]}
                   var
                    _bBi_=v$1 < lower_bound$0?1:0,
                    _bBj_=_bBi_ || (upper_bound$0 < v$1?1:0);
                   if(_bBj_)
                    {var exn$0=[0,Failure,symbol(int_name,_nR_)];
                     throw [0,Cannot_destruct,[0,0,exn$0]]}
                   return caml_call1(of_float,v$1)}
                 throw unexpected(k,_nP_)};
              case 3:
               var _bBb_=enc$0[1];
               if(_bBb_)
                {var
                  match$0=_bBb_[1],
                  maximum=match$0[3],
                  minimum=match$0[2],
                  float_name=match$0[1];
                 return function(v)
                  {var k=caml_call1(Repr[1],v);
                   if(typeof k !== "number" && num_365180284 === k[1])
                    {var f=k[2];
                     if(! (f < minimum) && ! (maximum < f))return f;
                     var exn=[0,Failure,symbol(float_name,_nT_)];
                     throw [0,Cannot_destruct,[0,0,exn]]}
                   throw unexpected(k,_nS_)}}
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && num_365180284 === k[1])
                  {var f=k[2];return f}
                 throw unexpected(k,_nU_)};
              case 4:
               var t$0=enc$0[1];
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number")
                  {var _bBg_=k[1];
                   if(65 === _bBg_)
                    {var
                      cells=k[2],
                      a=of_list(cells),
                      f=
                       function(i,cell)
                        {try
                          {var _bBh_=caml_call1(destruct(t$0),cell);return _bBh_}
                         catch(exn)
                          {exn = caml_wrap_exception(exn);
                           if(exn[1] === Cannot_destruct)
                            {var match=exn[2],err=match[2],path=match[1];
                             throw [0,
                                    Cannot_destruct,
                                    [0,[0,[0,num_784200974,i],path],err]]}
                           throw exn}},
                      l=a.length - 1;
                     if(0 === l)return [0];
                     var r=caml_make_vect(l,f(0,a[1])),_bBe_=l - 1 | 0,_bBd_=1;
                     if(! (_bBe_ < 1))
                      {var i=_bBd_;
                       for(;;)
                        {r[1 + i] = f(i,a[1 + i]);
                         var _bBf_=i + 1 | 0;
                         if(_bBe_ !== i){var i=_bBf_;continue}
                         break}}
                     return r}
                   if(79 === _bBg_ && ! k[2])return [0]}
                 throw unexpected(k,_nV_)};
              case 5:
               var d=destruct_obj(enc$0);
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && 79 === k[1])
                  {var
                    fields=k[2],
                    match=caml_call1(d,fields),
                    ign=match[3],
                    rest=match[2],
                    r=match[1];
                   if(rest)
                    {var match$0=rest[1],field=match$0[1];
                     if(! ign)throw [0,Unexpected_field,field]}
                   return r}
                 throw unexpected(k,_nW_)};
              case 6:
               var d$0=destruct_obj(enc$0);
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && 79 === k[1])
                  {var
                    fields=k[2],
                    match=caml_call1(d$0,fields),
                    ign=match[3],
                    rest=match[2],
                    r=match[1];
                   if(rest)
                    {var match$0=rest[1],field=match$0[1];
                     if(! ign)throw [0,Unexpected_field,field]}
                   return r}
                 throw unexpected(k,_nX_)};
              case 7:
               var match$1=destruct_tup(0,enc$0),i=match$1[2],r=match$1[1];
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && 65 === k[1])
                  {var
                    cells=k[2],
                    cells$0=of_list(cells),
                    len=cells$0.length - 1;
                   if(i !== cells$0.length - 1)
                    throw [0,Cannot_destruct,[0,0,[0,Bad_array_size,len,i]]];
                   return caml_call1(r,cells$0)}
                 throw unexpected(k,_nY_)};
              case 8:
               var
                match$2=destruct_tup(0,enc$0),
                i$0=match$2[2],
                r$0=match$2[1];
               return function(v)
                {var k=caml_call1(Repr[1],v);
                 if(typeof k !== "number" && 65 === k[1])
                  {var
                    cells=k[2],
                    cells$0=of_list(cells),
                    len=cells$0.length - 1;
                   if(i$0 !== cells$0.length - 1)
                    throw [0,Cannot_destruct,[0,0,[0,Bad_array_size,len,i$0]]];
                   return caml_call1(r$0,cells$0)}
                 throw unexpected(k,_nZ_)};
              case 9:
               var match$3=enc$0[1],read=match$3[2];
               return caml_call1(read,Repr);
              case 10:
               var t$1=enc$0[3],fto=enc$0[2];
               return function(v)
                {return caml_call1(fto,caml_call1(destruct(t$1),v))};
              case 11:var enc$1=enc$0[4],enc$0=enc$1;continue;
              case 12:
               var self=enc$0[4],enc$2=caml_call1(self,enc$0),enc$0=enc$2;
               continue;
              default:
               var cases=enc$0[1];
               return function(v)
                {function do_cases(errs,param)
                  {var errs$0=errs,param$0=param;
                   for(;;)
                    {if(param$0)
                      {var
                        rest=param$0[2],
                        match=param$0[1],
                        inj=match[5],
                        encoding=match[1];
                       try
                        {var _bBk_=caml_call1(inj,caml_call1(destruct(encoding),v));
                         return _bBk_}
                       catch(err)
                        {err = caml_wrap_exception(err);
                         var errs$1=[0,err,errs$0],errs$0=errs$1,param$0=rest;
                         continue}}
                     throw [0,
                            Cannot_destruct,
                            [0,0,[0,No_case_matched,rev(errs$0)]]]}}
                 return do_cases(0,cases)}}}
        function destruct_tup(i,t)
         {var t$0=t;
          for(;;)
           {if(typeof t$0 !== "number")
             switch(t$0[0])
              {case 7:
                var t$1=t$0[1],_bA9_=i + 1 | 0;
                return [0,
                        function(arr)
                         {try
                           {var
                             _bA$_=caml_check_bound(arr,i)[1 + i],
                             _bBa_=caml_call1(destruct(t$1),_bA$_);
                            return _bBa_}
                          catch(exn)
                           {exn = caml_wrap_exception(exn);
                            if(exn[1] === Cannot_destruct)
                             {var match=exn[2],err=match[2],path=match[1];
                              throw [0,
                                     Cannot_destruct,
                                     [0,[0,[0,num_784200974,i],path],err]]}
                            throw exn}},
                        _bA9_];
               case 8:
                var
                 t2=t$0[2],
                 t1=t$0[1],
                 match=destruct_tup(i,t1),
                 i$0=match[2],
                 r1=match[1],
                 match$0=destruct_tup(i$0,t2),
                 i$1=match$0[2],
                 r2=match$0[1];
                return [0,
                        function(arr)
                         {var _bA__=caml_call1(r2,arr);
                          return [0,caml_call1(r1,arr),_bA__]},
                        i$1];
               case 10:
                var
                 t$2=t$0[3],
                 fto=t$0[2],
                 match$1=destruct_tup(i,t$2),
                 i$2=match$1[2],
                 r=match$1[1];
                return [0,
                        function(arr){return caml_call1(fto,caml_call1(r,arr))},
                        i$2];
               case 11:var t$3=t$0[4],t$0=t$3;continue;
               case 12:
                var self=t$0[4],t$4=caml_call1(self,t$0),t$0=t$4;continue
               }
            return invalid_arg(_n0_)}}
        function destruct_obj(t)
         {var t$0=t;
          for(;;)
           {var
             assoc=
              function(acc,n,param)
               {var acc$0=acc,param$0=param;
                for(;;)
                 {if(param$0)
                   {var rest=param$0[2],oth=param$0[1],v=oth[2],f=oth[1];
                    if(caml_equal(n,f))return [0,v,append(acc$0,rest)];
                    var acc$1=[0,oth,acc$0],acc$0=acc$1,param$0=rest;
                    continue}
                  throw Not_found}};
            if(typeof t$0 === "number")
             switch(t$0)
              {case 1:return function(fields){return [0,0,fields,0]};
               case 2:return function(fields){return [0,0,fields,1]}
               }
            else
             switch(t$0[0])
              {case 5:
                var _bA4_=t$0[1];
                switch(_bA4_[0])
                 {case 0:
                   var t$1=_bA4_[2],n=_bA4_[1];
                   return function(fields)
                    {try
                      {var
                        match$0=assoc(0,n,fields),
                        rest=match$0[2],
                        v=match$0[1],
                        _bA7_=[0,caml_call1(destruct(t$1),v),rest,0];
                       return _bA7_}
                     catch(exn)
                      {exn = caml_wrap_exception(exn);
                       if(exn === Not_found)
                        throw [0,Cannot_destruct,[0,0,[0,Missing_field,n]]];
                       if(exn[1] === Cannot_destruct)
                        {var match=exn[2],err=match[2],path=match[1];
                         throw [0,
                                Cannot_destruct,
                                [0,[0,[0,num_331416730,n],path],err]]}
                       throw exn}};
                  case 1:
                   var t$2=_bA4_[2],n$0=_bA4_[1];
                   return function(fields)
                    {try
                      {var
                        match$0=assoc(0,n$0,fields),
                        rest=match$0[2],
                        v=match$0[1],
                        _bA6_=[0,[0,caml_call1(destruct(t$2),v)],rest,0];
                       return _bA6_}
                     catch(exn)
                      {exn = caml_wrap_exception(exn);
                       if(exn === Not_found)return [0,0,fields,0];
                       if(exn[1] === Cannot_destruct)
                        {var match=exn[2],err=match[2],path=match[1];
                         throw [0,
                                Cannot_destruct,
                                [0,[0,[0,num_331416730,n$0],path],err]]}
                       throw exn}};
                  default:
                   var d=_bA4_[5],t$3=_bA4_[2],n$1=_bA4_[1];
                   return function(fields)
                    {try
                      {var
                        match$0=assoc(0,n$1,fields),
                        rest=match$0[2],
                        v=match$0[1],
                        _bA8_=[0,caml_call1(destruct(t$3),v),rest,0];
                       return _bA8_}
                     catch(exn)
                      {exn = caml_wrap_exception(exn);
                       if(exn === Not_found)return [0,d,fields,0];
                       if(exn[1] === Cannot_destruct)
                        {var match=exn[2],err=match[2],path=match[1];
                         throw [0,
                                Cannot_destruct,
                                [0,[0,[0,num_331416730,n$1],path],err]]}
                       throw exn}}}
               case 6:
                var
                 o2=t$0[2],
                 o1=t$0[1],
                 d1=destruct_obj(o1),
                 d2=destruct_obj(o2);
                return function(fields)
                 {var
                   match=caml_call1(d1,fields),
                   ign1=match[3],
                   rest=match[2],
                   r1=match[1],
                   match$0=caml_call1(d2,rest),
                   ign2=match$0[3],
                   rest$0=match$0[2],
                   r2=match$0[1],
                   ign1$0=ign1 || ign2;
                  return [0,[0,r1,r2],rest$0,ign1$0]};
               case 10:
                var t$4=t$0[3],fto=t$0[2],d$0=destruct_obj(t$4);
                return function(fields)
                 {var
                   match=caml_call1(d$0,fields),
                   ign=match[3],
                   rest=match[2],
                   r=match[1];
                  return [0,caml_call1(fto,r),rest,ign]};
               case 11:var t$5=t$0[4],t$0=t$5;continue;
               case 12:
                var self=t$0[4],t$6=caml_call1(self,t$0),t$0=t$6;continue;
               case 13:
                var cases=t$0[1];
                return function(fields)
                 {function do_cases(errs,param)
                   {var errs$0=errs,param$0=param;
                    for(;;)
                     {if(param$0)
                       {var
                         rest=param$0[2],
                         match=param$0[1],
                         inj=match[5],
                         encoding=match[1];
                        try
                         {var
                           match$0=caml_call1(destruct_obj(encoding),fields),
                           ign=match$0[3],
                           rest$0=match$0[2],
                           r=match$0[1],
                           _bA5_=[0,caml_call1(inj,r),rest$0,ign];
                          return _bA5_}
                        catch(err)
                         {err = caml_wrap_exception(err);
                          var errs$1=[0,err,errs$0],errs$0=errs$1,param$0=rest;
                          continue}}
                      throw [0,
                             Cannot_destruct,
                             [0,0,[0,No_case_matched,rev(errs$0)]]]}}
                  return do_cases(0,cases)}
               }
            return invalid_arg(_n1_)}}
        function custom(write,read,schema)
         {function read$0(Repr_f,repr)
           {return caml_call1(read,convert(Repr_f,Repr,repr))}
          function write$0(Repr_f,v)
           {return convert(Repr,Repr_f,caml_call1(write,v))}
          return [9,[0,write$0,read$0],schema]}
        return [0,construct,destruct,custom]},
     Ezjsonm_encoding=Make$3(Ezjsonm),
     patch_description=
      function(title,description,elt)
       {return title
                ?description
                  ?[0,title,description,elt[3],elt[4],elt[5],elt[6],elt[7]]
                  :[0,title,elt[2],elt[3],elt[4],elt[5],elt[6],elt[7]]
                :description
                  ?[0,elt[1],description,elt[3],elt[4],elt[5],elt[6],elt[7]]
                  :elt},
     schema=
      function(definitions_path,encoding)
       {var sch=[0,any];
        function prod(l1,l2)
         {if(l1)
           {var
             es=l1[2],
             match=l1[1],
             b1=match[2],
             l1$0=match[1],
             _bA3_=prod(es,l2);
            return append
                    (map$1
                      (function(param)
                        {var b2=param[2],l2=param[1],b1$0=b1 || b2;
                         return [0,append(l1$0,l2),b1$0]},
                       l2),
                     _bA3_)}
          return 0}
        function schema(o)
         {var o$0=o;
          for(;;)
           if(typeof o$0 === "number")
            switch(o$0)
             {case 0:return element(1);
              case 1:
               return element
                       ([0,
                         [0,
                          init$2[1],
                          init$2[2],
                          0,
                          init$2[4],
                          init$2[5],
                          init$2[6],
                          init$2[7]]]);
              case 2:return element(2);
              case 3:return element(0);
              default:return element([7,string_specs$0])}
           else
            switch(o$0[0])
             {case 0:
               var t=o$0[1],_bAV_=[0,element(1),0];
               return element([3,1,[0,schema(t),_bAV_]]);
              case 1:
               var
                str=o$0[1],
                init=element([7,string_specs$0]),
                v=[0,num_976970511,str];
               return [0,
                       init[1],
                       init[2],
                       init[3],
                       [0,[0,[0,Ezjsonm,v],0]],
                       init[5],
                       init[6],
                       init[7]];
              case 2:
               var
                match=o$0[1],
                upper_bound=match[5],
                lower_bound=match[4],
                to_float=match[3],
                minimum=[0,[0,caml_call1(to_float,lower_bound),num_672226188]],
                maximum=[0,[0,caml_call1(to_float,upper_bound),num_672226188]];
               return element([8,[0,0,minimum,maximum]]);
              case 3:
               var _bAW_=o$0[1];
               if(_bAW_)
                {var
                  match$0=_bAW_[1],
                  maximum$0=match$0[3],
                  minimum$0=match$0[2];
                 return element
                         ([9,
                           [0,
                            0,
                            [0,[0,minimum$0,num_672226188]],
                            [0,[0,maximum$0,num_672226188]]]])}
               return element([9,numeric_specs$0]);
              case 4:
               var t$0=o$0[1];return element([2,schema(t$0),array_specs$0]);
              case 5:
               var more=object_schema(o$0);
               if(more && ! more[2])
                {var
                  match$1=more[1],
                  ext=match$1[2],
                  properties=match$1[1],
                  additional_properties=ext?[0,element(2)]:0;
                 return element
                         ([0,
                           [0,
                            properties,
                            init$2[2],
                            additional_properties,
                            init$2[4],
                            init$2[5],
                            init$2[6],
                            init$2[7]]])}
               var
                elements=
                 map$1
                  (function(param)
                    {var
                      ext=param[2],
                      properties=param[1],
                      additional_properties=ext?[0,element(2)]:0;
                     return element
                             ([0,
                               [0,
                                properties,
                                init$2[2],
                                additional_properties,
                                init$2[4],
                                init$2[5],
                                init$2[6],
                                init$2[7]]])},
                   more);
               return element([3,1,elements]);
              case 6:
               var more$0=object_schema(o$0);
               if(more$0 && ! more$0[2])
                {var
                  match$2=more$0[1],
                  ext$0=match$2[2],
                  properties$0=match$2[1],
                  additional_properties$0=ext$0?[0,element(2)]:0;
                 return element
                         ([0,
                           [0,
                            properties$0,
                            init$2[2],
                            additional_properties$0,
                            init$2[4],
                            init$2[5],
                            init$2[6],
                            init$2[7]]])}
               var
                elements$0=
                 map$1
                  (function(param)
                    {var
                      ext=param[2],
                      properties=param[1],
                      additional_properties=ext?[0,element(2)]:0;
                     return element
                             ([0,
                               [0,
                                properties,
                                init$2[2],
                                additional_properties,
                                init$2[4],
                                init$2[5],
                                init$2[6],
                                init$2[7]]])},
                   more$0);
               return element([3,1,elements$0]);
              case 7:return element([1,array_schema(o$0),array_specs$0]);
              case 8:return element([1,array_schema(o$0),array_specs$0]);
              case 9:
               var s=o$0[2];
               sch[1] = caml_call1(merge_definitions,[0,sch[1],s])[1];
               return caml_call1(root,s);
              case 10:
               var _bAX_=o$0[4],_bAY_=o$0[3];
               if(_bAX_)
                {var s$0=_bAX_[1];
                 sch[1] = caml_call1(merge_definitions,[0,sch[1],s$0])[1];
                 return caml_call1(root,s$0)}
               var o$0=_bAY_;
               continue;
              case 11:
               var
                encoding=o$0[4],
                description=o$0[3],
                title=o$0[2],
                name=o$0[1],
                schema$0=patch_description(title,description,schema(encoding)),
                match$3=
                 caml_call4
                  (add_definition,definitions_path,name,schema$0,sch[1]),
                def=match$3[2],
                s$1=match$3[1];
               sch[1] = caml_call1(merge_definitions,[0,sch[1],s$1])[1];
               return def;
              case 12:
               var f=o$0[4],description$0=o$0[3],title$0=o$0[2],name$0=o$0[1];
               if
                (caml_call3(definition_exists,definitions_path,name$0,sch[1]))
                var
                 _bAZ_=sch[1],
                 fake_schema=
                  caml_call2
                   (update,
                    caml_call2(definition_ref,definitions_path,name$0),
                    _bAZ_);
               else
                var
                 _bA1_=sch[1],
                 match$5=
                  caml_call4
                   (add_definition,definitions_path,name$0,element(3),_bA1_),
                 elt=match$5[2],
                 sch$0=match$5[1],
                 fake_schema=caml_call2(update,elt,sch$0);
               var
                _bA0_=function(param){throw [0,Assert_failure,_n7_]},
                fake_self=
                 [9,
                  [0,
                   function(param,_bA2_){throw [0,Assert_failure,_n8_]},
                   _bA0_],
                  fake_schema],
                root$0=
                 patch_description
                  (title$0,description$0,schema(caml_call1(f,fake_self))),
                match$4=
                 caml_call4
                  (add_definition,definitions_path,name$0,root$0,sch[1]),
                def$0=match$4[2],
                nsch=match$4[1];
               sch[1] = nsch;
               return def$0;
              default:
               var
                cases=o$0[1],
                elements$1=
                 map$1
                  (function(param)
                    {var description=param[3],title=param[2],encoding=param[1];
                     return patch_description(title,description,schema(encoding))},
                   cases);
               return element([3,1,elements$1])}}
        function array_schema(enc)
         {var enc$0=enc;
          for(;;)
           {if(typeof enc$0 !== "number")
             switch(enc$0[0])
              {case 7:var t=enc$0[1];return [0,schema(t),0];
               case 8:
                var t2=enc$0[2],t1=enc$0[1],_bAU_=array_schema(t2);
                return append(array_schema(t1),_bAU_);
               case 10:
                if(! enc$0[4]){var enc$1=enc$0[3],enc$0=enc$1;continue}break;
               case 11:var enc$2=enc$0[4],enc$0=enc$2;continue;
               case 12:
                var self=enc$0[4],enc$3=caml_call1(self,enc$0),enc$0=enc$3;
                continue
               }
            return invalid_arg(_n6_)}}
        function object_schema(enc)
         {var enc$0=enc;
          for(;;)
           {if(typeof enc$0 === "number")
             switch(enc$0){case 1:return _n3_;case 2:return _n4_}
            else
             switch(enc$0[0])
              {case 5:
                var _bAR_=enc$0[1];
                switch(_bAR_[0])
                 {case 0:
                   var
                    description=_bAR_[4],
                    title=_bAR_[3],
                    t=_bAR_[2],
                    n=_bAR_[1];
                   return [0,
                           [0,
                            [0,
                             [0,n,patch_description(title,description,schema(t)),1,0],
                             0],
                            0],
                           0];
                  case 1:
                   var
                    description$0=_bAR_[4],
                    title$0=_bAR_[3],
                    t$0=_bAR_[2],
                    n$0=_bAR_[1];
                   return [0,
                           [0,
                            [0,
                             [0,
                              n$0,
                              patch_description(title$0,description$0,schema(t$0)),
                              0,
                              0],
                             0],
                            0],
                           0];
                  default:
                   var
                    d=_bAR_[5],
                    description$1=_bAR_[4],
                    title$1=_bAR_[3],
                    t$1=_bAR_[2],
                    n$1=_bAR_[1],
                    d$0=[0,Ezjsonm,caml_call2(Ezjsonm_encoding[1],t$1,d)];
                   return [0,
                           [0,
                            [0,
                             [0,
                              n$1,
                              patch_description(title$1,description$1,schema(t$1)),
                              0,
                              [0,d$0]],
                             0],
                            0],
                           0]}
               case 6:
                var o2=enc$0[2],o1=enc$0[1],_bAS_=object_schema(o2);
                return prod(object_schema(o1),_bAS_);
               case 10:
                if(! enc$0[4]){var enc$1=enc$0[3],enc$0=enc$1;continue}break;
               case 11:var enc$2=enc$0[4],enc$0=enc$2;continue;
               case 12:
                var self=enc$0[4],enc$3=caml_call1(self,enc$0),enc$0=enc$3;
                continue;
               case 13:
                var _bAT_=enc$0[1];
                return _bAT_
                        ?flatten
                          (map$1
                            (function(param){var o=param[1];return object_schema(o)},
                             _bAT_))
                        :invalid_arg(_n5_)
               }
            return invalid_arg(_n2_)}}
        var schema$0=schema(encoding);
        return caml_call2(update,schema$0,sch[1])},
     null$0=0,
     _n9_=num_1073741823,
     _n__=num_1073741824,
     _n$_=function(_bAQ_){return _bAQ_},
     int$1=[2,[0,_oa_,function(_bAP_){return _bAP_ | 0},_n$_,_n__,_n9_]],
     ranged_int=
      function(lower_bound,upper_bound,name)
       {function _bAM_(_bAO_){return _bAO_}
        return [2,
                [0,
                 name,
                 function(_bAN_){return _bAN_ | 0},
                 _bAM_,
                 lower_bound,
                 upper_bound]]},
     _ob_=function(_bAL_){return _bAL_},
     int32=[2,[0,_oc_,function(_bAK_){return _bAK_ | 0},_ob_,min_int,max_int]],
     string$0=4,
     bool=3,
     is_nullable$0=
      function(enc)
       {var enc$0=enc;
        for(;;)
         if(typeof enc$0 === "number")
          switch(enc$0)
           {case 0:return 1;
            case 1:return 0;
            case 2:return 1;
            case 3:return 0;
            default:return 0}
         else
          switch(enc$0[0])
           {case 0:return 1;
            case 1:return 0;
            case 2:return 0;
            case 3:return 0;
            case 4:return 0;
            case 5:return 0;
            case 6:return 0;
            case 7:return 0;
            case 8:return 0;
            case 9:var sch=enc$0[2];return caml_call1(is_nullable,sch);
            case 10:var enc$1=enc$0[3],enc$0=enc$1;continue;
            case 11:var enc$2=enc$0[4],enc$0=enc$2;continue;
            case 12:
             var self=enc$0[4],enc$3=caml_call1(self,enc$0),enc$0=enc$3;
             continue;
            default:
             var cases=enc$0[1];
             return exists
                     (function(param){var t=param[1];return is_nullable$0(t)},
                      cases)}},
     read=function(repr,v){return convert(repr,Ezjsonm,v)},
     write=function(repr,v){return convert(Ezjsonm,repr,v)},
     json=[9,[0,write,read],any],
     _op_=
      function(j)
       {try
         {var _bAJ_=caml_call1(of_json,j);return _bAJ_}
        catch(err)
         {err = caml_wrap_exception(err);
          throw [0,Cannot_destruct,[0,0,[0,Bad_schema,err]]]}};
    caml_call3(Ezjsonm_encoding[3],to_json,_op_,self$0);
    var
     empty$2=1,
     unit=2,
     union=function(cases){return cases?[13,cases]:invalid_arg(_os_)},
     print_error$0=
      function(print_unknown,ppf,exn)
       {var exn$0=exn;
        for(;;)
         {if(exn$0[1] === Cannot_destruct)
           {var _bz0_=exn$0[2],_bz1_=_bz0_[1];
            if(! _bz1_){var exn$4=_bz0_[2],exn$0=exn$4;continue}
            var _bz2_=_bz0_[2];
            if(_bz2_[1] === Unexpected$0)
             {var
               ex=_bz2_[3],
               unex=_bz2_[2],
               _bz3_=
                function(_bAH_,_bAI_)
                 {return print_path_as_json_path(_ot_,_bAH_,_bAI_)};
              return caml_call5(pf(ppf),_ou_,_bz3_,_bz1_,unex,ex)}
            if(_bz2_[1] === No_case_matched)
             {var
               errs=_bz2_[2],
               _bz4_=
                function(_bAF_,_bAG_)
                 {return print_error$0(print_unknown,_bAF_,_bAG_)},
               _bz5_=0,
               _bz6_=
                function(_bAD_,_bAE_)
                 {return pp_print_list(_bz5_,_bz4_,_bAD_,_bAE_)},
               _bz7_=
                function(_bAB_,_bAC_)
                 {return print_path_as_json_path(_ov_,_bAB_,_bAC_)};
              return caml_call5(pf(ppf),_ow_,_bz7_,_bz1_,_bz6_,errs)}
            if(_bz2_[1] === Bad_array_size)
             {var
               ex$0=_bz2_[3],
               unex$0=_bz2_[2],
               _bz8_=
                function(_bAz_,_bAA_)
                 {return print_path_as_json_path(_ox_,_bAz_,_bAA_)};
              return caml_call5(pf(ppf),_oy_,_bz8_,_bz1_,unex$0,ex$0)}
            if(_bz2_[1] === Missing_field)
             {var
               n=_bz2_[2],
               _bz9_=
                function(_bAx_,_bAy_)
                 {return print_path_as_json_path(_oz_,_bAx_,_bAy_)};
              return caml_call4(pf(ppf),_oA_,_bz9_,_bz1_,n)}
            if(_bz2_[1] === Unexpected_field)
             {var
               n$0=_bz2_[2],
               _bz__=
                function(_bAv_,_bAw_)
                 {return print_path_as_json_path(_oB_,_bAv_,_bAw_)};
              return caml_call4(pf(ppf),_oC_,_bz__,_bz1_,n$0)}
            if(_bz2_[1] === Bad_schema)
             {var
               exn$1=_bz2_[2],
               _bz$_=
                function(_bAt_,_bAu_)
                 {return print_error$0(print_unknown,_bAt_,_bAu_)},
               _bAa_=
                function(_bAr_,_bAs_)
                 {return print_path_as_json_path(_oD_,_bAr_,_bAs_)};
              return caml_call5(pf(ppf),_oE_,_bAa_,_bz1_,_bz$_,exn$1)}}
          else
           if(exn$0[1] === Unexpected$0)
            {var ex$2=exn$0[3],unex$2=exn$0[2];
             return caml_call3(pf(ppf),_oM_,unex$2,ex$2)}
          if(exn$0[1] === No_case_matched)
           {var
             errs$0=exn$0[2],
             _bAb_=
              function(_bAp_,_bAq_)
               {return print_error$0(print_unknown,_bAp_,_bAq_)},
             _bAc_=0,
             _bAd_=
              function(_bAn_,_bAo_)
               {return pp_print_list(_bAc_,_bAb_,_bAn_,_bAo_)};
            return caml_call3(pf(ppf),_oF_,_bAd_,errs$0)}
          if(exn$0[1] === Bad_array_size)
           {var ex$1=exn$0[3],unex$1=exn$0[2];
            return caml_call3(pf(ppf),_oG_,unex$1,ex$1)}
          if(exn$0[1] === Missing_field)
           {var n$1=exn$0[2];return caml_call2(pf(ppf),_oH_,n$1)}
          if(exn$0[1] === Unexpected_field)
           {var n$2=exn$0[2];return caml_call2(pf(ppf),_oI_,n$2)}
          if(exn$0[1] === Bad_schema)
           {var
             exn$2=exn$0[2],
             _bAe_=
              function(_bAl_,_bAm_)
               {return print_error$0(print_unknown,_bAl_,_bAm_)};
            return caml_call3(pf(ppf),_oJ_,_bAe_,exn$2)}
          if(exn$0[1] === Cannot_destruct)
           {var
             match=exn$0[2],
             exn$3=match[2],
             path=match[1],
             _bAf_=
              function(_bAj_,_bAk_)
               {return print_error$0(print_unknown,_bAj_,_bAk_)},
             _bAg_=
              function(_bAh_,_bAi_)
               {return print_path_as_json_path(_oK_,_bAh_,_bAi_)};
            return caml_call5(pf(ppf),_oL_,_bAg_,path,_bAf_,exn$3)}
          return print_error(print_unknown,ppf,exn$0)}},
     construct$0=Ezjsonm_encoding[1],
     destruct=Ezjsonm_encoding[2],
     unsafe_get_int8=
      function(s,off){return caml_bytes_unsafe_get(s,off) << 23 >> 23},
     unsafe_set_int8=
      function(s,off,v){caml_bytes_unsafe_set(s,off,v);return 0},
     set_double=
      function(buff,i,v)
       {return caml_bytes_set64(buff,i,caml_int64_bits_of_float(v))},
     Bson_decoding_error=[num_248,_oN_,caml_fresh_oo_id(0)],
     view$0=
      function(root)
       {var _bzW_=root[1];
        if(1 === _bzW_[0])
         {var
           serialized=_bzW_[1],
           array_field=serialized[4],
           length=serialized[3],
           offset=serialized[2],
           buffer=serialized[1],
           offset$0=[0,offset],
           length$0=[0,length],
           error=
            function(fmt)
             {return kprintf
                      (function(msg)
                        {throw [0,Bson_decoding_error,msg,buffer,offset$0[1]]},
                       fmt)},
           box=function(node){return [0,node,0,root[3]]},
           skip=
            function(n)
             {offset$0[1] = offset$0[1] + n | 0;
              length$0[1] = length$0[1] - n | 0;
              return 0},
           read_float=
            function(param)
             {if(length$0[1] < 8)error(_oO_);
              var
               res=
                caml_int64_float_of_bits(caml_bytes_get64(buffer,offset$0[1]));
              skip(8);
              return res},
           read_string=
            function(param)
             {if(length$0[1] < 4)error(_oP_);
              var strlen=caml_bytes_get32(buffer,offset$0[1]) - 1 | 0;
              skip(4);
              if(length$0[1] < strlen)caml_call1(error(_oQ_),strlen);
              var res=sub_string(buffer,offset$0[1],strlen);
              skip(strlen);
              if(length$0[1] < 1)error(_oR_);
              if(0 !== unsafe_get_int8(buffer,offset$0[1]))error(_oS_);
              skip(1);
              return res},
           read_bool=
            function(param)
             {if(length$0[1] < 1)error(_oT_);
              var
               byte$0=unsafe_get_int8(buffer,offset$0[1]),
               res=
                0 === byte$0?0:1 === byte$0?1:caml_call1(error(_oU_),byte$0);
              skip(1);
              return res},
           read_field_name=
            function(param)
             {var len=0;
              for(;;)
               {if(0 === length$0[1])error(_oV_);
                var match=unsafe_get_int8(buffer,offset$0[1]);
                if(0 === match)
                 {skip(- len | 0);
                  var res=sub_string(buffer,offset$0[1],len);
                  skip(len + 1 | 0);
                  return res}
                skip(1);
                var len$0=len + 1 | 0,len=len$0;
                continue}};
          if(length$0[1] < 5)error(_oW_);
          var size=caml_bytes_get32(buffer,offset$0[1]);
          if(size !== length$0[1])error(_oX_);
          skip(4);
          var tag=unsafe_get_int8(buffer,offset$0[1]);
          if(0 === tag)
           var deserialized$0=1 === length$0[1]?_oY_:error(_oZ_);
          else
           {var switch$0=0;
            if(root[2] || ! (num_128 === (tag & num_240)))
             switch$0 = 1;
            else
             {skip(1);
              var tag$0=tag & 15,switcher=tag$0 - 1 | 0,switch$1=0;
              if(! (9 < switcher >>> 0))
               {var switch$2=0;
                switch(switcher)
                 {case 0:var _bzX_=[0,num_365180284,read_float(0)];break;
                  case 1:var _bzX_=[0,num_976970511,read_string(0)];break;
                  case 7:var _bzX_=[0,num_737456202,read_bool(0)];break;
                  case 9:var _bzX_=num_870828711;break;
                  default:switch$2 = 1}
                if(! switch$2){var res=_bzX_;switch$1 = 1}}
              if(! switch$1)var res=caml_call1(error(_o6_),tag$0);
              if(1 !== length$0[1])error(_o7_);
              if(0 !== unsafe_get_int8(buffer,offset$0[1]))error(_o8_);
              skip(1);
              var deserialized$0=res}
            if(switch$0)
             var
              loop=
               function(acc)
                {var acc$0=acc;
                 for(;;)
                  {var tag=unsafe_get_int8(buffer,offset$0[1]);
                   if(0 === tag)
                    {if(1 === length$0[1])
                      {if(array_field)
                        try
                         {var
                           to_array=
                            function(acc,i,param)
                             {var acc$0=acc,i$0=i,param$0=param;
                              for(;;)
                               {if(param$0)
                                 {var
                                   rest=param$0[2],
                                   match=param$0[1],
                                   bson=match[2],
                                   name=match[1];
                                  if
                                   (caml_string_equal
                                     (name,caml_string_of_jsbytes(str$59 + i$0)))
                                   {var
                                     i$1=i$0 + 1 | 0,
                                     acc$1=[0,bson,acc$0],
                                     acc$0=acc$1,
                                     i$0=i$1,
                                     param$0=rest;
                                    continue}
                                  throw Exit}
                                return [0,65,rev(acc$0)]}},
                           _bzY_=to_array(0,0,rev(acc$0));
                          return _bzY_}
                        catch(_bzZ_)
                         {_bzZ_ = caml_wrap_exception(_bzZ_);
                          if(_bzZ_ === Exit)return error(_o0_);
                          throw _bzZ_}
                       return [0,79,rev(acc$0)]}
                     return error(_o1_)}
                   skip(1);
                   var switcher=tag - 1 | 0;
                   if(! (9 < switcher >>> 0))
                    switch(switcher)
                     {case 0:
                       var
                        name=read_field_name(0),
                        acc$1=
                         [0,[0,name,box([0,[0,num_365180284,read_float(0)]])],acc$0],
                        acc$0=acc$1;
                       continue;
                      case 1:
                       var
                        name$0=read_field_name(0),
                        acc$2=
                         [0,
                          [0,name$0,box([0,[0,num_976970511,read_string(0)]])],
                          acc$0],
                        acc$0=acc$2;
                       continue;
                      case 7:
                       var
                        name$2=read_field_name(0),
                        acc$4=
                         [0,[0,name$2,box([0,[0,num_737456202,read_bool(0)]])],acc$0],
                        acc$0=acc$4;
                       continue;
                      case 9:
                       var
                        name$3=read_field_name(0),
                        acc$5=[0,[0,name$3,box(_o5_)],acc$0],
                        acc$0=acc$5;
                       continue;
                      case 2:
                      case 3:
                       var name$1=read_field_name(0);
                       if(length$0[1] < 4)error(_o3_);
                       var doclen=caml_bytes_get32(buffer,offset$0[1]);
                       if(length$0[1] < doclen)caml_call1(error(_o4_),doclen);
                       var serialized=[0,buffer,offset$0[1],doclen,4 === tag?1:0];
                       skip(doclen);
                       var
                        acc$3=[0,[0,name$1,box([1,serialized])],acc$0],
                        acc$0=acc$3;
                       continue
                      }
                   return caml_call1(error(_o2_),tag)}},
              deserialized$0=loop(0)}
          root[1] = root[3]?[2,deserialized$0,serialized]:[0,deserialized$0];
          return deserialized$0}
        var deserialized=_bzW_[1];
        return deserialized},
     repr$0=function(deserialized){return [0,[0,deserialized],0,1]},
     repr_uid$1=repr_uid(0),
     arg$2=
      function(opt,_bzB_,bson)
       {if(opt)var sth=opt[1],cache=sth;else var cache=1;
        if(_bzB_)var sth$0=_bzB_[1],conforming=sth$0;else var conforming=0;
        var _bzA_=bson[1];
        switch(_bzA_[0])
         {case 0:
           var
            compute_size=
             function(bson)
              {var _bzO_=bson[1];
               switch(_bzO_[0])
                {case 0:
                  var deserialized=_bzO_[1];
                  if(typeof deserialized === "number")return 6;
                  var _bzP_=deserialized[1];
                  if(65 === _bzP_)
                   {var
                     cells=deserialized[2],
                     match=
                      fold_left$0
                       (function(param,bson)
                         {var i=param[2],acc=param[1],match=view$0(bson);
                          if(typeof match === "number")
                           var self=0;
                          else
                           {var _bzU_=match[1];
                            if(num_365180284 <= _bzU_)
                             var _bzV_=num_737456202 <= _bzU_?1:8;
                            else
                             if(65 <= _bzU_)
                              var _bzV_=compute_size(bson);
                             else
                              var
                               str=match[2],
                               _bzV_=(4 + caml_ml_string_length(str) | 0) + 1 | 0;
                            var self=_bzV_}
                          var acc$0=0,i$0=i,_bzT_=i + 1 | 0;
                          for(;;)
                           {if(9 < i$0)
                             {var
                               i$1=i$0 / 10 | 0,
                               acc$1=1 + acc$0 | 0,
                               acc$0=acc$1,
                               i$0=i$1;
                              continue}
                            return [0,
                                    (((acc + 1 | 0) + (1 + acc$0 | 0) | 0) + 1 | 0) + self | 0,
                                    _bzT_]}},
                        _o9_,
                        cells),
                     acc=match[1];
                    return (4 + acc | 0) + 1 | 0}
                  if(num_365180284 <= _bzP_)
                   return num_737456202 <= _bzP_?7:14;
                  if(79 <= _bzP_)
                   {var
                     fields=deserialized[2],
                     _bzQ_=0,
                     acc$0=
                      fold_left$0
                       (function(acc,param)
                         {var bson=param[2],name=param[1],match=view$0(bson);
                          if(typeof match === "number")
                           var self=0;
                          else
                           {var _bzR_=match[1];
                            if(num_365180284 <= _bzR_)
                             var _bzS_=num_737456202 <= _bzR_?1:8;
                            else
                             if(65 <= _bzR_)
                              var _bzS_=compute_size(bson);
                             else
                              var
                               str=match[2],
                               _bzS_=(4 + caml_ml_string_length(str) | 0) + 1 | 0;
                            var self=_bzS_}
                          return (((acc + 1 | 0) + caml_ml_string_length(name) | 0)
                                  +
                                  1
                                  |
                                  0)
                                 +
                                 self
                                 |
                                 0},
                        _bzQ_,
                        fields);
                    return (4 + acc$0 | 0) + 1 | 0}
                  var str=deserialized[2];
                  return ((9 + caml_ml_string_length(str) | 0) + 1 | 0)
                         +
                         1
                         |
                         0;
                 case 1:var length=_bzO_[1][3];break;
                 default:var length=_bzO_[2][3]}
               return length},
            computed_size=compute_size(bson),
            result=caml_create_bytes(computed_size),
            pos=[0,0],
            symbol=function(r,i){r[1] = r[1] + i | 0;return 0},
            reserve_size_stamp=
             function(param)
              {var offset=pos[1];
               symbol(pos,4);
               return function(param)
                {unsafe_set_int8(result,pos[1],0);
                 symbol(pos,1);
                 var size=pos[1] - offset | 0;
                 return caml_bytes_set32(result,offset,size)}},
            serialize=
             function(conforming,bson)
              {var _bzF_=bson[1];
               switch(_bzF_[0])
                {case 0:
                  var deserialized=_bzF_[1],offset=pos[1],switch$0=0;
                  if(typeof deserialized === "number")
                   {if(num_870828711 !== deserialized)switch$0 = 1}
                  else
                   {var _bzE_=deserialized[1];
                    if(66 <= _bzE_)
                     {if(num_365180284 !== _bzE_ && num_737456202 !== _bzE_)
                       switch$0 = 1}
                    else
                     if(num_976970511 !== _bzE_ && ! (65 <= _bzE_))switch$0 = 1}
                  if(! switch$0 && conforming)throw [0,Invalid_argument,_o__];
                  if(typeof deserialized === "number")
                   {var update_size_stamp=reserve_size_stamp(0);
                    unsafe_set_int8(result,pos[1],138);
                    symbol(pos,1);
                    caml_call1(update_size_stamp,0)}
                  else
                   {var _bzC_=deserialized[1];
                    if(num_365180284 <= _bzC_)
                     if(num_737456202 <= _bzC_)
                      {var
                        b=deserialized[2],
                        update_size_stamp$0=reserve_size_stamp(0);
                       unsafe_set_int8(result,pos[1],136);
                       symbol(pos,1);
                       var _bzD_=b?1:0;
                       unsafe_set_int8(result,pos[1],_bzD_);
                       symbol(pos,1);
                       caml_call1(update_size_stamp$0,0)}
                     else
                      {var
                        f=deserialized[2],
                        update_size_stamp$1=reserve_size_stamp(0);
                       unsafe_set_int8(result,pos[1],129);
                       symbol(pos,1);
                       set_double(result,pos[1],f);
                       symbol(pos,8);
                       caml_call1(update_size_stamp$1,0)}
                    else
                     if(65 <= _bzC_)
                      {if(79 <= deserialized[1])
                        var fields=deserialized[2],fields$0=fields;
                       else
                        var
                         cells=deserialized[2],
                         fields$0=
                          mapi
                           (function(i,v)
                             {return [0,caml_string_of_jsbytes(str$59 + i),v]},
                            cells);
                       var update_size_stamp$2=reserve_size_stamp(0);
                       iter$0
                        (function(param)
                          {var bson=param[2],name=param[1],match=view$0(bson);
                           if(typeof match === "number")
                            var _bzJ_=10;
                           else
                            var
                             _bzM_=match[1],
                             _bzN_=
                              65 === _bzM_
                               ?4
                               :num_365180284 <= _bzM_
                                 ?num_737456202 <= _bzM_?8:1
                                 :79 <= _bzM_?3:2,
                             _bzJ_=_bzN_;
                           unsafe_set_int8(result,pos[1],_bzJ_);
                           symbol(pos,1);
                           var strlen=caml_ml_string_length(name);
                           blit$0(name,0,result,pos[1],strlen);
                           symbol(pos,strlen);
                           unsafe_set_int8(result,pos[1],0);
                           symbol(pos,1);
                           var match$0=view$0(bson);
                           if(typeof match$0 === "number")return 0;
                           var _bzK_=match$0[1];
                           if(num_365180284 <= _bzK_)
                            {if(num_737456202 <= _bzK_)
                              {var b=match$0[2],_bzL_=b?1:0;
                               unsafe_set_int8(result,pos[1],_bzL_);
                               return symbol(pos,1)}
                             var f=match$0[2];
                             set_double(result,pos[1],f);
                             return symbol(pos,8)}
                           if(65 <= _bzK_)return serialize(0,bson);
                           var str=match$0[2],strlen$0=caml_ml_string_length(str);
                           caml_bytes_set32(result,pos[1],strlen$0 + 1 | 0);
                           symbol(pos,4);
                           blit$0(str,0,result,pos[1],strlen$0);
                           symbol(pos,strlen$0);
                           unsafe_set_int8(result,pos[1],0);
                           return symbol(pos,1)},
                         fields$0);
                       caml_call1(update_size_stamp$2,0)}
                     else
                      {var
                        str=deserialized[2],
                        update_size_stamp$3=reserve_size_stamp(0);
                       unsafe_set_int8(result,pos[1],130);
                       symbol(pos,1);
                       var strlen=caml_ml_string_length(str);
                       caml_bytes_set32(result,pos[1],strlen + 1 | 0);
                       symbol(pos,4);
                       blit$0(str,0,result,pos[1],strlen);
                       symbol(pos,strlen);
                       unsafe_set_int8(result,pos[1],0);
                       symbol(pos,1);
                       caml_call1(update_size_stamp$3,0)}}
                  var length=pos[1] - offset | 0;
                  if(cache)
                   {var switch$1=0;
                    if
                     (typeof deserialized !== "number" && 65 === deserialized[1])
                     {var array_field=1;switch$1 = 1}
                    if(! switch$1)var array_field=0;
                    var serialized=[0,result,offset,length,array_field];
                    bson[1] = [2,deserialized,serialized];
                    var _bzG_=0}
                  else
                   var _bzG_=cache;
                  return _bzG_;
                 case 1:
                  var
                   _bzH_=_bzF_[1],
                   buffer=_bzH_[1],
                   offset$0=_bzH_[2],
                   length$0=_bzH_[3];
                  break;
                 default:
                  var
                   _bzI_=_bzF_[2],
                   buffer=_bzI_[1],
                   offset$0=_bzI_[2],
                   length$0=_bzI_[3]}
               blit(buffer,offset$0,result,pos[1],length$0);
               pos[1] = pos[1] + length$0 | 0;
               return 0};
           serialize(conforming,bson);
           return result;
          case 1:var serialized=_bzA_[1];break;
          default:var serialized=_bzA_[2]}
        if
         (0
          ===
          serialized[2]
          &&
          serialized[3]
          ===
          caml_ml_bytes_length(serialized[1]))
         return serialized[1];
        return sub(serialized[1],serialized[2],serialized[3])},
     bytes_to_bson=
      function(opt,_bzy_,_bzx_,copy$0,buffer)
       {if(opt)var sth=opt[1],laziness=sth;else var laziness=1;
        if(_bzy_)var sth$0=_bzy_[1],cache=sth$0;else var cache=1;
        if(_bzx_)var sth$1=_bzx_[1],conforming=sth$1;else var conforming=0;
        var
         buffer$0=copy$0?copy(buffer):buffer,
         serialized=[0,buffer$0,0,caml_ml_bytes_length(buffer$0),0],
         root=[0,[1,serialized],conforming,cache];
        function traverse(bson)
         {var match=view$0(bson);
          if(typeof match !== "number")
           {var _bzz_=match[1];
            if(65 === _bzz_){var cells=match[2];return iter$0(traverse,cells)}
            if(79 === _bzz_)
             {var fields=match[2];
              return iter$0
                      (function(param){var bson=param[2];return traverse(bson)},
                       fields)}}
          return 0}
        if(1 - laziness)traverse(root);
        return root},
     Json_encoding=Make$3([0,view$0,repr$0,repr_uid$1]),
     _o$_=[0,view$0,repr$0,repr_uid$1],
     unsafe_set_byte=
      function(s,j,byte$0){caml_bytes_unsafe_set(s,j,byte$0);return 0},
     u_bom=num_65279,
     u_rep=65533,
     malformed=function(s,j,l){return [0,num_659980059,sub_string(s,j,l)]},
     malformed_pair=
      function(be,hi,s,j,l)
       {var bs1=sub(s,j,l),bs0=caml_create_bytes(2);
        if(be)var j0=0,j1=1;else var j0=1,j1=0;
        unsafe_set_byte(bs0,j0,hi >>> 8 | 0);
        unsafe_set_byte(bs0,j1,hi & num_255);
        return [0,num_659980059,caml_string_of_bytes(cat(bs0,bs1))]},
     utf_8_len=_pb_.slice(),
     r_utf_8=
      function(s,j,l)
       {function uchar(c){return [0,num_852405675,c]}
        var switcher=l - 1 | 0;
        if(3 < switcher >>> 0)throw [0,Assert_failure,_pc_];
        switch(switcher)
         {case 0:return uchar(caml_bytes_unsafe_get(s,j));
          case 1:
           var
            b0=caml_bytes_unsafe_get(s,j),
            b1=caml_bytes_unsafe_get(s,j + 1 | 0);
           return 2 === (b1 >>> 6 | 0)
                   ?uchar((b0 & 31) << 6 | b1 & 63)
                   :malformed(s,j,l);
          case 2:
           var
            b0$0=caml_bytes_unsafe_get(s,j),
            b1$0=caml_bytes_unsafe_get(s,j + 1 | 0),
            b2=caml_bytes_unsafe_get(s,j + 2 | 0),
            c=(b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
           if(2 === (b2 >>> 6 | 0))
            {if(num_224 === b0$0)
              {if(160 <= b1$0 && ! (num_191 < b1$0))return uchar(c);
               return malformed(s,j,l)}
             if(237 === b0$0)
              {if(num_128 <= b1$0 && ! (159 < b1$0))return uchar(c);
               return malformed(s,j,l)}
             return 2 === (b1$0 >>> 6 | 0)?uchar(c):malformed(s,j,l)}
           return malformed(s,j,l);
          default:
           var
            b0$1=caml_bytes_unsafe_get(s,j),
            b1$1=caml_bytes_unsafe_get(s,j + 1 | 0),
            b2$0=caml_bytes_unsafe_get(s,j + 2 | 0),
            b3=caml_bytes_unsafe_get(s,j + 3 | 0),
            c$0=
             (b0$1 & 7)
             <<
             18
             |
             (b1$1 & 63)
             <<
             12
             |
             (b2$0 & 63)
             <<
             6
             |
             b3
             &
             63;
           if(2 === (b3 >>> 6 | 0) && 2 === (b2$0 >>> 6 | 0))
            {if(num_240 === b0$1)
              {if(num_144 <= b1$1 && ! (num_191 < b1$1))return uchar(c$0);
               return malformed(s,j,l)}
             if(244 === b0$1)
              {if(num_128 <= b1$1 && ! (143 < b1$1))return uchar(c$0);
               return malformed(s,j,l)}
             return 2 === (b1$1 >>> 6 | 0)?uchar(c$0):malformed(s,j,l)}
           return malformed(s,j,l)}},
     r_utf_16=
      function(s,j0,j1)
       {var
         b0=caml_bytes_unsafe_get(s,j0),
         b1=caml_bytes_unsafe_get(s,j1),
         u=b0 << 8 | b1;
        if(num_55296 <= u && ! (num_57343 < u))
         return num_56319 < u?malformed(s,min(j0,j1),2):[0,16161,u];
        return [0,num_852405675,u]},
     r_utf_16_lo=
      function(hi,s,j0,j1)
       {var
         b0=caml_bytes_unsafe_get(s,j0),
         b1=caml_bytes_unsafe_get(s,j1),
         lo=b0 << 8 | b1;
        if(num_56320 <= lo && ! (num_57343 < lo))
         return [0,
                 num_852405675,
                 ((hi & num_1023) << 10 | lo & num_1023) + num_65536 | 0];
        return malformed_pair(j0 < j1?1:0,hi,s,min(j0,j1),2)},
     i_rem=function(d){return (d[7] - d[6] | 0) + 1 | 0},
     eoi=
      function(d){d[5] = empty_return;d[6] = 0;d[7] = min_int_float;return 0},
     refill=
      function(k,d)
       {var _bzv_=d[1];
        if(typeof _bzv_ === "number"){d[18] = k;return num_1006505782}
        if(num_438511779 <= _bzv_[1])
         {var
           ic=_bzv_[2],
           l=input(ic,d[5],0,caml_ml_bytes_length(d[5])),
           _bzw_=d[5],
           switch$0=0,
           j=0;
          if(0 <= l && ! (caml_ml_bytes_length(_bzw_) < (l | 0)))
           if(0 === l)
            eoi(d);
           else
            {d[5] = _bzw_;d[6] = j;d[7] = (l | 0) - 1 | 0}
          else
           switch$0 = 1;
          if(switch$0)invalid_arg(caml_call2(sprintf(_pa_),j,l));
          return caml_call1(k,d)}
        eoi(d);
        return caml_call1(k,d)},
     t_need=function(d,need){d[9] = 0;d[10] = need;return 0},
     t_fill=
      function(k,d)
       {function blit(d,l)
         {caml_blit_bytes(d[5],d[6],d[8],d[9],l);
          d[6] = d[6] + l | 0;
          d[9] = d[9] + l | 0;
          return 0}
        var rem=i_rem(d);
        if(0 <= rem)
         {var need=d[10] - d[9] | 0;
          return rem < need
                  ?(blit(d,rem),
                    refill(function(_bzu_){return t_fill(k,_bzu_)},d))
                  :(blit(d,need),caml_call1(k,d))}
        return caml_call1(k,d)},
     ret=
      function(k,v,byte_count,d)
       {d[18] = k;d[15] = d[15] + byte_count | 0;return caml_call2(d[17],d,v)},
     decode_us_ascii=
      function(d)
       {var rem=i_rem(d);
        if(0 < rem)
         {var j=d[6];
          d[6] = d[6] + 1 | 0;
          var
           _bzs_=d[5],
           b0=caml_bytes_unsafe_get(_bzs_,j),
           _bzr_=1,
           _bzt_=num_127 < b0?malformed(_bzs_,j,1):[0,num_852405675,b0];
          return ret(decode_us_ascii,_bzt_,_bzr_,d)}
        return 0 <= rem?refill(decode_us_ascii,d):num_3455931},
     decode_iso_8859_1=
      function(d)
       {var rem=i_rem(d);
        if(0 < rem)
         {var j=d[6];
          d[6] = d[6] + 1 | 0;
          return ret
                  (decode_iso_8859_1,
                   [0,num_852405675,caml_bytes_unsafe_get(d[5],j)],
                   1,
                   d)}
        return 0 <= rem?refill(decode_iso_8859_1,d):num_3455931},
     t_decode_utf_8=
      function(d)
       {if(d[9] < d[10])
         {var _bzp_=d[9];
          return ret(decode_utf_8,malformed(d[8],0,d[9]),_bzp_,d)}
        var _bzq_=d[9];
        return ret(decode_utf_8,r_utf_8(d[8],0,d[9]),_bzq_,d)},
     decode_utf_8=
      function(d)
       {var rem=i_rem(d);
        if(0 < rem)
         {var need=utf_8_len[1 + caml_bytes_unsafe_get(d[5],d[6])];
          if(rem < need){t_need(d,need);return t_fill(t_decode_utf_8,d)}
          var j=d[6];
          return 0 === need
                  ?(d[6]
                    =
                    d[6]
                    +
                    1
                    |
                    0,
                    ret(decode_utf_8,malformed(d[5],j,1),1,d))
                  :(d[6]
                    =
                    d[6]
                    +
                    need
                    |
                    0,
                    ret(decode_utf_8,r_utf_8(d[5],j,need),need,d))}
        return 0 <= rem?refill(decode_utf_8,d):num_3455931},
     t_decode_utf_16be_lo=
      function(hi,d)
       {var bcount=d[9] + 2 | 0;
        return d[9] < d[10]
                ?ret
                  (decode_utf_16be,malformed_pair(1,hi,d[8],0,d[9]),bcount,d)
                :ret(decode_utf_16be,r_utf_16_lo(hi,d[8],0,1),bcount,d)},
     decode_utf_16be_lo=
      function(v,d)
       {if(num_659980059 <= v[1])return ret(decode_utf_16be,v,2,d);
        var hi=v[2],rem=i_rem(d);
        if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return ret(decode_utf_16be,r_utf_16_lo(hi,d[5],j,j + 1 | 0),4,d)}
        t_need(d,2);
        return t_fill
                (function(_bzo_){return t_decode_utf_16be_lo(hi,_bzo_)},d)},
     t_decode_utf_16be=
      function(d)
       {if(d[9] < d[10])
         {var _bzn_=d[9];
          return ret(decode_utf_16be,malformed(d[8],0,d[9]),_bzn_,d)}
        return decode_utf_16be_lo(r_utf_16(d[8],0,1),d)},
     decode_utf_16be=
      function(d)
       {var rem=i_rem(d);
        if(0 < rem)
         {if(2 <= rem)
           {var j=d[6];
            d[6] = d[6] + 2 | 0;
            return decode_utf_16be_lo(r_utf_16(d[5],j,j + 1 | 0),d)}
          t_need(d,2);
          return t_fill(t_decode_utf_16be,d)}
        return 0 <= rem?refill(decode_utf_16be,d):num_3455931},
     t_decode_utf_16_lo=
      function(hi,d)
       {var bcount=d[9] + 2 | 0;
        return d[9] < d[10]
                ?ret(decode_utf_16,malformed_pair(0,hi,d[8],0,d[9]),bcount,d)
                :ret(decode_utf_16,r_utf_16_lo(hi,d[8],1,0),bcount,d)},
     decode_utf_16le_lo=
      function(v,d)
       {if(num_659980059 <= v[1])return ret(decode_utf_16,v,2,d);
        var hi=v[2],rem=i_rem(d);
        if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return ret(decode_utf_16,r_utf_16_lo(hi,d[5],j + 1 | 0,j),4,d)}
        t_need(d,2);
        return t_fill(function(_bzm_){return t_decode_utf_16_lo(hi,_bzm_)},d)},
     t_decode_utf_16=
      function(d)
       {if(d[9] < d[10])
         {var _bzl_=d[9];
          return ret(decode_utf_16,malformed(d[8],0,d[9]),_bzl_,d)}
        return decode_utf_16le_lo(r_utf_16(d[8],1,0),d)},
     decode_utf_16=
      function(d)
       {var rem=i_rem(d);
        if(0 < rem)
         {if(2 <= rem)
           {var j=d[6];
            d[6] = d[6] + 2 | 0;
            return decode_utf_16le_lo(r_utf_16(d[5],j + 1 | 0,j),d)}
          t_need(d,2);
          return t_fill(t_decode_utf_16,d)}
        return 0 <= rem?refill(decode_utf_16,d):num_3455931},
     guessed_utf_16=
      function(d,be,v)
       {if(be)
         var
          decode_utf_16$0=decode_utf_16be,
          t_decode_utf_16$0=t_decode_utf_16be,
          t_decode_utf_16_lo$0=t_decode_utf_16be_lo,
          j0=0,
          j1=1;
        else
         var
          decode_utf_16$0=decode_utf_16,
          t_decode_utf_16$0=t_decode_utf_16,
          t_decode_utf_16_lo$0=t_decode_utf_16_lo,
          j0=1,
          j1=0;
        function b3(k,d)
         {return 3 <= d[9]
                  ?(d[10]
                    =
                    2,
                    d[9]
                    =
                    1,
                    unsafe_set_byte(d[8],0,caml_bytes_unsafe_get(d[8],2)),
                    t_fill(k,d))
                  :decode_utf_16$0(d)}
        if(typeof v === "number")
         {if(num_427938126 <= v)
           {var v$0=r_utf_16(d[8],j0,j1);
            if(num_659980059 <= v$0[1])
             {var _bzb_=2;
              return ret
                      (function(_bzk_){return b3(t_decode_utf_16$0,_bzk_)},
                       v$0,
                       _bzb_,
                       d)}
            var hi=v$0[2];
            if(3 <= d[9])
             return b3
                     (function(_bzj_){return t_decode_utf_16_lo$0(hi,_bzj_)},d);
            var _bzc_=d[9];
            return ret
                    (decode_utf_16$0,
                     malformed_pair(be,hi,empty_return,0,0),
                     _bzc_,
                     d)}
          var _bzd_=2,_bze_=[0,num_852405675,u_bom];
          return ret
                  (function(_bzi_){return b3(t_decode_utf_16$0,_bzi_)},
                   _bze_,
                   _bzd_,
                   d)}
        var u=v[2],_bzf_=2,_bzg_=[0,num_852405675,u];
        return ret
                (function(_bzh_){return b3(t_decode_utf_16$0,_bzh_)},
                 _bzg_,
                 _bzf_,
                 d)},
     k=
      function(d)
       {function setup(d)
         {var _by__=d[9],_by$_=d[8];
          function some(i)
           {return i < _by__?[0,caml_bytes_unsafe_get(_by$_,i | 0)]:0}
          var match=some(0),match$0=some(1),match$1=some(2);
          if(match)
           {var _by7_=match[1],switch$0=0;
            if(num_240 <= _by7_)
             if(num_254 === _by7_)
              {if(match$0)
                if(num_255 === match$0[1])
                 {var match$2=_pd_;switch$0 = 1}
                else
                 switch$0 = 2}
             else
              if(num_255 === _by7_)
               {if(match$0)
                 if(num_254 === match$0[1])
                  {var match$2=_pi_;switch$0 = 1}
                 else
                  switch$0 = 2}
              else
               switch$0 = 2;
            else
             if(0 === _by7_)
              {if(match$0)
                {var p=match$0[1];
                 if(0 < p)
                  {var match$2=[0,num_211558048,[0,num_605782321,p]];
                   switch$0 = 1}
                 else
                  switch$0 = 2}}
             else
              if(239 <= _by7_)
               {if(match$0)
                 if(num_187 === match$0[1])
                  {if(match$1 && num_191 === match$1[1])
                    {var match$2=_pj_;switch$0 = 1}}
                 else
                  switch$0 = 2}
              else
               switch$0 = 2;
            var switch$1=0;
            switch(switch$0)
             {case 2:
               if(match$0 && 0 === match$0[1] && 0 < _by7_)
                var match$2=[0,num_211555818,[0,num_605782321,_by7_]];
               else
                switch$1 = 1;
               break;
              case 0:switch$1 = 1;break
              }
            if(switch$1)
             if(0 === caml_check_bound(utf_8_len,_by7_)[1 + _by7_])
              if(match$0)
               var match$2=_pe_;
              else
               {if(match$1)throw [0,Assert_failure,_pf_];var match$2=_pg_}
             else
              var match$2=_ph_}
          else
           {if(match$0)throw [0,Assert_failure,_pk_];
            if(match$1)throw [0,Assert_failure,_pl_];
            var match$2=_pm_}
          var _bza_=match$2[1];
          if(num_211555818 === _bza_)
           {var r=match$2[2];
            d[2] = num_211555818;
            d[18] = decode_utf_16;
            return guessed_utf_16(d,0,r)}
          if(num_684370880 <= _bza_)
           {var r$0=match$2[2];
            d[2] = num_684370880;
            d[18] = decode_utf_8;
            if(num_3455931 === r$0)return num_3455931;
            if(num_427938126 <= r$0)
             {var
               b3=
                function(d)
                 {var
                   b3=caml_bytes_unsafe_get(d[8],2),
                   n=caml_check_bound(utf_8_len,b3)[1 + b3];
                  return 0 === n
                          ?ret(decode_utf_8,malformed(d[8],2,1),1,d)
                          :(d[10]
                            =
                            n,
                            d[9]
                            =
                            1,
                            unsafe_set_byte(d[8],0,b3),
                            t_fill(t_decode_utf_8,d))},
               b2=
                function(d)
                 {var
                   b2=caml_bytes_unsafe_get(d[8],1),
                   b3$0=2 < d[9]?b3:decode_utf_8,
                   n=caml_check_bound(utf_8_len,b2)[1 + b2];
                  if(0 === n)return ret(b3$0,malformed(d[8],1,1),1,d);
                  if(1 === n)return ret(b3$0,r_utf_8(d[8],1,1),1,d);
                  d[10] = n;
                  unsafe_set_byte(d[8],0,b2);
                  if(3 <= d[9])
                   {d[9] = 2;
                    unsafe_set_byte(d[8],1,caml_bytes_unsafe_get(d[8],2))}
                  else
                   d[9] = 1;
                  return t_fill(t_decode_utf_8,d)},
               b1=caml_bytes_unsafe_get(d[8],0),
               b2$0=1 < d[9]?b2:decode_utf_8,
               n=caml_check_bound(utf_8_len,b1)[1 + b1];
              if(4 < n >>> 0)throw [0,Assert_failure,_pn_];
              switch(n)
               {case 0:return ret(b2$0,malformed(d[8],0,1),1,d);
                case 1:return ret(b2$0,r_utf_8(d[8],0,1),1,d);
                case 2:
                 return 2 <= d[9]
                         ?3 <= d[9]
                           ?ret(b3,r_utf_8(d[8],0,2),2,d)
                           :ret(decode_utf_8,r_utf_8(d[8],0,2),2,d)
                         :ret(decode_utf_8,malformed(d[8],0,1),1,d);
                case 3:
                 if(3 <= d[9])return ret(decode_utf_8,r_utf_8(d[8],0,3),3,d);
                 var _by8_=d[9];
                 return ret(decode_utf_8,malformed(d[8],0,d[9]),_by8_,d);
                default:
                 if(3 <= d[9]){d[10] = 4;return t_fill(t_decode_utf_8,d)}
                 var _by9_=d[9];
                 return ret(decode_utf_8,malformed(d[8],0,d[9]),_by9_,d)}}
            return ret(decode_utf_8,[0,num_852405675,u_bom],3,d)}
          var r$1=match$2[2];
          d[2] = num_211558048;
          d[18] = decode_utf_16be;
          return guessed_utf_16(d,1,r$1)}
        t_need(d,3);
        return t_fill(setup,d)},
     nline=function(d){d[14] = 0;d[13] = d[13] + 1 | 0;return 0},
     ncol=function(d){d[14] = d[14] + 1 | 0;return 0},
     ncount=function(d){d[16] = d[16] + 1 | 0;return 0},
     cr=function(d,b){d[12] = b;return 0},
     pp$5=
      function(d,v)
       {if(num_852405675 <= v[1])
         {var u=v[2],_by6_=u + num_133 | 0,switch$0=0;
          if(num_8100 < _by6_ >>> 0)
           {var switcher=_by6_ + num_123 | 0;
            if(! (3 < switcher >>> 0))
             switch(switcher)
              {case 0:
                var last_cr=d[12];
                cr(d,0);
                ncount(d);
                return last_cr?v:(nline(d),v);
               case 1:break;
               case 2:switch$0 = 1;break;
               default:cr(d,1);ncount(d);nline(d);return v}}
          else
           if(num_8097 < (_by6_ - 1 | 0) >>> 0)switch$0 = 1;
          return switch$0
                  ?(cr(d,0),ncount(d),nline(d),v)
                  :(cr(d,0),ncount(d),ncol(d),v)}
        cr(d,0);
        ncount(d);
        ncol(d);
        return v},
     pp_nln_readline=
      function(d,v)
       {if(num_852405675 <= v[1])
         {var u=v[2],_by5_=u + num_133 | 0,switch$0=0;
          if(num_8100 < _by5_ >>> 0)
           {var switcher=_by5_ + num_123 | 0;
            if(! (3 < switcher >>> 0))
             switch(switcher)
              {case 0:
                var last_cr=d[12];
                cr(d,0);
                return last_cr
                        ?caml_call1(d[18],d)
                        :(ncount(d),nline(d),[0,num_852405675,d[4]]);
               case 1:break;
               case 2:switch$0 = 1;break;
               default:
                cr(d,1);ncount(d);nline(d);return [0,num_852405675,d[4]]}}
          else
           if(num_8097 < (_by5_ - 1 | 0) >>> 0)switch$0 = 1;
          return switch$0
                  ?(cr(d,0),ncount(d),nline(d),[0,num_852405675,d[4]])
                  :(cr(d,0),ncount(d),ncol(d),v)}
        cr(d,0);
        ncount(d);
        ncol(d);
        return v},
     pp_nln_nlf=
      function(d,v)
       {if(num_852405675 <= v[1])
         {var u=v[2],switch$0=0;
          if(14 <= u)
           {if(8232 <= u)
             {if(! (8234 <= u))switch$0 = 1}
            else
             if(133 === u)
              {cr(d,0);ncount(d);nline(d);return [0,num_852405675,d[4]]}}
          else
           if(10 <= u)
            {var switcher=u + num_10 | 0;
             switch(switcher)
              {case 0:
                var last_cr=d[12];
                cr(d,0);
                return last_cr
                        ?caml_call1(d[18],d)
                        :(ncount(d),nline(d),[0,num_852405675,d[4]]);
               case 1:break;
               case 2:switch$0 = 1;break;
               default:
                cr(d,1);ncount(d);nline(d);return [0,num_852405675,d[4]]}}
          return switch$0
                  ?(cr(d,0),ncount(d),nline(d),v)
                  :(cr(d,0),ncount(d),ncol(d),v)}
        cr(d,0);
        ncount(d);
        ncol(d);
        return v},
     pp_nln_ascii=
      function(d,v)
       {if(num_852405675 <= v[1])
         {var u=v[2],_by4_=u + num_133 | 0,switch$0=0;
          if(num_8100 < _by4_ >>> 0)
           {var switcher=_by4_ + num_123 | 0;
            if(! (3 < switcher >>> 0))
             switch(switcher)
              {case 0:
                var last_cr=d[12];
                cr(d,0);
                return last_cr
                        ?caml_call1(d[18],d)
                        :(ncount(d),nline(d),[0,num_852405675,d[4]]);
               case 1:break;
               case 2:switch$0 = 1;break;
               default:
                cr(d,1);ncount(d);nline(d);return [0,num_852405675,d[4]]}}
          else
           if(num_8097 < (_by4_ - 1 | 0) >>> 0)switch$0 = 1;
          return switch$0
                  ?(cr(d,0),ncount(d),nline(d),v)
                  :(cr(d,0),ncount(d),ncol(d),v)}
        cr(d,0);
        ncount(d);
        ncol(d);
        return v},
     add_utf_8=
      function(b,u)
       {function w(byte$0){return add_char(b,byte$0)}
        return num_127 < u
                ?num_2047 < u
                  ?num_65535 < u
                    ?(w(num_240 | u >>> 18 | 0),
                      w(num_128 | (u >>> 12 | 0) & 63),
                      w(num_128 | (u >>> 6 | 0) & 63),
                      w(num_128 | u & 63))
                    :(w(num_224 | u >>> 12 | 0),
                      w(num_128 | (u >>> 6 | 0) & 63),
                      w(num_128 | u & 63))
                  :(w(num_192 | u >>> 6 | 0),w(num_128 | u & 63))
                :w(u)},
     ux_soi=2147483646,
     u_nl=10,
     u_quot=34,
     u_rbrack=93,
     u_rbrace=num_125,
     u_comma=44,
     u_slash=47,
     u_bslash=92,
     u_times=42,
     is_white=
      function(param)
       {var switch$0=0;
        if(11 <= param)
         {if(32 === param)switch$0 = 1}
        else
         if(9 <= param)switch$0 = 1;
        return switch$0?1:0},
     is_val_sep=
      function(param)
       {var switch$0=0;
        if(44 <= param)
         {var _by3_=param + num_45 | 0;
          if(79 < _by3_ >>> 0)
           {if(! (81 <= _by3_))switch$0 = 1}
          else
           if(48 === _by3_)switch$0 = 1}
        else
         if(11 <= param)
          {if(32 === param)switch$0 = 1}
         else
          if(9 <= param)switch$0 = 1;
        return switch$0?1:0},
     err_lone_hi=
      function(p)
       {return [0,num_106380200,[0,num_992790154,[0,num_225181919,p]]]},
     err_number=function(s){return [0,num_106380200,[0,num_30214610,s]]},
     pp_cp=function(ppf,u){return caml_call2(pf(ppf),_po_,u)},
     pp_uchar=
      function(ppf,u)
       {if(31 < u)
         {var b=create$1(4);
          add_utf_8(b,u);
          var _by2_=contents(b);
          return caml_call4(pf(ppf),_pp_,_by2_,pp_cp,u)}
        return pp_cp(ppf,u)},
     baddc=function(d,c){return add_utf_8(d[2],c)},
     badd=function(d){return add_utf_8(d[2],d[8])},
     buf=function(d){var t=contents(d[2]);clear$1(d[2]);return t},
     dpos=function(d){return [0,d[1][13],d[1][14]]},
     spos=function(d){d[4] = d[1][13];d[5] = d[1][14];return 0},
     epos=function(d){d[6] = d[1][13];d[7] = d[1][14];return 0},
     stack_range=
      function(d)
       {var _by1_=d[9];
        if(_by1_)
         {var match=_by1_[1][2],c=match[2],l=match[1];
          d[4] = l;
          d[5] = c;
          return epos(d)}
        throw [0,Assert_failure,_pU_]},
     dpop=
      function(d)
       {spos(d);
        epos(d);
        var _byZ_=d[9];
        if(_byZ_)
         {var _by0_=_byZ_[2];
          return _by0_
                  ?num_17732 <= _by0_[1][1]
                    ?(d[10] = 1,d[9] = _by0_,0)
                    :(d[10] = 0,d[9] = _by0_,0)
                  :(d[10] = 0,d[9] = 0,0)}
        throw [0,Assert_failure,_pV_]},
     k$0=function(d){return num_3455931},
     ret$0=function(v,k,d){d[12] = k;return v},
     readc=
      function(k,d)
       {var _byX_=d[1],match=caml_call1(_byX_[18],_byX_);
        if(typeof match === "number")
         return num_1006505782 <= match
                 ?ret$0
                   (num_1006505782,function(_byY_){return readc(k,_byY_)},d)
                 :(d[8] = max_int_float,caml_call1(k,d));
        if(num_852405675 <= match[1])
         {var u=match[2];d[8] = u;return caml_call1(k,d)}
        var bs=match[2];
        d[8] = u_rep;
        epos(d);
        return ret$0([0,num_106380200,[0,num_732461442,bs]],k,d)},
     r_scomment=
      function(k,d)
       {if(d[8] !== 10 && d[8] !== num_2147483647)
         {badd(d);return readc(function(_byW_){return r_scomment(k,_byW_)},d)}
        epos(d);
        function _byU_(_byV_){return readc(k,_byV_)}
        return ret$0([0,num_826170817,[0,83,buf(d)]],_byU_,d)},
     r_mcomment=
      function(closing,k,d)
       {if(d[8] === num_2147483647)
         {epos(d);return ret$0(err_unclosed_comment,k$0,d)}
        if(closing)
         {if(d[8] === 47)
           {epos(d);
            var _byK_=function(_byT_){return readc(k,_byT_)};
            return ret$0([0,num_826170817,[0,77,buf(d)]],_byK_,d)}
          if(d[8] === 42)
           {badd(d);
            var _byL_=1;
            return readc(function(_byS_){return r_mcomment(_byL_,k,_byS_)},d)}
          baddc(d,u_times);
          badd(d);
          var _byM_=0;
          return readc(function(_byR_){return r_mcomment(_byM_,k,_byR_)},d)}
        if(d[8] === 42)
         {var _byN_=1;
          return readc(function(_byQ_){return r_mcomment(_byN_,k,_byQ_)},d)}
        badd(d);
        var _byO_=0;
        return readc(function(_byP_){return r_mcomment(_byO_,k,_byP_)},d)},
     r_ws_uncut=
      function(k,d)
       {return is_white(d[8])
                ?(epos(d),
                  badd(d),
                  readc(function(_byJ_){return r_ws_uncut(k,_byJ_)},d))
                :ret$0([0,-588596599,buf(d)],k,d)},
     r_white_uncut=
      function(k,d)
       {if(is_white(d[8]))
         {spos(d);
          return r_ws_uncut(function(_byI_){return r_white_uncut(k,_byI_)},d)}
        if(d[8] === 47)
         {spos(d);
          var k$0=function(_byH_){return r_white_uncut(k,_byH_)};
          return readc
                  (function(d)
                    {if(d[8] === 47)
                      return readc
                              (function(_byG_){return r_scomment(k$0,_byG_)},d);
                     if(d[8] === 42)
                      {var _byE_=0;
                       return readc
                               (function(_byF_){return r_mcomment(_byE_,k$0,_byF_)},d)}
                     epos(d);
                     return ret$0(err_exp_comment,k$0,d)},
                   d)}
        return caml_call1(k,d)},
     r_ws=
      function(k,d)
       {return is_white(d[8])
                ?readc(function(_byD_){return r_ws(k,_byD_)},d)
                :caml_call1(k,d)},
     r_white=function(k,d){return d[3]?r_white_uncut(k,d):r_ws(k,d)},
     r_escape=
      function(k,d)
       {var _byw_=d[8];
        if(34 === _byw_){baddc(d,u_quot);return readc(k,d)}
        if(92 <= _byw_)
         {if(! (118 <= _byw_))
           {var switcher=_byw_ + num_92 | 0;
            switch(switcher)
             {case 0:baddc(d,u_bslash);return readc(k,d);
              case 6:baddc(d,8);return readc(k,d);
              case 10:baddc(d,12);return readc(k,d);
              case 18:baddc(d,u_nl);return readc(k,d);
              case 22:baddc(d,13);return readc(k,d);
              case 24:baddc(d,9);return readc(k,d);
              case 25:
               var _byy_=4,_byz_=0,_byA_=0;
               return readc
                       (function(_byC_)
                         {return r_u_escape(_byA_,_byz_,_byy_,k,_byC_)},
                        d)
              }}}
        else
         if(47 === _byw_){baddc(d,u_slash);return readc(k,d)}
        epos(d);
        baddc(d,u_rep);
        function _byx_(_byB_){return readc(k,_byB_)}
        return ret$0
                ([0,
                  num_106380200,
                  [0,num_992790154,[0,num_508493173,of_int(_byw_)]]],
                 _byx_,
                 d)},
     r_u_escape=
      function(hi,u,count,k,d)
       {function error(err,k,d){baddc(d,u_rep);return ret$0(err,k,d)}
        if(0 < count)
         {var
           _byk_=d[8],
           _bye_=48 <= _byk_?1:0,
           _byf_=_bye_?_byk_ <= 57?1:0:_bye_;
          if(_byf_)
           var _byg_=_byf_;
          else
           {var _byh_=65 <= _byk_?1:0,_byi_=_byh_?_byk_ <= 70?1:0:_byh_;
            if(_byi_)
             var _byg_=_byi_;
            else
             var _byj_=97 <= _byk_?1:0,_byg_=_byj_?_byk_ <= num_102?1:0:_byj_}
          if(_byg_)
           {var
             _byl_=
              57 < d[8]
               ?70 < d[8]?d[8] + num_87 | 0:d[8] + num_55 | 0
               :d[8] + num_48 | 0,
             u$0=(u * 16 | 0) + _byl_ | 0;
            epos(d);
            var _bym_=count - 1 | 0;
            return readc
                    (function(_byv_){return r_u_escape(hi,u$0,_bym_,k,_byv_)},d)}
          epos(d);
          var _byn_=function(_byu_){return readc(k,_byu_)};
          return error
                  ([0,
                    num_106380200,
                    [0,num_992790154,[0,-542918501,of_int(d[8])]]],
                   _byn_,
                   d)}
        if(hi)
         {var hi$0=hi[1];
          if(num_56320 <= u && ! (num_57343 < u))
           {var u$1=((hi$0 & num_1023) << 10 | u & num_1023) + num_65536 | 0;
            baddc(d,u$1);
            return caml_call1(k,d)}
          return error
                  ([0,num_106380200,[0,num_992790154,[0,num_153884648,u]]],
                   k,
                   d)}
        if(num_55296 <= u && ! (num_57343 < u))
         return num_56319 < u
                 ?error
                   ([0,num_106380200,[0,num_992790154,[0,num_429931233,u]]],
                    k,
                    d)
                 :d[8] !== 92
                   ?error(err_lone_hi(u),k,d)
                   :readc
                     (function(d)
                       {if(num_117 === d[8])
                         {var _byo_=4,_byp_=0,_byq_=[0,u];
                          return readc
                                  (function(_byt_)
                                    {return r_u_escape(_byq_,_byp_,_byo_,k,_byt_)},
                                   d)}
                        function _byr_(_bys_){return r_escape(k,_bys_)}
                        return error(err_lone_hi(u),_byr_,d)},
                      d);
        baddc(d,u);
        return caml_call1(k,d)},
     r_string=
      function(k,d)
       {if(d[8] === num_2147483647)
         {epos(d);return ret$0(err_unclosed_string,k$0,d)}
        var _bx7_=d[8],_bx4_=_bx7_ <= 31?1:0;
        if(_bx4_)
         var _bx5_=_bx4_;
        else
         var _bx6_=34 === _bx7_?1:0,_bx5_=_bx6_ || (92 === _bx7_?1:0);
        if(_bx5_)
         {if(d[8] === 34){epos(d);return readc(k,d)}
          if(d[8] === 92)
           {var _bx8_=function(_byd_){return r_string(k,_byd_)};
            return readc(function(_byc_){return r_escape(_bx8_,_byc_)},d)}
          epos(d);
          baddc(d,u_rep);
          var
           _bx9_=function(_byb_){return r_string(k,_byb_)},
           _bx__=function(_bya_){return readc(_bx9_,_bya_)};
          return ret$0([0,num_106380200,[0,-635137946,of_int(d[8])]],_bx__,d)}
        badd(d);
        return readc(function(_bx$_){return r_string(k,_bx$_)},d)},
     r_float=
      function(k,d)
       {if(! is_val_sep(d[8]) && d[8] !== num_2147483647)
         {epos(d);
          badd(d);
          return readc(function(_bx3_){return r_float(k,_bx3_)},d)}
        var s=buf(d);
        try
         {var
           _bx1_=
            ret$0
             ([0,num_633954146,[0,num_365180284,caml_float_of_string(s)]],k,d);
          return _bx1_}
        catch(_bx2_)
         {_bx2_ = caml_wrap_exception(_bx2_);
          if(_bx2_[1] === Failure)return ret$0(err_number(s),k,d);
          throw _bx2_}},
     r_literal=
      function(k,d)
       {if(! is_val_sep(d[8]) && d[8] !== num_2147483647)
         {epos(d);
          badd(d);
          return readc(function(_bx0_){return r_literal(k,_bx0_)},d)}
        var s=buf(d);
        return caml_string_notequal(s,_pW_)
                ?caml_string_notequal(s,_pX_)
                  ?caml_string_notequal(s,_pY_)
                    ?ret$0([0,num_106380200,[0,num_67383738,s]],k,d)
                    :ret$0(_pZ_,k,d)
                  :ret$0(_p0_,k,d)
                :ret$0(_p1_,k,d)},
     r_value=
      function(err,k,d)
       {var _bxT_=d[8],switch$0=0;
        if(num_103 <= _bxT_)
         {var switcher=_bxT_ + num_110$0 | 0;
          if(6 < switcher >>> 0)
           {if(13 === switcher)
             {spos(d);
              epos(d);
              d[11] = 1;
              d[10] = 1;
              var _bxU_=d[9];
              d[9] = [0,[0,num_17732,dpos(d)],_bxU_];
              return ret$0(_p2_,function(_bxX_){return readc(k,_bxX_)},d)}}
          else
           if(4 < (switcher - 1 | 0) >>> 0)switch$0 = 1}
        else
         {if(34 === _bxT_)
           {spos(d);
            var
             _bxV_=
              function(d)
               {return ret$0([0,num_633954146,[0,num_976970511,buf(d)]],k,d)};
            return readc(function(_bxZ_){return r_string(_bxV_,_bxZ_)},d)}
          if(91 === _bxT_)
           {spos(d);
            epos(d);
            d[11] = 1;
            var _bxW_=d[9];
            d[9] = [0,[0,num_14610,dpos(d)],_bxW_];
            return ret$0(_p3_,function(_bxY_){return readc(k,_bxY_)},d)}
          if(num_102 <= _bxT_)switch$0 = 1}
        if(switch$0){spos(d);return r_literal(k,d)}
        var _bxR_=48 <= _bxT_?1:0,_bxS_=_bxR_?_bxT_ <= 57?1:0:_bxR_;
        if(! _bxS_ && _bxT_ !== 45)return caml_call2(err,k,d);
        spos(d);
        return r_float(k,d)},
     discard_to=
      function(c1,c2,err,k,d)
       {if(d[8] !== c1 && d[8] !== c2 && d[8] !== num_2147483647)
         {epos(d);
          return readc
                  (function(_bxQ_){return discard_to(c1,c2,err,k,_bxQ_)},d)}
        return ret$0(err,k,d)},
     nxmem=
      function(err,k,d)
       {spos(d);d[10] = 1;return discard_to(u_comma,u_rbrace,err,k,d)},
     k$1=
      function(d)
       {var _bxu_=d[9];
        return _bxu_
                ?num_17732 <= _bxu_[1][1]
                  ?d[10]
                    ?r_white
                      (function(d)
                        {function r_name(err,k,d)
                          {if(d[8] !== 34)return nxmem(err,k,d);
                           spos(d);
                           function _bxz_(d)
                            {return ret$0
                                     ([0,num_633954146,[0,num_869834347,buf(d)]],k,d)}
                           return readc
                                   (function(_bxA_){return r_string(_bxz_,_bxA_)},d)}
                         var last_start=d[11];
                         d[11] = 0;
                         d[10] = 0;
                         if(d[8] === num_2147483647)
                          {stack_range(d);return ret$0(err_unclosed_obj,k$0,d)}
                         if(d[8] === num_125)
                          {dpop(d);
                           return ret$0
                                   (_p5_,function(_bxy_){return readc(k$1,_bxy_)},d)}
                         if(last_start)return r_name(err_exp_obj_fst,k$1,d);
                         if(d[8] === 44)
                          {var
                            _bxv_=
                             function(_bxx_){return r_name(err_exp_name,k$1,_bxx_)};
                           return readc(function(_bxw_){return r_white(_bxv_,_bxw_)},d)}
                         return nxmem(err_exp_obj_nxt,k$1,d)},
                       d)
                    :r_white
                      (function(d)
                        {d[10] = 1;
                         if(d[8] === 58)
                          {var
                            _bxB_=
                             function(_bxF_,_bxG_)
                              {return nxmem(err_exp_value,_bxF_,_bxG_)},
                            _bxC_=function(_bxE_){return r_value(_bxB_,k$1,_bxE_)};
                           return readc(function(_bxD_){return r_white(_bxC_,_bxD_)},d)}
                         return nxmem(err_exp_nsep,k$1,d)},
                       d)
                  :r_white
                    (function(d)
                      {function nxval(err,k,d)
                        {spos(d);return discard_to(u_comma,u_rbrack,err,k,d)}
                       var last_start=d[11];
                       d[11] = 0;
                       if(d[8] === num_2147483647)
                        {stack_range(d);return ret$0(err_unclosed_arr,k$0,d)}
                       if(d[8] === 93)
                        {dpop(d);
                         return ret$0
                                 (_p4_,function(_bxP_){return readc(k$1,_bxP_)},d)}
                       if(last_start)
                        return r_value
                                (function(_bxN_,_bxO_)
                                  {return nxval(err_exp_arr_fst,_bxN_,_bxO_)},
                                 k$1,
                                 d);
                       if(d[8] === 44)
                        {var
                          _bxH_=
                           function(_bxL_,_bxM_)
                            {return nxval(err_exp_value,_bxL_,_bxM_)},
                          _bxI_=function(_bxK_){return r_value(_bxH_,k$1,_bxK_)};
                         return readc(function(_bxJ_){return r_white(_bxI_,_bxJ_)},d)}
                       return nxval(err_exp_arr_nxt,k$1,d)},
                     d)
                :r_white
                  (function(d)
                    {return d[8] === num_2147483647
                             ?ret$0(num_3455931,k$0,d)
                             :(spos(d),
                               discard_to(max_int_float,max_int_float,err_exp_eoi,k$0,d))},
                   d)},
     discard_to_white=
      function(err,k,d)
       {if(! is_white(d[8]) && d[8] !== num_2147483647)
         {epos(d);
          return readc
                  (function(_bxt_){return discard_to_white(err,k,_bxt_)},d)}
        return ret$0(err,k,d)},
     r_json=
      function(k,d)
       {function err(k,d)
         {spos(d);
          function _bxq_(_bxs_){return r_json(k,_bxs_)}
          return discard_to_white
                  (err_exp_json,
                   function(_bxr_){return r_white(_bxq_,_bxr_)},
                   d)}
        return d[8] !== num_2147483647
                ?r_value(err,k,d)
                :ret$0(err_exp_json,k,d)},
     r_start=
      function(d)
       {function _bxn_(_bxp_){return r_json(k$1,_bxp_)}
        function k(_bxo_){return r_white(_bxn_,_bxo_)}
        return readc(function(d){return d[1][11]?ret$0(err_bom,k,d):k(d)},d)},
     nln=[0,num_605782321,10],
     decoder=
      function(encoding$0,src)
       {var nln$0=[0,nln];
        if(nln$0)
         {var _bxk_=nln$0[1],_bxl_=_bxk_[1];
          if(3895880 === _bxl_)
           var nl=_bxk_[2],pp=pp_nln_nlf,nl$0=nl;
          else
           if(num_605782321 <= _bxl_)
            var nl$1=_bxk_[2],pp=pp_nln_ascii,nl$0=nl$1;
           else
            var nl$2=_bxk_[2],pp=pp_nln_readline,nl$0=nl$2}
        else
         var pp=pp$5,nl$0=10;
        if(encoding$0)
         var
          e=encoding$0[1],
          _bxm_=
           num_143365725 <= e
            ?423112016 <= e
              ?num_684370880 <= e?decode_utf_8:decode_us_ascii
              :338302576 <= e?decode_iso_8859_1:decode_utf_16be
            :num_211555818 <= e?decode_utf_16:decode_utf_16be,
          encoding=e,
          k$0=_bxm_;
        else
         var encoding=num_684370880,k$0=k;
        if(typeof src === "number")
         var i=empty_return,i_pos=1,i_max=0;
        else
         if(num_438511779 <= src[1])
          var i=caml_create_bytes(num_65536),i_pos=1,i_max=0;
         else
          var
           s=src[2],
           i_max$0=caml_ml_string_length(s) - 1 | 0,
           i$0=caml_bytes_of_string(s),
           i=i$0,
           i_pos=0,
           i_max=i_max$0;
        var
         utf16=num_143365725 === encoding?1:0,
         u=
          [0,
           src,
           encoding,
           nln$0,
           nl$0,
           i,
           i_pos,
           i_max,
           caml_create_bytes(4),
           0,
           0,
           0,
           0,
           1,
           0,
           0,
           0,
           function(d,v)
            {if(num_852405675 <= v[1])
              {var u=v[2];
               if(num_65279 === u)
                {if(utf16){d[2] = num_211558048;d[18] = decode_utf_16be}
                 d[11] = 1;
                 d[17] = pp;
                 return caml_call1(d[18],d)}
               if(65534 === u && utf16)
                {d[2] = num_211555818;
                 d[18] = decode_utf_16;
                 d[11] = 1;
                 d[17] = pp;
                 return caml_call1(d[18],d)}
               d[11] = 0;
               d[17] = pp;
               return caml_call2(d[17],d,v)}
             d[11] = 0;
             d[17] = pp;
             return caml_call2(d[17],d,v)},
           k$0];
        return [0,u,create$1(num_1024),0,1,0,1,0,ux_soi,0,0,0,r_start]},
     Not_found_s=[num_248,_p7_,caml_fresh_oo_id(0)],
     Of_sexp_error=[num_248,_p8_,caml_fresh_oo_id(0)],
     _p9_=1,
     must_escape=
      function(str)
       {var len=caml_ml_string_length(str),_bxc_=0 === len?1:0;
        if(_bxc_)return _bxc_;
        var ix$3=len - 1 | 0,ix=ix$3;
        for(;;)
         {var match=caml_string_get(str,ix),switch$0=0;
          if(92 <= match)
           {var switcher=match - 93 | 0;
            if(33 < switcher >>> 0)
             if(0 <= switcher)switch$0 = 2;else switch$0 = 1;
            else
             if(31 === switcher)
              {var _bxd_=0 < ix?1:0;
               if(_bxd_)
                {var
                  ix$0=ix - 1 | 0,
                  _bxe_=equal(caml_string_get(str,ix$0),35);
                 if(! _bxe_){var ix=ix$0;continue}
                 var _bxf_=_bxe_}
               else
                var _bxf_=_bxd_;
               return _bxf_}}
          else
           if(42 <= match)
            {if(59 === match)switch$0 = 1}
           else
            if(33 <= match)
             {var switcher$0=match + num_33 | 0;
              switch(switcher$0)
               {case 2:
                 var _bxh_=0 < ix?1:0;
                 if(_bxh_)
                  {var
                    ix$2=ix - 1 | 0,
                    _bxi_=equal(caml_string_get(str,ix$2),num_124);
                   if(! _bxi_){var ix=ix$2;continue}
                   var _bxj_=_bxi_}
                 else
                  var _bxj_=_bxh_;
                 return _bxj_;
                case 1:
                case 7:
                case 8:switch$0 = 1;break
                }}
            else
             switch$0 = 2;
          switch(switch$0)
           {case 0:
             var _bxg_=0 < ix?1:0;
             if(_bxg_){var ix$1=ix - 1 | 0,ix=ix$1;continue}
             return _bxg_;
            case 1:return 1;
            default:return 1}}},
     escaped$0=
      function(s)
       {var n=[0,0],_bw4_=caml_ml_string_length(s) - 1 | 0,_bw3_=0;
        if(! (_bw4_ < 0))
         {var i$0=_bw3_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switch$0=0;
            if(32 <= match)
             {var _bw$_=match + num_34 | 0,switch$1=0;
              if(58 < _bw$_ >>> 0)
               {if(93 <= _bw$_)switch$1 = 1}
              else
               if(56 < (_bw$_ - 1 | 0) >>> 0){switch$0 = 1;switch$1 = 1}
              if(! switch$1){var _bxa_=1;switch$0 = 2}}
            else
             if(11 <= match)
              {if(13 === match)switch$0 = 1}
             else
              if(8 <= match)switch$0 = 1;
            switch(switch$0)
             {case 0:var _bxa_=4;break;case 1:var _bxa_=2;break}
            n[1] = n[1] + _bxa_ | 0;
            var _bxb_=i$0 + 1 | 0;
            if(_bw4_ !== i$0){var i$0=_bxb_;continue}
            break}}
        if(n[1] === caml_ml_string_length(s))return s;
        var s$0=caml_create_bytes(n[1]);
        n[1] = 0;
        var _bw6_=caml_ml_string_length(s) - 1 | 0,_bw5_=0;
        if(! (_bw6_ < 0))
         {var i=_bw5_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switch$2=0;
            if(35 <= c)
             if(92 === c)
              switch$2 = 2;
             else
              if(num_127 <= c)switch$2 = 1;else switch$2 = 3;
            else
             if(32 <= c)
              if(34 <= c)switch$2 = 2;else switch$2 = 3;
             else
              if(14 <= c)
               switch$2 = 1;
              else
               switch(c)
                {case 8:
                  caml_bytes_unsafe_set(s$0,n[1],92);
                  n[1]++;
                  caml_bytes_unsafe_set(s$0,n[1],98);
                  break;
                 case 9:
                  caml_bytes_unsafe_set(s$0,n[1],92);
                  n[1]++;
                  caml_bytes_unsafe_set(s$0,n[1],num_116);
                  break;
                 case 10:
                  caml_bytes_unsafe_set(s$0,n[1],92);
                  n[1]++;
                  caml_bytes_unsafe_set(s$0,n[1],num_110);
                  break;
                 case 13:
                  caml_bytes_unsafe_set(s$0,n[1],92);
                  n[1]++;
                  caml_bytes_unsafe_set(s$0,n[1],num_114);
                  break;
                 default:switch$2 = 1}
            switch(switch$2)
             {case 1:
               caml_bytes_unsafe_set(s$0,n[1],92);
               n[1]++;
               var _bw8_=chr(48 + (c / num_100 | 0) | 0);
               caml_bytes_unsafe_set(s$0,n[1],_bw8_);
               n[1]++;
               var _bw9_=chr(48 + ((c / 10 | 0) % 10 | 0) | 0);
               caml_bytes_unsafe_set(s$0,n[1],_bw9_);
               n[1]++;
               var _bw__=chr(48 + (c % 10 | 0) | 0);
               caml_bytes_unsafe_set(s$0,n[1],_bw__);
               break;
              case 2:
               caml_bytes_unsafe_set(s$0,n[1],92);
               n[1]++;
               caml_bytes_unsafe_set(s$0,n[1],c);
               break;
              case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
              }
            n[1]++;
            var _bw7_=i + 1 | 0;
            if(_bw6_ !== i){var i=_bw7_;continue}
            break}}
        return caml_string_of_bytes(s$0)},
     esc_str=
      function(str)
       {var
         src=escaped$0(str),
         len=caml_ml_string_length(src),
         dst=caml_create_bytes(len + 2 | 0);
        blit$0(src,0,dst,1,len);
        caml_bytes_unsafe_set(dst,0,34);
        caml_bytes_unsafe_set(dst,len + 1 | 0,34);
        return caml_string_of_bytes(dst)},
     index_of_newline=
      function(str,start)
       {try
         {var _bw1_=[0,index_from(str,start,10)];return _bw1_}
        catch(_bw2_)
         {_bw2_ = caml_wrap_exception(_bw2_);
          if(_bw2_ === Not_found)return 0;
          throw _bw2_}},
     pp_hum_indent=
      function(indent,ppf,param)
       {if(0 === param[0])
         {var str=param[1];
          if(must_escape(str))
           {var match=index_of_newline(str,0);
            if(match)
             var
              index=match[1],
              _bwZ_=(index + 1 | 0) === caml_ml_string_length(str)?1:0;
            else
             var _bwZ_=1;
            if(_bwZ_)return pp(ppf,esc_str(str));
            pp_open_box(ppf,0);
            pp(ppf,_qa_);
            var index$0=0;
            for(;;)
             {var end_pos_opt=index_of_newline(str,index$0);
              if(end_pos_opt)
               var end_pos=end_pos_opt[1],end_pos$0=end_pos;
              else
               var end_pos$0=caml_ml_string_length(str);
              var next_line=sub$0(str,index$0,end_pos$0 - index$0 | 0);
              pp(ppf,escaped$0(next_line));
              if(end_pos_opt)
               {var newline_index=end_pos_opt[1];
                pp(ppf,_p__);
                pp_force_newline(ppf,0);
                pp(ppf,_p$_);
                var index$1=newline_index + 1 | 0,index$0=index$1;
                continue}
              pp(ppf,_qb_);
              return pp_close_box(ppf,0)}}
          return pp(ppf,str)}
        var _bw0_=param[1];
        if(_bw0_)
         {var t=_bw0_[2],h=_bw0_[1];
          pp_open_box(ppf,indent);
          pp(ppf,_qc_);
          pp_hum_indent(indent,ppf,h);
          var param$0=t;
          for(;;)
           {if(param$0)
             {var param$1=param$0[2],h$0=param$0[1];
              pp_print_space(ppf,0);
              pp_hum_indent(indent,ppf,h$0);
              var param$0=param$1;
              continue}
            pp(ppf,_qe_);
            return pp_close_box(ppf,0)}}
        return pp(ppf,_qd_)},
     arg$3=
      function(indent$0,sexp)
       {if(0 === sexp[0])
         {var str=sexp[1],match=index_of_newline(str,0),_bwW_=match?0:1;
          if(_bwW_)return must_escape(str)?esc_str(str):str}
        var buf=create$1(num_1024);
        if(indent$0)var sth=indent$0[1],indent=sth;else var indent=_p9_;
        var ppf=formatter_of_buffer(buf);
        function _bwV_(_bwX_,_bwY_){return pp_hum_indent(indent,_bwX_,_bwY_)}
        caml_call3(pf(ppf),_qf_,_bwV_,sexp);
        return contents(buf)},
     compare$8=caml_compare,
     Int=[0,compare$8],
     Exn_ids=_au_(Int),
     exn_id_map=[0,Exn_ids[1]],
     clean_up_handler=
      function(slot)
       {for(;;)
         {var
           id$0=id(slot),
           old_exn_id_map=exn_id_map[1],
           new_exn_id_map=caml_call2(Exn_ids[7],id$0,old_exn_id_map);
          if(exn_id_map[1] !== old_exn_id_map)continue;
          exn_id_map[1] = new_exn_id_map;
          return 0}},
     find_auto=
      function(exn)
       {var id$0=id(of_val(exn));
        try
         {var ephe=caml_call2(Exn_ids[27],id$0,exn_id_map[1])}
        catch(_bwU_)
         {_bwU_ = caml_wrap_exception(_bwU_);
          if(_bwU_ === Not_found)return 0;
          throw _bwU_}
        var match=caml_ephe_get_data(ephe);
        if(match)
         {var sexp_of_exn=match[1];return [0,caml_call1(sexp_of_exn,exn)]}
        return 0},
     sexp_of_exn_opt=function(exn){return find_auto(exn)},
     sexp_of_exn=
      function(exn)
       {var match=sexp_of_exn_opt(exn);
        if(match){var sexp=match[1];return sexp}
        return [1,[0,[0,to_string$0(exn)],0]]},
     exn_to_string=function(e){return arg$3(0,sexp_of_exn(e))};
    register_printer
     (function(exn)
       {var match=sexp_of_exn_opt(exn);
        if(match){var sexp=match[1];return [0,arg$3(_qg_,sexp)]}
        return 0});
    var
     of_sexp_error=
      function(what,sexp){throw [0,Of_sexp_error,[0,Failure,what],sexp]},
     a_of_sexp=
      function(sexp)
       {if(0 === sexp[0]){var str=sexp[1];return str}
        return of_sexp_error(_qn_,sexp)},
     int64_of_sexp=
      function(sexp)
       {if(0 === sexp[0])
         {var str=sexp[1];
          try
           {var _bwT_=caml_int64_of_string(str);return _bwT_}
          catch(exc)
           {exc = caml_wrap_exception(exc);
            return of_sexp_error(symbol(_qq_,exn_to_string(exc)),sexp)}}
        return of_sexp_error(_qr_,sexp)},
     get_flc_error=
      function(name,param)
       {var chr=param[3],line=param[2],file=param[1];
        return [0,caml_call4(sprintf(_qv_),name,file,line,chr)]},
     _qw_=0,
     _qz_=
      [0,
       [0,
        Of_sexp_error,
        function(param)
         {if(param[1] === Of_sexp_error)
           {var sexp=param[3],exc=param[2];
            return [1,[0,_qx_,[0,sexp_of_exn(exc),[0,sexp,0]]]]}
          throw [0,Assert_failure,_qy_]}],
       _qw_],
     _qC_=
      [0,
       [0,
        Break,
        function(param)
         {if(param === Break)return _qA_;throw [0,Assert_failure,_qB_]}],
       _qz_],
     _qF_=
      [0,
       [0,
        Error$0,
        function(param)
         {if(param[1] === Error$0)
           {var arg=param[2];return [1,[0,_qD_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_qE_]}],
       _qC_],
     _qI_=
      [0,
       [0,
        Failure$0,
        function(param)
         {if(param === Failure$0)return _qG_;throw [0,Assert_failure,_qH_]}],
       _qF_],
     _qL_=
      [0,
       [0,
        Empty,
        function(param)
         {if(param === Empty)return _qJ_;throw [0,Assert_failure,_qK_]}],
       _qI_],
     _qO_=
      [0,
       [0,
        Scan_failure,
        function(param)
         {if(param[1] === Scan_failure)
           {var arg=param[2];return [1,[0,_qM_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_qN_]}],
       _qL_],
     _qR_=
      [0,
       [0,
        Empty$0,
        function(param)
         {if(param === Empty$0)return _qP_;throw [0,Assert_failure,_qQ_]}],
       _qO_],
     _qU_=
      [0,
       [0,
        Parse_error,
        function(param)
         {if(param === Parse_error)return _qS_;throw [0,Assert_failure,_qT_]}],
       _qR_],
     _qX_=
      [0,
       [0,
        Undefined,
        function(param)
         {if(param === Undefined)return _qV_;throw [0,Assert_failure,_qW_]}],
       _qU_],
     _q0_=
      [0,
       [0,
        Bad,
        function(param)
         {if(param[1] === Bad)
           {var arg=param[2];return [1,[0,_qY_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_qZ_]}],
       _qX_],
     _q3_=
      [0,
       [0,
        Help,
        function(param)
         {if(param[1] === Help)
           {var arg=param[2];return [1,[0,_q1_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_q2_]}],
       _q0_],
     _q6_=
      [0,
       [0,
        Sys_error,
        function(param)
         {if(param[1] === Sys_error)
           {var arg=param[2];return [1,[0,_q4_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_q5_]}],
       _q3_],
     _q9_=
      [0,
       [0,
        Not_found_s,
        function(param)
         {if(param[1] === Not_found_s)
           {var arg=param[2];return [1,[0,_q7_,[0,arg,0]]]}
          throw [0,Assert_failure,_q8_]}],
       _q6_],
     _ra_=
      [0,
       [0,
        Match_failure,
        function(param)
         {if(param[1] === Match_failure)
           {var arg=param[2];return get_flc_error(_q__,arg)}
          throw [0,Assert_failure,_q$_]}],
       _q9_],
     _rd_=
      [0,
       [0,
        Invalid_argument,
        function(param)
         {if(param[1] === Invalid_argument)
           {var arg=param[2];return [1,[0,_rb_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_rc_]}],
       _ra_],
     _rg_=
      [0,
       [0,
        Not_found,
        function(param)
         {if(param === Not_found)return _re_;throw [0,Assert_failure,_rf_]}],
       _rd_],
     _rj_=
      [0,
       [0,
        Failure,
        function(param)
         {if(param[1] === Failure)
           {var arg=param[2];return [1,[0,_rh_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_ri_]}],
       _rg_],
     _rm_=
      [0,
       [0,
        End_of_file,
        function(param)
         {if(param === End_of_file)return _rk_;throw [0,Assert_failure,_rl_]}],
       _rj_],
     _rp_=
      [0,
       [0,
        Exit,
        function(param)
         {if(param === Exit)return _rn_;throw [0,Assert_failure,_ro_]}],
       _rm_],
     _rs_=
      [0,
       [0,
        Assert_failure,
        function(param)
         {if(param[1] === Assert_failure)
           {var arg=param[2];return get_flc_error(_rq_,arg)}
          throw [0,Assert_failure,_rr_]}],
       _rp_];
    iter$0
     (function(param)
       {var handler=param[2],extension_constructor=param[1];
        if(opt$1)var sth=opt$1[1],finalise=sth;else var finalise=1;
        var id$0=id(extension_constructor);
        for(;;)
         {var old_exn_id_map=exn_id_map[1],ephe=create$5(0);
          caml_ephe_set_data(ephe,handler);
          set_key(ephe,extension_constructor);
          var new_exn_id_map=caml_call3(Exn_ids[4],id$0,ephe,old_exn_id_map);
          if(exn_id_map[1] !== old_exn_id_map)continue;
          exn_id_map[1] = new_exn_id_map;
          return finalise
                  ?caml_final_register(clean_up_handler,extension_constructor)
                  :finalise}},
      _rs_);
    var
     stag_no_args=
      function(loc,sexp){return of_sexp_error(symbol(loc,_ru_),sexp)},
     record_only_pairs_expected=
      function(loc,sexp)
       {var msg=symbol(loc,_rA_);return of_sexp_error(msg,sexp)},
     record_superfluous_fields=
      function(what,loc,rev_fld_names,sexp)
       {var
         fld_names_str=concat$0(_rB_,rev(rev_fld_names)),
         msg=caml_call3(sprintf(_rC_),loc,what,fld_names_str);
        return of_sexp_error(msg,sexp)},
     record_duplicate_fields=
      function(loc,rev_fld_names,sexp)
       {return record_superfluous_fields(_rD_,loc,rev_fld_names,sexp)},
     record_extra_fields=
      function(loc,rev_fld_names,sexp)
       {return record_superfluous_fields(_rE_,loc,rev_fld_names,sexp)},
     record_undefined_elements=
      function(loc,sexp,lst)
       {var fields=0,param=lst;
        for(;;)
         {if(param)
           {var _bwS_=param[1];
            if(0 === _bwS_[1]){var param$0=param[2],param=param$0;continue}
            var
             param$1=param[2],
             field=_bwS_[2],
             fields$0=[0,field,fields],
             fields=fields$0,
             param=param$1;
            continue}
          var
           undefined$0=concat$0(_rF_,rev(fields)),
           msg=caml_call2(sprintf(_rG_),loc,undefined$0);
          return of_sexp_error(msg,sexp)}},
     record_list_instead_atom=
      function(loc,sexp)
       {var msg=symbol(loc,_rH_);return of_sexp_error(msg,sexp)},
     No_variant_match=[num_248,_rI_,caml_fresh_oo_id(0)],
     no_variant_match=function(param){throw No_variant_match},
     no_matching_variant_found=
      function(loc,sexp){return of_sexp_error(symbol(loc,_rJ_),sexp)},
     ptag_no_args=
      function(loc,sexp){return of_sexp_error(symbol(loc,_rK_),sexp)},
     ptag_incorrect_n_args=
      function(loc,cnstr,sexp)
       {var msg=caml_call2(sprintf(_rL_),loc,cnstr);
        return of_sexp_error(msg,sexp)},
     ptag_takes_args=
      function(loc,sexp){return of_sexp_error(symbol(loc,_rM_),sexp)},
     nested_list_invalid_poly_var=
      function(loc,sexp){return of_sexp_error(symbol(loc,_rN_),sexp)},
     empty_list_invalid_poly_var=
      function(loc,sexp){return of_sexp_error(symbol(loc,_rO_),sexp)},
     Escape=[num_248,_rP_,caml_fresh_oo_id(0)],
     json_of_src=
      function(src)
       {var d=decoder(0,src);
        function dec(param)
         {d[3] = 0;
          var match=caml_call1(d[12],d);
          if(typeof match !== "number")
           {var _bwR_=match[1];
            if(num_633954146 !== _bwR_ && ! (num_106380200 <= _bwR_))
             throw [0,Assert_failure,_p6_]}
          if(typeof match === "number")throw [0,Assert_failure,_rQ_];
          if(num_106380200 <= match[1])
           {var e=match[2];throw [0,Escape,[0,[0,d[4],d[5]],[0,d[6],d[7]]],e]}
          var l=match[2];
          return l}
        function value$0(counter,v,k)
         {var switch$0=0;
          if(typeof v === "number")
           {if(num_14610 === v)
             {var _bwO_=0;
              if(counter < 50)
               {var counter$1=counter + 1 | 0;return arr$0(counter$1,_bwO_,k)}
              return caml_trampoline_return(arr$0,[0,_bwO_,k])}
            if(num_17732 === v)
             {var _bwP_=0;
              if(counter < 50)
               {var counter$0=counter + 1 | 0;return obj$0(counter$0,_bwP_,k)}
              return caml_trampoline_return(obj$0,[0,_bwP_,k])}
            if(num_870828711 !== v)switch$0 = 1}
          else
           {var _bwQ_=v[1];
            if
             (num_976970511
              !==
              _bwQ_
              &&
              num_365180284
              !==
              _bwQ_
              &&
              num_737456202
              !==
              _bwQ_)
             switch$0 = 1}
          if(switch$0)throw [0,Assert_failure,_rR_];
          return caml_call1(k,v)}
        function arr$0(counter,vs,k)
         {var v=dec(0);
          if(num_14596 === v)return caml_call1(k,[0,65,rev(vs)]);
          function _bwN_(v){return arr([0,v,vs],k)}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return value$0(counter$0,v,_bwN_)}
          return caml_trampoline_return(value$0,[0,v,_bwN_])}
        function obj$0(counter,ms,k)
         {var match=dec(0);
          if(typeof match === "number")
           {if(num_17718 === match)return caml_call1(k,[0,79,rev(ms)])}
          else
           if(num_869834347 === match[1])
            {var
              n=match[2],
              _bwL_=function(v){return obj([0,[0,n,v],ms],k)},
              _bwM_=dec(0);
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return value$0(counter$0,_bwM_,_bwL_)}
             return caml_trampoline_return(value$0,[0,_bwM_,_bwL_])}
          throw [0,Assert_failure,_rS_]}
        function value(v,k){return caml_trampoline(value$0(0,v,k))}
        function arr(vs,k){return caml_trampoline(arr$0(0,vs,k))}
        function obj(ms,k){return caml_trampoline(obj$0(0,ms,k))}
        try
         {var
           _bwJ_=function(x){return x},
           _bwK_=[0,num_824773160,value(dec(0),_bwJ_)];
          return _bwK_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Escape)
           {var e=exn[3],r=exn[2];return [0,num_106380200,[0,r,e]]}
          throw exn}},
     Parse_error$0=[num_248,_rT_,caml_fresh_oo_id(0)],
     from_string$0=
      function(str)
       {var src=[0,num_976970511,str],match=json_of_src(src);
        if(num_824773160 <= match[1])
         var t=match[2],_bwI_=t;
        else
         {var match$0=match[2],e=match$0[2];
          if(typeof e === "number")
           caml_call1(pf(ppf),_pq_);
          else
           {var _bwA_=e[1];
            if(num_30214610 <= _bwA_)
             if(num_732461442 <= _bwA_)
              if(num_992790154 <= _bwA_)
               {var r=e[2];
                caml_call1(pf(ppf),_pr_);
                var _bwB_=r[1];
                if(num_153884648 === _bwB_)
                 {var p=r[2];caml_call3(pf(ppf),_ps_,pp_cp,p)}
                else
                 if(num_429931233 <= _bwB_)
                  if(num_508493173 <= _bwB_)
                   {var u=r[2];caml_call3(pf(ppf),_pt_,pp_uchar,u)}
                  else
                   {var p$0=r[2];caml_call3(pf(ppf),_pu_,pp_cp,p$0)}
                 else
                  if(num_225181919 <= _bwB_)
                   {var p$1=r[2];caml_call3(pf(ppf),_pv_,pp_cp,p$1)}
                  else
                   {var u$0=r[2];caml_call3(pf(ppf),_pw_,pp_uchar,u$0)}}
              else
               {var bs=e[2],l=caml_ml_string_length(bs);
                caml_call1(pf(ppf),_px_);
                if(0 < l)
                 {var _bwC_=caml_string_get(bs,0);
                  caml_call2(pf(ppf),_py_,_bwC_)}
                var _bwE_=l - 1 | 0,_bwD_=1;
                if(! (_bwE_ < 1))
                 {var i=_bwD_;
                  for(;;)
                   {var _bwF_=caml_string_get(bs,i);
                    caml_call2(pf(ppf),_pA_,_bwF_);
                    var _bwG_=i + 1 | 0;
                    if(_bwE_ !== i){var i=_bwG_;continue}
                    break}}
                caml_call1(pf(ppf),_pz_)}
             else
              if(num_434236056 <= _bwA_)
               {var r$0=e[2];
                caml_call1(pf(ppf),_pB_);
                if(typeof r$0 === "number")
                 if(num_3456159 <= r$0)
                  if(num_826371656 <= r$0)
                   if(num_869834347 <= r$0)
                    caml_call1(pf(ppf),_pC_);
                   else
                    caml_call1(pf(ppf),_pD_);
                  else
                   if(num_713199754 <= r$0)
                    caml_call1(pf(ppf),_pE_);
                   else
                    caml_call1(pf(ppf),_pF_);
                 else
                  if(num_826170817 <= r$0)
                   caml_call1(pf(ppf),_pG_);
                  else
                   caml_call1(pf(ppf),_pH_);
                else
                 if(num_881518886 <= r$0[1])
                  if(0 === r$0[2])
                   caml_call1(pf(ppf),_pI_);
                  else
                   caml_call1(pf(ppf),_pJ_);
                 else
                  if(0 === r$0[2])
                   caml_call1(pf(ppf),_pK_);
                  else
                   caml_call1(pf(ppf),_pL_)}
              else
               {var n=e[2];caml_call2(pf(ppf),_pM_,n)}
            else
             if(num_364210971 === _bwA_)
              {var r$1=e[2];
               caml_call1(pf(ppf),_pN_);
               if(num_14610 <= r$1)
                if(num_17732 <= r$1)
                 caml_call1(pf(ppf),_pO_);
                else
                 caml_call1(pf(ppf),_pP_);
               else
                if(num_826170817 <= r$1)
                 caml_call1(pf(ppf),_pQ_);
                else
                 caml_call1(pf(ppf),_pR_)}
             else
              if(num_67383738 <= _bwA_)
               {var l$0=e[2];caml_call2(pf(ppf),_pS_,l$0)}
              else
               {var u$1=e[2];caml_call3(pf(ppf),_pT_,pp_uchar,u$1)}}
          var
           _bwz_=flush_buffer_formatter(stdbuf,ppf),
           t$0=num_870828711,
           _bwI_=
            caml_call1
             (ksprintf(function(msg){throw [0,Parse_error$0,t$0,msg]},fmt),
              _bwz_)}
        if(typeof _bwI_ !== "number")
         {var _bwH_=_bwI_[1],switch$0=0;
          if(65 === _bwH_ || 79 === _bwH_)switch$0 = 1;
          if(switch$0)return _bwI_}
        throw [0,Parse_error$0,_bwI_,_rU_]};
    caml_fresh_oo_id(0);
    var
     bool$0=1,
     int8=1,
     uint8=1,
     int16=2,
     uint16=2,
     uint30=4,
     int31=4,
     int32$0=4,
     int64=8,
     float$1=8,
     tag_size=function(param){return num_980827423 <= param?uint16:uint8},
     unsigned_range_to_size=
      function(max)
       {if(0 <= max)
         return num_255 < max
                 ?num_65535 < max?num_980827863:num_980827423
                 :num_919245630;
        throw [0,Assert_failure,_rV_]},
     integer_to_size=
      function(param)
       {return num_815034505 <= param
                ?num_980827423 <= param
                  ?num_980827863 <= param?uint30:uint16
                  :num_919245630 <= param?uint8:int8
                :num_783416531 <= param?int31:int16},
     max_int$0=
      function(param)
       {if(num_815034505 <= param)
         {if(! (num_980827423 <= param))
           return num_919245630 <= param?num_255:num_127;
          if(! (num_980827863 <= param))return num_65535}
        else
         if(! (num_783416531 <= param))return num_32767;
        return num_1073741823},
     range_to_size=
      function(minimum,maximum)
       {if(0 <= minimum)return unsigned_range_to_size(maximum - minimum | 0);
        if(num_128$0 <= minimum && ! (num_127 < maximum))return num_815034505;
        if(num_32768 <= minimum && ! (num_32767 < maximum))
         return num_783416972;
        return num_783416531},
     enum_size=function(arr){return unsigned_range_to_size(arr.length - 1)},
     combine=
      function(name,k1,match)
       {var switch$0=0;
        if(typeof k1 === "number")
         {if(num_57067359 <= k1)
           {if(typeof match === "number")
             {if(num_57067359 === match)switch$0 = 1}
            else
             if(num_332360020 === match[1])switch$0 = 1}
          else
           if(typeof match === "number")
            return num_57067359 <= match
                    ?caml_call1(ksprintf(invalid_arg,_rW_),name)
                    :caml_call1(ksprintf(invalid_arg,_rX_),name)}
        else
         {var _bwy_=k1[2];
          if(typeof match === "number")
           {if(num_57067359 === match)switch$0 = 1}
          else
           if(num_332360020 === match[1])
            {var n2=match[2];return [0,num_332360020,_bwy_ + n2 | 0]}}
        return switch$0?num_57067359:num_1027682724},
     merge=
      function(k1,match)
       {var switch$0=0;
        if(typeof k1 === "number")
         {if(num_57067359 <= k1)
           {if(typeof match === "number")
             {if(num_57067359 === match)switch$0 = 1}
            else
             if(num_332360020 === match[1])switch$0 = 1}
          else
           if(typeof match === "number")num_57067359 <= match}
        else
         {var _bwx_=k1[2];
          if(typeof match === "number")
           {if(num_57067359 === match)switch$0 = 1}
          else
           if(num_332360020 === match[1])
            {var n2=match[2];
             return _bwx_ === n2?[0,num_332360020,_bwx_]:num_57067359}}
        return switch$0?num_57067359:num_1027682724},
     classify$0=
      function(counter,e)
       {var _bww_=e[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return classify_desc$0(counter$0,_bww_)}
        return caml_trampoline_return(classify_desc$0,[0,_bww_])},
     classify_desc$0=
      function(counter,e)
       {if(typeof e === "number")
         switch(e)
          {case 0:return _rZ_;
           case 1:return _r0_;
           case 2:return _r1_;
           case 3:return [0,num_332360020,bool$0];
           case 4:return [0,num_332360020,int8];
           case 5:return [0,num_332360020,uint8];
           case 6:return [0,num_332360020,int16];
           case 7:return [0,num_332360020,uint16];
           case 8:return [0,num_332360020,int31];
           case 9:return [0,num_332360020,int32$0];
           case 10:return [0,num_332360020,int64];
           case 11:return num_57067359;
           case 12:return num_57067359;
           default:return [0,num_332360020,float$1]}
        else
         switch(e[0])
          {case 0:return _r2_;
           case 1:
            var maximum=e[2],minimum=e[1];
            return [0,
                    num_332360020,
                    integer_to_size(range_to_size(minimum,maximum))];
           case 2:return [0,num_332360020,float$1];
           case 3:var kind=e[1];return kind;
           case 4:var kind$0=e[1];return kind$0;
           case 5:
            var
             match=e[1],
             encoding=match[1],
             n=e[2],
             match$0=classify_desc(encoding);
            if(typeof match$0 !== "number" && num_332360020 === match$0[1])
             {var m=match$0[2];return [0,num_332360020,n + m | 0]}
            throw [0,Assert_failure,_r3_];
           case 6:
            var cases=e[2];
            return [0,num_332360020,integer_to_size(enum_size(cases))];
           case 7:return num_1027682724;
           case 8:return num_1027682724;
           case 9:
            var _bwu_=e[1];
            switch(_bwu_[0])
             {case 0:
               var encoding$0=_bwu_[2];
               if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return classify$0(counter$0,encoding$0)}
               return caml_trampoline_return(classify$0,[0,encoding$0]);
              case 1:var kind$1=_bwu_[2];return kind$1;
              default:
               var encoding$1=_bwu_[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return classify$0(counter$1,encoding$1)}
               return caml_trampoline_return(classify$0,[0,encoding$1])}
           case 10:var kind$2=e[1];return kind$2;
           case 11:
            var encoding$2=e[1];
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return classify$0(counter$2,encoding$2)}
            return caml_trampoline_return(classify$0,[0,encoding$2]);
           case 12:var kind$3=e[1];return kind$3;
           case 13:var kind$4=e[1];return kind$4;
           case 14:var kind$5=e[1];return kind$5;
           case 15:
            var encoding$3=e[3];
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return classify$0(counter$3,encoding$3)}
            return caml_trampoline_return(classify$0,[0,encoding$3]);
           case 16:
            var encoding$4=e[4];
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return classify$0(counter$4,encoding$4)}
            return caml_trampoline_return(classify$0,[0,encoding$4]);
           case 17:
            var encoding$5=e[1];
            if(counter < 50)
             {var counter$5=counter + 1 | 0;
              return classify$0(counter$5,encoding$5)}
            return caml_trampoline_return(classify$0,[0,encoding$5]);
           case 18:return num_57067359;
           case 19:
            var encoding$6=e[2];
            if(counter < 50)
             {var counter$6=counter + 1 | 0;
              return classify$0(counter$6,encoding$6)}
            return caml_trampoline_return(classify$0,[0,encoding$6]);
           default:
            var f=e[1],_bwv_=caml_call1(f,0);
            if(counter < 50)
             {var counter$7=counter + 1 | 0;
              return classify$0(counter$7,_bwv_)}
            return caml_trampoline_return(classify$0,[0,_bwv_])}},
     classify=function(e){return caml_trampoline(classify$0(0,e))},
     classify_desc=function(e){return caml_trampoline(classify_desc$0(0,e))},
     bytes=
      function(n)
       {if(n <= 0)invalid_arg(_r4_);
        var eta=[3,[0,num_332360020,n]];
        return [0,eta,0]},
     is_zeroable=
      function(e)
       {var e$0=e;
        for(;;)
         {var _bwq_=e$0[1];
          if(typeof _bwq_ === "number")
           switch(_bwq_)
            {case 0:return 1;
             case 1:return 1;
             case 2:return 1;
             case 3:return 0;
             case 4:return 0;
             case 5:return 0;
             case 6:return 0;
             case 7:return 0;
             case 8:return 0;
             case 9:return 0;
             case 10:return 0;
             case 11:return 0;
             case 12:return 0;
             default:return 0}
          else
           switch(_bwq_[0])
            {case 0:return 1;
             case 1:return 0;
             case 2:return 0;
             case 3:return 0;
             case 4:return 0;
             case 5:return 0;
             case 6:return 0;
             case 7:return 1;
             case 8:return 1;
             case 9:
              var _bwr_=_bwq_[1];
              switch(_bwr_[0])
               {case 0:var e$1=_bwr_[2],e$0=e$1;continue;
                case 1:return num_1027682724 === _bwr_[2]?1:0;
                default:var e$2=_bwr_[2],e$0=e$2;continue}
             case 10:
              var right=_bwq_[3],left=_bwq_[2],_bws_=is_zeroable(left);
              if(_bws_){var e$0=right;continue}
              return _bws_;
             case 11:var e$3=_bwq_[1],e$0=e$3;continue;
             case 12:
              var right$0=_bwq_[3],left$0=_bwq_[2],_bwt_=is_zeroable(left$0);
              if(_bwt_){var e$0=right$0;continue}
              return _bwt_;
             case 13:return 0;
             case 14:
              if(num_57067359 <= _bwq_[1])return 0;
              var fix=_bwq_[5],e$4=caml_call1(fix,e$0),e$0=e$4;
              continue;
             case 15:var e$5=_bwq_[3],e$0=e$5;continue;
             case 16:var e$6=_bwq_[4],e$0=e$6;continue;
             case 17:var e$7=_bwq_[1],e$0=e$7;continue;
             case 18:return 0;
             case 19:var e$8=_bwq_[2],e$0=e$8;continue;
             default:var f=_bwq_[1],e$9=caml_call1(f,0),e$0=e$9;continue}}},
     string$1=function(eta){return [0,eta,0]}(_r5_),
     bytes$0=function(eta){return [0,eta,0]}(_r6_),
     list$0=
      function(match$0,e)
       {var match=classify(e),switch$0=0;
        if(typeof match === "number" && ! (num_57067359 <= match))
         {caml_call1(ksprintf(invalid_arg,_r7_),name);switch$0 = 1}
        if(is_zeroable(e))caml_call1(ksprintf(invalid_arg,_r8_),name$0);
        var eta=[8,match$0,e],encoding=[0,eta,0],_bwp_=classify(e);
        if(typeof _bwp_ !== "number" && num_332360020 === _bwp_[1] && match$0)
         {var
           max_length=match$0[1],
           n=_bwp_[2],
           limit=caml_mul(n,max_length),
           eta$0=[19,limit,encoding];
          return [0,eta$0,0]}
        return encoding},
     arg$4=
      function(opt,e)
       {if(opt)var sth=opt[1],kind=sth;else var kind=num_980827863;
        var eta=[18,kind,e];
        return [0,eta,0]},
     delayed=function(f){var eta=[20,f];return [0,eta,0]},
     _r9_=0,
     null$1=function(eta){return [0,eta,0]}(_r9_),
     _r__=1,
     encoding=function(eta){return [0,eta,0]}(_r__),
     _r$_=2,
     input$0=function(eta){return [0,eta,0]}(_r$_),
     constant=function(s){var eta=[0,s];return [0,eta,0]},
     _sa_=3,
     bool$1=function(eta){return [0,eta,0]}(_sa_),
     _sb_=5,
     uint8$0=function(eta){return [0,eta,0]}(_sb_),
     _sc_=6,
     int16$0=function(eta){return [0,eta,0]}(_sc_),
     _sd_=7,
     uint16$0=function(eta){return [0,eta,0]}(_sd_),
     _se_=8,
     int31$0=function(eta){return [0,eta,0]}(_se_),
     _sf_=9,
     int32$1=function(eta){return [0,eta,0]}(_sf_),
     _sg_=10,
     int64$0=function(eta){return [0,eta,0]}(_sg_),
     _sh_=12,
     counter=function(eta){return [0,eta,0]}(_sh_),
     _si_=13,
     float$2=function(eta){return [0,eta,0]}(_si_),
     output=arg$4(0,string$1),
     bytes$1=arg$4(0,bytes$0),
     list$1=function(max_length,e){return arg$4(0,list$0(max_length,e))},
     string_enum=
      function(cases)
       {if(cases)
         {if(cases[2])
           {var
             arr=of_list(map$1(function(_bwo_){return _bwo_[2]},cases)),
             tbl=create$2(0,arr.length - 1);
            iteri
             (function(ind,param)
               {var a=param[2],str=param[1];return add$0(tbl,a,[0,str,ind])},
              cases);
            var eta=[6,tbl,arr];
            return [0,eta,0]}
          return invalid_arg(_sj_)}
        return invalid_arg(_sk_)},
     conv=
      function(proj,inj,schema,encoding)
       {var eta=[15,proj,inj,encoding,schema];return [0,eta,0]},
     def$0=
      function(id,title,description,encoding)
       {var eta=[16,id,title,description,encoding];return [0,eta,0]},
     opt$2=
      function(title,description,n,encoding)
       {var match=classify(encoding),switch$0=0;
        if(typeof match === "number" && ! (num_57067359 <= match))
         {var kind=num_1027682724;switch$0 = 1}
        if(! switch$0)var kind=num_57067359;
        return [1,n,kind,encoding,title,description]},
     raw_splitted=
      function(json,binary){var eta=[17,binary,json,0,0];return [0,eta,0]},
     is_obj=
      function(e)
       {var e$0=e;
        for(;;)
         {var _bwn_=e$0[1];
          if(typeof _bwn_ === "number")
           switch(_bwn_){case 1:return 1;case 2:return 1}
          else
           switch(_bwn_[0])
            {case 9:return 1;
             case 10:return 1;
             case 13:
              var cases=_bwn_[3];
              return for_all
                      (function(param){var e=param[3];return is_obj(e)},cases);
             case 14:
              var fix=_bwn_[5],e$1=caml_call1(fix,e$0),e$0=e$1;continue;
             case 15:var e$2=_bwn_[3],e$0=e$2;continue;
             case 16:var e$3=_bwn_[4],e$0=e$3;continue;
             case 17:var is_obj$0=_bwn_[3];return is_obj$0;
             case 18:var e$4=_bwn_[2],e$0=e$4;continue;
             case 20:var f=_bwn_[1],e$5=caml_call1(f,0),e$0=e$5;continue
             }
          return 0}},
     raw_merge_objs=
      function(left,right)
       {var
         _bwm_=classify(right),
         kind=combine(_sl_,classify(left),_bwm_),
         eta=[10,kind,left,right];
        return [0,eta,0]},
     obj1=function(f1){var eta=[9,f1];return [0,eta,0]},
     obj2=
      function(f2,f1)
       {var _bwl_=obj1(f1);return raw_merge_objs(obj1(f2),_bwl_)},
     _sm_=
      function(f3,f2,f1)
       {var _bwk_=obj2(f2,f1);return raw_merge_objs(obj1(f3),_bwk_)},
     _sn_=
      function(f4,f3,f2,f1)
       {var _bwj_=obj2(f2,f1);return raw_merge_objs(obj2(f4,f3),_bwj_)},
     _so_=
      function(f8,f7,f6,f5,f4,f3,f2,f1)
       {var _bwi_=_sn_(f4,f3,f2,f1);
        return raw_merge_objs(_sn_(f8,f7,f6,f5),_bwi_)},
     merge_objs=
      function(o1,o2)
       {if(is_obj(o1) && is_obj(o2))return raw_merge_objs(o1,o2);
        return invalid_arg(_sp_)},
     tup1=function(e1){var eta=[11,e1];return [0,eta,0]},
     tup2=
      function(e2,e1)
       {var
         right=tup1(e1),
         left=tup1(e2),
         _bwh_=classify(right),
         kind=combine(_sq_,classify(left),_bwh_),
         eta=[12,kind,left,right];
        return [0,eta,0]},
     obj3=
      function(f3,f2,f1)
       {var ty=_sm_(f3,f2,f1),_bwf_=0;
        function _bwg_(param)
         {var match=param[2],a=match[2],b=match[1],c=param[1];
          return [0,c,b,a]}
        return conv
                (function(param)
                  {var a=param[3],b=param[2],c=param[1];return [0,c,[0,b,a]]},
                 _bwg_,
                 _bwf_,
                 ty)},
     obj4=
      function(f4,f3,f2,f1)
       {var ty=_sn_(f4,f3,f2,f1),_bwc_=0;
        function _bwd_(param)
         {var
           _bwe_=param[2],
           a=_bwe_[2],
           b=_bwe_[1],
           match=param[1],
           c=match[2],
           d=match[1];
          return [0,d,c,b,a]}
        return conv
                (function(param)
                  {var a=param[4],b=param[3],c=param[2],d=param[1];
                   return [0,[0,d,c],[0,b,a]]},
                 _bwd_,
                 _bwc_,
                 ty)},
     obj5=
      function(f5,f4,f3,f2,f1)
       {var _bv9_=_sn_(f4,f3,f2,f1),ty=raw_merge_objs(obj1(f5),_bv9_),_bv__=0;
        function _bv$_(param)
         {var
           _bwa_=param[2],
           _bwb_=_bwa_[2],
           a=_bwb_[2],
           b=_bwb_[1],
           match=_bwa_[1],
           c=match[2],
           d=match[1],
           e=param[1];
          return [0,e,d,c,b,a]}
        return conv
                (function(param)
                  {var a=param[5],b=param[4],c=param[3],d=param[2],e=param[1];
                   return [0,e,[0,[0,d,c],[0,b,a]]]},
                 _bv$_,
                 _bv__,
                 ty)},
     obj6=
      function(f6,f5,f4,f3,f2,f1)
       {var
         _bv3_=_sn_(f4,f3,f2,f1),
         ty=raw_merge_objs(obj2(f6,f5),_bv3_),
         _bv4_=0;
        function _bv5_(param)
         {var
           _bv6_=param[2],
           _bv7_=_bv6_[2],
           a=_bv7_[2],
           b=_bv7_[1],
           _bv8_=_bv6_[1],
           c=_bv8_[2],
           d=_bv8_[1],
           match=param[1],
           e=match[2],
           f=match[1];
          return [0,f,e,d,c,b,a]}
        return conv
                (function(param)
                  {var
                    a=param[6],
                    b=param[5],
                    c=param[4],
                    d=param[3],
                    e=param[2],
                    f=param[1];
                   return [0,[0,f,e],[0,[0,d,c],[0,b,a]]]},
                 _bv5_,
                 _bv4_,
                 ty)},
     obj7=
      function(f7,f6,f5,f4,f3,f2,f1)
       {var
         _bvW_=_sn_(f4,f3,f2,f1),
         ty=raw_merge_objs(_sm_(f7,f6,f5),_bvW_),
         _bvX_=0;
        function _bvY_(param)
         {var
           _bvZ_=param[2],
           _bv0_=_bvZ_[2],
           a=_bv0_[2],
           b=_bv0_[1],
           _bv1_=_bvZ_[1],
           c=_bv1_[2],
           d=_bv1_[1],
           _bv2_=param[1],
           match=_bv2_[2],
           e=match[2],
           f=match[1],
           g=_bv2_[1];
          return [0,g,f,e,d,c,b,a]}
        return conv
                (function(param)
                  {var
                    a=param[7],
                    b=param[6],
                    c=param[5],
                    d=param[4],
                    e=param[3],
                    f=param[2],
                    g=param[1];
                   return [0,[0,g,[0,f,e]],[0,[0,d,c],[0,b,a]]]},
                 _bvY_,
                 _bvX_,
                 ty)},
     obj8=
      function(f8,f7,f6,f5,f4,f3,f2,f1)
       {var ty=_so_(f8,f7,f6,f5,f4,f3,f2,f1),_bvP_=0;
        function _bvQ_(param)
         {var
           _bvR_=param[2],
           _bvS_=_bvR_[2],
           a=_bvS_[2],
           b=_bvS_[1],
           _bvT_=_bvR_[1],
           c=_bvT_[2],
           d=_bvT_[1],
           _bvU_=param[1],
           _bvV_=_bvU_[2],
           e=_bvV_[2],
           f=_bvV_[1],
           match=_bvU_[1],
           g=match[2],
           h=match[1];
          return [0,h,g,f,e,d,c,b,a]}
        return conv
                (function(param)
                  {var
                    a=param[8],
                    b=param[7],
                    c=param[6],
                    d=param[5],
                    e=param[4],
                    f=param[3],
                    g=param[2],
                    h=param[1];
                   return [0,[0,[0,h,g],[0,f,e]],[0,[0,d,c],[0,b,a]]]},
                 _bvQ_,
                 _bvP_,
                 ty)},
     obj10=
      function(f10,f9,f8,f7,f6,f5,f4,f3,f2,f1)
       {var
         _bvF_=_so_(f8,f7,f6,f5,f4,f3,f2,f1),
         ty=raw_merge_objs(obj2(f10,f9),_bvF_),
         _bvG_=0;
        function _bvH_(param)
         {var
           _bvI_=param[2],
           _bvJ_=_bvI_[2],
           _bvK_=_bvJ_[2],
           a=_bvK_[2],
           b=_bvK_[1],
           _bvL_=_bvJ_[1],
           c=_bvL_[2],
           d=_bvL_[1],
           _bvM_=_bvI_[1],
           _bvN_=_bvM_[2],
           e=_bvN_[2],
           f=_bvN_[1],
           _bvO_=_bvM_[1],
           g=_bvO_[2],
           h=_bvO_[1],
           match=param[1],
           i=match[2],
           j=match[1];
          return [0,j,i,h,g,f,e,d,c,b,a]}
        return conv
                (function(param)
                  {var
                    a=param[10],
                    b=param[9],
                    c=param[8],
                    d=param[7],
                    e=param[6],
                    f=param[5],
                    g=param[4],
                    h=param[3],
                    i=param[2],
                    j=param[1];
                   return [0,
                           [0,j,i],
                           [0,[0,[0,h,g],[0,f,e]],[0,[0,d,c],[0,b,a]]]]},
                 _bvH_,
                 _bvG_,
                 ty)},
     union$0=
      function(opt,cases)
       {if(opt)
         var sth=opt[1],tag_size$0=sth;
        else
         var tag_size$0=num_919245630;
        if(0 === cases)invalid_arg(_sr_);
        var max_tag=num_980827423 <= tag_size$0?num_65536:num_256,_bvC_=0;
        fold_left$0
         (function(others,param)
           {var tag=param[6];
            if(tag)
             {var tag$0=tag[1];
              if(mem(tag$0,others))caml_call1(kstr(invalid_arg,_ss_),tag$0);
              var _bvD_=tag$0 < 0?1:0,_bvE_=_bvD_ || (max_tag <= tag$0?1:0);
              if(_bvE_)caml_call1(kstr(invalid_arg,_st_),tag$0);
              return [0,tag$0,others]}
            return others},
          _bvC_,
          cases);
        var
         param=
          map$1
           (function(param){var encoding=param[3];return classify(encoding)},
            cases);
        if(param)
         {var ks=param[2],k=param[1],k$0=fold_left$0(merge,k,ks),switch$0=0;
          if(typeof k$0 !== "number" && num_332360020 === k$0[1])
           {var n=k$0[2],kind=[0,num_332360020,n + tag_size(tag_size$0) | 0];
            switch$0 = 1}
          if(! switch$0)var kind=k$0;
          var eta=[13,kind,tag_size$0,cases];
          return [0,eta,0]}
        throw [0,Assert_failure,_rY_]},
     is_nullable$1=
      function(e)
       {var e$0=e;
        for(;;)
         {var _bvB_=e$0[1];
          if(typeof _bvB_ === "number")
           switch(_bvB_)
            {case 0:return 1;
             case 1:return 0;
             case 2:return 1;
             case 3:return 0;
             case 4:return 0;
             case 5:return 0;
             case 6:return 0;
             case 7:return 0;
             case 8:return 0;
             case 9:return 0;
             case 10:return 0;
             case 11:return 0;
             case 12:return 0;
             default:return 0}
          else
           switch(_bvB_[0])
            {case 0:return 0;
             case 1:return 0;
             case 2:return 0;
             case 3:return 0;
             case 4:return 0;
             case 5:var e$1=_bvB_[1],e$0=e$1;continue;
             case 6:return 0;
             case 7:return 0;
             case 8:return 0;
             case 9:return 0;
             case 10:return 0;
             case 11:return 0;
             case 12:return 0;
             case 13:
              var cases=_bvB_[3];
              return exists
                      (function(param){var e=param[3];return is_nullable$1(e)},
                       cases);
             case 14:
              var fix=_bvB_[5],e$2=caml_call1(fix,e$0),e$0=e$2;continue;
             case 15:var e$3=_bvB_[3],e$0=e$3;continue;
             case 16:var e$4=_bvB_[4],e$0=e$4;continue;
             case 17:
              var json_encoding=_bvB_[2];return is_nullable$0(json_encoding);
             case 18:var e$5=_bvB_[2],e$0=e$5;continue;
             case 19:var e$6=_bvB_[2],e$0=e$6;continue;
             default:return 1}}},
     option=
      function(ty)
       {if(is_nullable$1(ty))invalid_arg(_su_);
        var _bvx_=0;
        function _bvy_(param){return 0}
        var
         _bvz_=
          [0,
           [0,_sx_,0,null$1,function(param){return param?0:_sv_},_bvy_,_sw_],
           _bvx_];
        function _bvA_(x){return [0,x]}
        return union$0
                (_sA_,
                 [0,[0,_sz_,0,ty,function(x){return x},_bvA_,_sy_],_bvz_])},
     mu=
      function(name,title,description,fix)
       {try
         {var
           _bvu_=[14,num_57067359,name,title,description,fix],
           precursor$0=function(eta){return [0,eta,0]}(_bvu_),
           match=classify(caml_call1(fix,precursor$0));
          if(typeof match === "number" && ! (num_57067359 <= match))
           throw Exit;
          var _bvv_=num_57067359,kind=_bvv_}
        catch(_bvw_)
         {_bvw_ = caml_wrap_exception(_bvw_);
          _bvw_ === Exit;
          var
           _bvs_=[14,num_1027682724,name,title,description,fix],
           precursor=function(eta){return [0,eta,0]}(_bvs_);
          classify(caml_call1(fix,precursor));
          var kind=num_1027682724}
        var _bvt_=[14,kind,name,title,description,fix];
        return function(eta){return [0,eta,0]}(_bvt_)},
     version_case=
      function(enc,choose,wrap,name,nth)
       {var _bvr_=obj1([0,caml_call2(sprintf(_sB_),name,nth),enc,0,0]);
        return [0,caml_call2(sprintf(_sC_),name,nth),0,_bvr_,choose,wrap,0]},
     make_encoding=
      function(name,l)
       {return union$0
                (_sD_,mapi(function(nth,f){return caml_call2(f,name,nth)},l))},
     encoding$0=
      function(name,version)
       {if(0 === version[0])
         {var
           e=version[1],
           _bu$_=0,
           _bva_=function(x){return x},
           _bvb_=function(x){return [0,x]};
          return make_encoding
                  (name,
                   [0,
                    function(_bvp_,_bvq_)
                     {return version_case(e,_bvb_,_bva_,_bvp_,_bvq_)},
                    _bu$_])}
        var upgrade=version[3],encoding=version[2],previous=version[1];
        function mk_nones(upgr,param)
         {if(0 === param[0])
           {var
             e=param[1],
             _bvg_=0,
             _bvh_=function(x){return caml_call1(upgr,x)},
             _bvi_=function(param){return 0};
            return [0,
                    function(_bvn_,_bvo_)
                     {return version_case(e,_bvi_,_bvh_,_bvn_,_bvo_)},
                    _bvg_]}
          var
           upgrade=param[3],
           encoding=param[2],
           previous=param[1],
           others=
            mk_nones
             (function(x){return caml_call1(upgr,caml_call1(upgrade,x))},
              previous);
          function _bvj_(x){return caml_call1(upgr,x)}
          function _bvk_(param){return 0}
          return [0,
                  function(_bvl_,_bvm_)
                   {return version_case(encoding,_bvk_,_bvj_,_bvl_,_bvm_)},
                  others]}
        var nones=mk_nones(upgrade,previous);
        function _bvc_(x){return x}
        function _bvd_(x){return [0,x]}
        var
         cases=
          rev
           ([0,
             function(_bve_,_bvf_)
              {return version_case(encoding,_bvd_,_bvc_,_bve_,_bvf_)},
             nones]);
        return make_encoding(name,cases)},
     get_int8=function(b,i){return caml_bytes_get(b,i) << 24 >> 24},
     get_uint16=function(b,i){return caml_bswap16(caml_bytes_get16(b,i))},
     get_int16=function(b,i){return get_uint16(b,i) << 16 >> 16},
     get_int32=function(b,i){return caml_int32_bswap(caml_bytes_get32(b,i))},
     get_int64=function(b,i){return caml_int64_bswap(caml_bytes_get64(b,i))},
     set_int32=
      function(b,i,x){return caml_bytes_set32(b,i,caml_int32_bswap(x))},
     set_int64=
      function(b,i,x){return caml_bytes_set64(b,i,caml_int64_bswap(x))},
     get_uint8=caml_bytes_get,
     get_double=
      function(buff,i){return caml_int64_float_of_bits(get_int64(buff,i))},
     _sG_=obj2([0,_sF_,output,0,0],opt$2(0,0,_sE_,output)),
     _sH_=0,
     _sI_=
      function(param)
       {var description=param[2],title=param[1];return [0,title,description]},
     description_encoding=
      conv
       (function(param)
         {var description=param[2],title=param[1];
          return [0,title,description]},
        _sI_,
        _sH_,
        _sG_),
     integer_encoding=string_enum(integer_cases),
     integer_extended_encoding=string_enum([0,_sK_,[0,_sJ_,integer_cases]]),
     layout_encoding=
      mu
       (_tL_,
        0,
        0,
        function(layout)
         {var _buA_=0;
          function _buB_(param){return 5}
          function _buC_(param)
           {if(typeof param === "number" && 5 <= param)return _sL_;return 0}
          var
           _buD_=
            [0,
             [0,_sP_,0,obj1([0,_sN_,constant(_sM_),0,0]),_buC_,_buB_,_sO_],
             _buA_];
          function _buE_(param){var name=param[1];return [5,name]}
          function _buF_(param)
           {if(typeof param !== "number" && 5 === param[0])
             {var layout=param[1];return [0,[0,layout,0]]}
            return 0}
          var
           _buG_=
            [0,
             [0,
              _sU_,
              0,
              obj2([0,_sS_,output,0,0],[0,_sR_,constant(_sQ_),0,0]),
              _buF_,
              _buE_,
              _sT_],
             _buD_];
          function _buH_(param)
           {var len=param[3],layout=param[1];return [4,layout,len]}
          function _buI_(param)
           {if(typeof param !== "number" && 4 === param[0])
             {var len=param[2],layout=param[1];return [0,[0,layout,0,len]]}
            return 0}
          var
           _buJ_=opt$2(0,0,_sV_,int31$0),
           _buK_=
            [0,
             [0,
              _s0_,
              0,
              obj3([0,_sY_,layout,0,0],[0,_sX_,constant(_sW_),0,0],_buJ_),
              _buI_,
              _buH_,
              _sZ_],
             _buG_];
          function _buL_(param)
           {var cases=param[2],size=param[1];return [3,size,cases]}
          function _buM_(param)
           {if(typeof param !== "number" && 3 === param[0])
             {var cases=param[2],size=param[1];return [0,[0,size,cases,0]]}
            return 0}
          var
           _buN_=
            [0,
             [0,
              _s6_,
              0,
              obj3
               ([0,_s4_,integer_encoding,0,0],
                [0,_s3_,output,0,0],
                [0,_s2_,constant(_s1_),0,0]),
              _buM_,
              _buL_,
              _s5_],
             _buK_];
          function _buO_(param){return 4}
          function _buP_(param)
           {if(typeof param === "number" && 4 === param)return _s7_;return 0}
          var
           _buQ_=
            [0,
             [0,_s$_,0,obj1([0,_s9_,constant(_s8_),0,0]),_buP_,_buO_,_s__],
             _buN_];
          function _buR_(param){return 3}
          function _buS_(param)
           {if(typeof param === "number" && 3 === param)return _ta_;return 0}
          var
           _buT_=
            [0,
             [0,_te_,0,obj1([0,_tc_,constant(_tb_),0,0]),_buS_,_buR_,_td_],
             _buQ_];
          function _buU_(param){return 2}
          function _buV_(param)
           {if(typeof param === "number" && 2 === param)return _tf_;return 0}
          var
           _buW_=
            [0,
             [0,_tj_,0,obj1([0,_th_,constant(_tg_),0,0]),_buV_,_buU_,_ti_],
             _buT_];
          function _buX_(param)
           {var max=param[2],min=param[1];return [2,min,max]}
          function _buY_(param)
           {if(typeof param !== "number" && 2 === param[0])
             {var max=param[2],min=param[1];return [0,[0,min,max,0]]}
            return 0}
          var
           _buZ_=
            [0,
             [0,
              _tp_,
              0,
              obj3
               ([0,_tn_,float$2,0,0],
                [0,_tm_,float$2,0,0],
                [0,_tl_,constant(_tk_),0,0]),
              _buY_,
              _buX_,
              _to_],
             _buW_];
          function _bu0_(param)
           {var max=param[2],min=param[1];return [1,min,max]}
          function _bu1_(param)
           {if(typeof param !== "number" && 1 === param[0])
             {var max=param[2],min=param[1];return [0,[0,min,max,0]]}
            return 0}
          var
           _bu2_=
            [0,
             [0,
              _tv_,
              0,
              obj3
               ([0,_tt_,int31$0,0,0],
                [0,_ts_,int31$0,0,0],
                [0,_tr_,constant(_tq_),0,0]),
              _bu1_,
              _bu0_,
              _tu_],
             _buZ_];
          function _bu3_(param){return 1}
          function _bu4_(param)
           {if(typeof param === "number" && 1 === param)return _tw_;return 0}
          var
           _bu5_=
            [0,
             [0,_tA_,0,obj1([0,_ty_,constant(_tx_),0,0]),_bu4_,_bu3_,_tz_],
             _bu2_];
          function _bu6_(param){var integer=param[1];return [0,integer]}
          function _bu7_(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var integer=param[1];return [0,[0,integer,0]]}
            return 0}
          var
           _bu8_=
            [0,
             [0,
              _tF_,
              0,
              obj2
               ([0,_tD_,integer_extended_encoding,0,0],
                [0,_tC_,constant(_tB_),0,0]),
              _bu7_,
              _bu6_,
              _tE_],
             _bu5_];
          function _bu9_(param){return 0}
          function _bu__(param)
           {if(typeof param === "number" && 0 === param)return _tG_;return 0}
          return union$0
                  (0,
                   [0,
                    [0,
                     _tK_,
                     0,
                     obj1([0,_tI_,constant(_tH_),0,0]),
                     _bu__,
                     _bu9_,
                     _tJ_],
                    _bu8_])}),
     kind_enum_cases=
      function(param)
       {var _buu_=0;
        function _buv_(param){return num_1027682724}
        function _buw_(param){return num_1027682724 === param?_tM_:0}
        var
         _bux_=
          [0,
           [0,_tQ_,0,obj1([0,_tO_,constant(_tN_),0,0]),_buw_,_buv_,_tP_],
           _buu_];
        function _buy_(param){return num_57067359}
        function _buz_(param){return num_57067359 === param?_tR_:0}
        return [0,
                [0,_tV_,0,obj1([0,_tT_,constant(_tS_),0,0]),_buz_,_buy_,_tU_],
                _bux_]},
     _tW_=kind_enum_cases(0),
     _tX_=function(param){var n=param[1];return [0,num_332360020,n]},
     _tY_=
      function(param)
       {if(typeof param !== "number" && num_332360020 === param[1])
         {var n=param[2];return [0,[0,n,0]]}
        return 0},
     _t4_=
      union$0
       (0,
        [0,
         [0,
          _t3_,
          0,
          obj2([0,_t1_,int31$0,0,0],[0,_t0_,constant(_tZ_),0,0]),
          _tY_,
          _tX_,
          _t2_],
         _tW_]),
     kind_t_encoding=function(eta){return def$0(_t5_,0,0,eta)}(_t4_),
     unsigned_integer_encoding=string_enum(_t6_),
     dynamic_layout_encoding=arg$4(0,layout_encoding),
     _t7_=0,
     _t8_=function(param){var s=param[2];return [3,s]},
     _t9_=
      function(param)
       {if(3 === param[0]){var s=param[1];return [0,[0,0,s]]}return 0},
     _ud_=
      [0,
       [0,
        _uc_,
        0,
        obj2([0,_ua_,constant(_t$_),0,0],[0,_t__,output,0,0]),
        _t9_,
        _t8_,
        _ub_],
       _t7_],
     _ue_=
      function(param)
       {var size=param[4],i=param[3],name=param[2];return [2,name,i,size]},
     _uf_=
      function(param)
       {if(2 === param[0])
         {var size=param[3],i=param[2],name=param[1];
          return [0,[0,0,name,i,size]]}
        return 0},
     _uj_=opt$2(0,0,_ui_,output),
     _uo_=
      [0,
       [0,
        _un_,
        0,
        obj4
         ([0,_ul_,constant(_uk_),0,0],
          _uj_,
          [0,_uh_,int31$0,0,0],
          [0,_ug_,unsigned_integer_encoding,0,0]),
        _uf_,
        _ue_,
        _um_],
       _ud_],
     _up_=
      function(param)
       {var layout=param[3],kind=param[1];return [1,layout,kind]},
     _uq_=
      function(param)
       {if(1 === param[0])
         {var layout=param[2],kind=param[1];return [0,[0,layout,0,kind]]}
        return 0},
     _ux_=
      [0,
       [0,
        _uw_,
        0,
        obj3
         ([0,_uu_,dynamic_layout_encoding,0,0],
          [0,_ut_,constant(_us_),0,0],
          [0,_ur_,kind_t_encoding,0,0]),
        _uq_,
        _up_,
        _uv_],
       _uo_],
     _uy_=
      function(param)
       {var layout=param[3],kind=param[2],name=param[1];
        return [0,name,layout,kind]},
     _uz_=
      function(param)
       {if(0 === param[0])
         {var layout=param[3],kind=param[2],name=param[1];
          return [0,[0,name,layout,kind,0]]}
        return 0},
     _uH_=
      union$0
       (0,
        [0,
         [0,
          _uG_,
          0,
          obj4
           ([0,_uE_,output,0,0],
            [0,_uD_,dynamic_layout_encoding,0,0],
            [0,_uC_,kind_t_encoding,0,0],
            [0,_uB_,constant(_uA_),0,0]),
          _uz_,
          _uy_,
          _uF_],
         _ux_]),
     field_descr_encoding=function(eta){return def$0(_uI_,0,0,eta)}(_uH_),
     tag_size_encoding=string_enum(_uJ_),
     _uK_=0,
     _uL_=
      function(param){var cases=param[2],size=param[1];return [2,size,cases]},
     _uM_=
      function(param)
       {if(2 === param[0])
         {var cases=param[2],size=param[1];return [0,[0,size,cases]]}
        return 0},
     _uR_=
      [0,
       [0,
        _uQ_,
        0,
        obj2
         ([0,_uO_,integer_encoding,0,0],
          [0,_uN_,list$1(0,tup2(int31$0,output)),0,0]),
        _uM_,
        _uL_,
        _uP_],
       _uK_],
     _uS_=
      function(param)
       {var cases=param[3],kind=param[2],tag_size=param[1];
        return [1,kind,tag_size,cases]},
     _uT_=
      function(param)
       {if(1 === param[0])
         {var cases=param[3],tag_size=param[2],kind=param[1];
          return [0,[0,tag_size,kind,cases]]}
        return 0},
     _uV_=opt$2(0,0,_uU_,output),
     _uY_=
      obj3
       ([0,_uX_,int31$0,0,0],
        [0,_uW_,list$1(0,arg$4(0,field_descr_encoding)),0,0],
        _uV_),
     _uZ_=
      function(param)
       {var name=param[3],fields=param[2],tag=param[1];
        return [0,tag,name,fields]},
     _u0_=
      function(param)
       {var fields=param[3],name=param[2],tag=param[1];
        return [0,tag,fields,name]},
     _u1_=function(eta){return conv(_u0_,_uZ_,0,eta)}(_uY_),
     _u4_=
      [0,_u3_,list$1(0,function(eta){return def$0(_u2_,0,0,eta)}(_u1_)),0,0],
     _u9_=
      [0,
       [0,
        _u8_,
        0,
        obj3
         ([0,_u6_,tag_size_encoding,0,0],
          [0,_u5_,arg$4(0,kind_t_encoding),0,0],
          _u4_),
        _uT_,
        _uS_,
        _u7_],
       _uR_],
     _u__=function(fields){return [0,fields]},
     _u$_=
      function(param)
       {if(0 === param[0]){var fields=param[1];return [0,fields]}return 0},
     binary_description_encoding=
      union$0
       (0,
        [0,
         [0,
          _vc_,
          0,
          obj1([0,_va_,list$1(0,arg$4(0,field_descr_encoding)),0,0]),
          _u$_,
          _u__,
          _vb_],
         _u9_]),
     _vh_=
      obj2
       ([0,_vg_,binary_description_encoding,0,0],
        [0,
         _vf_,
         list$1
          (0,
           obj2
            ([0,_ve_,description_encoding,0,0],
             [0,_vd_,binary_description_encoding,0,0])),
         0,
         0]),
     _vi_=
      function(param)
       {var fields=param[2],toplevel=param[1];return [0,toplevel,fields]},
     _vj_=
      function(param)
       {var fields=param[2],toplevel=param[1];return [0,toplevel,fields]},
     encoding$1=function(eta){return conv(_vj_,_vi_,0,eta)}(_vh_),
     add$1=function(t,x){return replace(t,x[1],[1,x])},
     find$1=
      function(tbl,key)
       {var key$0=key;
        for(;;)
         {var match=find$0(tbl,key$0);
          if(0 === match[0]){var key$1=match[1],key$0=key$1;continue}
          var desc=match[1];
          return desc}},
     union$1=
      function(tbl,new_cannonical,existing)
       {add$1(tbl,new_cannonical);
        var root=find$1(tbl,existing);
        return caml_string_equal(root[1],new_cannonical[1])
                ?0
                :replace(tbl,root[1],[0,new_cannonical[1]])},
     dedup_canonicalize=
      function(uf)
       {var h=create$2(0,num_100),acc=0,prev_len=0;
        return function(param$2)
         {var prev_len$0=prev_len,acc$0=acc,param$0=param$2;
          for(;;)
           {if(param$0)
             {var
               tl=param$0[2],
               match$0=param$0[1],
               layout=match$0[2],
               name=match$0[1],
               _bur_=key_index(h,layout),
               match=caml_check_bound(h[2],_bur_)[1 + _bur_];
              if(match)
               {var k1=match[1],d1=match[2],next1=match[3];
                if(0 === caml_compare(layout,k1))
                 var match$1=[0,d1];
                else
                 if(next1)
                  {var k2=next1[1],d2=next1[2],next2=next1[3];
                   if(0 === caml_compare(layout,k2))
                    var match$1=[0,d2];
                   else
                    if(next2)
                     {var k3=next2[1],d3=next2[2],next3=next2[3];
                      if(0 === caml_compare(layout,k3))
                       var match$1=[0,d3];
                      else
                       {var param=next3;
                        for(;;)
                         {if(param)
                           {var k=param[1],data=param[2],next=param[3];
                            if(0 !== caml_compare(layout,k)){var param=next;continue}
                            var match$1=[0,data]}
                          else
                           var match$1=0;
                          break}}}
                    else
                     var match$1=0}
                 else
                  var match$1=0}
              else
               var match$1=0;
              if(match$1)
               {var original_desc=match$1[1];
                union$1(uf,original_desc,name);
                var param$0=tl;
                continue}
              var desc=find$1(uf,name);
              add$0(h,layout,desc);
              var acc$1=[0,[0,desc[1],layout],acc$0],acc$0=acc$1,param$0=tl;
              continue}
            var
             param$1=
              map$1
               (function(param)
                 {var layout=param[2],desc=param[1];
                  function fixup_layout(enc)
                   {if(typeof enc !== "number")
                     switch(enc[0])
                      {case 3:
                        var name=enc[2],i=enc[1];return [3,i,find$1(uf,name)[1]];
                       case 4:
                        var len=enc[2],layout=enc[1];
                        return [4,fixup_layout(layout),len];
                       case 5:var s=enc[1];return [5,find$1(uf,s)[1]]
                       }
                    return enc}
                  function field(field)
                   {switch(field[0])
                     {case 0:
                       var layout=field[3],kind=field[2],name=field[1];
                       return [0,name,kind,fixup_layout(layout)];
                      case 1:
                       var layout$0=field[2],kind$0=field[1];
                       return [1,kind$0,fixup_layout(layout$0)];
                      default:return field}}
                  switch(layout[0])
                   {case 0:
                     var fields=layout[1],_but_=[0,map$1(field,fields)];break;
                    case 1:
                     var
                      cases=layout[3],
                      _bus_=
                       map$1
                        (function(param)
                          {var fields=param[3],name=param[2],i=param[1];
                           return [0,i,name,map$1(field,fields)]},
                         cases),
                      _but_=[1,layout[1],layout[2],_bus_];
                     break;
                    default:var _but_=layout}
                  return [0,desc,_but_]},
                acc$0);
            if(length(param$1) === prev_len$0)
             return map$1
                     (function(param)
                       {var layout=param[2],name=param[1];
                        return [0,find$1(uf,name),layout]},
                      param$1);
            clear$2(h);
            var
             prev_len$1=length(param$1),
             prev_len$0=prev_len$1,
             acc$0=0,
             param$0=param$1;
            continue}}},
     _vA_=0,
     _vB_=function(param){return 6},
     _vF_=
      [0,
       [0,
        _vE_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 6 <= param)return _vC_;return 0},
        _vB_,
        _vD_],
       _vA_],
     _vG_=function(param){return 5},
     _vK_=
      [0,
       [0,
        _vJ_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 5 === param)return _vH_;return 0},
        _vG_,
        _vI_],
       _vF_],
     _vL_=function(param){return 4},
     _vP_=
      [0,
       [0,
        _vO_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 4 === param)return _vM_;return 0},
        _vL_,
        _vN_],
       _vK_],
     _vQ_=function(param){return 3},
     _vU_=
      [0,
       [0,
        _vT_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 3 === param)return _vR_;return 0},
        _vQ_,
        _vS_],
       _vP_],
     _vV_=
      function(param)
       {var max=param[3],v=param[2],min=param[1];return [3,min,v,max]},
     _vW_=
      function(param)
       {if(typeof param !== "number" && 3 === param[0])
         {var max=param[3],v=param[2],min=param[1];return [0,[0,min,v,max]]}
        return 0},
     _v2_=
      [0,
       [0,
        _v1_,
        0,
        obj3([0,_vZ_,float$2,0,0],[0,_vY_,float$2,0,0],[0,_vX_,float$2,0,0]),
        _vW_,
        _vV_,
        _v0_],
       _vU_],
     _v3_=
      function(param)
       {var max=param[3],v=param[2],min=param[1];return [2,min,v,max]},
     _v4_=
      function(param)
       {if(typeof param !== "number" && 2 === param[0])
         {var max=param[3],v=param[2],min=param[1];return [0,[0,min,v,max]]}
        return 0},
     _v__=
      [0,
       [0,
        _v9_,
        0,
        obj3([0,_v7_,int31$0,0,0],[0,_v6_,int31$0,0,0],[0,_v5_,int31$0,0,0]),
        _v4_,
        _v3_,
        _v8_],
       _v2_],
     _v$_=function(i){return [1,i]},
     _wc_=
      [0,
       [0,
        _wb_,
        0,
        int31$0,
        function(param)
         {if(typeof param !== "number" && 1 === param[0])
           {var i=param[1];return [0,i]}
          return 0},
        _v$_,
        _wa_],
       _v__],
     _wd_=function(i){return [0,i]},
     _wg_=
      [0,
       [0,
        _wf_,
        0,
        int31$0,
        function(param)
         {if(typeof param !== "number" && 0 === param[0])
           {var i=param[1];return [0,i]}
          return 0},
        _wd_,
        _we_],
       _wc_],
     _wh_=function(param){return 2},
     _wl_=
      [0,
       [0,
        _wk_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 2 === param)return _wi_;return 0},
        _wh_,
        _wj_],
       _wg_],
     _wm_=function(param){return 1},
     _wq_=
      [0,
       [0,
        _wp_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 1 === param)return _wn_;return 0},
        _wm_,
        _wo_],
       _wl_],
     _wr_=function(param){return 0},
     read_error_encoding=
      union$0
       (0,
        [0,
         [0,
          _wu_,
          0,
          encoding,
          function(param)
           {if(typeof param === "number" && 0 === param)return _ws_;return 0},
          _wr_,
          _wt_],
         _wq_]),
     pp_read_error=
      function(ppf,param)
       {if(typeof param === "number")
         switch(param)
          {case 0:return caml_call1(pf(ppf),_wv_);
           case 1:return caml_call1(pf(ppf),_ww_);
           case 2:return caml_call1(pf(ppf),_wx_);
           case 3:return caml_call1(pf(ppf),_wy_);
           case 4:return caml_call1(pf(ppf),_wz_);
           case 5:return caml_call1(pf(ppf),_wA_);
           default:return caml_call1(pf(ppf),_wB_)}
        else
         switch(param[0])
          {case 0:var tag=param[1];return caml_call2(pf(ppf),_wC_,tag);
           case 1:var sz=param[1];return caml_call2(pf(ppf),_wD_,sz);
           case 2:
            var max=param[3],v=param[2],min=param[1];
            return caml_call4(pf(ppf),_wE_,min,v,max);
           default:
            var max$0=param[3],v$0=param[2],min$0=param[1];
            return caml_call4(pf(ppf),_wF_,min$0,v$0,max$0)}},
     Read_error=[num_248,_wG_,caml_fresh_oo_id(0)],
     _wH_=0,
     _wI_=function(param){return 4},
     _wM_=
      [0,
       [0,
        _wL_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 4 <= param)return _wJ_;return 0},
        _wI_,
        _wK_],
       _wH_],
     _wN_=function(param){return 3},
     _wR_=
      [0,
       [0,
        _wQ_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 3 === param)return _wO_;return 0},
        _wN_,
        _wP_],
       _wM_],
     _wS_=function(param){return 2},
     _wW_=
      [0,
       [0,
        _wV_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 2 === param)return _wT_;return 0},
        _wS_,
        _wU_],
       _wR_],
     _wX_=
      function(param)
       {var found=param[2],expected=param[1];return [2,expected,found]},
     _wY_=
      function(param)
       {if(typeof param !== "number" && 3 === param[0])
         {var found=param[2],expected=param[1];return [0,[0,expected,found]]}
        return 0},
     _w3_=
      [0,
       [0,
        _w2_,
        0,
        obj2([0,_w0_,int31$0,0,0],[0,_wZ_,int31$0,0,0]),
        _wY_,
        _wX_,
        _w1_],
       _wW_],
     _w4_=
      function(param)
       {var found=param[2],expected=param[1];return [2,expected,found]},
     _w5_=
      function(param)
       {if(typeof param !== "number" && 2 === param[0])
         {var found=param[2],expected=param[1];return [0,[0,expected,found]]}
        return 0},
     _w__=
      [0,
       [0,
        _w9_,
        0,
        obj2([0,_w7_,int31$0,0,0],[0,_w6_,int31$0,0,0]),
        _w5_,
        _w4_,
        _w8_],
       _w3_],
     _w$_=
      function(param)
       {var max=param[3],v=param[2],min=param[1];return [1,min,v,max]},
     _xa_=
      function(param)
       {if(typeof param !== "number" && 1 === param[0])
         {var max=param[3],v=param[2],min=param[1];return [0,[0,min,v,max]]}
        return 0},
     _xg_=
      [0,
       [0,
        _xf_,
        0,
        obj3([0,_xd_,float$2,0,0],[0,_xc_,float$2,0,0],[0,_xb_,float$2,0,0]),
        _xa_,
        _w$_,
        _xe_],
       _w__],
     _xh_=
      function(param)
       {var max=param[3],v=param[2],min=param[1];return [0,min,v,max]},
     _xi_=
      function(param)
       {if(typeof param !== "number" && 0 === param[0])
         {var max=param[3],v=param[2],min=param[1];return [0,[0,min,v,max]]}
        return 0},
     _xo_=
      [0,
       [0,
        _xn_,
        0,
        obj3([0,_xl_,int31$0,0,0],[0,_xk_,int31$0,0,0],[0,_xj_,int31$0,0,0]),
        _xi_,
        _xh_,
        _xm_],
       _xg_],
     _xp_=function(param){return 1},
     _xt_=
      [0,
       [0,
        _xs_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 1 === param)return _xq_;return 0},
        _xp_,
        _xr_],
       _xo_],
     _xu_=function(param){return 0};
    union$0
     (0,
      [0,
       [0,
        _xx_,
        0,
        encoding,
        function(param)
         {if(typeof param === "number" && 0 === param)return _xv_;return 0},
        _xu_,
        _xw_],
       _xt_]);
    var
     Write_error=[num_248,_xy_,caml_fresh_oo_id(0)],
     raise=function(e){throw [0,Read_error,e]},
     check_allowed_bytes=
      function(state,size)
       {var _buq_=state[4];
        if(_buq_)
         {var len=_buq_[1];return len < size?raise(4):[0,len - size | 0]}
        return 0},
     check_remaining_bytes=
      function(state,size)
       {if(state[3] < size)raise(0);return state[3] - size | 0},
     read_atom=
      function(size,conv,state)
       {var offset=state[2];
        state[3] = check_remaining_bytes(state,size);
        state[4] = check_allowed_bytes(state,size);
        state[2] = state[2] + size | 0;
        return caml_call2(conv,state[1],offset)},
     uint8$1=function(_bup_){return read_atom(uint8,get_uint8,_bup_)},
     uint16$1=function(_buo_){return read_atom(int16,get_uint16,_buo_)},
     int8$0=function(_bun_){return read_atom(int8,get_int8,_bun_)},
     int16$1=function(_bum_){return read_atom(int16,get_int16,_bum_)},
     int32$2=function(_bul_){return read_atom(int32$0,get_int32,_bul_)},
     int64$1=function(_buk_){return read_atom(int64,get_int64,_buk_)},
     float$3=function(_buj_){return read_atom(float$1,get_double,_buj_)},
     bool$2=function(state){return 0 !== int8$0(state)?1:0},
     _xz_=
      function(buffer,ofs)
       {var v=get_int32(buffer,ofs);
        if(v < 0)raise([2,0,v,num_1073741823]);
        return v},
     uint30$0=function(_bui_){return read_atom(uint30,_xz_,_bui_)},
     _xA_=function(buffer,ofs){return get_int32(buffer,ofs)},
     int31$1=function(_buh_){return read_atom(int31,_xA_,_buh_)},
     int$2=
      function(param)
       {return num_815034505 <= param
                ?num_980827423 <= param
                  ?num_980827863 <= param?uint30$0:uint16$1
                  :num_919245630 <= param?uint8$1:int8$0
                :num_783416531 <= param?int31$1:int16$1},
     ranged_int$0=
      function(minimum,maximum,state)
       {var
         match=range_to_size(minimum,maximum),
         read_int=
          num_815034505 <= match
           ?num_980827423 <= match
             ?num_980827863 <= match?uint30$0:uint16$1
             :num_919245630 <= match?uint8$1:int8$0
           :num_783416531 <= match?int31$1:int16$1,
         ranged=read_int(state),
         ranged$0=0 < minimum?ranged + minimum | 0:ranged,
         _buf_=minimum <= ranged$0?1:0,
         _bug_=_buf_?ranged$0 <= maximum?1:0:_buf_;
        if(1 - _bug_)raise([2,minimum,ranged$0,maximum]);
        return ranged$0},
     ranged_float=
      function(minimum,maximum,state)
       {var
         ranged=float$3(state),
         _bud_=minimum <= ranged?1:0,
         _bue_=_bud_?ranged <= maximum?1:0:_bud_;
        if(1 - _bue_)raise([3,minimum,ranged,maximum]);
        return ranged},
     read_z=
      function(res,value,bit_in_value,state)
       {var value$0=value,bit_in_value$0=bit_in_value;
        for(;;)
         {var
           byte$0=uint8$1(state),
           value$1=value$0 | (byte$0 & num_127) << bit_in_value$0,
           bit_in_value$1=bit_in_value$0 + 7 | 0;
          if(8 <= bit_in_value$1)
           {add_char(res,value$1 & num_255);
            var
             value$2=value$1 >>> 8 | 0,
             bit_in_value$2=bit_in_value$1 - 8 | 0,
             bit_in_value$3=bit_in_value$2,
             value$3=value$2}
          else
           var bit_in_value$3=bit_in_value$1,value$3=value$1;
          if(num_128 === (byte$0 & num_128))
           {var value$0=value$3,bit_in_value$0=bit_in_value$3;continue}
          if(0 < bit_in_value$3)add_char(res,value$3);
          if(0 === byte$0)raise(3);
          return ml_z_of_bits(contents(res))}},
     n$0=
      function(state)
       {var first=uint8$1(state),first_value=first & num_127;
        return num_128 === (first & num_128)
                ?read_z(create$1(num_100),first_value,7,state)
                :ml_z_of_int(first_value)},
     z=
      function(state)
       {var
         first=uint8$1(state),
         first_value=first & 63,
         sign=0 !== (first & 64)?1:0;
        if(num_128 === (first & num_128))
         {var n=read_z(create$1(num_100),first_value,6,state);
          return sign?ml_z_neg(n):n}
        var n$0=ml_z_of_int(first_value);
        return sign?ml_z_neg(n$0):n$0},
     string_enum$0=
      function(arr,state)
       {var
         match=enum_size(arr),
         read_index=
          num_980827423 === match
           ?uint16$1
           :num_980827863 <= match?uint30$0:uint8$1,
         index=read_index(state);
        if(arr.length - 1 <= index)raise(2);
        return caml_check_bound(arr,index)[1 + index]},
     fixed_length_bytes=
      function(length)
       {function _bub_(buf,ofs){return sub(buf,ofs,length)}
        return function(_buc_){return read_atom(length,_bub_,_buc_)}},
     fixed_length_string=
      function(length)
       {function _bt$_(buf,ofs){return sub_string(buf,ofs,length)}
        return function(_bua_){return read_atom(length,_bt$_,_bua_)}},
     tag=function(param){return num_980827423 <= param?uint16$1:uint8$1},
     read_rec=
      function(e,state)
       {var e$0=e;
        for(;;)
         {var _bt0_=e$0[1];
          if(typeof _bt0_ === "number")
           switch(_bt0_)
            {case 0:return 0;
             case 1:return 0;
             case 2:return 0;
             case 3:return bool$2(state);
             case 4:return int8$0(state);
             case 5:return uint8$1(state);
             case 6:return int16$1(state);
             case 7:return uint16$1(state);
             case 8:return int31$1(state);
             case 9:return int32$2(state);
             case 10:return int64$1(state);
             case 11:return n$0(state);
             case 12:return z(state);
             default:return float$3(state)}
          else
           switch(_bt0_[0])
            {case 0:return 0;
             case 1:
              var maximum=_bt0_[2],minimum=_bt0_[1];
              return ranged_int$0(minimum,maximum,state);
             case 2:
              var maximum$0=_bt0_[2],minimum$0=_bt0_[1];
              return ranged_float(minimum$0,maximum$0,state);
             case 3:
              var _bt1_=_bt0_[1];
              if(typeof _bt1_ === "number")
               return caml_call1(fixed_length_bytes(state[3]),state);
              var n=_bt1_[2];
              return caml_call1(fixed_length_bytes(n),state);
             case 4:
              var _bt2_=_bt0_[1];
              if(typeof _bt2_ === "number")
               return caml_call1(fixed_length_string(state[3]),state);
              var n$1=_bt2_[2];
              return caml_call1(fixed_length_string(n$1),state);
             case 5:
              var n$2=_bt0_[2],e$1=_bt0_[1],v=read_rec(e$1,state);
              caml_call1(fixed_length_string(n$2),state);
              return v;
             case 6:var arr=_bt0_[2];return string_enum$0(arr,state);
             case 7:
              var e$2=_bt0_[2],max_length=_bt0_[1];
              if(max_length)
               var l=max_length[1],max_length$0=l;
              else
               var max_length$0=max_int_float;
              var l$0=read_list(5,max_length$0,e$2,state);
              return of_list(l$0);
             case 8:
              var e$3=_bt0_[2],max_length$1=_bt0_[1];
              if(max_length$1)
               var l$1=max_length$1[1],max_length$2=l$1;
              else
               var max_length$2=max_int_float;
              return read_list(6,max_length$2,e$3,state);
             case 9:
              var _bt3_=_bt0_[1];
              switch(_bt3_[0])
               {case 0:var e$4=_bt3_[2],e$0=e$4;continue;
                case 1:
                 if(num_57067359 <= _bt3_[2])
                  {var e$5=_bt3_[3],present=bool$2(state);
                   return present?[0,read_rec(e$5,state)]:0}
                 var e$6=_bt3_[3];
                 return 0 === state[3]?0:[0,read_rec(e$6,state)];
                default:var e$7=_bt3_[2],e$0=e$7;continue}
             case 10:
              var _bt4_=_bt0_[1];
              if(typeof _bt4_ === "number")
               {if(num_57067359 <= _bt4_)
                 {var
                   right=_bt0_[3],
                   left=_bt0_[2],
                   left$0=read_rec(left,state),
                   right$0=read_rec(right,state);
                  return [0,left$0,right$0]}
                var right$1=_bt0_[3],left$1=_bt0_[2];
                return read_variable_pair(left$1,right$1,state)}
              var right$2=_bt0_[3],left$2=_bt0_[2],sz=_bt4_[2];
              check_remaining_bytes(state,sz);
              check_allowed_bytes(state,sz);
              var
               left$3=read_rec(left$2,state),
               right$3=read_rec(right$2,state);
              return [0,left$3,right$3];
             case 11:var e$8=_bt0_[1],e$0=e$8;continue;
             case 12:
              var _bt5_=_bt0_[1];
              if(typeof _bt5_ === "number")
               {if(num_57067359 <= _bt5_)
                 {var
                   right$4=_bt0_[3],
                   left$4=_bt0_[2],
                   left$5=read_rec(left$4,state),
                   right$5=read_rec(right$4,state);
                  return [0,left$5,right$5]}
                var right$6=_bt0_[3],left$6=_bt0_[2];
                return read_variable_pair(left$6,right$6,state)}
              var right$7=_bt0_[3],left$7=_bt0_[2],sz$0=_bt5_[2];
              check_remaining_bytes(state,sz$0);
              check_allowed_bytes(state,sz$0);
              var
               left$8=read_rec(left$7,state),
               right$8=read_rec(right$7,state);
              return [0,left$8,right$8];
             case 13:
              var
               cases=_bt0_[3],
               tag_size=_bt0_[2],
               ctag=caml_call1(tag(tag_size),state);
              try
               {var
                 _bt6_=
                  find
                   (function(param)
                     {var _bt__=param[6];
                      if(_bt__){var tag=_bt__[1];return tag === ctag?1:0}
                      return 0},
                    cases),
                 match=_bt6_}
              catch(_bt9_)
               {_bt9_ = caml_wrap_exception(_bt9_);
                if(_bt9_ !== Not_found)throw _bt9_;
                var match=raise([0,ctag])}
              var inj=match[5],encoding=match[3];
              return caml_call1(inj,read_rec(encoding,state));
             case 14:
              var fix=_bt0_[5],e$9=caml_call1(fix,e$0),e$0=e$9;continue;
             case 15:
              var encoding$0=_bt0_[3],inj$0=_bt0_[2];
              return caml_call1(inj$0,read_rec(encoding$0,state));
             case 16:var e$10=_bt0_[4],e$0=e$10;continue;
             case 17:var e$11=_bt0_[1],e$0=e$11;continue;
             case 18:
              var
               e$12=_bt0_[2],
               kind=_bt0_[1],
               sz$1=caml_call1(int$2(kind),state),
               remaining=check_remaining_bytes(state,sz$1);
              state[3] = sz$1;
              check_allowed_bytes(state,sz$1);
              var v$0=read_rec(e$12,state);
              if(0 !== state[3])raise(1);
              state[3] = remaining;
              return v$0;
             case 19:
              var
               e$13=_bt0_[2],
               limit=_bt0_[1],
               old_allowed_bytes=state[4],
               _bt7_=state[4];
              if(_bt7_)
               var current_limit=_bt7_[1],limit$0=min(current_limit,limit);
              else
               var limit$0=limit;
              state[4] = [0,limit$0];
              var v$1=read_rec(e$13,state);
              if(old_allowed_bytes)
               {var old_limit=old_allowed_bytes[1],_bt8_=state[4];
                if(! _bt8_)throw [0,Assert_failure,_xB_];
                var
                 remaining$0=_bt8_[1],
                 read=limit$0 - remaining$0 | 0,
                 allowed_bytes=[0,old_limit - read | 0]}
              else
               var allowed_bytes=0;
              state[4] = allowed_bytes;
              return v$1;
             default:var f=_bt0_[1],e$14=caml_call1(f,0),e$0=e$14;continue}}},
     read_variable_pair=
      function(e1,e2,state)
       {var match=classify(e1),match$0=classify(e2),switch$0=0;
        if(typeof match === "number" && ! (num_57067359 <= match))
         {if(typeof match$0 !== "number" && num_332360020 === match$0[1])
           {var n=match$0[2];
            if(state[3] < n)raise(0);
            state[3] = state[3] - n | 0;
            var left$0=read_rec(e1,state);
            if(0 === state[3])
             {state[3] = n;
              var right$0=read_rec(e2,state);
              if(0 === state[3])return [0,left$0,right$0];
              throw [0,Assert_failure,_xD_]}
            throw [0,Assert_failure,_xE_]}}
        else
         switch$0 = 1;
        if(switch$0 && num_1027682724 === match$0)
         {var left=read_rec(e1,state),right=read_rec(e2,state);
          return [0,left,right]}
        throw [0,Assert_failure,_xC_]},
     read_list=
      function(error,max_length,e,state)
       {var max_length$0=max_length,acc=0;
        for(;;)
         {if(0 === state[3])return rev(acc);
          if(0 === max_length$0)return raise(error);
          var
           v=read_rec(e,state),
           acc$0=[0,v,acc],
           max_length$1=max_length$0 - 1 | 0,
           max_length$0=max_length$1,
           acc=acc$0;
          continue}},
     of_bytes_exn=
      function(encoding,buffer)
       {var
         len=caml_ml_bytes_length(buffer),
         state=[0,buffer,0,len,0],
         v=read_rec(encoding,state);
        if(state[2] !== len)raise(1);
        return v},
     of_bytes=
      function(encoding,buffer)
       {try
         {var _btZ_=[0,of_bytes_exn(encoding,buffer)];return _btZ_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Read_error){var err=exn[2];return [1,err]}
          throw exn}},
     raise$0=function(error){throw [0,Write_error,error]},
     may_resize=
      function(state,size)
       {var _btY_=state[3];
        if(_btY_)
         {var len=_btY_[1];
          if(len < size)raise$0(0);else state[3] = [0,len - size | 0]}
        var buffer_len=caml_ml_bytes_length(state[1]);
        if((buffer_len - state[2] | 0) < size)
         {var
           new_buffer=
            caml_create_bytes(max(2 * buffer_len | 0,buffer_len + size | 0));
          blit(state[1],0,new_buffer,0,state[2]);
          state[1] = new_buffer}
        state[2] = state[2] + size | 0;
        return 0},
     check_int_range=
      function(min,v,max)
       {var _btW_=v < min?1:0,_btX_=_btW_ || (max < v?1:0);
        return _btX_?raise$0([0,min,v,max]):_btX_},
     set_int=
      function(kind,buffer,ofs,v)
       {if(num_783416531 !== kind)
         {var switch$0=0;
          if(num_980827423 <= kind)
           {if(! (num_980827863 <= kind))switch$0 = 1}
          else
           {if(-783416971 <= kind)return caml_bytes_set(buffer,ofs,v);
            switch$0 = 1}
          if(switch$0)return caml_bytes_set16(buffer,ofs,caml_bswap16(v))}
        return set_int32(buffer,ofs,v)},
     int$3=
      function(kind,state,v)
       {var
         _btU_=max_int$0(kind),
         _btV_=
          num_815034505 <= kind
           ?num_919245630 <= kind?0:num_128$0
           :num_783416531 <= kind?num_1073741824:num_32768;
        check_int_range(_btV_,v,_btU_);
        var ofs=state[2];
        may_resize(state,integer_to_size(kind));
        return set_int(kind,state[1],ofs,v)},
     _xF_=num_815034505,
     int8$1=function(_btS_,_btT_){return int$3(_xF_,_btS_,_btT_)},
     _xG_=num_919245630,
     uint8$2=function(_btQ_,_btR_){return int$3(_xG_,_btQ_,_btR_)},
     _xH_=num_783416972,
     int16$2=function(_btO_,_btP_){return int$3(_xH_,_btO_,_btP_)},
     _xI_=num_980827423,
     uint16$2=function(_btM_,_btN_){return int$3(_xI_,_btM_,_btN_)},
     _xJ_=num_980827863,
     uint30$1=function(_btK_,_btL_){return int$3(_xJ_,_btK_,_btL_)},
     _xK_=num_783416531,
     int31$2=function(_btI_,_btJ_){return int$3(_xK_,_btI_,_btJ_)},
     bool$3=
      function(state,v){var _btH_=v?num_255:0;return uint8$2(state,_btH_)},
     float$4=
      function(state,v)
       {var ofs=state[2];
        may_resize(state,float$1);
        return set_int64(state[1],ofs,caml_int64_bits_of_float(v))},
     string_enum$1=
      function(tbl,arr,state,v)
       {try
         {var _btF_=find$0(tbl,v)[2],value=_btF_}
        catch(_btG_)
         {_btG_ = caml_wrap_exception(_btG_);
          if(_btG_ !== Not_found)throw _btG_;
          var value=raise$0(1)}
        var match=enum_size(arr);
        return num_980827423 === match
                ?uint16$2(state,value)
                :num_980827863 <= match
                  ?uint30$1(state,value)
                  :uint8$2(state,value)},
     fixed_kind_bytes=
      function(length,state,s)
       {if(caml_ml_bytes_length(s) !== length)
         raise$0([2,length,caml_ml_bytes_length(s)]);
        var ofs=state[2];
        may_resize(state,length);
        return blit(s,0,state[1],ofs,length)},
     fixed_kind_string=
      function(length,state,s)
       {if(caml_ml_string_length(s) !== length)
         raise$0([3,length,caml_ml_string_length(s)]);
        var ofs=state[2];
        may_resize(state,length);
        return blit$0(s,0,state[1],ofs,length)},
     write_rec=
      function(e,state,value$0)
       {var e$0=e,value$1=value$0;
        a:
        for(;;)
         {var _btr_=e$0[1];
          if(typeof _btr_ === "number")
           switch(_btr_)
            {case 0:return 0;
             case 1:return 0;
             case 2:return 0;
             case 3:return bool$3(state,value$1);
             case 4:return int8$1(state,value$1);
             case 5:return uint8$2(state,value$1);
             case 6:return int16$2(state,value$1);
             case 7:return uint16$2(state,value$1);
             case 8:return int31$2(state,value$1);
             case 9:
              var ofs=state[2];
              may_resize(state,int32$0);
              return set_int32(state[1],ofs,value$1);
             case 10:
              var ofs$0=state[2];
              may_resize(state,int64);
              return set_int64(state[1],ofs$0,value$1);
             case 11:
              if(ml_z_sign(value$1) < 0)raise$0(2);
              if(ml_z_equal(value$1,zero$0))return uint8$2(state,0);
              var
               bits$0=ml_z_numbits(value$1),
               bits=ml_z_numbits(value$1),
               length$1=0 === bits?1:(bits + 6 | 0) / 7 | 0,
               offset=state[2];
              may_resize(state,length$1);
              var _btg_=length$1 - 1 | 0,_btf_=0;
              if(! (_btg_ < 0))
               {var i=_btf_;
                for(;;)
                 {var
                   pos=i * 7 | 0,
                   chunk_len=i === (length$1 - 1 | 0)?bits$0 - pos | 0:7,
                   _bte_=ml_z_to_int(ml_z_extract(value$1,pos,chunk_len)),
                   _bth_=i === (length$1 - 1 | 0)?0:num_128;
                  caml_bytes_set(state[1],offset + i | 0,_bth_ | _bte_);
                  var _bti_=i + 1 | 0;
                  if(_btg_ !== i){var i=_bti_;continue}
                  break}}
              return 0;
             case 12:
              var
               sign=ml_z_sign(value$1) < 0?1:0,
               bits$1=ml_z_numbits(value$1);
              if(ml_z_equal(value$1,zero$0))return uint8$2(state,0);
              var
               value=ml_z_abs(value$1),
               get_chunk=
                function(pos,len)
                 {return ml_z_to_int(ml_z_extract(value,pos,len))},
               length$0=((ml_z_numbits(value) + 1 | 0) + 6 | 0) / 7 | 0,
               offset$0=state[2];
              may_resize(state,length$0);
              var
               _btj_=get_chunk(0,6),
               _btk_=6 < bits$1?num_128:0,
               _btl_=sign?64:0;
              caml_bytes_set(state[1],offset$0,_btl_ | _btk_ | _btj_);
              var _btn_=length$0 - 1 | 0,_btm_=1;
              if(! (_btn_ < 1))
               {var i$0=_btm_;
                for(;;)
                 {var
                   pos$0=6 + ((i$0 - 1 | 0) * 7 | 0) | 0,
                   chunk_len$0=i$0 === (length$0 - 1 | 0)?bits$1 - pos$0 | 0:7,
                   _bto_=get_chunk(pos$0,chunk_len$0),
                   _btp_=i$0 === (length$0 - 1 | 0)?0:num_128;
                  caml_bytes_set(state[1],offset$0 + i$0 | 0,_btp_ | _bto_);
                  var _btq_=i$0 + 1 | 0;
                  if(_btn_ !== i$0){var i$0=_btq_;continue}
                  break}}
              return 0;
             default:return float$4(state,value$1)}
          else
           switch(_btr_[0])
            {case 0:return 0;
             case 1:
              var maximum=_btr_[2],minimum=_btr_[1];
              check_int_range(minimum,value$1,maximum);
              var
               v=0 <= minimum?value$1 - minimum | 0:value$1,
               match=range_to_size(minimum,maximum);
              return num_815034505 <= match
                      ?num_980827423 <= match
                        ?num_980827863 <= match?uint30$1(state,v):uint16$2(state,v)
                        :num_919245630 <= match?uint8$2(state,v):int8$1(state,v)
                      :num_783416531 <= match?int31$2(state,v):int16$2(state,v);
             case 2:
              var
               maximum$0=_btr_[2],
               minimum$0=_btr_[1],
               _btc_=value$1 < minimum$0?1:0,
               _btd_=_btc_ || (maximum$0 < value$1?1:0);
              if(_btd_)raise$0([1,minimum$0,value$1,maximum$0]);
              return float$4(state,value$1);
             case 3:
              var _bts_=_btr_[1];
              if(typeof _bts_ === "number")
               {var length$2=caml_ml_bytes_length(value$1);
                return fixed_kind_bytes(length$2,state,value$1)}
              var n=_bts_[2];
              return fixed_kind_bytes(n,state,value$1);
             case 4:
              var _btt_=_btr_[1];
              if(typeof _btt_ === "number")
               {var length$3=caml_ml_string_length(value$1);
                return fixed_kind_string(length$3,state,value$1)}
              var n$0=_btt_[2];
              return fixed_kind_string(n$0,state,value$1);
             case 5:
              var n$1=_btr_[2],e$1=_btr_[1];
              write_rec(e$1,state,value$1);
              return fixed_kind_string(n$1,state,make$0(n$1,0));
             case 6:
              var arr=_btr_[2],tbl=_btr_[1];
              return string_enum$1(tbl,arr,state,value$1);
             case 7:
              var _btu_=_btr_[1];
              if(_btu_)
               {var max_length=_btu_[1];
                if(max_length < value$1.length - 1)return raise$0(4)}
              var e$2=_btr_[2];
              return iter$2
                      (function(_btE_){return write_rec(e$2,state,_btE_)},value$1);
             case 8:
              var _btv_=_btr_[1];
              if(_btv_)
               {var max_length$0=_btv_[1];
                if(max_length$0 < length(value$1))return raise$0(3)}
              var e$3=_btr_[2];
              return iter$0
                      (function(_btD_){return write_rec(e$3,state,_btD_)},value$1);
             case 9:
              var _btw_=_btr_[1];
              switch(_btw_[0])
               {case 0:var e$4=_btw_[2],e$0=e$4;continue;
                case 1:
                 if(num_57067359 <= _btw_[2])
                  {var e$5=_btw_[3];
                   if(value$1)
                    {var value$2=value$1[1];
                     bool$3(state,1);
                     var e$0=e$5,value$1=value$2;
                     continue}
                   return bool$3(state,0)}
                 var e$6=_btw_[3];
                 if(value$1)
                  {var value$3=value$1[1],e$0=e$6,value$1=value$3;continue}
                 return 0;
                default:var e$7=_btw_[2],e$0=e$7;continue}
             case 10:
              var e$8=_btr_[3],left=_btr_[2],value$4=value$1[2],v1=value$1[1];
              write_rec(left,state,v1);
              var e$0=e$8,value$1=value$4;
              continue;
             case 11:var e$9=_btr_[1],e$0=e$9;continue;
             case 12:
              var
               e$10=_btr_[3],
               left$0=_btr_[2],
               value$5=value$1[2],
               v1$0=value$1[1];
              write_rec(left$0,state,v1$0);
              var e$0=e$10,value$1=value$5;
              continue;
             case 13:
              var cases=_btr_[3],tag_size=_btr_[2],param=cases;
              for(;;)
               {if(param)
                 {var
                   _btx_=param[1],
                   _bty_=_btx_[6],
                   _btz_=_btx_[4],
                   _btA_=_btx_[3];
                  if(_bty_)
                   {var
                     tl=param[2],
                     tag=_bty_[1],
                     match$0=caml_call1(_btz_,value$1);
                    if(match$0)
                     {var
                       value$6=match$0[1],
                       _btC_=num_980827423 <= tag_size?uint16$2:uint8$2;
                      _btC_(state,tag);
                      var e$0=_btA_,value$1=value$6;
                      continue a}
                    var param=tl;
                    continue}
                  var param$0=param[2],param=param$0;
                  continue}
                return raise$0(1)}
             case 14:
              var fix=_btr_[5],e$11=caml_call1(fix,e$0),e$0=e$11;continue;
             case 15:
              var
               e$12=_btr_[3],
               proj=_btr_[1],
               value$7=caml_call1(proj,value$1),
               e$0=e$12,
               value$1=value$7;
              continue;
             case 16:var e$13=_btr_[4],e$0=e$13;continue;
             case 17:var e$14=_btr_[1],e$0=e$14;continue;
             case 18:
              var e$15=_btr_[2],kind=_btr_[1],initial_offset=state[2];
              int$3(kind,state,0);
              write_with_limit(max_int$0(kind),e$15,state,value$1);
              var _btB_=integer_to_size(kind);
              return set_int
                      (kind,
                       state[1],
                       initial_offset,
                       (state[2] - initial_offset | 0) - _btB_ | 0);
             case 19:
              var e$16=_btr_[2],limit=_btr_[1];
              return write_with_limit(limit,e$16,state,value$1);
             default:var f=_btr_[1],e$17=caml_call1(f,0),e$0=e$17;continue}}},
     write_with_limit=
      function(limit,e,state,value)
       {var old_limit=state[3],_bta_=state[3];
        if(_bta_)
         var old_limit$0=_bta_[1],limit$0=min(old_limit$0,limit);
        else
         var limit$0=limit;
        state[3] = [0,limit$0];
        write_rec(e,state,value);
        if(old_limit)
         {var old_limit$1=old_limit[1],_btb_=state[3];
          if(_btb_)
           {var len=_btb_[1],read=limit$0 - len | 0;
            state[3] = [0,old_limit$1 - read | 0];
            return 0}
          throw [0,Assert_failure,_xL_]}
        state[3] = 0;
        return 0},
     to_bytes_exn=
      function(opt,e,v)
       {if(opt)var sth=opt[1],buffer_size=sth;else var buffer_size=num_128;
        var match=classify(e);
        if(typeof match === "number")
         {var state=[0,caml_create_bytes(buffer_size),0,0];
          write_rec(e,state,v);
          return sub(state[1],0,state[2])}
        var n=match[2],state$0=[0,caml_create_bytes(n),0,[0,n]];
        write_rec(e,state$0,v);
        return state$0[1]},
     Parse_error$1=[num_248,_xM_,caml_fresh_oo_id(0)],
     wrap_error=
      function(f,str)
       {try
         {var _bs$_=caml_call1(f,str);return _bs$_}
        catch(exn)
         {exn = caml_wrap_exception(exn);throw [0,Cannot_destruct,[0,0,exn]]}},
     _xN_=0,
     _xO_=caml_int64_of_string,
     int64_encoding=
      [11,
       _xR_,
       _xQ_,
       _xP_,
       [10,
        of_int64,
        function(_bs__){return wrap_error(_xO_,_bs__)},
        string$0,
        _xN_]],
     _xS_=0,
     _xT_=
      function(s)
       {var n=_fB_(s);
        if(ml_z_sign(n) < 0)throw [0,Cannot_destruct,[0,0,[0,Failure,_xU_]]];
        return n},
     n_encoding$0=
      [11,
       _xY_,
       _xX_,
       _xW_,
       [10,
        function(z){if(ml_z_sign(z) < 0)invalid_arg(_xV_);return _fA_(z)},
        _xT_,
        string$0,
        _xS_]],
     z_encoding$0=[11,_x1_,_x0_,_xZ_,[10,_fA_,_fB_,string$0,0]],
     schema$0=caml_call1(create$10,_x2_),
     _x3_=0,
     _x4_=function(h){return [0,num_3603131,h]},
     _x5_=[10,function(param){var h=param[2];return h},_x4_,string$0,_x3_],
     _x6_=[0,schema$0],
     _x7_=function(_bs9_){return wrap_error(to_bytes$0,_bs9_)},
     bytes_jsont=[10,function(eta){return arg$0(0,eta)},_x7_,_x5_,_x6_],
     _x8_=function(s){return s},
     utf8_case=
      [0,
       string$0,
       0,
       0,
       function(s$0)
        {var acc$2=1;
         function f(valid,pos,param){return num_852405675 <= param[1]?valid:0}
         var
          len=caml_ml_string_length(s$0) - 0 | 0,
          last=(len | 0) - 1 | 0,
          s=caml_bytes_of_string(s$0),
          acc=acc$2,
          i=0;
         for(;;)
          {if(last < i)
            var _bs8_=acc;
           else
            {var need=utf_8_len[1 + caml_bytes_unsafe_get(s,i)];
             if(0 === need)
              {var
                i$0=i + 1 | 0,
                acc$0=f(acc,i,malformed(s,i,1)),
                acc=acc$0,
                i=i$0;
               continue}
             var rem=(last - i | 0) + 1 | 0;
             if(! (rem < need))
              {var
                i$1=i + need | 0,
                acc$1=f(acc,i,r_utf_8(s,i,need)),
                acc=acc$1,
                i=i$1;
               continue}
             var _bs8_=f(acc,i,malformed(s,i,rem))}
           return _bs8_?[0,s$0]:0}},
       _x8_],
     _x9_=
      function(a)
       {return init$0
                (a.length - 1,
                 function(i){return chr(caml_check_bound(a,i)[1 + i])})},
     _x__=
      function(s)
       {return [0,
                init$1
                 (caml_ml_string_length(s),
                  function(i){return caml_string_get(s,i)})]},
     obj_case=
      [0,[5,[0,_ya_,[4,ranged_int(0,num_255,_x$_)],0,0]],0,0,_x__,_x9_],
     raw_string_encoding=
      [11,_yd_,_yc_,_yb_,union([0,utf8_case,[0,obj_case,0]])],
     lift_union=
      function(e)
       {var _bs5_=e[1];
        if(typeof _bs5_ !== "number")
         switch(_bs5_[0])
          {case 10:
            var right=_bs5_[3],left=_bs5_[2],kind=_bs5_[1];
            return lift_union_in_pair
                    ([0,
                      function(kind,left,right)
                       {var eta=[10,kind,left,right];return [0,eta,0]}],
                     kind,
                     left,
                     right);
           case 12:
            var right$0=_bs5_[3],left$0=_bs5_[2],kind$0=_bs5_[1];
            return lift_union_in_pair
                    ([0,
                      function(kind,left,right)
                       {var eta=[12,kind,left,right];return [0,eta,0]}],
                     kind$0,
                     left$0,
                     right$0);
           case 15:
            var
             schema=_bs5_[4],
             e$0=_bs5_[3],
             inj=_bs5_[2],
             proj=_bs5_[1],
             e$1=lift_union(e$0),
             _bs6_=e$1[1];
            if(typeof _bs6_ !== "number" && 13 === _bs6_[0])
             {var
               cases=_bs6_[3],
               tag_size=_bs6_[2],
               kind$1=_bs6_[1],
               eta$0=
                [13,
                 kind$1,
                 tag_size,
                 map$1
                  (function(param)
                    {var
                      tag=param[6],
                      inj$0=param[5],
                      proj$0=param[4],
                      encoding=param[3],
                      description=param[2],
                      title=param[1];
                     function _bs7_(x)
                      {return caml_call1(inj,caml_call1(inj$0,x))}
                     return [0,
                             title,
                             description,
                             encoding,
                             function(x){return caml_call1(proj$0,caml_call1(proj,x))},
                             _bs7_,
                             tag]},
                   cases)];
              return [0,eta$0,0]}
            var eta=[15,proj,inj,e$1,schema];
            return [0,eta,0]
           }
        return e},
     lift_union_in_pair=
      function(b,p,e1,e2)
       {var
         e1$0=lift_union(e1),
         e2$0=lift_union(e2),
         _bsZ_=e1$0[1],
         _bs0_=e2$0[1];
        if(typeof _bs0_ !== "number" && 13 === _bs0_[0])
         {var
           cases$0=_bs0_[3],
           tag_size$0=_bs0_[2],
           eta$0=
            [13,
             num_57067359,
             tag_size$0,
             map$1
              (function(param)
                {var
                  tag=param[6],
                  inj=param[5],
                  proj=param[4],
                  e2=param[3],
                  description=param[2],
                  title=param[1];
                 function _bs3_(param)
                  {var y=param[2],x=param[1];return [0,x,caml_call1(inj,y)]}
                 function _bs4_(param)
                  {var y=param[2],x=param[1],match=caml_call1(proj,y);
                   if(match){var y$0=match[1];return [0,[0,x,y$0]]}
                   return 0}
                 return [0,
                         title,
                         description,
                         lift_union_in_pair(b,p,e1$0,e2),
                         _bs4_,
                         _bs3_,
                         tag]},
               cases$0)];
          return [0,eta$0,0]}
        if(typeof _bsZ_ !== "number" && 13 === _bsZ_[0])
         {var
           cases=_bsZ_[3],
           tag_size=_bsZ_[2],
           eta=
            [13,
             num_57067359,
             tag_size,
             map$1
              (function(param)
                {var
                  tag=param[6],
                  inj=param[5],
                  proj=param[4],
                  e1=param[3],
                  description=param[2],
                  title=param[1];
                 function _bs1_(param)
                  {var y=param[2],x=param[1];return [0,caml_call1(inj,x),y]}
                 function _bs2_(param)
                  {var y=param[2],x=param[1],match=caml_call1(proj,x);
                   if(match){var x$0=match[1];return [0,[0,x$0,y]]}
                   return 0}
                 return [0,
                         title,
                         description,
                         lift_union_in_pair(b,p,e1,e2$0),
                         _bs2_,
                         _bs1_,
                         tag]},
               cases)];
          return [0,eta,0]}
        return caml_call3(b[1],p,e1$0,e2$0)},
     get_json=
      function(e$9)
       {var _bsP_=e$9[2];
        if(_bsP_){var json_encoding$0=_bsP_[1];return json_encoding$0}
        var _bsQ_=lift_union(e$9)[1];
        if(typeof _bsQ_ === "number")
         switch(_bsQ_)
          {case 0:var json_encoding$1=null$0;break;
           case 1:var json_encoding$1=empty$2;break;
           case 2:var json_encoding$1=unit;break;
           case 3:var json_encoding$1=bool;break;
           case 4:
            var json_encoding$1=ranged_int(num_128$0,num_127,_ye_);break;
           case 5:var json_encoding$1=ranged_int(0,num_255,_yf_);break;
           case 6:
            var json_encoding$1=ranged_int(num_32768,num_32767,_yg_);break;
           case 7:var json_encoding$1=ranged_int(0,num_65535,_yh_);break;
           case 8:var json_encoding$1=int$1;break;
           case 9:var json_encoding$1=int32;break;
           case 10:var json_encoding$1=int64_encoding;break;
           case 11:var json_encoding$1=n_encoding$0;break;
           case 12:var json_encoding$1=z_encoding$0;break;
           default:var json_encoding$1=float$0}
        else
         switch(_bsQ_[0])
          {case 0:var s=_bsQ_[1],json_encoding$1=[1,s];break;
           case 1:
            var
             maximum=_bsQ_[2],
             minimum=_bsQ_[1],
             json_encoding$1=ranged_int(minimum,maximum,_yi_);
            break;
           case 2:
            var
             maximum$0=_bsQ_[2],
             minimum$0=_bsQ_[1],
             json_encoding$1=[3,[0,[0,float_name,minimum$0,maximum$0]]];
            break;
           case 3:
            var _bsL_=_bsQ_[1],switch$0=0;
            if(typeof _bsL_ === "number" || ! (num_332360020 === _bsL_[1]))
             switch$0 = 1;
            else
             var
              expected=_bsL_[2],
              check=
               function(s)
                {var found=caml_ml_bytes_length(s);
                 if(found !== expected)
                  {var _bsY_=caml_call1(strf(_yj_),expected);
                   throw [0,
                          Cannot_destruct,
                          [0,0,[0,Unexpected$0,caml_call1(strf(_yk_),found),_bsY_]]]}
                 return s},
              json_encoding$1=[10,check,check,bytes_jsont,0];
            if(switch$0)var json_encoding$1=bytes_jsont;
            break;
           case 4:
            var _bsM_=_bsQ_[1],switch$1=0;
            if(typeof _bsM_ === "number" || ! (num_332360020 === _bsM_[1]))
             switch$1 = 1;
            else
             var
              expected$0=_bsM_[2],
              check$0=
               function(s)
                {var found=caml_ml_string_length(s);
                 if(found !== expected$0)
                  {var _bsX_=caml_call1(strf(_yl_),expected$0);
                   throw [0,
                          Cannot_destruct,
                          [0,0,[0,Unexpected$0,caml_call1(strf(_ym_),found),_bsX_]]]}
                 return s},
              json_encoding$1=[10,check$0,check$0,raw_string_encoding,0];
            if(switch$1)var json_encoding$1=raw_string_encoding;
            break;
           case 5:var e=_bsQ_[1],json_encoding$1=get_json(e);break;
           case 6:
            var
             tbl=_bsQ_[1],
             _bsN_=0,
             cases=
              fold$0
               (function(a,param,acc)
                 {var str=param[1];return [0,[0,str,a],acc]},
                tbl,
                _bsN_),
             enum$0=
              map$1
               (function(param)
                 {var s=param[1];return [0,Ezjsonm,[0,num_976970511,s]]},
                cases),
             _bsI_=element([7,specs]),
             schema=
              caml_call2
               (update,
                [0,
                 _bsI_[1],
                 _bsI_[2],
                 _bsI_[3],
                 [0,enum$0],
                 _bsI_[5],
                 _bsI_[6],
                 _bsI_[7]],
                any),
             len=length(cases),
             mcases=create$2(0,len),
             rcases=create$2(0,len),
             cases_str=
              concat$0
               (_of_,
                map$1
                 (function(x){return symbol(_oe_,symbol(x[1],_od_))},cases));
            iter$0
             (function(param)
               {var c=param[2],s=param[1];
                if(mem$0(mcases,s))invalid_arg(_og_);
                add$0(mcases,s,c);
                return add$0(rcases,c,s)},
              cases);
            var
             _bsJ_=[0,schema],
             _bsK_=
              function(s)
               {try
                 {var _bsT_=find$0(mcases,s);return _bsT_}
                catch(_bsU_)
                 {_bsU_ = caml_wrap_exception(_bsU_);
                  if(_bsU_ === Not_found)
                   {var
                     orpat=
                      function(ppf,param)
                       {if(param)
                         {var _bsV_=param[2],_bsW_=param[1][1];
                          if(_bsV_)
                           {if(_bsV_[2])
                             return caml_call4(pf(ppf),_oh_,_bsW_,orpat,_bsV_);
                            var match=_bsV_[1],last=match[1];
                            return caml_call3(pf(ppf),_oi_,_bsW_,last)}
                          return caml_call2(pf(ppf),_oj_,_bsW_)}
                        throw [0,Assert_failure,_ok_]},
                     unexpected=caml_call1(strf(_ol_),s),
                     expected=caml_call2(strf(_om_),orpat,cases);
                    throw [0,
                           Cannot_destruct,
                           [0,0,[0,Unexpected$0,unexpected,expected]]]}
                  throw _bsU_}},
             json_encoding$1=
              [10,
               function(v)
                {try
                  {var _bsR_=find$0(rcases,v);return _bsR_}
                 catch(_bsS_)
                  {_bsS_ = caml_wrap_exception(_bsS_);
                   if(_bsS_ === Not_found)
                    return invalid_arg(caml_call1(sprintf$0(_on_),cases_str));
                   throw _bsS_}},
               _bsK_,
               string$0,
               _bsJ_];
            break;
           case 7:var e$0=_bsQ_[2],json_encoding$1=[4,get_json(e$0)];break;
           case 8:
            var
             e$1=_bsQ_[2],
             t=get_json(e$1),
             json_encoding$1=[10,of_list,to_list,[4,t],0];
            break;
           case 9:
            var f=_bsQ_[1];
            switch(f[0])
             {case 0:
               var
                description$0=f[4],
                title$0=f[3],
                e$6=f[2],
                name$0=f[1],
                _bsO_=[0,name$0,get_json(e$6),title$0,description$0];
               break;
              case 1:
               var
                description$1=f[5],
                title$1=f[4],
                e$7=f[3],
                name$1=f[1],
                _bsO_=[1,name$1,get_json(e$7),title$1,description$1];
               break;
              default:
               var
                description$2=f[5],
                title$2=f[4],
                d=f[3],
                e$8=f[2],
                name$2=f[1],
                _bsO_=[2,name$2,get_json(e$8),title$2,description$2,d]}
            var json_encoding$1=[5,_bsO_];
            break;
           case 10:
            var
             right=_bsQ_[3],
             left=_bsQ_[2],
             o2=get_json(right),
             o1=get_json(left),
             is_obj=
              function(enc)
               {var enc$0=enc;
                for(;;)
                 {if(typeof enc$0 === "number")
                   switch(enc$0){case 1:return 1;case 2:return 1}
                  else
                   switch(enc$0[0])
                    {case 5:return 1;
                     case 6:return 1;
                     case 10:
                      if(! enc$0[4]){var enc$1=enc$0[3],enc$0=enc$1;continue}
                      break;
                     case 11:var enc$2=enc$0[4],enc$0=enc$2;continue;
                     case 12:
                      var self=enc$0[4],enc$3=caml_call1(self,enc$0),enc$0=enc$3;
                      continue;
                     case 13:
                      var cases=enc$0[1];
                      return for_all
                              (function(param){var o=param[1];return is_obj(o)},cases)
                     }
                  return 0}},
             switch$2=0;
            if(is_obj(o1) && is_obj(o2))
             var json_encoding$1=[6,o1,o2];
            else
             switch$2 = 1;
            if(switch$2)var json_encoding$1=invalid_arg(_or_);
            break;
           case 11:var e$2=_bsQ_[1],json_encoding$1=[7,get_json(e$2)];break;
           case 12:
            var
             right$0=_bsQ_[3],
             left$0=_bsQ_[2],
             t2=get_json(right$0),
             t1=get_json(left$0),
             is_tup=
              function(enc)
               {var enc$0=enc;
                for(;;)
                 {if(typeof enc$0 !== "number")
                   switch(enc$0[0])
                    {case 7:return 1;
                     case 8:return 1;
                     case 10:
                      if(! enc$0[4]){var enc$1=enc$0[3],enc$0=enc$1;continue}
                      break;
                     case 11:var enc$2=enc$0[4],enc$0=enc$2;continue;
                     case 12:
                      var self=enc$0[4],enc$3=caml_call1(self,enc$0),enc$0=enc$3;
                      continue
                     }
                  return 0}},
             switch$3=0;
            if(is_tup(t1) && is_tup(t2))
             var json_encoding$1=[8,t1,t2];
            else
             switch$3 = 1;
            if(switch$3)var json_encoding$1=invalid_arg(_oq_);
            break;
           case 13:
            var
             cases$0=_bsQ_[3],
             json_encoding$1=union(map$1(case_json,cases$0));
            break;
           case 14:
            var
             fix=_bsQ_[5],
             name=_bsQ_[2],
             json_encoding$1=
              [12,
               name,
               0,
               0,
               function(json_encoding)
                {return get_json(caml_call1(fix,[0,_bsQ_,[0,json_encoding]]))}];
            break;
           case 15:
            var
             schema$0=_bsQ_[4],
             e$3=_bsQ_[3],
             inj=_bsQ_[2],
             proj=_bsQ_[1],
             json_encoding$1=[10,proj,inj,get_json(e$3),schema$0];
            break;
           case 16:
            var
             e$4=_bsQ_[4],
             description=_bsQ_[3],
             title=_bsQ_[2],
             id=_bsQ_[1],
             json_encoding$1=[11,id,title,description,get_json(e$4)];
            break;
           case 17:
            var json_encoding=_bsQ_[2],json_encoding$1=json_encoding;break;
           case 18:var e$5=_bsQ_[2],json_encoding$1=get_json(e$5);break;
           case 19:
            var encoding=_bsQ_[2],json_encoding$1=get_json(encoding);break;
           default:
            var f$0=_bsQ_[1],json_encoding$1=get_json(caml_call1(f$0,0))}
        e$9[2] = [0,json_encoding$1];
        return json_encoding$1},
     case_json=
      function(param)
       {var
         inj=param[5],
         proj=param[4],
         e=param[3],
         description=param[2],
         title=param[1];
        return [0,get_json(e),[0,title],description,proj,inj]},
     construct$1=function(e,v){return caml_call2(construct$0,get_json(e),v)},
     destruct$0=function(e,v){return caml_call2(destruct,get_json(e),v)},
     schema$1=
      function(definitions_path,e)
       {return schema(definitions_path,get_json(e))},
     arg$5=
      function(opt,minify,j)
       {if(opt)var sth=opt[1],newline=sth;else var newline=0;
        var _bsD_=newline?_yn_:_yp_,_bsE_=0;
        function _bsF_(_bsG_,_bsH_)
         {return pp$4(minify,_bsE_,Ezjsonm,_bsG_,_bsH_)}
        return caml_call3(strf(_yo_),_bsF_,j,_bsD_)},
     _yq_=0,
     _yr_=0,
     pp$6=function(_bsB_,_bsC_){return pp$4(_yr_,_yq_,Ezjsonm,_bsB_,_bsC_)},
     from_string$1=
      function(s)
       {try
         {var val=from_string$0(symbol(_yt_,symbol(s,_ys_)))}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Parse_error$0){var msg=exn[3];return [1,msg]}
          throw exn}
        if(typeof val !== "number" && 65 === val[1])
         {var _bsA_=val[2];
          if(_bsA_ && ! _bsA_[2]){var json=_bsA_[1];return [0,json]}}
        return _yu_},
     _yv_=0,
     _yw_=
      function(s)
       {try
         {var
           _bsy_=to_bytes(s),
           _bsz_=
            convert
             (_o$_,
              Ezjsonm,
              function(eta){return bytes_to_bson(0,0,0,0,eta)}(_bsy_));
          return _bsz_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bson_decoding_error)
           {var msg=exn[2];throw [0,Parse_error$1,msg]}
          throw exn}},
     binary=
      conv
       (function(json)
         {var eta=convert(Ezjsonm,_o$_,json);return to_string(arg$2(0,0,eta))},
        _yw_,
        _yv_,
        output),
     json$0=raw_splitted(json,binary),
     json_schema=conv(to_json,of_json,0,json$0),
     EncodingTable=_au_([0,compare_decoded]),
     table=[0,EncodingTable[1]],
     register=
      function(pp,encoding$0)
       {var param=encoding$0;
        for(;;)
         {var encoding=param[1],switch$0=0;
          if(typeof encoding !== "number")
           switch(encoding[0])
            {case 16:
              var
               description=encoding[3],
               id=encoding[1],
               match=[0,[0,id,description]];
              switch$0 = 2;
              break;
             case 17:var param$0=encoding[1];switch$0 = 1;break;
             case 18:
             case 19:var param$0=encoding[2];switch$0 = 1;break
             }
          switch(switch$0)
           {case 0:var match=0;break;case 1:var param=param$0;continue}
          if(match)
           {var
             match$0=match[1],
             description$0=match$0[2],
             id$0=match$0[1],
             _bsw_=table[1],
             _bsx_=
              function(param)
               {if(param)return caml_call1(kstr(invalid_arg,_yx_),id$0);
                var record=[0,encoding$0,description$0,pp];
                return [0,record]};
            table[1] = caml_call3(EncodingTable[5],id$0,_bsx_,_bsw_);
            return 0}
          return invalid_arg(_yy_)}};
    caml_fresh_oo_id(0);
    var
     destruct$1=
      function(e,v)
       {var _bsv_=get_json(e);return caml_call2(Json_encoding[2],_bsv_,v)},
     splitted=
      function(json,binary){return raw_splitted(get_json(json),binary)},
     make$2=function(err){return [0,err,0]},
     cons$0=function(err,trace){return [0,err,trace]},
     conp=function(trace$0,trace){return trace$0},
     pp_print=
      function(pp_error,ppf,errors)
       {if(errors)
         {var _bsp_=errors[1];
          if(errors[2])
           {var
             _bsq_=rev(errors),
             _bsr_=0,
             _bss_=
              function(_bst_,_bsu_)
               {return pp_print_list(_bsr_,pp_error,_bst_,_bsu_)};
            return caml_call5(pf(ppf),_yz_,pp_error,_bsp_,_bss_,_bsq_)}
          return caml_call3(pf(ppf),_yA_,pp_error,_bsp_)}
        throw [0,Assert_failure,_yB_]},
     pp_print_top=
      function(pp_error,fmt,param)
       {if(param){var error=param[1];return caml_call2(pp_error,fmt,error)}
        throw [0,Assert_failure,_yC_]},
     encoding$2=function(error_encoding){return list$1(0,error_encoding)},
     Trace=[0,make$2,cons$0,conp,pp_print,pp_print_top,encoding$2,fold_left$0],
     Make$4=
      function(Trace)
       {function ok(v){return [0,v]}
        function ok_some(x){return [0,[0,x]]}
        function error(s){return [1,caml_call1(Trace[1],s)]}
        function return$0(v){return return_ok(v)}
        var return_unit$0=return$1(ok_unit),return_none=return$1(ok_none);
        function return_some(x){return return$1([0,[0,x]])}
        var
         return_nil=return$1(ok_nil),
         return_true=return$1(ok_true),
         return_false=return$1(ok_false);
        function fail(s){return return_error(caml_call1(Trace[1],s))}
        function symbol(v,f)
         {if(0 === v[0]){var v$0=v[1];return caml_call1(f,v$0)}return v}
        function symbol$0(v,f)
         {return symbol_bind
                  (v,
                   function(err)
                    {if(0 === err[0]){var v=err[1];return caml_call1(f,v)}
                     return return$1(err)})}
        function symbol$1(v,f)
         {if(0 === v[0]){var v$0=v[1];return caml_call1(f,v$0)}
          return return$1(v)}
        function symbol$3(v,f)
         {if(0 === v[0])
           {var v$0=v[1];return symbol_bind(caml_call1(f,v$0),return_ok)}
          return return$1(v)}
        function symbol$4(v,f)
         {return symbol$0(v,function(v){return return_ok(caml_call1(f,v))})}
        function symbol$5(v,f)
         {return symbol(v,function(v){return [0,caml_call1(f,v)]})}
        function map(f,l)
         {if(l)
           {var
             t=l[2],
             h=l[1],
             _bsn_=
              function(rh)
               {function _bso_(rt){return [0,[0,rh,rt]]}
                return symbol(map(f,t),_bso_)};
            return symbol(caml_call1(f,h),_bsn_)}
          return ok_nil}
        function mapi(f,l)
         {function mapi(f,i,l)
           {if(l)
             {var
               t=l[2],
               h=l[1],
               _bsl_=
                function(rh)
                 {function _bsm_(rt){return [0,[0,rh,rt]]}
                  return symbol(mapi(f,i + 1 | 0,t),_bsm_)};
              return symbol(caml_call2(f,i,h),_bsl_)}
            return ok_nil}
          return mapi(f,0,l)}
        function map_s(f,l)
         {if(l)
           {var
             t=l[2],
             h=l[1],
             _bsj_=
              function(rh)
               {function _bsk_(rt){return return$0([0,rh,rt])}
                return symbol$0(map_s(f,t),_bsk_)};
            return symbol$0(caml_call1(f,h),_bsj_)}
          return return_nil}
        function mapi_s(f,l)
         {function mapi_s(f,i,l)
           {if(l)
             {var
               t=l[2],
               h=l[1],
               _bsh_=
                function(rh)
                 {function _bsi_(rt){return return$0([0,rh,rt])}
                  return symbol$0(mapi_s(f,i + 1 | 0,t),_bsi_)};
              return symbol$0(caml_call2(f,i,h),_bsh_)}
            return return_nil}
          return mapi_s(f,0,l)}
        function rev_map_append_s(acc,f,param)
         {if(param)
           {var
             tl=param[2],
             hd=param[1],
             _bsg_=function(v){return rev_map_append_s([0,v,acc],f,tl)};
            return symbol$0(caml_call1(f,hd),_bsg_)}
          return return$0(acc)}
        function rev_map_s(f,l){return rev_map_append_s(0,f,l)}
        function map_p(f,l)
         {if(l)
           {var l$0=l[2],x=l[1],tx=caml_call1(f,x),tl=map_p(f,l$0);
            return symbol_bind
                    (tx,
                     function(x)
                      {return symbol_bind
                               (tl,
                                function(match)
                                 {if(0 === x[0])
                                   {var _bse_=x[1];
                                    if(0 === match[0])
                                     {var l=match[1];return return_ok([0,_bse_,l])}
                                    var trace=match[1]}
                                  else
                                   {var _bsf_=x[1];
                                    if(0 !== match[0])
                                     {var trace2=match[1];
                                      return return_error(caml_call2(Trace[3],_bsf_,trace2))}
                                    var trace=_bsf_}
                                  return return_error(trace)})})}
          return return_nil}
        function mapi_p(f,l)
         {function mapi_p(f,i,l)
           {if(l)
             {var
               l$0=l[2],
               x=l[1],
               tx=caml_call2(f,i,x),
               tl=mapi_p(f,i + 1 | 0,l$0);
              return symbol_bind
                      (tx,
                       function(x)
                        {return symbol_bind
                                 (tl,
                                  function(match)
                                   {if(0 === x[0])
                                     {var _bsc_=x[1];
                                      if(0 === match[0])
                                       {var l=match[1];return return_ok([0,_bsc_,l])}
                                      var trace=match[1]}
                                    else
                                     {var _bsd_=x[1];
                                      if(0 !== match[0])
                                       {var trace2=match[1];
                                        return return_error(caml_call2(Trace[3],_bsd_,trace2))}
                                      var trace=_bsd_}
                                    return return_error(trace)})})}
            return return_nil}
          return mapi_p(f,0,l)}
        function map2_s(f,l1,l2)
         {if(l1)
           {if(l2)
             {var
               t2=l2[2],
               h2=l2[1],
               t1=l1[2],
               h1=l1[1],
               _bsa_=
                function(rh)
                 {function _bsb_(rt){return return$0([0,rh,rt])}
                  return symbol$0(map2_s(f,t1,t2),_bsb_)};
              return symbol$0(caml_call2(f,h1,h2),_bsa_)}}
          else
           if(! l2)return return_nil;
          return invalid_arg(_yK_)}
        function mapi2_s(f,l1,l2)
         {function mapi2_s(i,f,l1,l2)
           {if(l1)
             {if(l2)
               {var
                 t2=l2[2],
                 h2=l2[1],
                 t1=l1[2],
                 h1=l1[1],
                 _br__=
                  function(rh)
                   {function _br$_(rt){return return$0([0,rh,rt])}
                    return symbol$0(mapi2_s(i + 1 | 0,f,t1,t2),_br$_)};
                return symbol$0(caml_call3(f,i,h1,h2),_br__)}}
            else
             if(! l2)return return_nil;
            return invalid_arg(_yL_)}
          return mapi2_s(0,f,l1,l2)}
        function map2(f,l1,l2)
         {if(l1)
           {if(l2)
             {var
               t2=l2[2],
               h2=l2[1],
               t1=l1[2],
               h1=l1[1],
               _br8_=
                function(rh)
                 {function _br9_(rt){return [0,[0,rh,rt]]}
                  return symbol(map2(f,t1,t2),_br9_)};
              return symbol(caml_call2(f,h1,h2),_br8_)}}
          else
           if(! l2)return ok_nil;
          return invalid_arg(_yM_)}
        function mapi2(f,l1,l2)
         {function mapi2(i,f,l1,l2)
           {if(l1)
             {if(l2)
               {var
                 t2=l2[2],
                 h2=l2[1],
                 t1=l1[2],
                 h1=l1[1],
                 _br6_=
                  function(rh)
                   {function _br7_(rt){return [0,[0,rh,rt]]}
                    return symbol(mapi2(i + 1 | 0,f,t1,t2),_br7_)};
                return symbol(caml_call3(f,i,h1,h2),_br6_)}}
            else
             if(! l2)return ok_nil;
            return invalid_arg(_yN_)}
          return mapi2(0,f,l1,l2)}
        function filter_map_s(f,l)
         {if(l)
           {var
             t=l[2],
             h=l[1],
             _br4_=
              function(param)
               {if(param)
                 {var
                   rh=param[1],
                   _br5_=function(rt){return return$0([0,rh,rt])};
                  return symbol$0(filter_map_s(f,t),_br5_)}
                return filter_map_s(f,t)};
            return symbol$0(caml_call1(f,h),_br4_)}
          return return_nil}
        function filter_map_p(f,l)
         {if(l)
           {var t=l[2],h=l[1],th=caml_call1(f,h),tt=filter_map_p(f,t);
            return symbol$0
                    (th,
                     function(param)
                      {if(param)
                        {var rh=param[1];
                         return symbol$0(tt,function(rt){return return$0([0,rh,rt])})}
                       return tt})}
          return return_nil}
        function filter(f,l)
         {if(l)
           {var
             t=l[2],
             h=l[1],
             _br2_=
              function(param)
               {if(0 === param)return filter(f,t);
                function _br3_(t){return [0,[0,h,t]]}
                return symbol(filter(f,t),_br3_)};
            return symbol(caml_call1(f,h),_br2_)}
          return ok_nil}
        function filter_s(f,l)
         {if(l)
           {var
             t=l[2],
             h=l[1],
             _br0_=
              function(param)
               {if(0 === param)return filter_s(f,t);
                function _br1_(t){return return$0([0,h,t])}
                return symbol$0(filter_s(f,t),_br1_)};
            return symbol$0(caml_call1(f,h),_br0_)}
          return return_nil}
        function filter_p(f,l)
         {if(l)
           {var t=l[2],h=l[1],jh=caml_call1(f,h),t$0=filter_p(f,t);
            return symbol$0
                    (jh,
                     function(param)
                      {return 0 === param
                               ?t$0
                               :symbol$0(t$0,function(t){return return$0([0,h,t])})})}
          return return_nil}
        function iter(f,l)
         {if(l)
           {var t=l[2],h=l[1],_brZ_=function(param){return iter(f,t)};
            return symbol(caml_call1(f,h),_brZ_)}
          return ok_unit}
        function iter_s(f,l)
         {if(l)
           {var t=l[2],h=l[1],_brY_=function(param){return iter_s(f,t)};
            return symbol$0(caml_call1(f,h),_brY_)}
          return return_unit$0}
        function iter_p(f,l)
         {if(l)
           {var l$0=l[2],x=l[1],tx=caml_call1(f,x),tl=iter_p(f,l$0);
            return symbol_bind
                    (tx,
                     function(tx_res)
                      {return symbol_bind
                               (tl,
                                function(match)
                                 {if(0 === tx_res[0])
                                   {if(0 === match[0])return return_ok(0);var trace=match[1]}
                                  else
                                   {var _brX_=tx_res[1];
                                    if(0 !== match[0])
                                     {var trace2=match[1];
                                      return return_error(caml_call2(Trace[3],_brX_,trace2))}
                                    var trace=_brX_}
                                  return return_error(trace)})})}
          return return_unit$0}
        function iteri_p(f,l)
         {function iteri_p(i,f,l)
           {if(l)
             {var
               l$0=l[2],
               x=l[1],
               tx=caml_call2(f,i,x),
               tl=iteri_p(i + 1 | 0,f,l$0);
              return symbol_bind
                      (tx,
                       function(tx_res)
                        {return symbol_bind
                                 (tl,
                                  function(match)
                                   {if(0 === tx_res[0])
                                     {if(0 === match[0])return return$1(ok_unit);
                                      var trace=match[1]}
                                    else
                                     {var _brW_=tx_res[1];
                                      if(0 !== match[0])
                                       {var trace2=match[1];
                                        return return_error(caml_call2(Trace[3],_brW_,trace2))}
                                      var trace=_brW_}
                                    return return_error(trace)})})}
            return return_unit$0}
          return iteri_p(0,f,l)}
        function iter2_p(f,l1,l2)
         {if(l1)
           {if(l2)
             {var
               l2$0=l2[2],
               x2=l2[1],
               l1$0=l1[2],
               x1=l1[1],
               tx=caml_call2(f,x1,x2),
               tl=iter2_p(f,l1$0,l2$0);
              return symbol_bind
                      (tx,
                       function(tx_res)
                        {return symbol_bind
                                 (tl,
                                  function(match)
                                   {if(0 === tx_res[0])
                                     {if(0 === match[0])return return_ok(0);var trace=match[1]}
                                    else
                                     {var _brV_=tx_res[1];
                                      if(0 !== match[0])
                                       {var trace2=match[1];
                                        return return_error(caml_call2(Trace[3],_brV_,trace2))}
                                      var trace=_brV_}
                                    return return_error(trace)})})}}
          else
           if(! l2)return return_unit$0;
          return invalid_arg(_yO_)}
        function iteri2_p(f,l1,l2)
         {function iteri2_p(i,f,l1,l2)
           {if(l1)
             {if(l2)
               {var
                 l2$0=l2[2],
                 x2=l2[1],
                 l1$0=l1[2],
                 x1=l1[1],
                 tx=caml_call3(f,i,x1,x2),
                 tl=iteri2_p(i + 1 | 0,f,l1$0,l2$0);
                return symbol_bind
                        (tx,
                         function(tx_res)
                          {return symbol_bind
                                   (tl,
                                    function(match)
                                     {if(0 === tx_res[0])
                                       {if(0 === match[0])return return_ok(0);var trace=match[1]}
                                      else
                                       {var _brU_=tx_res[1];
                                        if(0 !== match[0])
                                         {var trace2=match[1];
                                          return return_error(caml_call2(Trace[3],_brU_,trace2))}
                                        var trace=_brU_}
                                      return return_error(trace)})})}}
            else
             if(! l2)return return_unit$0;
            return invalid_arg(_yP_)}
          return iteri2_p(0,f,l1,l2)}
        function fold_left_s(f,init,l)
         {if(l)
           {var
             t=l[2],
             h=l[1],
             _brT_=function(acc){return fold_left_s(f,acc,t)};
            return symbol$0(caml_call2(f,init,h),_brT_)}
          return return$0(init)}
        function fold_right_s(f,l,init)
         {if(l)
           {var t=l[2],h=l[1],_brS_=function(acc){return caml_call2(f,h,acc)};
            return symbol$0(fold_right_s(f,t,init),_brS_)}
          return return$0(init)}
        function join_e_errors(trace_acc,param)
         {var trace_acc$0=trace_acc,param$0=param;
          for(;;)
           {if(param$0)
             {var _brR_=param$0[1];
              if(0 === _brR_[0])
               {var param$1=param$0[2],param$0=param$1;continue}
              var
               param$2=param$0[2],
               trace=_brR_[1],
               trace_acc$1=caml_call2(Trace[3],trace_acc$0,trace),
               trace_acc$0=trace_acc$1,
               param$0=param$2;
              continue}
            return [1,trace_acc$0]}}
        function join_e(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var _brQ_=param$0[1];
              if(0 === _brQ_[0])
               {var param$1=param$0[2],param$0=param$1;continue}
              var ts=param$0[2],trace=_brQ_[1];
              return join_e_errors(trace,ts)}
            return ok_unit}}
        function all_e(param)
         {var acc=0,param$0=param;
          for(;;)
           {if(param$0)
             {var _brP_=param$0[1];
              if(0 === _brP_[0])
               {var
                 param$1=param$0[2],
                 v=_brP_[1],
                 acc$0=[0,v,acc],
                 acc=acc$0,
                 param$0=param$1;
                continue}
              var ts=param$0[2],trace=_brP_[1];
              return join_e_errors(trace,ts)}
            return [0,rev(acc)]}}
        function both_e(a,match)
         {if(0 === a[0])
           {var _brN_=a[1];
            if(0 === match[0]){var b=match[1];return [0,[0,_brN_,b]]}
            var err=match[1]}
          else
           {var _brO_=a[1];
            if(0 !== match[0])
             {var errb=match[1];return [1,caml_call2(Trace[3],_brO_,errb)]}
            var err=_brO_}
          return [1,err]}
        function join_ep(ts){return symbol$2(all_p(ts),join_e)}
        function all_ep(ts){return symbol$2(all_p(ts),all_e)}
        function both_ep(a,b)
         {function _brM_(param){var b=param[2],a=param[1];return both_e(a,b)}
          return symbol$2(both_p(a,b),_brM_)}
        function record_trace(err,result)
         {if(0 === result[0])return result;
          var trace=result[1];
          return [1,caml_call2(Trace[2],err,trace)]}
        function trace(err,f)
         {return symbol_bind
                  (f,
                   function(ok)
                    {if(0 === ok[0])return return$1(ok);
                     var trace=ok[1];
                     return return_error(caml_call2(Trace[2],err,trace))})}
        function record_trace_eval(mk_err,ok)
         {if(0 === ok[0])return ok;
          var trace=ok[1];
          function _brL_(err){return [1,caml_call2(Trace[2],err,trace)]}
          return symbol(caml_call1(mk_err,0),_brL_)}
        function trace_eval(mk_err,f)
         {return symbol_bind
                  (f,
                   function(ok)
                    {if(0 === ok[0])return return$1(ok);
                     var trace=ok[1];
                     function _brK_(err)
                      {return return_error(caml_call2(Trace[2],err,trace))}
                     return symbol$0(caml_call1(mk_err,0),_brK_)})}
        function error_unless(cond,exn){return cond?ok_unit:error(exn)}
        function error_when(cond,exn){return cond?error(exn):ok_unit}
        function fail_unless(cond,exn){return cond?return_unit$0:fail(exn)}
        function fail_when(cond,exn){return cond?fail(exn):return_unit$0}
        function unless(cond,f){return cond?return_unit$0:caml_call1(f,0)}
        function when(cond,f){return cond?caml_call1(f,0):return_unit$0}
        function dont_wait(exc_handler,err_handler,f)
         {function f$0(param)
           {function _brJ_(param)
             {if(0 === param[0])return return_unit;
              var trace=param[1];
              caml_call1(err_handler,trace);
              return return_unit}
            return symbol_bind(caml_call1(f,0),_brJ_)}
          var match=apply(f$0,0),p=underlying(match);
          function callback_if_deferred(param)
           {var saved_storage=current_storage[1];
            return function(result)
             {if(1 === result[0])
               {var exn=result[1];
                current_storage[1] = saved_storage;
                return handle_with_async_exception_ho(exc_handler,exn)}
              return 0}}
          var _brH_=p[1];
          switch(_brH_[0])
           {case 1:
             var
              exn=_brH_[1],
              _brI_=
               function(param)
                {var callback=callback_if_deferred(0);
                 return [0,0,callback,p[1]]};
             return run_callback_or_defer_it
                     (_f3_,
                      function(param)
                       {return handle_with_async_exception_ho(exc_handler,exn)},
                      _brI_);
            case 2:
             var p_callbacks=_brH_[1],callback=callback_if_deferred(0);
             return add_implicitly_removed_callbac(p_callbacks,callback);
            default:return 0}}
        return [0,
                ok,
                ok_unit,
                ok_none,
                ok_some,
                ok_nil,
                ok_true,
                ok_false,
                return$0,
                return_unit$0,
                return_none,
                return_some,
                return_nil,
                return_true,
                return_false,
                error,
                fail,
                symbol_bind,
                symbol$2,
                symbol,
                symbol$5,
                symbol$0,
                symbol$4,
                symbol$1,
                symbol$3,
                record_trace,
                trace,
                record_trace_eval,
                trace_eval,
                error_unless,
                error_when,
                fail_unless,
                fail_when,
                unless,
                when,
                dont_wait,
                iter,
                iter_s,
                iter_p,
                iteri_p,
                iter2_p,
                iteri2_p,
                map,
                mapi,
                map_s,
                rev_map_s,
                map_p,
                mapi_s,
                mapi_p,
                map2,
                mapi2,
                map2_s,
                mapi2_s,
                filter_map_s,
                filter_map_p,
                filter,
                filter_s,
                filter_p,
                fold_left_s,
                fold_right_s,
                join_p,
                all_p,
                both_p,
                join_e,
                all_e,
                both_e,
                join_ep,
                all_ep,
                both_ep]},
     set_error_encoding_cache_dirty=[0,function(param){return 0}],
     Make$5=
      function(Prefix)
       {var
         error_encoding_name=
          caml_string_equal(Prefix[1],_yT_)?_yU_:symbol(Prefix[1],_zl_),
         error_kinds=[0,0],
         has_recursive_error=[0,0];
        function get_registered_errors(param)
         {var _brA_=error_kinds[1];
          return flatten
                  (map$1
                    (function(param)
                      {var _brB_=param[1];
                       if(caml_string_notequal(_brB_,_yV_))
                        {var _brC_=param[5],_brD_=param[3],_brE_=param[2];
                         if(0 === _brC_[0])
                          {var encoding_case=param[6],category=_brC_[1];
                           if(0 === encoding_case[0])
                            {var encoding_case$0=encoding_case[1];
                             return [0,
                                     [0,
                                      category,
                                      _brB_,
                                      _brE_,
                                      _brD_,
                                      schema$1(0,union$0(0,[0,encoding_case$0,0]))],
                                     0]}
                           var
                            make_encoding_case=encoding_case[1],
                            _brF_=0,
                            eta=
                             function(error_encoding)
                              {return union$0
                                       (0,[0,caml_call1(make_encoding_case,error_encoding),0])};
                           return [0,
                                   [0,
                                    category,
                                    _brB_,
                                    _brE_,
                                    _brD_,
                                    schema$1(0,mu(error_encoding_name,0,0,eta))],
                                   _brF_]}
                         var WEM=_brC_[1],_brG_=caml_call1(WEM[11],0);
                         return map$1
                                 (function(param)
                                   {var
                                     schema=param[5],
                                     description=param[4],
                                     title=param[3],
                                     id=param[2],
                                     category=param[1];
                                    return [0,category,id,title,description,schema]},
                                  _brG_)}
                       return 0},
                     _brA_))}
        var error_encoding_cache=[0,0],cont=set_error_encoding_cache_dirty[1];
        set_error_encoding_cache_dirty[1]
        =
        function(param)
         {caml_call1(cont,0);error_encoding_cache[1] = 0;return 0};
        function string_of_category(param)
         {return num_103274127 === param?_yW_:num_950914574 <= param?_yX_:_yY_}
        function pp_info(ppf,param)
         {var
           schema=param[5],
           description=param[4],
           title=param[3],
           id=param[2],
           category=param[1],
           _brt_=caml_call1(to_json,schema),
           _bru_=0,
           _brv_=0;
          function _brw_(_bry_,_brz_)
           {return pp$4(_brv_,_bru_,Ezjsonm,_bry_,_brz_)}
          var _brx_=string_of_category(category);
          return caml_call7
                  (pf(ppf),_yZ_,_brx_,id,title,description,_brw_,_brt_)}
        var Unclassified=[num_248,_y0_,caml_fresh_oo_id(0)];
        function to_error(msg){return [0,Unclassified,msg]}
        function from_error(error)
         {if(error[1] === Unclassified){var msg$0=error[2];return [0,msg$0]}
          var slot=of_val(error),msg=slot[1];
          return [0,symbol(_y2_,symbol(msg,_y1_))]}
        var eta=obj2([0,_y5_,constant(_y4_),0,0],[0,_y3_,output,0,0]);
        function _bra_(param){var x=param[2];return x}
        var
         encoding_case=
          [0,
           _y7_,
           0,
           def$0
            (_y6_,
             [0,title],
             [0,description],
             conv(function(x){return [0,0,x]},_bra_,0,eta)),
           from_error,
           to_error,
           0],
         encoding_case$0=[0,encoding_case];
        function pp$0(ppf,s){return caml_call3(pf(ppf),_y8_,pp_print_text,s)}
        error_kinds[1]
        =
        [0,
         [0,id$1,title,description,from_error,category,encoding_case$0,pp$0],
         error_kinds[1]];
        var Unregistered_error=[num_248,_y9_,caml_fresh_oo_id(0)];
        function to_error$0(msg){return [0,Unregistered_error,msg]}
        function from_error$0(param)
         {if(param[1] === Unregistered_error)
           {var json=param[2];return [0,json]}
          return 0}
        var
         encoding_case$1=[0,_y__,0,json$0,from_error$0,to_error$0,0],
         encoding_case$2=[0,encoding_case$1];
        function pp$1(ppf,json){return caml_call3(pf(ppf),_y$_,pp$6,json)}
        error_kinds[1]
        =
        [0,
         [0,id$2,_zb_,_za_,from_error$0,category$0,encoding_case$2,pp$1],
         error_kinds[1]];
        function prepare_registration(new_id)
         {caml_call1(set_error_encoding_cache_dirty[1],0);
          var name=symbol(Prefix[1],new_id),_brs_=error_kinds[1];
          if
           (exists
             (function(param)
               {var id=param[1];return caml_string_equal(name,id)},
              _brs_))
           invalid_arg(caml_call1(sprintf(_zc_),name));
          return name}
        function register_wrapped_error_kind(WEM,id,title,description)
         {var name=prepare_registration(id);
          function unwrap(err)
           {var res=caml_call1(WEM[12],err);
            if(res)
             {var _brr_=res[1];
              if(_brr_[1] === WEM[6])return 0;
              if(_brr_[1] === WEM[7])return 0}
            return res}
          function wrap(err)
           {return err[1] === WEM[6]
                    ?failwith(_zd_)
                    :err[1] === WEM[7]?failwith(_ze_):caml_call1(WEM[13],err)}
          var encoding_case=[0,[0,name,0,WEM[1],unwrap,wrap,0]];
          error_kinds[1]
          =
          [0,
           [0,name,title,description,WEM[12],[1,WEM],encoding_case,WEM[2]],
           error_kinds[1]];
          return 0}
        function add_kind_and_id
         (category,name,title,description,encoding,from_error,to_error)
         {if(1 - is_obj(encoding))
           {var _brn_=Prefix[1];
            invalid_arg(caml_call2(sprintf(_zf_),_brn_,name))}
          var
           _bro_=[0,_zg_,constant(name),0,0],
           with_id_and_kind_encoding=
            merge_objs
             (obj2([0,_zh_,constant(string_of_category(category)),0,0],_bro_),
              encoding),
           _brp_=0;
          function _brq_(param){var x=param[2];return x}
          return [0,
                  title,
                  [0,description],
                  conv
                   (function(x){return [0,_zi_,x]},
                    _brq_,
                    _brp_,
                    with_id_and_kind_encoding),
                  from_error,
                  to_error,
                  0]}
        function register_error_kind
         (category,id,title,description,pp$0,encoding,from_error,to_error)
         {var
           id$0=prepare_registration(id),
           encoding_case=
            [0,
             add_kind_and_id
              (category,id$0,title,description,encoding,from_error,to_error)],
           _brm_=error_kinds[1];
          error_kinds[1]
          =
          [0,
           [0,
            id$0,
            title,
            description,
            from_error,
            [0,category],
            encoding_case,
            value
             (pp$0,
              function(ppf,data)
               {var
                 pp_encoding=
                  obj3
                   ([0,_yS_,output,0,0],
                    [0,_yR_,output,0,0],
                    [0,_yQ_,encoding,0,0]),
                 eta=construct$1(pp_encoding,[0,id$0,description,data]);
                return pp(ppf,arg$5(0,0,eta))})],
           _brm_];
          return 0}
        function register_recursive_error_kind
         (category,id,title,description,pp,make_encoding,from_error,to_error)
         {var
           name=prepare_registration(id),
           encoding_case=
            [1,
             function(error_encoding)
              {var encoding=caml_call1(make_encoding,error_encoding);
               return add_kind_and_id
                       (category,
                        name,
                        title,
                        description,
                        encoding,
                        from_error,
                        to_error)}];
          has_recursive_error[1] = 1;
          error_kinds[1]
          =
          [0,
           [0,name,title,description,from_error,[0,category],encoding_case,pp],
           error_kinds[1]];
          return 0}
        function error_encoding(param)
         {var _brb_=error_encoding_cache[1];
          if(_brb_){var encoding=_brb_[1];return encoding}
          if(has_recursive_error[1])
           var
            eta=
             function(error_encoding)
              {var
                _brf_=error_kinds[1],
                cases=
                 map$1
                  (function(param)
                    {var encoding_case=param[6];
                     if(0 === encoding_case[0])
                      {var case$0=encoding_case[1];return case$0}
                     var make=encoding_case[1];
                     return caml_call1(make,error_encoding)},
                   _brf_),
                union_encoding=union$0(0,cases),
                _brg_=0;
               function _brh_(_brj_){return destruct$0(union_encoding,_brj_)}
               var
                eta=
                 splitted
                  (union_encoding,
                   conv
                    (function(_bri_){return construct$1(union_encoding,_bri_)},
                     _brh_,
                     _brg_,
                     json$0));
               return arg$4(0,eta)},
            encoding$0=mu(error_encoding_name,0,0,eta);
          else
           var
            _brc_=error_kinds[1],
            cases=
             map$1
              (function(param)
                {var encoding_case=param[6];
                 if(0 === encoding_case[0])
                  {var case$0=encoding_case[1];return case$0}
                 throw [0,Assert_failure,_zj_]},
               _brc_),
            union_encoding=union$0(0,cases),
            _brd_=0,
            _bre_=function(_brl_){return destruct$0(union_encoding,_brl_)},
            eta$0=
             splitted
              (union_encoding,
               conv
                (function(_brk_){return construct$1(union_encoding,_brk_)},
                 _bre_,
                 _brd_,
                 json$0)),
            encoding$0=arg$4(0,eta$0);
          error_encoding_cache[1] = [0,encoding$0];
          return encoding$0}
        var error_encoding$0=delayed(error_encoding);
        function json_of_error(error)
         {return construct$1(error_encoding$0,error)}
        function error_of_json(json){return destruct$0(error_encoding$0,json)}
        function classify_error(e)
         {var param=error_kinds[1];
          for(;;)
           {if(param)
             {var
               rest=param[2],
               match=param[1],
               category=match[5],
               from_error=match[4],
               match$0=caml_call1(from_error,e);
              if(match$0)
               {if(0 === category[0])
                 {var error_category=category[1];return error_category}
                var WEM=category[1],match$1=caml_call1(WEM[12],e);
                if(match$1){var e$0=match$1[1];return caml_call1(WEM[5],e$0)}
                var param=rest;
                continue}
              var param=rest;
              continue}
            return num_103274127}}
        function pp$2(ppf,error)
         {var param=error_kinds[1];
          for(;;)
           {if(param)
             {var
               errors=param[2],
               match=param[1],
               pp=match[7],
               from_error=match[4],
               match$0=caml_call1(from_error,error);
              if(match$0){var x=match$0[1];return caml_call2(pp,ppf,x)}
              var param=errors;
              continue}
            return caml_call1(pf(ppf),_zk_)}}
        return [0,
                error_encoding$0,
                pp$2,
                register_error_kind,
                register_recursive_error_kind,
                classify_error,
                Unclassified,
                Unregistered_error,
                json_of_error,
                error_of_json,
                pp_info,
                get_registered_errors,
                register_wrapped_error_kind]},
     include$0=Make$5([0,id$3]),
     error_encoding=include$0[1],
     pp$7=include$0[2],
     register_error_kind=include$0[3],
     register_recursive_error_kind=include$0[4],
     classify_error=include$0[5],
     json_of_error=include$0[8],
     error_of_json=include$0[9],
     Monad=Make$4(Trace),
     ok=Monad[1],
     ok_unit$0=Monad[2],
     ok_none$0=Monad[3],
     ok_some=Monad[4],
     ok_nil$0=Monad[5],
     ok_true$0=Monad[6],
     ok_false$0=Monad[7],
     return$3=Monad[8],
     return_unit$0=Monad[9],
     return_none$0=Monad[10],
     return_some$0=Monad[11],
     return_nil=Monad[12],
     return_true=Monad[13],
     return_false=Monad[14],
     error=Monad[15],
     fail$1=Monad[16],
     symbol_bind$2=Monad[17],
     symbol$10=Monad[18],
     symbol$11=Monad[19],
     symbol$12=Monad[20],
     symbol$13=Monad[21],
     symbol$14=Monad[22],
     symbol$15=Monad[23],
     symbol$16=Monad[24],
     trace=Monad[26],
     fail_unless=Monad[31],
     fail_when=Monad[32],
     iter_s=Monad[37],
     map_s=Monad[44],
     fold_left_s=Monad[58],
     join_p$0=Monad[60],
     all_p$0=Monad[61],
     both_p$0=Monad[62],
     join_e=Monad[63],
     all_e=Monad[64],
     both_e=Monad[65],
     join_ep=Monad[66],
     all_ep=Monad[67],
     both_ep=Monad[68],
     include$1=
      function(_bq5_)
        {var trace_encoding=caml_call1(Trace[6],error_encoding);
         function result_encoding(a_encoding)
          {var
            trace_encoding$0=obj1([0,_yD_,trace_encoding,0,0]),
            a_encoding$0=obj1([0,_yE_,a_encoding,0,0]),
            _bq8_=0;
           function _bq9_(x){return [1,x]}
           var
            _bq__=
             [0,
              [0,
               _yG_,
               0,
               trace_encoding$0,
               function(param)
                {if(0 === param[0])return 0;var x=param[1];return [0,x]},
               _bq9_,
               _yF_],
              _bq8_];
           function _bq$_(res){return [0,res]}
           return union$0
                   (_yJ_,
                    [0,
                     [0,
                      _yI_,
                      0,
                      a_encoding$0,
                      function(param)
                       {if(0 === param[0]){var x=param[1];return [0,x]}return 0},
                      _bq$_,
                      _yH_],
                     _bq__])}
         var
          pp_print_error=caml_call1(Trace[4],pp$7),
          pp_print_error_first=caml_call1(Trace[5],pp$7);
         function classify_errors(trace)
          {var _bq6_=num_103274127;
           function _bq7_(c,e)
            {var c2=caml_call1(classify_error,e),switch$0=0;
             if(num_103274127 === c)
              {if(num_103274127 === c2)return num_103274127}
             else
              if(num_950914574 === c)switch$0 = 1;
             if(! switch$0)
              {var switch$1=0;
               if(num_944934206 === c2 || num_950914574 !== c2)switch$1 = 1;
               if(switch$1)return num_944934206}
             return num_950914574}
           return caml_call3(Trace[7],_bq7_,_bq6_,trace)}
         return [0,
                 classify_errors,
                 pp_print_error,
                 pp_print_error_first,
                 trace_encoding,
                 result_encoding]}
       (Monad),
     pp_print_error=include$1[2],
     trace_encoding=include$1[4],
     Exn=[num_248,_zm_,caml_fresh_oo_id(0)],
     _zn_=function(msg){return [0,Exn,[0,Failure,msg]]},
     _zo_=
      function(param)
       {if(param[1] === Exn)
         {var _bq4_=param[2];
          if(_bq4_[1] === Failure){var msg=_bq4_[2];return [0,msg]}
          return [0,to_string$0(_bq4_)]}
        return 0},
     _zq_=obj1([0,_zp_,output,0,0]);
    caml_call8
     (register_error_kind,
      num_103274127,
      _zu_,
      _zt_,
      _zs_,
      [0,function(ppf,s){return caml_call3(pf(ppf),_zr_,pp_print_text,s)}],
      _zq_,
      _zo_,
      _zn_);
    var
     generic_error=
      function(fmt)
       {return kstr
                (function(s){return caml_call1(error,[0,Exn,[0,Failure,s]])},
                 fmt)},
     failwith$0=
      function(fmt)
       {return kstr
                (function(s){return caml_call1(fail$1,[0,Exn,[0,Failure,s]])},
                 fmt)},
     error_exn=function(s){return [1,caml_call1(Trace[1],[0,Exn,s])]},
     generic_trace=
      function(fmt)
       {return kstr
                (function(str)
                  {var exn=[0,Failure,str];
                   return function(f){return caml_call2(trace,[0,Exn,exn],f)}},
                 fmt)},
     failure=
      function(fmt)
       {return kstr(function(str){return [0,Exn,[0,Failure,str]]},fmt)},
     Canceled$0=[num_248,_zv_,caml_fresh_oo_id(0)],
     _zw_=function(param){return Canceled$0};
    caml_call8
     (register_error_kind,
      num_103274127,
      _zA_,
      _zz_,
      _zy_,
      0,
      input$0,
      function(param){return param === Canceled$0?_zx_:0},
      _zw_);
    var
     _zB_=function(param){return Canceled$0},
     _zC_=function(param){return param === Canceled$0?_zD_:0};
    caml_call8
     (register_error_kind,
      num_103274127,
      _zH_,
      _zG_,
      _zF_,
      [0,function(f,param){return pp(f,_zE_)}],
      input$0,
      _zC_,
      _zB_);
    var
     Timeout=[num_248,_zI_,caml_fresh_oo_id(0)],
     _zJ_=function(param){return Timeout},
     _zK_=function(param){return param === Timeout?_zL_:0};
    caml_call8
     (register_error_kind,
      num_103274127,
      _zP_,
      _zO_,
      _zN_,
      [0,function(f,param){return pp(f,_zM_)}],
      input$0,
      _zK_,
      _zJ_);
    def(_zR_,_zQ_,pp_print_error);
    var
     Make$6=
      function(Seq)
       {function Make(Ord)
         {var
           Legacy=_al_(Ord),
           empty=Legacy[1],
           is_empty=Legacy[2],
           mem=Legacy[3],
           add=Legacy[4],
           singleton=Legacy[5],
           remove=Legacy[6],
           union=Legacy[7],
           inter=Legacy[8],
           disjoint=Legacy[9],
           diff=Legacy[10],
           compare=Legacy[11],
           equal=Legacy[12],
           subset=Legacy[13],
           iter=Legacy[14],
           map=Legacy[15],
           fold=Legacy[16],
           for_all=Legacy[17],
           exists=Legacy[18],
           filter=Legacy[19],
           partition=Legacy[20],
           cardinal=Legacy[21],
           elements=Legacy[22],
           min_elt_opt=Legacy[24],
           max_elt_opt=Legacy[26],
           choose_opt=Legacy[28],
           split=Legacy[29],
           find_opt=Legacy[31],
           find_first_opt=Legacy[33],
           find_last_opt=Legacy[35],
           of_list=Legacy[36],
           to_seq_from=Legacy[37],
           to_seq=Legacy[38],
           add_seq=Legacy[39],
           of_seq=Legacy[40];
          function iter_e(f,t)
           {var _bq3_=caml_call1(to_seq,t);return caml_call2(Seq[17],f,_bq3_)}
          function iter_s(f,t)
           {var _bq2_=caml_call1(to_seq,t);return caml_call2(Seq[18],f,_bq2_)}
          function iter_p(f,t)
           {var _bq1_=caml_call1(to_seq,t);return caml_call2(Seq[20],f,_bq1_)}
          function iter_es(f,t)
           {var _bq0_=caml_call1(to_seq,t);return caml_call2(Seq[19],f,_bq0_)}
          function iter_ep(f,t)
           {var _bqZ_=caml_call1(to_seq,t);return caml_call2(Seq[21],f,_bqZ_)}
          function fold_e(f,t,init)
           {var _bqX_=caml_call1(to_seq,t);
            function _bqY_(acc,e){return caml_call2(f,e,acc)}
            return caml_call3(Seq[14],_bqY_,init,_bqX_)}
          function fold_s(f,t,init)
           {var _bqV_=caml_call1(to_seq,t);
            function _bqW_(acc,e){return caml_call2(f,e,acc)}
            return caml_call3(Seq[15],_bqW_,init,_bqV_)}
          function fold_es(f,t,init)
           {var _bqT_=caml_call1(to_seq,t);
            function _bqU_(acc,e){return caml_call2(f,e,acc)}
            return caml_call3(Seq[16],_bqU_,init,_bqT_)}
          return [0,
                  Legacy,
                  empty,
                  is_empty,
                  mem,
                  add,
                  singleton,
                  remove,
                  union,
                  inter,
                  disjoint,
                  diff,
                  compare,
                  equal,
                  subset,
                  iter,
                  iter_e,
                  iter_s,
                  iter_p,
                  iter_es,
                  iter_ep,
                  map,
                  fold,
                  fold_e,
                  fold_s,
                  fold_es,
                  for_all,
                  exists,
                  filter,
                  partition,
                  cardinal,
                  elements,
                  min_elt_opt,
                  max_elt_opt,
                  choose_opt,
                  split,
                  find_opt,
                  find_first_opt,
                  find_last_opt,
                  of_list,
                  to_seq_from,
                  to_seq,
                  add_seq,
                  of_seq]}
        return [0,Make]},
     Make$7=
      function(Monad)
       {var
         return_nil=return$1(ok_nil$1),
         ok_empty=[0,empty],
         return_empty=return$1(ok_empty),
         lwt_empty=return$1(empty);
        function apply3(f,x,y)
         {try
           {var _bqS_=caml_call2(f,x,y);return _bqS_}
          catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
        function fold_left_e(f,acc,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqQ_=function(acc){return fold_left_e(f,acc,seq$0)},
             _bqR_=caml_call2(f,acc,item);
            return caml_call2(Monad[12],_bqR_,_bqQ_)}
          return [0,acc]}
        function _bpe_(f,acc,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqP_=function(acc){return _bpe_(f,acc,seq$0)};
            return symbol_bind(caml_call2(f,acc,item),_bqP_)}
          return return$1(acc)}
        function fold_left_s(f,acc,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqO_=function(acc){return _bpe_(f,acc,seq$0)};
            return symbol_bind(apply3(f,acc,item),_bqO_)}
          return return$1(acc)}
        function _bpf_(f,acc,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqM_=function(acc){return _bpf_(f,acc,seq$0)},
             _bqN_=caml_call2(f,acc,item);
            return caml_call2(Monad[22],_bqN_,_bqM_)}
          return caml_call1(Monad[14],acc)}
        function fold_left_es(f,acc,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqK_=function(acc){return _bpf_(f,acc,seq$0)},
             _bqL_=apply3(f,acc,item);
            return caml_call2(Monad[22],_bqL_,_bqK_)}
          return caml_call1(Monad[14],acc)}
        function iter_e(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqI_=function(param){return iter_e(f,seq$0)},
             _bqJ_=caml_call1(f,item);
            return caml_call2(Monad[12],_bqJ_,_bqI_)}
          return Monad[5]}
        function _bpg_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqH_=function(param){return _bpg_(f,seq$0)};
            return symbol_bind(caml_call1(f,item),_bqH_)}
          return return_unit}
        function iter_s(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqG_=function(param){return _bpg_(f,seq$0)};
            return symbol_bind(apply(f,item),_bqG_)}
          return return_unit}
        function _bph_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqE_=function(param){return _bph_(f,seq$0)},
             _bqF_=caml_call1(f,item);
            return caml_call2(Monad[22],_bqF_,_bqE_)}
          return Monad[15]}
        function iter_es(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqC_=function(param){return _bph_(f,seq$0)},
             _bqD_=apply(f,item);
            return caml_call2(Monad[22],_bqD_,_bqC_)}
          return Monad[15]}
        function iter_p(f,seq)
         {var seq$0=seq,acc=0;
          for(;;)
           {var match=caml_call1(seq$0,0);
            if(match)
             {var
               seq$1=match[2],
               item=match[1],
               acc$0=[0,apply(f,item),acc],
               seq$0=seq$1,
               acc=acc$0;
              continue}
            return caml_call1(Monad[29],acc)}}
        function iter_ep(f,seq)
         {var seq$0=seq,acc=0;
          for(;;)
           {var match=caml_call1(seq$0,0);
            if(match)
             {var
               seq$1=match[2],
               item=match[1],
               acc$0=[0,apply(f,item),acc],
               seq$0=seq$1,
               acc=acc$0;
              continue}
            return caml_call1(Monad[32],acc)}}
        function map_e(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqx_=
              function(item)
               {function _bqz_(seq)
                 {function _bqB_(param){return [0,item,seq]}
                  return caml_call1(Monad[4],_bqB_)}
                var _bqA_=map_e(f,seq$0);
                return caml_call2(Monad[12],_bqA_,_bqz_)},
             _bqy_=caml_call1(f,item);
            return caml_call2(Monad[12],_bqy_,_bqx_)}
          return ok_empty}
        function _bpi_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqv_=
              function(item)
               {function _bqw_(seq)
                 {return return$1(function(param){return [0,item,seq]})}
                return symbol_bind(_bpi_(f,seq$0),_bqw_)};
            return symbol_bind(caml_call1(f,item),_bqv_)}
          return lwt_empty}
        function map_s(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqt_=
              function(item)
               {function _bqu_(seq)
                 {return return$1(function(param){return [0,item,seq]})}
                return symbol_bind(_bpi_(f,seq$0),_bqu_)};
            return symbol_bind(apply(f,item),_bqt_)}
          return lwt_empty}
        function _bpj_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqo_=
              function(item)
               {function _bqq_(seq)
                 {function _bqs_(param){return [0,item,seq]}
                  return caml_call1(Monad[14],_bqs_)}
                var _bqr_=_bpj_(f,seq$0);
                return caml_call2(Monad[22],_bqr_,_bqq_)},
             _bqp_=caml_call1(f,item);
            return caml_call2(Monad[22],_bqp_,_bqo_)}
          return return_empty}
        function map_es(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bqj_=
              function(item)
               {function _bql_(seq)
                 {function _bqn_(param){return [0,item,seq]}
                  return caml_call1(Monad[14],_bqn_)}
                var _bqm_=_bpj_(f,seq$0);
                return caml_call2(Monad[22],_bqm_,_bql_)},
             _bqk_=apply(f,item);
            return caml_call2(Monad[22],_bqk_,_bqj_)}
          return return_empty}
        function map_p(f,seq)
         {function _bqe_(s,x,param){return [0,x,s]}
          function _bqf_(_bqi_){return fold_left$0(_bqe_,empty,_bqi_)}
          var
           _bqg_=0,
           _bqh_=
            fold_left(function(acc,x){return [0,apply(f,x),acc]},_bqg_,seq);
          return symbol$2(caml_call1(Monad[30],_bqh_),_bqf_)}
        function map_ep(f,seq)
         {function _bp__(s,x,param){return [0,x,s]}
          function _bp$_(_bqd_){return fold_left$0(_bp__,empty,_bqd_)}
          var
           _bqa_=0,
           _bqb_=
            fold_left(function(acc,x){return [0,apply(f,x),acc]},_bqa_,seq),
           _bqc_=caml_call1(Monad[33],_bqb_);
          return caml_call2(Monad[23],_bqc_,_bp$_)}
        function filter_e(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bp5_=
              function(param)
               {if(0 === param)return filter_e(f,seq$0);
                function _bp7_(seq)
                 {function _bp9_(param){return [0,item,seq]}
                  return caml_call1(Monad[4],_bp9_)}
                var _bp8_=filter_e(f,seq$0);
                return caml_call2(Monad[12],_bp8_,_bp7_)},
             _bp6_=caml_call1(f,item);
            return caml_call2(Monad[12],_bp6_,_bp5_)}
          return ok_empty}
        function _bpk_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bp3_=
              function(param)
               {if(0 === param)return _bpk_(f,seq$0);
                function _bp4_(seq)
                 {return return$1(function(param){return [0,item,seq]})}
                return symbol_bind(_bpk_(f,seq$0),_bp4_)};
            return symbol_bind(caml_call1(f,item),_bp3_)}
          return lwt_empty}
        function filter_s(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bp1_=
              function(param)
               {if(0 === param)return _bpk_(f,seq$0);
                function _bp2_(seq)
                 {return return$1(function(param){return [0,item,seq]})}
                return symbol_bind(_bpk_(f,seq$0),_bp2_)};
            return symbol_bind(apply(f,item),_bp1_)}
          return lwt_empty}
        function _bpl_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpW_=
              function(param)
               {if(0 === param)return _bpl_(f,seq$0);
                function _bpY_(seq)
                 {function _bp0_(param){return [0,item,seq]}
                  return caml_call1(Monad[14],_bp0_)}
                var _bpZ_=_bpl_(f,seq$0);
                return caml_call2(Monad[22],_bpZ_,_bpY_)},
             _bpX_=caml_call1(f,item);
            return caml_call2(Monad[22],_bpX_,_bpW_)}
          return return_empty}
        function filter_es(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpR_=
              function(param)
               {if(0 === param)return _bpl_(f,seq$0);
                function _bpT_(seq)
                 {function _bpV_(param){return [0,item,seq]}
                  return caml_call1(Monad[14],_bpV_)}
                var _bpU_=_bpl_(f,seq$0);
                return caml_call2(Monad[22],_bpU_,_bpT_)},
             _bpS_=apply(f,item);
            return caml_call2(Monad[22],_bpS_,_bpR_)}
          return return_empty}
        function filter_map_e(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpM_=
              function(param)
               {if(param)
                 {var
                   item=param[1],
                   _bpO_=
                    function(seq)
                     {function _bpQ_(param){return [0,item,seq]}
                      return caml_call1(Monad[4],_bpQ_)},
                   _bpP_=filter_map_e(f,seq$0);
                  return caml_call2(Monad[12],_bpP_,_bpO_)}
                return filter_map_e(f,seq$0)},
             _bpN_=caml_call1(f,item);
            return caml_call2(Monad[12],_bpN_,_bpM_)}
          return ok_empty}
        function _bpm_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpK_=
              function(param)
               {if(param)
                 {var
                   item=param[1],
                   _bpL_=
                    function(seq)
                     {return return$1(function(param){return [0,item,seq]})};
                  return symbol_bind(_bpm_(f,seq$0),_bpL_)}
                return _bpm_(f,seq$0)};
            return symbol_bind(caml_call1(f,item),_bpK_)}
          return lwt_empty}
        function filter_map_s(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpI_=
              function(param)
               {if(param)
                 {var
                   item=param[1],
                   _bpJ_=
                    function(seq)
                     {return return$1(function(param){return [0,item,seq]})};
                  return symbol_bind(_bpm_(f,seq$0),_bpJ_)}
                return _bpm_(f,seq$0)};
            return symbol_bind(apply(f,item),_bpI_)}
          return lwt_empty}
        function _bpn_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpD_=
              function(param)
               {if(param)
                 {var
                   item=param[1],
                   _bpF_=
                    function(seq)
                     {function _bpH_(param){return [0,item,seq]}
                      return caml_call1(Monad[14],_bpH_)},
                   _bpG_=_bpn_(f,seq$0);
                  return caml_call2(Monad[22],_bpG_,_bpF_)}
                return _bpn_(f,seq$0)},
             _bpE_=caml_call1(f,item);
            return caml_call2(Monad[22],_bpE_,_bpD_)}
          return return_empty}
        function filter_map_es(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpy_=
              function(param)
               {if(param)
                 {var
                   item=param[1],
                   _bpA_=
                    function(seq)
                     {function _bpC_(param){return [0,item,seq]}
                      return caml_call1(Monad[14],_bpC_)},
                   _bpB_=_bpn_(f,seq$0);
                  return caml_call2(Monad[22],_bpB_,_bpA_)}
                return _bpn_(f,seq$0)},
             _bpz_=apply(f,item);
            return caml_call2(Monad[22],_bpz_,_bpy_)}
          return return_empty}
        function find(f,seq)
         {var seq$0=seq;
          for(;;)
           {var match=caml_call1(seq$0,0);
            if(match)
             {var seq$1=match[2],item=match[1];
              if(caml_call1(f,item))return [0,item];
              var seq$0=seq$1;
              continue}
            return 0}}
        function find_e(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpw_=
              function(param)
               {return 0 === param?find_e(f,seq$0):caml_call1(Monad[7],item)},
             _bpx_=caml_call1(f,item);
            return caml_call2(Monad[12],_bpx_,_bpw_)}
          return Monad[6]}
        function _bpo_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpv_=
              function(param)
               {return 0 === param?_bpo_(f,seq$0):return_some(item)};
            return symbol_bind(caml_call1(f,item),_bpv_)}
          return return_none}
        function find_s(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpu_=
              function(param)
               {return 0 === param?_bpo_(f,seq$0):return_some(item)};
            return symbol_bind(apply(f,item),_bpu_)}
          return return_none}
        function _bpp_(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bps_=
              function(param)
               {return 0 === param?_bpp_(f,seq$0):caml_call1(Monad[17],item)},
             _bpt_=caml_call1(f,item);
            return caml_call2(Monad[22],_bpt_,_bps_)}
          return Monad[16]}
        function find_es(f,seq)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             item=match[1],
             _bpq_=
              function(param)
               {return 0 === param?_bpp_(f,seq$0):caml_call1(Monad[17],item)},
             _bpr_=apply(f,item);
            return caml_call2(Monad[22],_bpr_,_bpq_)}
          return Monad[16]}
        return [0,
                Monad,
                empty,
                return$0,
                map,
                filter,
                filter_map,
                flat_map,
                fold_left,
                iter,
                ok_empty,
                return_empty,
                ok_nil$1,
                return_nil,
                fold_left_e,
                fold_left_s,
                fold_left_es,
                iter_e,
                iter_s,
                iter_es,
                iter_p,
                iter_ep,
                map_e,
                map_s,
                map_es,
                map_p,
                map_ep,
                filter_e,
                filter_s,
                filter_es,
                filter_map_e,
                filter_map_s,
                filter_map_es,
                find,
                find_e,
                find_s,
                find_es]},
     Make$8=
      function(Seq)
       {function Make(Ord)
         {var
           Legacy=_au_(Ord),
           empty=Legacy[1],
           is_empty=Legacy[2],
           mem=Legacy[3],
           add=Legacy[4],
           update=Legacy[5],
           singleton=Legacy[6],
           remove=Legacy[7],
           merge=Legacy[8],
           union=Legacy[9],
           compare=Legacy[10],
           equal=Legacy[11],
           iter=Legacy[12],
           fold=Legacy[13],
           for_all=Legacy[14],
           exists=Legacy[15],
           filter=Legacy[16],
           partition=Legacy[17],
           cardinal=Legacy[18],
           bindings=Legacy[19],
           min_binding_opt=Legacy[21],
           max_binding_opt=Legacy[23],
           choose_opt=Legacy[25],
           split=Legacy[26],
           find_opt=Legacy[28],
           find_first_opt=Legacy[30],
           find_last_opt=Legacy[32],
           map=Legacy[33],
           mapi=Legacy[34],
           to_seq=Legacy[35],
           to_seq_from=Legacy[36],
           add_seq=Legacy[37],
           of_seq=Legacy[38];
          function iter_e(f,t)
           {var _bpc_=caml_call1(to_seq,t);
            function _bpd_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[17],_bpd_,_bpc_)}
          function iter_s(f,t)
           {var _bpa_=caml_call1(to_seq,t);
            function _bpb_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[18],_bpb_,_bpa_)}
          function iter_es(f,t)
           {var _bo__=caml_call1(to_seq,t);
            function _bo$_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[19],_bo$_,_bo__)}
          function iter_p(f,t)
           {var _bo8_=caml_call1(to_seq,t);
            function _bo9_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[20],_bo9_,_bo8_)}
          function iter_ep(f,t)
           {var _bo6_=caml_call1(to_seq,t);
            function _bo7_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[21],_bo7_,_bo6_)}
          function fold_e(f,t,init)
           {var _bo4_=caml_call1(to_seq,t);
            function _bo5_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[14],_bo5_,init,_bo4_)}
          function fold_s(f,t,init)
           {var _bo2_=caml_call1(to_seq,t);
            function _bo3_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[15],_bo3_,init,_bo2_)}
          function fold_es(f,t,init)
           {var _bo0_=caml_call1(to_seq,t);
            function _bo1_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[16],_bo1_,init,_bo0_)}
          return [0,
                  Legacy,
                  empty,
                  is_empty,
                  mem,
                  add,
                  update,
                  singleton,
                  remove,
                  merge,
                  union,
                  compare,
                  equal,
                  iter,
                  iter_e,
                  iter_s,
                  iter_p,
                  iter_es,
                  iter_ep,
                  fold,
                  fold_e,
                  fold_s,
                  fold_es,
                  for_all,
                  exists,
                  filter,
                  partition,
                  cardinal,
                  bindings,
                  min_binding_opt,
                  max_binding_opt,
                  choose_opt,
                  split,
                  find_opt,
                  find_first_opt,
                  find_last_opt,
                  map,
                  mapi,
                  to_seq,
                  to_seq_from,
                  add_seq,
                  of_seq]}
        return [0,Make]},
     Make$9=
      function(Seq)
       {function hash_param(meaningful,total,v)
         {return caml_hash(meaningful,total,0,v)}
        var seeded_hash_param=caml_hash;
        function Make$0(H)
         {var
           Legacy=Make(H),
           create=Legacy[1],
           clear=Legacy[2],
           reset=Legacy[3],
           add=Legacy[5],
           remove=Legacy[6],
           find_opt=Legacy[8],
           find_all=Legacy[9],
           replace=Legacy[10],
           mem=Legacy[11],
           iter=Legacy[12],
           filter_map_inplace=Legacy[13],
           fold=Legacy[14],
           length=Legacy[15],
           stats=Legacy[16],
           to_seq=Legacy[17],
           to_seq_keys=Legacy[18],
           to_seq_values=Legacy[19],
           add_seq=Legacy[20],
           replace_seq=Legacy[21],
           of_seq=Legacy[22];
          function iter_e(f,t)
           {var _boY_=caml_call1(to_seq,t);
            function _boZ_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[17],_boZ_,_boY_)}
          function iter_s(f,t)
           {var _boW_=caml_call1(to_seq,t);
            function _boX_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[18],_boX_,_boW_)}
          function iter_es(f,t)
           {var _boU_=caml_call1(to_seq,t);
            function _boV_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[19],_boV_,_boU_)}
          function iter_p(f,t)
           {var _boS_=caml_call1(to_seq,t);
            function _boT_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[20],_boT_,_boS_)}
          function iter_ep(f,t)
           {var _boQ_=caml_call1(to_seq,t);
            function _boR_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[21],_boR_,_boQ_)}
          function fold_e(f,t,init)
           {var _boO_=caml_call1(to_seq,t);
            function _boP_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[14],_boP_,init,_boO_)}
          function fold_s(f,t,init)
           {var _boM_=caml_call1(to_seq,t);
            function _boN_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[15],_boN_,init,_boM_)}
          function fold_es(f,t,init)
           {var _boK_=caml_call1(to_seq,t);
            function _boL_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[16],_boL_,init,_boK_)}
          function try_map_inplace(f,t)
           {return caml_call2
                    (filter_map_inplace,
                     function(k,v)
                      {var match=caml_call2(f,k,v);
                       if(0 === match[0]){var r=match[1];return [0,r]}
                       return 0},
                     t)}
          return [0,
                  Legacy,
                  create,
                  clear,
                  reset,
                  add,
                  remove,
                  find_opt,
                  find_all,
                  replace,
                  mem,
                  iter,
                  iter_s,
                  iter_p,
                  iter_e,
                  iter_es,
                  iter_ep,
                  filter_map_inplace,
                  try_map_inplace,
                  fold,
                  fold_s,
                  fold_e,
                  fold_es,
                  length,
                  stats,
                  to_seq,
                  to_seq_keys,
                  to_seq_values,
                  add_seq,
                  replace_seq,
                  of_seq]}
        function MakeSeeded$0(H)
         {var
           Legacy=MakeSeeded(H),
           create=Legacy[1],
           clear=Legacy[2],
           reset=Legacy[3],
           add=Legacy[5],
           remove=Legacy[6],
           find_opt=Legacy[8],
           find_all=Legacy[9],
           replace=Legacy[10],
           mem=Legacy[11],
           iter=Legacy[12],
           filter_map_inplace=Legacy[13],
           fold=Legacy[14],
           length=Legacy[15],
           stats=Legacy[16],
           to_seq=Legacy[17],
           to_seq_keys=Legacy[18],
           to_seq_values=Legacy[19],
           add_seq=Legacy[20],
           replace_seq=Legacy[21],
           of_seq=Legacy[22];
          function iter_e(f,t)
           {var _boI_=caml_call1(to_seq,t);
            function _boJ_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[17],_boJ_,_boI_)}
          function iter_s(f,t)
           {var _boG_=caml_call1(to_seq,t);
            function _boH_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[18],_boH_,_boG_)}
          function iter_es(f,t)
           {var _boE_=caml_call1(to_seq,t);
            function _boF_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[19],_boF_,_boE_)}
          function iter_p(f,t)
           {var _boC_=caml_call1(to_seq,t);
            function _boD_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[20],_boD_,_boC_)}
          function iter_ep(f,t)
           {var _boA_=caml_call1(to_seq,t);
            function _boB_(param)
             {var v=param[2],k=param[1];return caml_call2(f,k,v)}
            return caml_call2(Seq[21],_boB_,_boA_)}
          function fold_e(f,t,init)
           {var _boy_=caml_call1(to_seq,t);
            function _boz_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[14],_boz_,init,_boy_)}
          function fold_s(f,t,init)
           {var _bow_=caml_call1(to_seq,t);
            function _box_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[15],_box_,init,_bow_)}
          function fold_es(f,t,init)
           {var _bou_=caml_call1(to_seq,t);
            function _bov_(acc,param)
             {var v=param[2],k=param[1];return caml_call3(f,k,v,acc)}
            return caml_call3(Seq[16],_bov_,init,_bou_)}
          function try_map_inplace(f,t)
           {return caml_call2
                    (filter_map_inplace,
                     function(k,v)
                      {var match=caml_call2(f,k,v);
                       if(0 === match[0]){var r=match[1];return [0,r]}
                       return 0},
                     t)}
          return [0,
                  Legacy,
                  create,
                  clear,
                  reset,
                  add,
                  remove,
                  find_opt,
                  find_all,
                  replace,
                  mem,
                  iter,
                  iter_s,
                  iter_p,
                  iter_e,
                  iter_es,
                  iter_ep,
                  filter_map_inplace,
                  try_map_inplace,
                  fold,
                  fold_s,
                  fold_e,
                  fold_es,
                  length,
                  stats,
                  to_seq,
                  to_seq_keys,
                  to_seq_values,
                  add_seq,
                  replace_seq,
                  of_seq]}
        function Make_Lwt(H)
         {var T=Make(H);
          function create(n){return caml_call1(T[1],n)}
          function clear(t)
           {function _bot_(param,a){return cancel(a)}
            caml_call2(T[12],_bot_,t);
            return caml_call1(T[2],t)}
          function reset(t)
           {function _bos_(param,a){return cancel(a)}
            caml_call2(T[12],_bos_,t);
            return caml_call1(T[3],t)}
          function find_or_make(t,k,make)
           {var match=caml_call2(T[8],t,k);
            if(match){var a=match[1];return a}
            var match$0=apply(make,0),match$1=state(match$0);
            if(typeof match$1 === "number")
             {caml_call3(T[5],t,k,match$0);
              var
               g=function(param){return caml_call2(T[6],t,k)},
               f=function(param){return 0 === param[0]?0:caml_call2(T[6],t,k)},
               p=underlying(match$0),
               callback_if_deferred=
                function(param)
                 {var saved_storage=current_storage[1];
                  return function(result)
                   {if(1 === result[0])
                     {var exn=result[1];
                      current_storage[1] = saved_storage;
                      return handle_with_async_exception_ho(g,exn)}
                    var v=result[1];
                    current_storage[1] = saved_storage;
                    return handle_with_async_exception_ho(f,v)}},
               _bop_=p[1];
              switch(_bop_[0])
               {case 1:
                 var
                  exn=_bop_[1],
                  _bor_=
                   function(param)
                    {var callback=callback_if_deferred(0);
                     return [0,0,callback,p[1]]};
                 run_callback_or_defer_it
                  (_f5_,
                   function(param)
                    {return handle_with_async_exception_ho(g,exn)},
                   _bor_);
                 break;
                case 2:
                 var p_callbacks=_bop_[1],callback=callback_if_deferred(0);
                 add_implicitly_removed_callbac(p_callbacks,callback);
                 break;
                default:
                 var
                  v=_bop_[1],
                  _boq_=
                   function(param)
                    {var callback=callback_if_deferred(0);
                     return [0,0,callback,p[1]]};
                 run_callback_or_defer_it
                  (_f4_,
                   function(param){return handle_with_async_exception_ho(f,v)},
                   _boq_)}}
            else
             if(0 === match$1[0] && 0 === match$1[1][0])
              caml_call3(T[5],t,k,match$0);
            return match$0}
          function find(t,k){return caml_call2(T[8],t,k)}
          function remove(t,k)
           {var match=caml_call2(T[8],t,k);
            if(match){var a=match[1];cancel(a)}
            return caml_call2(T[6],t,k)}
          function mem(t,k){return caml_call2(T[11],t,k)}
          function iter_with_waiting_es(f,t)
           {var _bol_=caml_call1(T[17],t);
            function _bom_(param)
             {var p=param[2],k=param[1];
              function _bon_(param){return Seq[1][15]}
              function _boo_(param)
               {if(0 === param[0]){var v=param[1];return caml_call2(f,k,v)}
                return Seq[1][15]}
              return try_bind(function(param){return p},_boo_,_bon_)}
            return caml_call2(Seq[19],_bom_,_bol_)}
          function iter_with_waiting_ep(f,t)
           {var _boh_=caml_call1(T[17],t);
            function _boi_(param)
             {var p=param[2],k=param[1];
              function _boj_(param){return Seq[1][15]}
              function _bok_(param)
               {if(0 === param[0]){var v=param[1];return caml_call2(f,k,v)}
                return Seq[1][15]}
              return try_bind(function(param){return p},_bok_,_boj_)}
            return caml_call2(Seq[21],_boi_,_boh_)}
          function fold_with_waiting_es(f,t,init)
           {var _bod_=caml_call1(T[17],t);
            function _boe_(acc,param)
             {var p=param[2],k=param[1];
              function _bof_(param){return caml_call1(Seq[1][14],acc)}
              function _bog_(param)
               {if(0 === param[0])
                 {var v=param[1];return caml_call3(f,k,v,acc)}
                return caml_call1(Seq[1][14],acc)}
              return try_bind(function(param){return p},_bog_,_bof_)}
            return caml_call3(Seq[16],_boe_,init,_bod_)}
          function fold_keys(f,t,init)
           {function _boc_(k,param,acc){return caml_call2(f,k,acc)}
            return caml_call3(T[14],_boc_,t,init)}
          function fold_promises(f,t,init){return caml_call3(T[14],f,t,init)}
          function fold_resolved(f,t,init)
           {function _boa_(k,p,acc)
             {var match=state(p);
              if(typeof match !== "number" && 0 === match[0])
               {var _bob_=match[1];
                if(0 === _bob_[0])
                 {var v=_bob_[1];return caml_call3(f,k,v,acc)}}
              return acc}
            return caml_call3(T[14],_boa_,t,init)}
          function length(t){return caml_call1(T[15],t)}
          function stats(t){return caml_call1(T[16],t)}
          return [0,
                  create,
                  clear,
                  reset,
                  find_or_make,
                  remove,
                  find,
                  mem,
                  iter_with_waiting_es,
                  iter_with_waiting_ep,
                  fold_with_waiting_es,
                  fold_keys,
                  fold_promises,
                  fold_resolved,
                  length,
                  stats]}
        return [0,
                hash,
                seeded_hash,
                hash_param,
                seeded_hash_param,
                Make$0,
                MakeSeeded$0,
                Make_Lwt]},
     make$3=Trace[1],
     cons$1=Trace[2],
     conp$0=Trace[3],
     include$2=
      Make$7
       ([0,
         make$3,
         cons$1,
         conp$0,
         ok,
         ok_unit$0,
         ok_none$0,
         ok_some,
         ok_nil$0,
         ok_true$0,
         ok_false$0,
         error,
         symbol$11,
         symbol$12,
         return$3,
         return_unit$0,
         return_none$0,
         return_some$0,
         return_nil,
         return_true,
         return_false,
         fail$1,
         symbol$13,
         symbol$14,
         symbol$15,
         symbol$16,
         join_e,
         all_e,
         both_e,
         join_p$0,
         all_p$0,
         both_p$0,
         join_ep,
         all_ep,
         both_ep]),
     Monad$0=include$2[1],
     empty$3=include$2[2],
     return$4=include$2[3],
     map$4=include$2[4],
     filter$0=include$2[5],
     filter_map$1=include$2[6],
     flat_map$0=include$2[7],
     fold_left$3=include$2[8],
     iter$4=include$2[9],
     ok_empty=include$2[10],
     return_empty=include$2[11],
     ok_nil$2=include$2[12],
     return_nil$0=include$2[13],
     fold_left_e=include$2[14],
     fold_left_s$0=include$2[15],
     fold_left_es=include$2[16],
     iter_e=include$2[17],
     iter_s$0=include$2[18],
     iter_es=include$2[19],
     iter_p=include$2[20],
     iter_ep=include$2[21],
     map_e=include$2[22],
     map_s$0=include$2[23],
     map_es=include$2[24],
     map_p=include$2[25],
     map_ep=include$2[26],
     filter_e=include$2[27],
     filter_s=include$2[28],
     filter_es=include$2[29],
     filter_map_e=include$2[30],
     filter_map_s=include$2[31],
     filter_map_es=include$2[32],
     find$2=include$2[33],
     find_e=include$2[34],
     find_s=include$2[35],
     find_es=include$2[36],
     _zS_=
      [0,
       Monad$0,
       empty$3,
       return$4,
       map$4,
       filter$0,
       filter_map$1,
       flat_map$0,
       fold_left$3,
       iter$4,
       ok_empty,
       return_empty,
       ok_nil$2,
       return_nil$0,
       fold_left_e,
       fold_left_s$0,
       fold_left_es,
       iter_e,
       iter_s$0,
       iter_es,
       iter_p,
       iter_ep,
       map_e,
       map_s$0,
       map_es,
       map_p,
       map_ep,
       filter_e,
       filter_s,
       filter_es,
       filter_map_e,
       filter_map_s,
       filter_map_es,
       find$2,
       find_e,
       find_s,
       find_es],
     include$3=Make$6(_zS_),
     Make$10=include$3[1],
     include$4=Make$8(_zS_),
     Make$11=include$4[1],
     include$5=Make$9(_zS_),
     hash$0=include$5[1],
     hash$1=include$5[2],
     Make$12=include$5[5],
     MakeSeeded$0=include$5[6],
     Make_Lwt=include$5[7],
     bool_of_string=
      function(s)
       {var match=f(s);
        if
         (caml_string_notequal(match,_zT_)
          &&
          caml_string_notequal(match,_zU_)
          &&
          caml_string_notequal(match,_zV_)
          &&
          caml_string_notequal(match,_zW_))
         {if
           (caml_string_notequal(match,_zX_)
            &&
            caml_string_notequal(match,_zY_)
            &&
            caml_string_notequal(match,_zZ_)
            &&
            caml_string_notequal(match,_z0_))
           return _z1_;
          return _z2_}
        return _z3_},
     string_of_meth=
      function(param)
       {return num_3997359 === param
                ?_z4_
                :num_891112544 <= param
                  ?num_994393768 <= param?_z5_:_z6_
                  :num_492530731 <= param?_z7_:_z8_},
     meth_of_string=
      function(param)
       {return caml_string_notequal(param,_z9_)
                ?caml_string_notequal(param,_z__)
                  ?caml_string_notequal(param,_z$_)
                    ?caml_string_notequal(param,_Aa_)
                      ?caml_string_notequal(param,_Ab_)?0:_Ac_
                      :_Ad_
                    :_Ae_
                  :_Af_
                :_Ag_},
     compare$9=caml_compare,
     MethMap=_au_([0,compare$9]),
     StringMap=_au_([0,compare_decoded]),
     Not_equal=[num_248,_Ah_,caml_fresh_oo_id(0)],
     new_id=
      function(param)
       {var Ty=[num_248,_Ai_,caml_fresh_oo_id(0)];
        function eq(param){if(param === Ty)return 0;throw Not_equal}
        return [0,Ty,eq]},
     eq=function(TyA,TyB){return caml_call1(TyB[2],TyA[1])},
     from_arg=function(x){return x},
     to_arg=function(x){return x},
     subst0=
      function(param)
       {if(typeof param === "number")
         return 0;
        else
         switch(param[0])
          {case 0:
            var name=param[2],path=param[1];return [0,subst0(path),name];
           case 1:throw [0,Assert_failure,_Aj_];
           default:throw [0,Assert_failure,_Ak_]}},
     subst1=
      function(param)
       {if(typeof param === "number")
         throw [0,Assert_failure,_Al_];
        else
         switch(param[0])
          {case 0:
            var name=param[2],path=param[1];return [0,subst1(path),name];
           case 1:
            var arg=param[2],path$0=param[1];return [1,subst0(path$0),arg];
           default:
            var arg$0=param[2],path$1=param[1];return [2,subst0(path$1),arg$0]}},
     subst2=
      function(param)
       {if(typeof param === "number")
         throw [0,Assert_failure,_Am_];
        else
         switch(param[0])
          {case 0:
            var name=param[2],path=param[1];return [0,subst2(path),name];
           case 1:
            var arg=param[2],path$0=param[1];return [1,subst1(path$0),arg];
           default:
            var arg$0=param[2],path$1=param[1];return [2,subst1(path$1),arg$0]}},
     subst3=
      function(param)
       {if(typeof param === "number")
         throw [0,Assert_failure,_An_];
        else
         switch(param[0])
          {case 0:
            var name=param[2],path=param[1];return [0,subst3(path),name];
           case 1:
            var arg=param[2],path$0=param[1];return [1,subst2(path$0),arg];
           default:
            var arg$0=param[2],path$1=param[1];return [2,subst2(path$1),arg$0]}},
     from_path=function(x){return x},
     to_path=function(x){return x},
     field_name=
      function(param)
       {switch(param[0])
         {case 0:var name=param[1];return name;
          case 1:var name$0=param[1];return name$0;
          case 2:var name$1=param[1];return name$1;
          default:var name$2=param[1];return name$2}},
     field_description=
      function(param)
       {switch(param[0])
         {case 0:var description=param[2];return description;
          case 1:var description$0=param[2];return description$0;
          case 2:var description$1=param[2];return description$1;
          default:var description$2=param[2];return description$2}},
     field_kind=
      function(param)
       {switch(param[0])
         {case 0:var ty=param[3];return [0,ty[4]];
          case 1:var ty$0=param[3];return [1,ty$0[4]];
          case 2:return 0;
          default:var ty$1=param[3];return [2,ty$1[4]]}},
     from_query=function(x){return x},
     to_query=function(x){return x},
     make$4=
      function(descr,name,destruct,construct,param)
       {var id=new_id(0),descr$0=[0,name,descr];
        return [0,id,destruct,construct,descr$0]},
     like=
      function(arg,descr,name)
       {var _bn__=arg[3],_bn$_=arg[2];
        return [0,new_id(0),_bn$_,_bn__,[0,name,descr]]},
     destruct$2=function(param){return _Ao_},
     construct$2=function(param){return _Ap_};
    make$4(0,_Aq_,destruct$2,construct$2,0);
    var
     string_of_bool=function(param){return 0 === param?_Ar_:_As_},
     bool$4=make$4(0,_At_,bool_of_string,string_of_bool,0),
     int_of_string=
      function(s)
       {try
         {var _bn8_=[0,caml_int_of_string(s)];return _bn8_}
        catch(_bn9_)
         {_bn9_ = caml_wrap_exception(_bn9_);
          if(_bn9_[1] === Failure)return _Au_;
          throw _bn9_}},
     int$4=make$4(0,_Av_,int_of_string,construct,0),
     float_of_string=
      function(s)
       {try
         {var _bn6_=[0,caml_float_of_string(s)];return _bn6_}
        catch(_bn7_)
         {_bn7_ = caml_wrap_exception(_bn7_);
          if(_bn7_[1] === Failure)return _Aw_;
          throw _bn7_}};
    make$4(0,_Ax_,float_of_string,of_float,0);
    var
     int32_of_string=
      function(s)
       {try
         {var _bn4_=[0,caml_int_of_string(s)];return _bn4_}
        catch(_bn5_)
         {_bn5_ = caml_wrap_exception(_bn5_);
          if(_bn5_[1] === Failure)return _Ay_;
          throw _bn5_}};
    make$4(0,_Az_,int32_of_string,of_int32,0);
    var
     int64_of_string=
      function(s)
       {try
         {var _bn2_=[0,caml_int64_of_string(s)];return _bn2_}
        catch(_bn3_)
         {_bn3_ = caml_wrap_exception(_bn3_);
          if(_bn3_[1] === Failure)return _AA_;
          throw _bn3_}};
    make$4(0,_AB_,int64_of_string,of_int64,0);
    var
     _AC_=0,
     _AD_=function(x){return x},
     string$2=make$4(0,_AE_,function(x){return [0,x]},_AD_,_AC_),
     root$0=0,
     p=0,
     symbol$17=
      function(path,name)
       {if(typeof path !== "number" && 2 === path[0])return invalid_arg(_AF_);
        return [0,path,name]},
     symbol$18=
      function(path,arg)
       {if(typeof path !== "number" && 2 === path[0])return invalid_arg(_AG_);
        return [1,path,arg]},
     symbol$19=
      function(path,arg)
       {if(typeof path !== "number" && 2 === path[0])return invalid_arg(_AH_);
        return [2,path,arg]},
     prefix=
      function(p1,p2)
       {function prefix(p1,p2)
         {if(typeof p2 === "number")
           return p1;
          else
           switch(p2[0])
            {case 0:
              var name=p2[2],path=p2[1];
              return symbol$17(prefix(p1,path),name);
             case 1:
              var arg=p2[2],path$0=p2[1];
              return symbol$18(prefix(p1,path$0),arg);
             default:
              var arg$0=p2[2],path$1=p2[1];
              return symbol$19(prefix(p1,path$1),arg$0)}}
        if(typeof p1 !== "number" && 2 === p1[0])return invalid_arg(_AI_);
        return prefix(p1,p2)},
     symbol$20=
      function(r,f,fs)
       {var match=caml_call1(r,[0,f,fs]),fs$0=match[2],c=match[1];
        return [0,c,fs$0]},
     seal=
      function(r)
       {var match=caml_call1(r,0),fs=match[2],c=match[1];return [0,fs,c]};
    caml_fresh_oo_id(0);
    var
     _AK_=[0,_AJ_,0,bool$4,0,function(t){return t[1]}],
     _AL_=function(recurse){return [0,recurse]},
     _AM_=function(_bn1_){return [0,_AL_,_bn1_]},
     request_query=seal(function(_bn0_){return symbol$20(_AM_,_AK_,_bn0_)}),
     _AT_=
      function(Encoding)
       {function from_service(x){return x}
        function to_service(x){return x}
        var Not_equal=[num_248,_AN_,caml_fresh_oo_id(0)];
        function eq(x,y){if(x === y)return 0;throw Not_equal}
        function get_service(description,query,output,error,path)
         {return [0,description,num_3546230,path,[0,query,0,output,error]]}
        function post_service(description,query,input,output,error,path)
         {var input$0=[0,input];
          return [0,
                  description,
                  num_891112544,
                  path,
                  [0,query,input$0,output,error]]}
        function delete_service(description,query,output,error,path)
         {return [0,description,num_492530731,path,[0,query,0,output,error]]}
        function put_service(description,query,input,output,error,path)
         {var input$0=[0,input];
          return [0,
                  description,
                  num_3997359,
                  path,
                  [0,query,input$0,output,error]]}
        function patch_service(description,query,input,output,error,path)
         {var input$0=[0,input];
          return [0,
                  description,
                  num_994393768,
                  path,
                  [0,query,input$0,output,error]]}
        function prefix$0(path,s)
         {var _bnY_=s[4],_bnZ_=prefix(path,s[3]);
          return [0,s[1],s[2],_bnZ_,_bnY_]}
        function subst0$0(s)
         {var _bnW_=s[4],_bnX_=subst0(s[3]);return [0,s[1],s[2],_bnX_,_bnW_]}
        function subst1$0(s)
         {var _bnU_=s[4],_bnV_=subst1(s[3]);return [0,s[1],s[2],_bnV_,_bnU_]}
        function subst2$0(s)
         {var _bnS_=s[4],_bnT_=subst2(s[3]);return [0,s[1],s[2],_bnT_,_bnS_]}
        function subst3$0(s)
         {var _bnQ_=s[4],_bnR_=subst3(s[3]);return [0,s[1],s[2],_bnR_,_bnQ_]}
        function meth(param){var meth=param[2];return meth}
        function query(param){var types=param[4];return types[1]}
        function input_encoding(param){var types=param[4];return types[2]}
        function output_encoding(param){var types=param[4];return types[3]}
        function error_encoding(param){var types=param[4];return types[4]}
        function description_service(description,error,path)
         {if(description)
           var descr=description[1],description$0=descr;
          else
           var description$0=_AO_;
          var _bnP_=symbol$19(path,string$2);
          return get_service
                  ([0,description$0],request_query,Encoding[6],error,_bnP_)}
        function forge_partial_request(s,opt,args$2,q)
         {if(opt)var sth=opt[1],uri$0=sth;else var uri$0=empty$1;
          var path$0=s[3],args=args$2,acc=0;
          for(;;)
           if(typeof path$0 === "number")
            {var
              path$4=concat$0(_AQ_,acc),
              prefix=path(0,uri$0),
              prefixed_path=
               caml_string_equal(prefix,_AR_)
                ?path$4
                :symbol(prefix,symbol(_AS_,path$4)),
              uri$1=with_path(uri$0,prefixed_path),
              fields=s[4][1][1],
              loop=
               function(param)
                {var param$0=param;
                 for(;;)
                  {if(param$0)
                    {var _bnK_=param$0[1];
                     switch(_bnK_[0])
                      {case 0:
                        var
                         fields=param$0[2],
                         get=_bnK_[5],
                         ty=_bnK_[3],
                         name=_bnK_[1],
                         _bnL_=loop(fields),
                         _bnM_=caml_call1(get,q);
                        return [0,[0,name,caml_call1(ty[3],_bnM_)],_bnL_];
                       case 1:
                        var
                         fields$0=param$0[2],
                         get$0=_bnK_[4],
                         ty$0=_bnK_[3],
                         name$0=_bnK_[1],
                         match=caml_call1(get$0,q);
                        if(match)
                         {var v=match[1],_bnN_=loop(fields$0);
                          return [0,[0,name$0,caml_call1(ty$0[3],v)],_bnN_]}
                        var param$0=fields$0;
                        continue;
                       case 2:
                        var
                         fields$1=param$0[2],
                         get$1=_bnK_[3],
                         name$1=_bnK_[1],
                         match$0=caml_call1(get$1,q);
                        if(0 === match$0){var param$0=fields$1;continue}
                        return [0,[0,name$1,_AP_],loop(fields$1)];
                       default:
                        var
                         fields$2=param$0[2],
                         get$2=_bnK_[4],
                         ty$1=_bnK_[3],
                         name$2=_bnK_[1],
                         l=caml_call1(get$2,q);
                        if(l)
                         {var _bnO_=loop(fields$2);
                          return fold_right
                                  (function(v,acc)
                                    {return [0,[0,name$2,caml_call1(ty$1[3],v)],acc]},
                                   l,
                                   _bnO_)}
                        var param$0=fields$2;
                        continue}}
                   return 0}},
              query=loop(fields),
              uri=
               with_query
                (uri$1,
                 map$1
                  (function(param)
                    {var v=param[2],k=param[1];return [0,k,[0,v,0]]},
                   query));
             return [0,s[2],uri,s[4][2]]}
           else
            switch(path$0[0])
             {case 0:
               var
                name=path$0[2],
                path$1=path$0[1],
                acc$0=[0,name,acc],
                path$0=path$1,
                acc=acc$0;
               continue;
              case 1:
               var
                x=args[2],
                args$0=args[1],
                arg=path$0[2],
                path$2=path$0[1],
                acc$1=[0,caml_call1(arg[3],x),acc],
                path$0=path$2,
                args=args$0,
                acc=acc$1;
               continue;
              default:
               var
                xs=args[2],
                args$1=args[1],
                arg$0=path$0[2],
                path$3=path$0[1],
                acc$2=
                 fold_right
                  (function(arg)
                     {return function(x,acc){return [0,caml_call1(arg[3],x),acc]}}
                    (arg$0),
                   xs,
                   acc),
                path$0=path$3,
                args=args$1,
                acc=acc$2;
               continue}}
        return [0,
                meth,
                query,
                input_encoding,
                output_encoding,
                error_encoding,
                get_service,
                post_service,
                delete_service,
                patch_service,
                put_service,
                prefix$0,
                subst0$0,
                subst1$0,
                subst2$0,
                subst3$0,
                description_service,
                forge_partial_request,
                forge_partial_request,
                [0,
                 from_arg,
                 to_arg,
                 from_path,
                 to_path,
                 from_query,
                 to_query,
                 field_name,
                 field_description,
                 field_kind,
                 Not_equal,
                 eq,
                 from_service,
                 to_service]]},
     _Bb_=
      function(Encoding)
       {var Service=_AT_(Encoding);
        function _blB_(c,f)
         {if(c)
           {var c$0=c[1];
            return function(param)
             {var x=param[2],v=param[1];
              return caml_call1(_blB_(c$0,caml_call1(f,v)),x)}}
          return function(param){return f}}
        function curry(c,f)
         {var f$0=_blB_(c,f);
          return function(v$1)
           {var c$0=c,v=v$1,acc=0;
            for(;;)
             {if(c$0)
               {var
                 x=v[2],
                 v$0=v[1],
                 c$1=c$0[1],
                 acc$0=[0,x,acc],
                 c$0=c$1,
                 v=v$0,
                 acc=acc$0;
                continue}
              return caml_call1(f$0,acc)}}}
        var Conflict=[num_248,_AU_,caml_fresh_oo_id(0)],empty=0;
        function map_directory(f,t)
         {if(typeof t === "number")
           return 0;
          else
           switch(t[0])
            {case 0:
              var dir=t[1],_bny_=dir[2];
              if(_bny_)
               {var x=_bny_[1];
                if(0 === x[0])
                 var
                  map=x[1],
                  _bnC_=function(_bnH_){return map_directory(f,_bnH_)},
                  _bnx_=[0,caml_call2(StringMap[33],_bnC_,map)];
                else
                 var
                  dir$1=x[2],
                  arg$0=x[1],
                  dir$2=
                   map_directory
                    (function(param)
                      {var x=param[2],a=param[1];
                       function _bnI_(a){return [0,a,x]}
                       return symbol$2(caml_call1(f,a),_bnI_)},
                     dir$1),
                  _bnx_=[1,arg$0,dir$2];
                var _bnz_=[0,_bnx_]}
              else
               var _bnz_=0;
              var
               _bnA_=dir[1],
               _bnB_=
                function(rs)
                 {function _bnF_(p)
                   {function _bnG_(p){return caml_call1(rs[3],p)}
                    return symbol_bind(caml_call1(f,p),_bnG_)}
                  return [0,rs[1],rs[2],_bnF_]};
              return [0,[0,caml_call2(MethMap[33],_bnB_,_bnA_),_bnz_]];
             case 1:
              var
               builder=t[2],
               descr=t[1],
               builder$0=
                function(a)
                 {function _bnD_(_bnE_){return map_directory(f,_bnE_)}
                  return symbol$2(symbol_bind(caml_call1(f,a),builder),_bnD_)};
              return [1,descr,builder$0];
             default:
              var dir$0=t[2],arg=t[1];
              return [2,
                      arg,
                      map_directory
                       (function(param)
                         {var l=param[2],x=param[1];
                          function _bnJ_(x){return [0,x,l]}
                          return symbol$2(caml_call1(f,x),_bnJ_)},
                        dir$0)]}}
        function prefix(path,dir)
         {var path$0=path,dir$0=dir;
          for(;;)
           if(typeof path$0 === "number")
            return dir$0;
           else
            switch(path$0[0])
             {case 0:
               var
                name=path$0[2],
                path$1=path$0[1],
                subdirs=[0,caml_call2(StringMap[6],name,dir$0)],
                dir$1=[0,[0,MethMap[1],[0,subdirs]]],
                path$0=path$1,
                dir$0=dir$1;
               continue;
              case 1:
               var
                arg=path$0[2],
                path$2=path$0[1],
                subdirs$0=[1,arg,dir$0],
                dir$2=[0,[0,MethMap[1],[0,subdirs$0]]],
                path$0=path$2,
                dir$0=dir$2;
               continue;
              default:return invalid_arg(_AV_)}}
        function _blC_(steps,kind){throw [0,Conflict,steps,kind]}
        function merge_static_directory(path,t1,t2)
         {var _bm__=t1[2],_bm$_=t2[2],switch$0=0;
          if(_bm__)
           {var _bna_=_bm__[1];
            if(_bm$_)
             {var d2=_bm$_[1];
              if(0 === _bna_[0])
               {var _bnb_=_bna_[1];
                if(0 === d2[0])
                 var
                  m2=d2[1],
                  _bnc_=
                   function(n,t,m)
                    {try
                      {var _bns_=caml_call2(StringMap[27],n,m),st=_bns_}
                     catch(_bnt_)
                      {_bnt_ = caml_wrap_exception(_bnt_);
                       if(_bnt_ !== Not_found)throw _bnt_;
                       var st=empty}
                     var _bnr_=_blD_([0,[0,n],path],st,t);
                     return caml_call3(StringMap[4],n,_bnr_,m)},
                  merge=caml_call1(StringMap[13],_bnc_),
                  _bnd_=[0,[0,caml_call2(merge,_bnb_,m2)]];
                else
                 var
                  arg=d2[1],
                  _bni_=caml_call1(StringMap[19],_bnb_),
                  _bnj_=map$1(function(_bnu_){return _bnu_[1]},_bni_),
                  _bnd_=_blC_(path,[2,arg[4],_bnj_]);
                var _bne_=_bnd_}
              else
               {var _bnl_=_bna_[1],_bnk_=_bna_[2];
                if(0 === d2[0])
                 var
                  m=d2[1],
                  _bnm_=caml_call1(StringMap[19],m),
                  _bnn_=map$1(function(_bnv_){return _bnv_[1]},_bnm_),
                  _bno_=_blC_(path,[2,_bnl_[4],_bnn_]);
                else
                 {var subt2=d2[2],arg2=d2[1];
                  try
                   {eq(_bnl_[1],arg2[1]);
                    var
                     subt=_blD_([0,[1,_bnl_[4]],path],_bnk_,subt2),
                     _bnq_=[0,[1,_bnl_,subt]],
                     _bnp_=_bnq_}
                  catch(_bnw_)
                   {_bnw_ = caml_wrap_exception(_bnw_);
                    if(_bnw_ !== Not_equal)throw _bnw_;
                    var _bnp_=_blC_(path,[1,_bnl_[4],arg2[4]])}
                  var _bno_=_bnp_}
                var _bne_=_bno_}
              var subdirs=_bne_}
            else
             {var dir=_bna_;switch$0 = 1}}
          else
           if(_bm$_){var dir=_bm$_[1];switch$0 = 1}else var subdirs=0;
          if(switch$0)var subdirs=[0,dir];
          var _bnf_=t2[1],_bng_=t1[1];
          function _bnh_(meth,s,map)
           {return caml_call2(MethMap[3],meth,map)
                    ?_blC_(path,[0,meth])
                    :caml_call3(MethMap[4],meth,s,map)}
          var services=caml_call3(MethMap[13],_bnh_,_bng_,_bnf_);
          return [0,services,subdirs]}
        function _blD_(path,t1,match)
         {var switch$0=0;
          if(typeof t1 === "number")
           return match;
          else
           if(0 === t1[0])
            {var switch$1=0,_bm9_=t1[1];
             if(typeof match !== "number")
              switch(match[0])
               {case 1:break;
                case 0:
                 var n2=match[1];
                 return [0,merge_static_directory(path,_bm9_,n2)];
                default:switch$0 = 1;switch$1 = 1}}
          if(! switch$0)
           {var switch$2=0;
            if(typeof match === "number")
             return t1;
            else
             if(1 !== match[0] && typeof t1 !== "number" && 2 === t1[0])
              switch$2 = 1;
            if(! switch$2)return _blC_(path,1)}
          return _blC_(path,2)}
        function merge(x,y){return _blD_(0,x,y)}
        function describe_directory(recurse,arg,dir)
         {var arg$0=arg,dir$0=dir;
          for(;;)
           if(typeof dir$0 === "number")
            return return$1(0);
           else
            switch(dir$0[0])
             {case 0:
               var
                dir$1=dir$0[1],
                _bmW_=function(dir){return return$1([0,dir])},
                services=caml_call2(MethMap[33],describe_service,dir$1[1]),
                _bmY_=function(subdirs){return return$1([0,services,subdirs])};
               if(recurse)
                {var _bmZ_=dir$1[2];
                 if(_bmZ_)
                  {var
                    subdirs=_bmZ_[1],
                    _bm0_=function(dirs){return return$1([0,dirs])};
                   if(0 === subdirs[0])
                    var
                     map=subdirs[1],
                     _bm4_=function(map){return return$1([0,map])},
                     _bm5_=return$1(StringMap[1]),
                     _bm6_=
                      function(key,dir,map)
                       {return symbol_bind
                                (map,
                                 function(map)
                                  {function _bm8_(dir)
                                    {return return$1(caml_call3(StringMap[4],key,dir,map))}
                                   return symbol_bind(describe_directory(1,0,dir),_bm8_)})},
                     _bm1_=
                      symbol_bind(caml_call3(StringMap[13],_bm6_,map,_bm5_),_bm4_);
                   else
                    var
                     dir$3=subdirs[2],
                     arg$2=subdirs[1],
                     _bm7_=function(dir){return return$1([1,arg$2[4],dir])},
                     _bm1_=symbol_bind(describe_directory(1,0,dir$3),_bm7_);
                   var _bm2_=symbol_bind(_bm1_,_bm0_)}
                 else
                  var _bm2_=return_none;
                 var _bm3_=_bm2_}
               else
                var _bm3_=return_none;
               return symbol_bind(symbol_bind(_bm3_,_bmY_),_bmW_);
              case 1:
               var builder=dir$0[2],descr=dir$0[1];
               if(arg$0)
                {var
                  arg$1=arg$0[1],
                  _bmX_=
                   function(dir){return describe_directory(recurse,0,dir)};
                 return symbol_bind(caml_call1(builder,arg$1),_bmX_)}
               return return$1([1,descr]);
              default:var dir$2=dir$0[2],arg$0=0,dir$0=dir$2;continue}}
        function describe_service(param)
         {var description=param[2];return description}
        function resolve(prefix,dir,args,path)
         {var prefix$0=prefix,dir$0=dir,args$0=args,path$0=path;
          for(;;)
           if(typeof dir$0 === "number")
            return return_error(num_358247754);
           else
            switch(dir$0[0])
             {case 0:
               if(path$0)
                {var _bmM_=dir$0[1][2],_bmN_=path$0[2],_bmO_=path$0[1];
                 if(_bmM_)
                  {var _bmP_=_bmM_[1];
                   if(0 === _bmP_[0])
                    {var static$0=_bmP_[1];
                     try
                      {var dir$1=caml_call2(StringMap[27],_bmO_,static$0)}
                     catch(_bmU_)
                      {_bmU_ = caml_wrap_exception(_bmU_);
                       if(_bmU_ === Not_found)return return_error(num_358247754);
                       throw _bmU_;
                       var _bmT_=_bmU_}
                     var
                      prefix$1=[0,_bmO_,prefix$0],
                      prefix$0=prefix$1,
                      dir$0=dir$1,
                      path$0=_bmN_;
                     continue}
                   var
                    dir$2=_bmP_[2],
                    arg=_bmP_[1],
                    match=caml_call1(arg[2],_bmO_);
                   if(0 === match[0])
                    {var
                      x=match[1],
                      args$1=[0,args$0,x],
                      prefix$2=[0,_bmO_,prefix$0],
                      prefix$0=prefix$2,
                      dir$0=dir$2,
                      args$0=args$1,
                      path$0=_bmN_;
                     continue}
                   var msg=match[1],_bmQ_=arg[4];
                   return return_error
                           ([0,num_646135987,[0,rev([0,_bmO_,prefix$0]),_bmQ_,msg]])}
                 return return_error(num_358247754)}
               var sdir=dir$0[1];
               return return_ok([0,sdir,args$0]);
              case 1:
               var
                builder=dir$0[2],
                _bmR_=
                 function(dir){return resolve(prefix$0,dir,args$0,path$0)};
               return symbol_bind(caml_call1(builder,args$0),_bmR_);
              default:
               var
                dir$3=dir$0[2],
                arg$0=dir$0[1],
                _bmS_=[0,[0,prefix$0,0]],
                err=
                 fold_right
                  (function(arg)
                     {return function(e,acc)
                       {if(0 === acc[0])
                         {var
                           match=acc[1],
                           path=match[2],
                           prefix=match[1],
                           match$0=caml_call1(arg[2],e);
                          if(0 === match$0[0])
                           {var s=match$0[1];return [0,[0,[0,e,prefix],[0,s,path]]]}
                          var msg=match$0[1],_bmV_=arg[4];
                          return [1,[0,num_646135987,[0,rev([0,e,prefix]),_bmV_,msg]]]}
                        return acc}}
                    (arg$0),
                   path$0,
                   _bmS_);
               if(0 === err[0])
                {var
                  match$0=err[1],
                  path$1=match$0[2],
                  prefix$3=match$0[1],
                  args$2=[0,args$0,path$1],
                  prefix$0=prefix$3,
                  dir$0=dir$3,
                  args$0=args$2,
                  path$0=0;
                 continue}
               return return$1(err)}}
        function lookup(dir,args,meth,path)
         {function _bmJ_(err)
           {if(0 === err[0])
             {var match=err[1],args=match[2],dir=match[1];
              try
               {var rs=caml_call2(MethMap[27],meth,dir[1])}
              catch(_bmK_)
               {_bmK_ = caml_wrap_exception(_bmK_);
                if(_bmK_ === Not_found)
                 {var l=caml_call1(MethMap[19],dir[1]);
                  return l
                          ?return_error
                            ([0,num_13829438,map$1(function(_bmL_){return _bmL_[1]},l)])
                          :return_error(num_358247754)}
                throw _bmK_}
              return symbol_bind(caml_call1(rs[3],args),return_ok)}
            return return$1(err)}
          return symbol_bind(resolve(0,dir,args,path),_bmJ_)}
        function allowed_methods(dir,args,path)
         {function _bmH_(param)
           {if(0 === param[0])
             {var
               match=param[1],
               dir=match[1],
               l=caml_call1(MethMap[19],dir[1]);
              return l
                      ?return_ok(map$1(function(_bmI_){return _bmI_[1]},l))
                      :return_error(num_358247754)}
            var err=param[1];
            return return_error(err)}
          return symbol_bind(resolve(0,dir,args,path),_bmH_)}
        function build_dynamic_dir(dir,args)
         {if(typeof dir !== "number" && 1 === dir[0])
           {var
             builder=dir[2],
             _bmG_=function(dir){return build_dynamic_dir(dir,args)};
            return symbol_bind(caml_call1(builder,args),_bmG_)}
          return return$1(dir)}
        function transparent_resolve(dir,path,rargs)
         {if(typeof path === "number")
           return return_some(dir);
          else
           switch(path[0])
            {case 0:
              var
               name=path[2],
               path$0=path[1],
               _bmu_=
                function(param)
                 {if(param)
                   {var
                     dir=param[1],
                     _bmB_=
                      function(param)
                       {if(typeof param === "number")
                         return return_none;
                        else
                         switch(param[0])
                          {case 0:
                            var _bmC_=param[1][2];
                            if(_bmC_)
                             {var _bmD_=_bmC_[1];
                              if(0 === _bmD_[0])
                               {var s=_bmD_[1];
                                return return_some(caml_call2(StringMap[27],name,s))}}
                            return return_none;
                           case 1:throw [0,Assert_failure,_AW_];
                           default:return return_none}};
                    return symbol_bind(build_dynamic_dir(dir,rargs),_bmB_)}
                  return return_none};
              return symbol_bind(transparent_resolve(dir,path$0,rargs),_bmu_);
             case 1:
              var
               iarg=path[2],
               ipath=path[1],
               _bmv_=
                function(param)
                 {if(param)
                   {var
                     dir=param[1],
                     _bmx_=
                      function(param)
                       {if(typeof param === "number")
                         return return_none;
                        else
                         switch(param[0])
                          {case 0:
                            var _bmy_=param[1][2];
                            if(_bmy_)
                             {var _bmz_=_bmy_[1];
                              if(0 !== _bmz_[0])
                               {var dir=_bmz_[2],arg=_bmz_[1];
                                try
                                 {eq(iarg[1],arg[1])}
                                catch(_bmA_)
                                 {_bmA_ = caml_wrap_exception(_bmA_);
                                  if(_bmA_ === Not_equal)return return_none;
                                  throw _bmA_}
                                return return_some(dir)}}
                            return return_none;
                           case 1:throw [0,Assert_failure,_AX_];
                           default:return return_none}};
                    return symbol_bind(build_dynamic_dir(dir,rargs[1]),_bmx_)}
                  return return_none};
              return symbol_bind
                      (transparent_resolve(dir,ipath,rargs[1]),_bmv_);
             default:
              var
               arg=path[2],
               path$1=path[1],
               _bmw_=
                function(param)
                 {if(param)
                   {var
                     dir=param[1],
                     _bmE_=
                      function(param)
                       {if(typeof param === "number")
                         return return_none;
                        else
                         switch(param[0])
                          {case 0:return return_none;
                           case 1:throw [0,Assert_failure,_AY_];
                           default:
                            var dir=param[2],iarg=param[1];
                            try
                             {eq(iarg[1],arg[1])}
                            catch(_bmF_)
                             {_bmF_ = caml_wrap_exception(_bmF_);
                              if(_bmF_ === Not_equal)return return_none;
                              throw _bmF_}
                            return return_some(dir)}};
                    return symbol_bind(build_dynamic_dir(dir,rargs[1]),_bmE_)}
                  return return_none};
              return symbol_bind
                      (transparent_resolve(dir,path$1,rargs[1]),_bmw_)}}
        function transparent_lookup(dir,service,params,query,body)
         {var service$0=caml_call1(Service[19][13],service);
          function _bmo_(param)
           {if(param)
             {var _bmp_=param[1];
              if(typeof _bmp_ !== "number" && 0 === _bmp_[0])
               {var match=_bmp_[1],services=match[1];
                try
                 {var
                   _bmq_=
                    function(param)
                     {var handler=param[2],types=param[1];
                      try
                       {caml_call2(Service[19][11],types,service$0[4])}
                      catch(_bmt_)
                       {_bmt_ = caml_wrap_exception(_bmt_);
                        if(_bmt_ === Service[19][10])return return$1(_A1_);
                        throw _bmt_}
                      return caml_call2(handler,query,body)},
                   _bmr_=
                    symbol_bind
                     (caml_call1
                       (caml_call2(MethMap[27],service$0[2],services)[3],params),
                      _bmq_);
                  return _bmr_}
                catch(_bms_)
                 {_bms_ = caml_wrap_exception(_bms_);
                  if(_bms_ === Not_found)return return$1(_A0_);
                  throw _bms_}}
              return return$1(_AZ_)}
            return return$1(_A2_)}
          return symbol_bind
                  (transparent_resolve(dir,service$0[3],params),_bmo_)}
        function conflict(p,kind)
         {var path=p,acc=0;
          for(;;)
           if(typeof path === "number")
            throw [0,Conflict,acc,kind];
           else
            switch(path[0])
             {case 0:
               var
                name=path[2],
                path$0=path[1],
                acc$0=[0,[0,name],acc],
                path=path$0,
                acc=acc$0;
               continue;
              case 1:
               var
                arg=path[2],
                path$1=path[1],
                acc$1=[0,[1,arg[4]],acc],
                path=path$1,
                acc=acc$1;
               continue;
              default:
               var
                arg$0=path[2],
                path$2=path[1],
                acc$2=[0,[2,arg$0[4]],acc],
                path=path$2,
                acc=acc$2;
               continue}}
        function insert(path,dir)
         {if(typeof path === "number")
           return [0,dir,function(x){return x}];
          else
           switch(path[0])
            {case 0:
              var
               name=path[2],
               subpath=path[1],
               match=insert(subpath,dir),
               rebuild=match[2],
               subdir=match[1];
              if(typeof subdir === "number")
               var match$0=[0,StringMap[1],MethMap[1]];
              else
               switch(subdir[0])
                {case 0:
                  var _bl0_=subdir[1],_bl1_=_bl0_[2],_bl2_=_bl0_[1];
                  if(_bl1_)
                   {var _bl3_=_bl1_[1];
                    if(0 === _bl3_[0])
                     var m=_bl3_[1],_bl4_=[0,m,_bl2_];
                    else
                     var arg=_bl3_[1],_bl4_=conflict(path,[2,arg[4],[0,name,0]]);
                    var _bl5_=_bl4_}
                  else
                   var _bl5_=[0,StringMap[1],_bl2_];
                  var match$0=_bl5_;
                  break;
                 case 1:var match$0=conflict(path,1);break;
                 default:var match$0=conflict(path,2)}
              var services=match$0[2],dirmap=match$0[1];
              try
               {var _blZ_=caml_call2(StringMap[27],name,dirmap),dir$0=_blZ_}
              catch(_bmm_)
               {_bmm_ = caml_wrap_exception(_bmm_);
                if(_bmm_ !== Not_found)throw _bmm_;
                var dir$0=empty}
              var
               rebuild$0=
                function(s)
                 {var subdirs=[0,[0,caml_call3(StringMap[4],name,s,dirmap)]];
                  return caml_call1(rebuild,[0,[0,services,subdirs]])};
              return [0,dir$0,rebuild$0];
             case 1:
              var
               arg$0=path[2],
               subpath$0=path[1],
               match$1=insert(subpath$0,dir),
               rebuild$1=match$1[2],
               subdir$0=match$1[1];
              if(typeof subdir$0 === "number")
               var match$2=[0,0,MethMap[1]];
              else
               switch(subdir$0[0])
                {case 0:
                  var _bl6_=subdir$0[1],_bl7_=_bl6_[2],_bl8_=_bl6_[1];
                  if(_bl7_)
                   {var _bl9_=_bl7_[1];
                    if(0 === _bl9_[0])
                     var
                      m$0=_bl9_[1],
                      _bl__=caml_call1(StringMap[19],m$0),
                      _bl$_=map$1(function(_bmk_){return _bmk_[1]},_bl__),
                      _bma_=conflict(path,[2,arg$0[4],_bl$_]);
                    else
                     {var dir$2=_bl9_[2],arg$1=_bl9_[1];
                      try
                       {eq(arg$0[1],arg$1[1]);
                        var _bmd_=[0,dir$2,_bl8_],_bmc_=_bmd_}
                      catch(_bml_)
                       {_bml_ = caml_wrap_exception(_bml_);
                        if(_bml_ !== Not_equal)throw _bml_;
                        var _bmc_=conflict(path,[1,arg$0[4],arg$1[4]])}
                      var _bma_=_bmc_}
                    var _bmb_=_bma_}
                  else
                   var _bmb_=[0,0,_bl8_];
                  var match$2=_bmb_;
                  break;
                 case 1:var match$2=conflict(path,1);break;
                 default:var match$2=conflict(path,2)}
              var
               services$0=match$2[2],
               dir$1=match$2[1],
               rebuild$2=
                function(s)
                 {var subdirs=[0,[1,arg$0,s]];
                  return caml_call1(rebuild$1,[0,[0,services$0,subdirs]])};
              return [0,dir$1,rebuild$2];
             default:
              var
               arg$2=path[2],
               subpath$1=path[1],
               match$3=insert(subpath$1,dir),
               rebuild$3=match$3[2],
               subdir$1=match$3[1];
              if(typeof subdir$1 === "number")
               {var
                 rebuild$4=
                  function(s){return caml_call1(rebuild$3,[2,arg$2,s])};
                return [0,empty,rebuild$4]}
              else
               switch(subdir$1[0])
                {case 0:
                  var _bme_=subdir$1[1],_bmf_=_bme_[2],_bmg_=_bme_[1];
                  if(_bmf_)
                   {var _bmh_=_bmf_[1];
                    if(0 === _bmh_[0])
                     {var
                       m$1=_bmh_[1],
                       _bmi_=caml_call1(StringMap[19],m$1),
                       _bmj_=map$1(function(_bmn_){return _bmn_[1]},_bmi_);
                      return conflict(path,[2,arg$2[4],_bmj_])}
                    var arg$3=_bmh_[1];
                    return conflict(path,[2,arg$3[4],0])}
                  return conflict(path,[0,caml_call1(MethMap[20],_bmg_)[1]]);
                 case 1:return conflict(path,1);
                 default:return conflict(path,2)}}}
        function register(root,s,handler)
         {var
           s$0=caml_call1(Service[19][13],s),
           _blR_=s$0[3],
           match=insert(_blR_,root),
           insert$0=match[2],
           dir=match[1],
           _blL_=
            [num_246,
             function(_blY_){return caml_call2(Encoding[4],0,s$0[4][4])}],
           _blM_=
            [num_246,
             function(_blX_){return caml_call2(Encoding[4],0,s$0[4][3])}],
           _blN_=s$0[4][2];
          if(_blN_)
           var
            input=_blN_[1],
            _blO_=
             [0,
              [num_246,
               function(_blW_){return caml_call2(Encoding[4],0,input)}]];
          else
           var _blO_=0;
          var fields=s$0[4][1][1];
          function loop(param)
           {if(param)
             {var
               fs=param[2],
               f=param[1],
               _blT_=loop(fs),
               _blU_=field_kind(f),
               _blV_=field_description(f);
              return [0,[0,field_name(f),_blV_,_blU_],_blT_]}
            return 0}
          var _blK_=loop(fields),acc=0,path=_blR_,_blP_=s$0[2];
          for(;;)
           if(typeof path === "number")
            {var
              description=[0,s$0[1],acc,_blP_,_blK_,_blO_,_blM_,_blL_],
              builder=
               function(key)
                {var _blS_=caml_call1(handler,key);
                 return return$1([0,s$0[4],_blS_])},
              rs=[0,s$0[2],description,builder];
             if(typeof dir === "number")
              return caml_call1
                      (insert$0,[0,[0,caml_call2(MethMap[6],s$0[2],rs),0]]);
             else
              switch(dir[0])
               {case 0:
                 var dir$0=dir[1],services=dir$0[1];
                 if(caml_call2(MethMap[3],s$0[2],services))
                  return conflict(_blR_,[0,s$0[2]]);
                 var _blQ_=dir$0[2];
                 return caml_call1
                         (insert$0,
                          [0,[0,caml_call3(MethMap[4],s$0[2],rs,services),_blQ_]]);
                case 1:return conflict(_blR_,1);
                default:return conflict(_blR_,2)}}
           else
            switch(path[0])
             {case 0:
               var
                name=path[2],
                path$0=path[1],
                acc$0=[0,[0,name],acc],
                acc=acc$0,
                path=path$0;
               continue;
              case 1:
               var
                arg=path[2],
                path$1=path[1],
                acc$1=[0,[1,arg[4]],acc],
                acc=acc$1,
                path=path$1;
               continue;
              default:
               var
                arg$0=path[2],
                path$2=path[1],
                acc$2=[0,[2,arg$0[4]],acc],
                acc=acc$2,
                path=path$2;
               continue}}
        function register_dynamic_directory(descr,root,path,builder)
         {var match=insert(path,root),insert$0=match[2],dir=match[1];
          if(typeof dir === "number")
           return caml_call1(insert$0,[1,descr,builder]);
          else
           switch(dir[0])
            {case 0:
              var _blI_=dir[1],_blJ_=_blI_[1];
              return _blI_[2]
                      ?conflict(path,0)
                      :conflict(path,[0,caml_call1(MethMap[24],_blJ_)[1]]);
             case 1:return conflict(path,1);
             default:return conflict(path,2)}}
        function register_describe_directory_se(root,service)
         {var dir=[0,root];
          function lookup(param,_blF_,_blE_)
           {var recurse=_blF_[1],path=param[2],args=param[1];
            function _blG_(param)
             {if(0 === param[0])
               {var
                 match=param[1],
                 arg=match[2],
                 dir=match[1],
                 _blH_=
                  function(d)
                   {if(typeof d !== "number" && 0 === d[0])
                     {var match=d[1],services=match[1];
                      if(! recurse && caml_call1(MethMap[2],services))
                       return return$1(_A3_)}
                    return return$1([0,num_17724,d])};
                return symbol_bind
                        (describe_directory(recurse,[0,arg],[0,dir]),_blH_)}
              return return$1(_A4_)}
            return symbol_bind(resolve(0,root,args,path),_blG_)}
          dir[1] = register(root,service,lookup);
          return dir[1]}
        function register0(root,s,f){return register(root,s,curry(0,f))}
        function register1(root,s,f){return register(root,s,curry(_A5_,f))}
        function register2(root,s,f){return register(root,s,curry(_A6_,f))}
        function register3(root,s,f){return register(root,s,curry(_A7_,f))}
        function register4(root,s,f){return register(root,s,curry(_A8_,f))}
        function register5(root,s,f){return register(root,s,curry(_A9_,f))}
        function register_dynamic_directory1(descr,root,s,f)
         {return register_dynamic_directory(descr,root,s,curry(_A__,f))}
        function register_dynamic_directory2(descr,root,s,f)
         {return register_dynamic_directory(descr,root,s,curry(_A$_,f))}
        function register_dynamic_directory3(descr,root,s,f)
         {return register_dynamic_directory(descr,root,s,curry(_Ba_,f))}
        return [0,
                Service,
                lookup,
                allowed_methods,
                transparent_lookup,
                empty,
                map_directory,
                prefix,
                merge,
                Conflict,
                register,
                register0,
                register1,
                register2,
                register3,
                register4,
                register5,
                register_dynamic_directory,
                register_dynamic_directory1,
                register_dynamic_directory2,
                register_dynamic_directory3,
                register_describe_directory_se,
                describe_directory,
                [0,curry]]},
     untyped=obj1([0,_Bc_,output,0,0]),
     conv$0=function(f,g,t){return conv(f,g,[0,schema$1(0,t)],t)},
     schema$2=
      function(definitions_path,t)
       {var uf=create$2(0,num_128);
        function uf_add_name(title){return add$1(uf,[0,title,0])}
        function add_reference(name,description,param)
         {var descriptions=param[1];
          return [0,[0,[0,name,description],descriptions]]}
        var x=[0,-1];
        function may_new_reference(param)
         {if(param){var name$0=param[1];uf_add_name(name$0);return name$0}
          x[1] = x[1] + 1 | 0;
          var name=symbol(_vk_,caml_string_of_jsbytes(str$59 + x[1]));
          uf_add_name(name);
          return name}
        function enum$0(tbl,encoding_array)
         {function f(i){return i}
          var len=encoding_array.length - 1;
          if(0 <= len)
           if(rev_init_threshold < len)
            {var acc=0,i=0;
             for(;;)
              {if(! (len <= i))
                {var i$0=i + 1 | 0,acc$0=[0,i,acc],acc=acc$0,i=i$0;continue}
               var _blz_=rev(acc);
               break}}
           else
            var _blz_=init_aux(0,len,f);
          else
           var _blz_=invalid_arg(_x_);
          var
           _blA_=
            map$1
             (function(i)
               {return [0,
                        i,
                        find$0(tbl,caml_check_bound(encoding_array,i)[1 + i])[1]]},
              _blz_);
          return [0,range_to_size(0,encoding_array.length - 1),_blA_]}
        function layout(ref_name,recursives,references,enc)
         {var ref_name$0=ref_name,enc$0=enc;
          for(;;)
           if(typeof enc$0 === "number")
            switch(enc$0)
             {case 0:return [0,0,references];
              case 1:return [0,0,references];
              case 2:return [0,0,references];
              case 3:return [0,1,references];
              case 4:return [0,_vr_,references];
              case 5:return [0,_vs_,references];
              case 6:return [0,_vt_,references];
              case 7:return [0,_vu_,references];
              case 8:return [0,[1,num_1073741824,num_1073741823],references];
              case 9:return [0,_vv_,references];
              case 10:return [0,_vw_,references];
              case 11:
               var descriptions$0=references[1];
               add$1(uf,[0,n_reference_name,[0,n_reference_description]]);
               return [0,
                       [5,n_reference_name],
                       [0,[0,[0,n_reference_name,n_encoding],descriptions$0]]];
              case 12:
               var descriptions=references[1];
               add$1(uf,[0,z_reference_name,[0,z_reference_description]]);
               return [0,
                       [5,z_reference_name],
                       [0,[0,[0,z_reference_name,z_encoding],descriptions]]];
              default:return [0,2,references]}
           else
            switch(enc$0[0])
             {case 0:return [0,0,references];
              case 1:
               var maximum=enc$0[2],minimum=enc$0[1];
               return [0,[1,minimum,maximum],references];
              case 2:
               var maximum$0=enc$0[2],minimum$0=enc$0[1];
               return [0,[2,minimum$0,maximum$0],references];
              case 3:return [0,3,references];
              case 4:return [0,4,references];
              case 5:
               var
                name=may_new_reference(ref_name$0),
                match=fields(0,recursives,references,enc$0),
                references$0=match[2],
                fields$0=match[1],
                references$1=add_reference(name,[0,fields$0],references$0);
               return [0,[5,name],references$1];
              case 6:
               var
                encoding_array=enc$0[2],
                tbl=enc$0[1],
                name$0=may_new_reference(ref_name$0),
                match$0=enum$0(tbl,encoding_array),
                cases=match$0[2],
                size=match$0[1],
                references$2=add_reference(name$0,[2,size,cases],references);
               return [0,[3,size,name$0],references$2];
              case 7:
               var
                data=enc$0[2],
                len=enc$0[1],
                match$1=layout(0,recursives,references,data[1]),
                references$3=match$1[2],
                descr=match$1[1];
               return [0,[4,descr,len],references$3];
              case 8:
               var
                data$0=enc$0[2],
                len$0=enc$0[1],
                match$2=layout(0,recursives,references,data$0[1]),
                references$4=match$2[2],
                layout$0=match$2[1];
               return [0,[4,layout$0,len$0],references$4];
              case 9:
               var _bly_=enc$0[1];
               if(1 === _bly_[0])
                {var
                  name$1=may_new_reference(ref_name$0),
                  match$4=fields(0,recursives,references,enc$0),
                  references$5=match$4[2],
                  fields$1=match$4[1],
                  references$6=add_reference(name$1,[0,fields$1],references$5);
                 return [0,[5,name$1],references$6]}
               var match$3=_bly_[2],enc$1=match$3[1],enc$0=enc$1;
               continue;
              case 10:
               var
                right=enc$0[3],
                left=enc$0[2],
                name$2=may_new_reference(ref_name$0),
                match$5=fields(0,recursives,references,left[1]),
                references$7=match$5[2],
                fields1=match$5[1],
                match$6=fields(0,recursives,references$7,right[1]),
                references$8=match$6[2],
                fields2=match$6[1],
                references$9=
                 add_reference
                  (name$2,[0,append(fields1,fields2)],references$8);
               return [0,[5,name$2],references$9];
              case 11:
               var match$7=enc$0[1],enc$2=match$7[1],enc$0=enc$2;continue;
              case 12:
               var
                name$3=may_new_reference(ref_name$0),
                match$8=fields(0,recursives,references,enc$0),
                references$10=match$8[2],
                fields$2=match$8[1],
                references$11=add_reference(name$3,[0,fields$2],references$10);
               return [0,[5,name$3],references$11];
              case 13:
               var
                cases$0=enc$0[3],
                tag_size=enc$0[2],
                kind=enc$0[1],
                match$9=
                 union(ref_name$0,recursives,references,kind,tag_size,cases$0),
                references$12=match$9[2],
                name$4=match$9[1];
               return [0,[5,name$4],references$12];
              case 14:
               var
                fix=enc$0[5],
                description=enc$0[4],
                title=enc$0[3],
                name$5=enc$0[2];
               if(title)
                var title$0=title[1],title$1=title$0;
               else
                var title$1=name$5;
               if(mem(name$5,recursives))return [0,[5,name$5],references];
               var
                match$10=caml_call1(fix,[0,enc$0,0]),
                encoding=match$10[1],
                match$11=
                 describe
                  (description,
                   title$1,
                   name$5,
                   [0,name$5,recursives],
                   references,
                   encoding),
                references$13=match$11[2],
                name$6=match$11[1];
               return [0,[5,name$6],references$13];
              case 15:
               var encoding$0=enc$0[3],enc$3=encoding$0[1],enc$0=enc$3;
               continue;
              case 16:
               var
                encoding$1=enc$0[4],
                name$7=enc$0[1],
                enc$4=encoding$1[1],
                ref_name$1=[0,name$7],
                ref_name$0=ref_name$1,
                enc$0=enc$4;
               continue;
              case 17:
               var encoding$2=enc$0[1],enc$5=encoding$2[1],enc$0=enc$5;
               continue;
              case 18:
               var
                name$8=may_new_reference(ref_name$0),
                match$12=fields(0,recursives,references,enc$0),
                references$14=match$12[2],
                fields$3=match$12[1];
               add$1(uf,[0,name$8,0]);
               return [0,
                       [5,name$8],
                       add_reference(name$8,[0,fields$3],references$14)];
              case 19:
               var encoding$3=enc$0[2],enc$6=encoding$3[1],enc$0=enc$6;
               continue;
              default:
               var func=enc$0[1],enc$7=caml_call1(func,0)[1],enc$0=enc$7;
               continue}}
        function fields(ref_name$2,recursives,references$2,encoding$6)
         {var ref_name$3=ref_name$2,encoding$7=encoding$6;
          for(;;)
           if(typeof encoding$7 === "number")
            switch(encoding$7)
             {case 0:return [0,_vm_,references$2];
              case 1:return [0,_vn_,references$2];
              case 2:return [0,_vo_,references$2];
              case 3:
               var
                match$6=layout(0,recursives,references$2,encoding$7),
                references$3=match$6[2],
                layout$3=match$6[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$3],0],
                       references$3];
              case 4:
               var
                match$7=layout(0,recursives,references$2,encoding$7),
                references$4=match$7[2],
                layout$4=match$7[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$4],0],
                       references$4];
              case 5:
               var
                match$8=layout(0,recursives,references$2,encoding$7),
                references$5=match$8[2],
                layout$5=match$8[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$5],0],
                       references$5];
              case 6:
               var
                match$9=layout(0,recursives,references$2,encoding$7),
                references$6=match$9[2],
                layout$6=match$9[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$6],0],
                       references$6];
              case 7:
               var
                match$10=layout(0,recursives,references$2,encoding$7),
                references$7=match$10[2],
                layout$7=match$10[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$7],0],
                       references$7];
              case 8:
               var
                match$11=layout(0,recursives,references$2,encoding$7),
                references$8=match$11[2],
                layout$8=match$11[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$8],0],
                       references$8];
              case 9:
               var
                match$12=layout(0,recursives,references$2,encoding$7),
                references$9=match$12[2],
                layout$9=match$12[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$9],0],
                       references$9];
              case 10:
               var
                match$13=layout(0,recursives,references$2,encoding$7),
                references$10=match$13[2],
                layout$10=match$13[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$10],0],
                       references$10];
              case 11:
               var
                match$14=layout(0,recursives,references$2,encoding$7),
                references$11=match$14[2],
                layout$11=match$14[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$11],0],
                       references$11];
              case 12:
               var
                match$15=layout(0,recursives,references$2,encoding$7),
                references$12=match$15[2],
                layout$12=match$15[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$12],0],
                       references$12];
              default:
               var
                match$16=layout(0,recursives,references$2,encoding$7),
                references$13=match$16[2],
                layout$13=match$16[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$13],0],
                       references$13]}
           else
            switch(encoding$7[0])
             {case 0:return [0,_vp_,references$2];
              case 1:
               var
                match$17=layout(0,recursives,references$2,encoding$7),
                references$14=match$17[2],
                layout$14=match$17[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$14],0],
                       references$14];
              case 2:
               var
                match$18=layout(0,recursives,references$2,encoding$7),
                references$15=match$18[2],
                layout$15=match$18[1];
               return [0,
                       [0,[1,classify_desc(encoding$7),layout$15],0],
                       references$15];
              case 3:
               var kind$1=encoding$7[1];
               return [0,[0,[1,kind$1,3],0],references$2];
              case 4:
               var kind$2=encoding$7[1];
               return [0,[0,[1,kind$2,4],0],references$2];
              case 5:
               var
                match$19=encoding$7[1],
                e=match$19[1],
                n=encoding$7[2],
                match$20=fields(ref_name$3,recursives,references$2,e),
                references$16=match$20[2],
                fields$0=match$20[1];
               return [0,
                       append(fields$0,[0,[0,_vq_,[0,num_332360020,n],5],0]),
                       references$16];
              case 6:
               var
                encoding_array=encoding$7[2],
                tbl=encoding$7[1],
                match$21=enum$0(tbl,encoding_array),
                cases=match$21[2],
                size=match$21[1],
                name$0=may_new_reference(ref_name$3),
                _blx_=add_reference(name$0,[2,size,cases],references$2);
               return [0,[0,[1,classify_desc(encoding$7),[5,name$0]],0],_blx_];
              case 7:
               var
                match$22=encoding$7[2],
                encoding$8=match$22[1],
                len=encoding$7[1],
                match$23=layout(0,recursives,references$2,encoding$8),
                references$17=match$23[2],
                layout$16=match$23[1];
               return [0,
                       [0,[1,num_1027682724,[4,layout$16,len]],0],
                       references$17];
              case 8:
               var
                match$24=encoding$7[2],
                encoding$9=match$24[1],
                len$0=encoding$7[1],
                match$25=layout(0,recursives,references$2,encoding$9),
                references$18=match$25[2],
                layout$17=match$25[1];
               return [0,
                       [0,[1,num_1027682724,[4,layout$17,len$0]],0],
                       references$18];
              case 9:
               var field$0=encoding$7[1];
               if(1 === field$0[0])
                {var _blw_=field$0[1];
                 if(num_57067359 <= field$0[2])
                  {var
                    match$2=field$0[3],
                    encoding$4=match$2[1],
                    match$3=layout(0,recursives,references$2,encoding$4),
                    references$0=match$3[2],
                    layout$1=match$3[1];
                   return [0,
                           [0,
                            [3,_blw_],
                            [0,[0,_blw_,classify_desc(encoding$4),layout$1],0]],
                           references$0]}
                 var
                  match$4=field$0[3],
                  encoding$5=match$4[1],
                  match$5=layout(0,recursives,references$2,encoding$5),
                  references$1=match$5[2],
                  layout$2=match$5[1];
                 return [0,
                         [0,[0,_blw_,num_1027682724,layout$2],0],
                         references$1]}
               var
                match=field$0[2],
                encoding$3=match[1],
                name=field$0[1],
                ref_name=0,
                enc=encoding$3;
               for(;;)
                {var switch$0=0;
                 if(typeof enc !== "number")
                  switch(enc[0])
                   {case 15:
                     var encoding=enc[3],enc$0=encoding[1],enc=enc$0;continue;
                    case 16:
                     var
                      encoding$0=enc[4],
                      ref_name$0=enc[1],
                      enc$1=encoding$0[1],
                      ref_name$1=[0,ref_name$0],
                      ref_name=ref_name$1,
                      enc=enc$1;
                     continue;
                    case 17:
                     var encoding$1=enc[1],enc$2=encoding$1[1],enc=enc$2;
                     continue;
                    case 18:
                     var
                      encoding$2=enc[2],
                      kind=enc[1],
                      _blv_=[0,[0,kind],ref_name,[0,encoding$2[1]]];
                     switch$0 = 1;
                     break;
                    case 20:
                     var f=enc[1],enc$3=caml_call1(f,0)[1],enc=enc$3;continue
                    }
                 if(! switch$0)var _blv_=[0,0,ref_name,[0,enc]];
                 var
                  match$0=_blv_[3],
                  field=match$0[1],
                  dynamics=_blv_[1],
                  match$1=layout(ref_name,recursives,references$2,field),
                  references=match$1[2],
                  layout$0=match$1[1];
                 if(0 === layout$0)return [0,0,references];
                 var field_descr=[0,name,classify_desc(field),layout$0];
                 if(dynamics)
                  {var kind$0=dynamics[1];
                   return [0,
                           [0,[2,ref_name,1,kind$0],[0,field_descr,0]],
                           references]}
                 return [0,[0,field_descr,0],references]}
              case 10:
               var
                right=encoding$7[3],
                left=encoding$7[2],
                match$26=fields(0,recursives,references$2,left[1]),
                references$19=match$26[2],
                left_fields=match$26[1],
                match$27=fields(0,recursives,references$19,right[1]),
                references$20=match$27[2],
                right_fields=match$27[1];
               return [0,append(left_fields,right_fields),references$20];
              case 11:
               var
                match$28=encoding$7[1],
                encoding$10=match$28[1],
                match$29=
                 layout(ref_name$3,recursives,references$2,encoding$10),
                references$21=match$29[2],
                layout$18=match$29[1];
               return 0 === layout$18
                       ?[0,0,references$21]
                       :[0,
                         [0,[1,classify_desc(encoding$10),layout$18],0],
                         references$21];
              case 12:
               var
                right$0=encoding$7[3],
                left$0=encoding$7[2],
                match$30=fields(0,recursives,references$2,left$0[1]),
                references$22=match$30[2],
                fields1=match$30[1],
                match$31=fields(0,recursives,references$22,right$0[1]),
                references$23=match$31[2],
                fields2=match$31[1];
               return [0,append(fields1,fields2),references$23];
              case 13:
               var
                cases$0=encoding$7[3],
                tag_size=encoding$7[2],
                kind$3=encoding$7[1],
                match$32=
                 union(0,recursives,references$2,kind$3,tag_size,cases$0),
                references$24=match$32[2],
                name$1=match$32[1];
               return [0,[0,[1,kind$3,[5,name$1]],0],references$24];
              case 14:
               var
                fix=encoding$7[5],
                description=encoding$7[4],
                title=encoding$7[3],
                name$2=encoding$7[2],
                kind$4=encoding$7[1];
               if(title)
                var title$0=title[1],title$1=title$0;
               else
                var title$1=name$2;
               if(mem(name$2,recursives))
                return [0,[0,[1,kind$4,[5,name$2]],0],references$2];
               var
                match$33=caml_call1(fix,[0,encoding$7,0]),
                encoding$11=match$33[1],
                match$34=
                 describe
                  (description,
                   title$1,
                   name$2,
                   [0,name$2,recursives],
                   references$2,
                   encoding$11),
                references$25=match$34[2],
                name$3=match$34[1];
               return [0,[0,[1,kind$4,[5,name$3]],0],references$25];
              case 15:
               var
                encoding$12=encoding$7[3],
                encoding$13=encoding$12[1],
                encoding$7=encoding$13;
               continue;
              case 16:
               var
                encoding$14=encoding$7[4],
                name$4=encoding$7[1],
                encoding$15=encoding$14[1],
                ref_name$4=[0,name$4],
                ref_name$3=ref_name$4,
                encoding$7=encoding$15;
               continue;
              case 17:
               var
                encoding$16=encoding$7[1],
                encoding$17=encoding$16[1],
                encoding$7=encoding$17;
               continue;
              case 18:
               var
                encoding$18=encoding$7[2],
                kind$5=encoding$7[1],
                match$35=fields(0,recursives,references$2,encoding$18[1]),
                refs=match$35[2],
                fields$1=match$35[1];
               return [0,[0,[2,0,length(fields$1),kind$5],fields$1],refs];
              case 19:
               var
                encoding$19=encoding$7[2],
                encoding$20=encoding$19[1],
                encoding$7=encoding$20;
               continue;
              default:
               var
                func=encoding$7[1],
                encoding$21=caml_call1(func,0)[1],
                encoding$7=encoding$21;
               continue}}
        function describe
         (description,title,name,recursives,references,encoding)
         {var new_cannonical=[0,title,description];
          add$1(uf,new_cannonical);
          var
           match=layout(0,recursives,references,encoding),
           references$0=match[2],
           layout$0=match[1];
          if(typeof layout$0 !== "number" && 5 === layout$0[0])
           {var ref_name=layout$0[1];
            union$1(uf,new_cannonical,ref_name);
            return [0,ref_name,references$0]}
          add$1(uf,new_cannonical);
          return [0,
                  name,
                  add_reference
                   (name,
                    [0,[0,[1,classify_desc(encoding),layout$0],0]],
                    references$0)]}
        function union(ref_name,recursives,references,kind,size,cases)
         {var
           _blp_=0,
           _blq_=
            fold_left$0
             (function(acc,case$0)
               {var _blu_=case$0[6];
                if(_blu_){var tag=_blu_[1];return [0,[0,tag,case$0],acc]}
                return acc},
              _blp_,
              cases),
           cases$0=
            fast_sort
             (function(param,_blt_)
               {var t2=_blt_[1],t1=param[1];return caml_int_compare(t1,t2)},
              _blq_),
           tag_field=[0,_vl_,[0,num_332360020,tag_size(size)],[0,size]],
           _blr_=[0,0,references],
           match=
            fold_right
             (function(param,_bls_)
               {var
                 case$0=param[2],
                 references=_bls_[2],
                 cases=_bls_[1],
                 tag=param[1],
                 match=fields(0,recursives,references,case$0[3][1]),
                 references$0=match[2],
                 fields$0=match[1];
                return [0,
                        [0,[0,tag,[0,case$0[1]],[0,tag_field,fields$0]],cases],
                        references$0]},
              cases$0,
              _blr_),
           references$0=match[2],
           cases$1=match[1],
           name=may_new_reference(ref_name),
           references$1=add_reference(name,[1,kind,size,cases$1],references$0);
          return [0,name,references$1]}
        var match=fields(0,0,_vx_,t[1]),references=match[2],fields$0=match[1];
        uf_add_name(_vy_);
        var
         match$0=
          hd(caml_call1(dedup_canonicalize(uf),[0,[0,_vz_,[0,fields$0]],0])),
         toplevel=match$0[2],
         _bll_=references[1],
         filtered=
          caml_call1
           (find_all
             (function(param)
               {var encoding=param[2],name=param[1];
                if(0 === encoding[0])
                 {var _blm_=encoding[1];
                  if(_blm_)
                   {var _bln_=_blm_[1];
                    if(1 === _bln_[0])
                     {var _blo_=_bln_[2],switch$0=0;
                      if(typeof _blo_ === "number" || ! (5 === _blo_[0]))
                       switch$0 = 1;
                      else
                       if(! _blm_[2])
                        {var reference=_blo_[1];
                         union$1(uf,find$1(uf,name),reference);
                         return 0}}}}
                return 1}),
            _bll_),
         fields$1=rev(caml_call1(dedup_canonicalize(uf),filtered));
        return [0,schema$1(definitions_path,t),[0,toplevel,fields$1]]},
     schema_encoding=obj2([0,_Be_,json_schema,0,0],[0,_Bd_,encoding$1,0,0]),
     _Bg_=opt$2(0,0,_Bf_,output),
     _Bk_=obj3([0,_Bj_,constant(_Bi_),0,0],[0,_Bh_,output,0,0],_Bg_),
     _Bl_=0,
     _Bm_=
      function(param){var descr=param[3],name=param[2];return [0,name,descr]},
     arg_encoding=
      conv
       (function(param)
         {var descr=param[2],name=param[1];return [0,0,name,descr]},
        _Bm_,
        _Bl_,
        _Bk_),
     _Bo_=opt$2(0,0,_Bn_,output),
     _Bs_=obj3([0,_Br_,constant(_Bq_),0,0],[0,_Bp_,output,0,0],_Bo_),
     _Bt_=0,
     _Bu_=
      function(param){var descr=param[3],name=param[2];return [0,name,descr]},
     multi_arg_encoding=
      conv
       (function(param)
         {var descr=param[2],name=param[1];return [0,0,name,descr]},
        _Bu_,
        _Bt_,
        _Bs_),
     meth_encoding=string_enum(_Bv_),
     _Bw_=0,
     _Bx_=function(s){return [2,s]},
     _BA_=
      [0,
       [0,
        _Bz_,
        0,
        multi_arg_encoding,
        function(param)
         {if(2 === param[0]){var s=param[1];return [0,s]}return 0},
        _Bx_,
        _By_],
       _Bw_],
     _BB_=function(s){return [1,s]},
     _BE_=
      [0,
       [0,
        _BD_,
        0,
        arg_encoding,
        function(param)
         {if(1 === param[0]){var s=param[1];return [0,s]}return 0},
        _BB_,
        _BC_],
       _BA_],
     _BF_=function(s){return [0,s]},
     path_item_encoding=
      union$0
       (0,
        [0,
         [0,
          _BH_,
          0,
          output,
          function(param)
           {if(0 === param[0]){var s=param[1];return [0,s]}return 0},
          _BF_,
          _BG_],
         _BE_]),
     _BI_=0,
     _BJ_=function(s){return [2,s]},
     _BK_=
      function(param)
       {if(typeof param !== "number" && 2 === param[0])
         {var s=param[1];return [0,s]}
        return 0},
     _BO_=[0,[0,_BN_,0,obj1([0,_BL_,arg_encoding,0,0]),_BK_,_BJ_,_BM_],_BI_],
     _BP_=function(param){return 0},
     _BQ_=function(param){return typeof param === "number"?_BR_:0},
     _BV_=[0,[0,_BU_,0,obj1([0,_BS_,encoding,0,0]),_BQ_,_BP_,_BT_],_BO_],
     _BW_=function(s){return [1,s]},
     _BX_=
      function(param)
       {if(typeof param !== "number" && 1 === param[0])
         {var s=param[1];return [0,s]}
        return 0},
     _B1_=[0,[0,_B0_,0,obj1([0,_BY_,arg_encoding,0,0]),_BX_,_BW_,_BZ_],_BV_],
     _B2_=function(s){return [0,s]},
     _B3_=
      function(param)
       {if(typeof param !== "number" && 0 === param[0])
         {var s=param[1];return [0,s]}
        return 0},
     query_kind_encoding=
      union$0
       (0,[0,[0,_B6_,0,obj1([0,_B4_,arg_encoding,0,0]),_B3_,_B2_,_B5_],_B1_]),
     _B__=
      obj3
       ([0,_B9_,output,0,0],
        opt$2(0,0,_B8_,output),
        [0,_B7_,query_kind_encoding,0,0]),
     _B$_=0,
     _Ca_=
      function(param)
       {var kind=param[3],description=param[2],name=param[1];
        return [0,name,description,kind]},
     query_item_encoding=
      conv
       (function(param)
         {var kind=param[3],description=param[2],name=param[1];
          return [0,name,description,kind]},
        _Ca_,
        _B$_,
        _B__),
     _Ce_=opt$2(0,0,_Cd_,schema_encoding),
     _Cg_=[0,_Cf_,list$1(0,query_item_encoding),0,0],
     _Ci_=opt$2(0,0,_Ch_,output),
     _Cl_=
      obj7
       ([0,_Ck_,meth_encoding,0,0],
        [0,_Cj_,list$1(0,path_item_encoding),0,0],
        _Ci_,
        _Cg_,
        _Ce_,
        [0,_Cc_,schema_encoding,0,0],
        [0,_Cb_,schema_encoding,0,0]),
     _Cm_=0,
     _Cn_=
      function(param)
       {var
         error=param[7],
         output=param[6],
         input=param[5],
         query=param[4],
         description=param[3],
         path=param[2],
         meth=param[1],
         _bli_=from_val(error),
         _blj_=from_val(output);
        if(input)
         var input$0=input[1],_blk_=[0,from_val(input$0)];
        else
         var _blk_=0;
        return [0,description,path,meth,query,_blk_,_blj_,_bli_]},
     service_descr_encoding=
      conv
       (function(param)
         {var
           error=param[7],
           output=param[6],
           input=param[5],
           query=param[4],
           meth=param[3],
           path=param[2],
           description=param[1],
           _blb_=caml_obj_tag(error),
           _blc_=
            num_250 === _blb_
             ?error[1]
             :num_246 === _blb_?force_lazy_block(error):error,
           _bld_=caml_obj_tag(output),
           _ble_=
            num_250 === _bld_
             ?output[1]
             :num_246 === _bld_?force_lazy_block(output):output;
          if(input)
           var
            input$0=input[1],
            _blf_=caml_obj_tag(input$0),
            _blg_=
             num_250 === _blf_
              ?input$0[1]
              :num_246 === _blf_?force_lazy_block(input$0):input$0,
            _blh_=[0,_blg_];
          else
           var _blh_=0;
          return [0,meth,path,description,query,_blh_,_ble_,_blc_]},
        _Cn_,
        _Cm_,
        _Cl_),
     _Co_=
      function(directory_descr_encoding)
       {var _bkM_=0;
        function _bkN_(param)
         {var tree=param[2],ty=param[1];return [1,ty,tree]}
        function _bkO_(param)
         {if(0 === param[0])return 0;
          var tree=param[2],ty=param[1];
          return [0,[0,ty,tree]]}
        var
         _bkP_=
          [0,
           [0,
            _Ct_,
            0,
            obj1
             ([0,
               _Cr_,
               obj2
                ([0,_Cq_,arg_encoding,0,0],
                 [0,_Cp_,directory_descr_encoding,0,0]),
               0,
               0]),
            _bkO_,
            _bkN_,
            _Cs_],
           _bkM_];
        function _bkQ_(m)
         {function add(acc,param)
           {var t=param[2],n=param[1];return caml_call3(StringMap[4],n,t,acc)}
          return [0,fold_left$0(add,StringMap[1],m)]}
        function _bkR_(param)
         {if(0 === param[0])
           {var map=param[1];return [0,caml_call1(StringMap[19],map)]}
          return 0}
        var
         static_subdirectories_descr_en=
          union$0
           (0,
            [0,
             [0,
              _Cy_,
              0,
              obj1
               ([0,
                 _Cw_,
                 list$1
                  (0,
                   obj2
                    ([0,_Cv_,output,0,0],[0,_Cu_,directory_descr_encoding,0,0])),
                 0,
                 0]),
              _bkR_,
              _bkQ_,
              _Cx_],
             _bkP_]),
         _bkS_=opt$2(0,0,_Cz_,static_subdirectories_descr_en),
         _bkT_=opt$2(0,0,_CA_,service_descr_encoding),
         _bkU_=opt$2(0,0,_CB_,service_descr_encoding),
         _bkV_=opt$2(0,0,_CC_,service_descr_encoding),
         _bkW_=opt$2(0,0,_CD_,service_descr_encoding),
         _bkX_=
          obj6
           (opt$2(0,0,_CE_,service_descr_encoding),
            _bkW_,
            _bkV_,
            _bkU_,
            _bkT_,
            _bkS_),
         _bkY_=0;
        function _bkZ_(param)
         {var
           subdirs=param[6],
           patch=param[5],
           put=param[4],
           delete$0=param[3],
           post=param[2],
           get=param[1];
          function add(meth,s,services)
           {if(s)
             {var s$0=s[1];return caml_call3(MethMap[4],meth,s$0,services)}
            return services}
          var
           services=
            add
             (num_994393768,
              patch,
              add
               (num_3997359,
                put,
                add
                 (num_492530731,
                  delete$0,
                  add(num_891112544,post,add(num_3546230,get,MethMap[1])))));
          return [0,services,subdirs]}
        var
         static_directory_descr_encodin=
          conv
           (function(param)
             {var subdirs=param[2],services=param[1];
              function find(s){return caml_call2(MethMap[28],s,services)}
              var
               _bk9_=find(num_994393768),
               _bk__=find(num_3997359),
               _bk$_=find(num_492530731),
               _bla_=find(num_891112544);
              return [0,find(num_3546230),_bla_,_bk$_,_bk__,_bk9_,subdirs]},
            _bkZ_,
            _bkY_,
            _bkX_),
         _bk0_=0;
        function _bk1_(param){return 0}
        function _bk2_(param){return typeof param === "number"?_CF_:0}
        var _bk3_=[0,[0,_CI_,0,constant(_CG_),_bk2_,_bk1_,_CH_],_bk0_];
        function _bk4_(descr){return [1,descr]}
        function _bk5_(param)
         {if(typeof param !== "number" && 1 === param[0])
           {var descr=param[1];return [0,descr]}
          return 0}
        var
         _bk6_=
          [0,
           [0,_CL_,0,obj1([0,_CJ_,option(output),0,0]),_bk5_,_bk4_,_CK_],
           _bk3_];
        function _bk7_(descr){return [0,descr]}
        function _bk8_(param)
         {if(typeof param !== "number" && 0 === param[0])
           {var descr=param[1];return [0,descr]}
          return 0}
        return union$0
                (0,
                 [0,
                  [0,
                   _CO_,
                   0,
                   obj1([0,_CM_,static_directory_descr_encodin,0,0]),
                   _bk8_,
                   _bk7_,
                   _CN_],
                  _bk6_])},
     directory_descr_encoding=function(eta){return mu(_CP_,0,0,eta)}(_Co_),
     _CR_=obj1([2,_CQ_,bool$1,0,0,0]),
     _CS_=0,
     _CT_=function(recurse){return [0,recurse]},
     description_request_encoding=
      conv
       (function(param){var recurse=param[1];return recurse},_CT_,_CS_,_CR_),
     _CU_=0,
     uri_encoding=
      conv(function(eta){return arg$1(0,eta)},of_string$0,_CU_,output),
     _CV_=0,
     meth_encoding$0=
      conv
       (string_of_meth,
        function(m)
         {var match=meth_of_string(m);
          if(match){var s=match[1];return s}
          return failwith(_CW_)},
        _CV_,
        output),
     include$6=
      _AT_
       ([0,
         encoding,
         untyped,
         conv$0,
         schema$2,
         description_request_encoding,
         directory_descr_encoding]),
     get_service=include$6[6],
     post_service=include$6[7],
     delete_service=include$6[8],
     patch_service=include$6[9],
     put_service=include$6[10],
     prefix$0=include$6[11],
     description_service=include$6[16],
     forge_request=include$6[17],
     forge_partial_request=include$6[18],
     error_path=[0,0],
     Unparsable_RPC_error=[num_248,_CX_,caml_fresh_oo_id(0)],
     Empty_error_list=[num_248,_CY_,caml_fresh_oo_id(0)],
     _CZ_=function(msg){return [0,Unparsable_RPC_error,msg]},
     _C0_=
      function(param)
       {if(param[1] === Unparsable_RPC_error){var msg=param[2];return [0,msg]}
        return 0},
     _C2_=obj1([0,_C1_,json$0,0,0]);
    caml_call8
     (register_error_kind,
      num_944934206,
      _C6_,
      _C5_,
      _C4_,
      [0,function(ppf,msg){return caml_call3(pf(ppf),_C3_,pp$6,msg)}],
      _C2_,
      _C0_,
      _CZ_);
    var
     _C7_=function(param){return Empty_error_list},
     _C8_=function(param){return param === Empty_error_list?_C9_:0};
    caml_call8
     (register_error_kind,
      num_944934206,
      _Db_,
      _Da_,
      _C$_,
      [0,function(ppf,param){return caml_call1(pf(ppf),_C__)}],
      encoding,
      _C8_,
      _C7_);
    var
     error_encoding$0=
      delayed
       (function(param)
         {var _bkG_=error_path[1];
          if(_bkG_)
           {var
             p=_bkG_[1],
             uri=p[2],
             meth=p[1],
             _bkH_=[0,any],
             _bkI_=
              function(msg)
               {if(typeof msg !== "number" && 65 === msg[1])
                 {var _bkL_=msg[2];
                  return _bkL_
                          ?map$1(error_of_json,_bkL_)
                          :[0,Empty_error_list,0]}
                return [0,[0,Unparsable_RPC_error,msg],0]},
             eta=
              conv
               (function(errors){return [0,65,map$1(json_of_error,errors)]},
                _bkI_,
                _bkH_,
                json$0),
             _bkJ_=path_and_query(uri),
             _bkK_=string_of_meth(meth);
            return def$0(_Dc_,0,[0,caml_call2(sprintf(_Dd_),_bkK_,_bkJ_)],eta)}
          throw [0,Assert_failure,_De_]}),
     get_service$0=
      function(_bkD_,_bkC_)
       {var _bkE_=caml_call2(get_service,_bkD_,_bkC_);
        return function(_bkF_)
         {return caml_call2(_bkE_,_bkF_,error_encoding$0)}},
     post_service$0=
      function(_bkx_,_bkw_)
       {var _bky_=caml_call2(post_service,_bkx_,_bkw_);
        return function(_bkz_)
         {var _bkA_=caml_call1(_bky_,_bkz_);
          return function(_bkB_)
           {return caml_call2(_bkA_,_bkB_,error_encoding$0)}}},
     delete_service$0=
      function(_bkt_,_bks_)
       {var _bku_=caml_call2(delete_service,_bkt_,_bks_);
        return function(_bkv_)
         {return caml_call2(_bku_,_bkv_,error_encoding$0)}},
     patch_service$0=
      function(_bkn_,_bkm_)
       {var _bko_=caml_call2(patch_service,_bkn_,_bkm_);
        return function(_bkp_)
         {var _bkq_=caml_call1(_bko_,_bkp_);
          return function(_bkr_)
           {return caml_call2(_bkq_,_bkr_,error_encoding$0)}}},
     put_service$0=
      function(_bkh_,_bkg_)
       {var _bki_=caml_call2(put_service,_bkh_,_bkg_);
        return function(_bkj_)
         {var _bkk_=caml_call1(_bki_,_bkj_);
          return function(_bkl_)
           {return caml_call2(_bkk_,_bkl_,error_encoding$0)}}},
     _Dg_=symbol$17(root$0,_Df_),
     error_service=caml_call2(get_service$0(_Dh_,empty$4),json_schema,_Dg_);
    error_path[1] = [0,caml_call4(forge_request,error_service,0,0,0)];
    caml_call3
     (description_service,_Dj_,error_encoding$0,symbol$17(root$0,_Di_));
    var
     include$7=
      _Bb_
       ([0,
         encoding,
         untyped,
         conv$0,
         schema$2,
         description_request_encoding,
         directory_descr_encoding]),
     transparent_lookup=include$7[4],
     Not_found$0=[num_248,_Dk_,caml_fresh_oo_id(0)],
     Gone=[num_248,_Dl_,caml_fresh_oo_id(0)],
     Generic_error=[num_248,_Dm_,caml_fresh_oo_id(0)],
     base=make$1(_Dn_,0,0,0,0,0,0,0),
     not_found=
      function(s,p,q)
       {var
         match=caml_call4(forge_partial_request,s,[0,base],p,q),
         uri=match[2],
         meth=match[1];
        return caml_call1(fail$1,[0,Not_found$0,meth,uri])},
     gone=
      function(s,p,q)
       {var
         match=caml_call4(forge_partial_request,s,[0,base],p,q),
         uri=match[2],
         meth=match[1];
        return caml_call1(fail$1,[0,Gone,meth,uri])},
     generic_error$0=
      function(s,p,q)
       {var
         match=caml_call4(forge_partial_request,s,[0,base],p,q),
         uri=match[2],
         meth=match[1];
        return caml_call1(fail$1,[0,Generic_error,meth,uri])};
    make_class
     (shared$0,
      function(_bjW_)
       {var
         _bjX_=new_variable(_bjW_,_Do_),
         _bjY_=get_method_labels(_bjW_,shared$0),
         _bjZ_=_bjY_[1],
         _bj0_=_bjY_[2];
        function _bj1_(self_1,s,on_chunk,on_close,p,q,i)
         {function _bka_(param)
           {if(typeof param !== "number")
             {var _bkb_=param[1],switch$0=0;
              if(num_36288910 <= _bkb_)
               {if(num_17724 === _bkb_)
                 {var v=param[2];
                  caml_call1(on_chunk,v);
                  caml_call1(on_close,0);
                  return caml_call1(return$3,function(param){return 0})}
                if(num_792903807 <= _bkb_)
                 {var _bkc_=param[2];
                  if(! _bkc_)return gone(s,p,q);
                  var err=_bkc_[1]}
                else
                 switch$0 = 2}
              else
               if(num_438114087 <= _bkb_)
                if(num_358247754 <= _bkb_)
                 {var _bke_=param[2];
                  if(! _bke_)return not_found(s,p,q);
                  var err=_bke_[1]}
                else
                 switch$0 = 2;
               else
                {if(! (num_558113336 <= _bkb_))
                  {var
                    match=param[2],
                    shutdown=match[2],
                    next=match[1],
                    loop=
                     function(param)
                      {function _bkf_(param)
                        {if(param)
                          {var v=param[1];caml_call1(on_chunk,v);return loop(0)}
                         caml_call1(on_close,0);
                         return return_unit}
                       return caml_call2(symbol_bind$2,caml_call1(next,0),_bkf_)};
                   loop(0);
                   return caml_call1(return$3,shutdown)}
                 switch$0 = 1}
              var switch$1=0;
              switch(switch$0)
               {case 2:
                 var _bkd_=param[2];
                 if(_bkd_){var err=_bkd_[1];switch$1 = 1}
                 break;
                case 0:switch$1 = 1;break
                }
              if(switch$1)return return_error(err)}
            return generic_error$0(s,p,q)}
          return caml_call2
                  (symbol_bind$2,
                   caml_call5(transparent_lookup,self_1[1 + _bjX_],s,p,q,i),
                   _bka_)}
        set_methods
         (_bjW_,
          [0,
           _bj0_,
           function(self_1,s,p,q,i)
            {function _bj6_(param)
              {if(typeof param !== "number")
                {var _bj7_=param[1],switch$0=0;
                 if(num_36288910 <= _bj7_)
                  {if(num_17724 === _bj7_)
                    {var v=param[2];return caml_call1(return$3,v)}
                   if(num_792903807 <= _bj7_)
                    {var _bj8_=param[2];
                     if(! _bj8_)return gone(s,p,q);
                     var err=_bj8_[1]}
                   else
                    switch$0 = 2}
                 else
                  if(num_438114087 <= _bj7_)
                   if(num_358247754 <= _bj7_)
                    {var _bj__=param[2];
                     if(! _bj__)return not_found(s,p,q);
                     var err=_bj__[1]}
                   else
                    switch$0 = 2;
                  else
                   {if(! (num_558113336 <= _bj7_))
                     {var
                       match=param[2],
                       shutdown=match[2],
                       next=match[1],
                       _bj$_=
                        function(param)
                         {if(param)
                           {var v=param[1];
                            caml_call1(shutdown,0);
                            return caml_call1(return$3,v)}
                          caml_call1(shutdown,0);
                          return not_found(s,p,q)};
                      return caml_call2(symbol_bind$2,caml_call1(next,0),_bj$_)}
                    switch$0 = 1}
                 var switch$1=0;
                 switch(switch$0)
                  {case 2:
                    var _bj9_=param[2];
                    if(_bj9_){var err=_bj9_[1];switch$1 = 1}
                    break;
                   case 0:switch$1 = 1;break
                   }
                 if(switch$1)return return_error(err)}
               return generic_error$0(s,p,q)}
             return caml_call2
                     (symbol_bind$2,
                      caml_call5(transparent_lookup,self_1[1 + _bjX_],s,p,q,i),
                      _bj6_)},
           _bjZ_,
           _bj1_]);
        return function(_bj4_,_bj3_,_bj2_)
         {var _bj5_=create_object_opt(_bj3_,_bjW_);
          _bj5_[1 + _bjX_] = _bj2_;
          return _bj5_}});
    var
     make_call=
      function(s,ctxt)
       {return caml_call2(caml_get_public_method(ctxt,num_443964500,1),ctxt,s)},
     make_call1=
      function(s,ctxt,x){return caml_call1(make_call(s,ctxt),[0,0,x])},
     _Dp_=
      function(param)
       {var uri=param[2],meth=param[1];return [0,Not_found$0,meth,uri]},
     _Dq_=
      function(param)
       {if(param[1] === Not_found$0)
         {var uri=param[3],meth=param[2];return [0,[0,meth,uri]]}
        return 0},
     _Dt_=obj2([0,_Ds_,meth_encoding$0,0,0],[0,_Dr_,uri_encoding,0,0]);
    caml_call8
     (register_error_kind,
      num_944934206,
      _Dx_,
      _Dw_,
      _Dv_,
      [0,
       function(ppf,param)
        {var uri=param[2],meth=param[1],_bjV_=string_of_meth(meth);
         return caml_call4(pf(ppf),_Du_,_bjV_,pp_hum,uri)}],
      _Dt_,
      _Dq_,
      _Dp_);
    var
     _Dy_=
      function(param){var uri=param[2],meth=param[1];return [0,Gone,meth,uri]},
     _Dz_=
      function(param)
       {if(param[1] === Gone)
         {var uri=param[3],meth=param[2];return [0,[0,meth,uri]]}
        return 0},
     _DC_=obj2([0,_DB_,meth_encoding$0,0,0],[0,_DA_,uri_encoding,0,0]);
    caml_call8
     (register_error_kind,
      num_944934206,
      _DG_,
      _DF_,
      _DE_,
      [0,
       function(ppf,param)
        {var uri=param[2],meth=param[1],_bjU_=string_of_meth(meth);
         return caml_call4(pf(ppf),_DD_,_bjU_,pp_hum,uri)}],
      _DC_,
      _Dz_,
      _Dy_);
    var Unix_error=[num_248,_DH_,caml_fresh_oo_id(0)];
    register_exception(_DK_,[0,Unix_error,0,_DJ_,_DI_]);
    register_printer
     (function(param)
       {if(param[1] === Unix_error)
         {var s=param[4],s$0=param[3],e=param[2];
          if(typeof e === "number")
           {var _bjT_=e;
            if(34 <= _bjT_)
             switch(_bjT_)
              {case 34:var msg=_Ei_;break;
               case 35:var msg=_Ej_;break;
               case 36:var msg=_Ek_;break;
               case 37:var msg=_El_;break;
               case 38:var msg=_Em_;break;
               case 39:var msg=_En_;break;
               case 40:var msg=_Eo_;break;
               case 41:var msg=_Ep_;break;
               case 42:var msg=_Eq_;break;
               case 43:var msg=_Er_;break;
               case 44:var msg=_Es_;break;
               case 45:var msg=_Et_;break;
               case 46:var msg=_Eu_;break;
               case 47:var msg=_Ev_;break;
               case 48:var msg=_Ew_;break;
               case 49:var msg=_Ex_;break;
               case 50:var msg=_Ey_;break;
               case 51:var msg=_Ez_;break;
               case 52:var msg=_EA_;break;
               case 53:var msg=_EB_;break;
               case 54:var msg=_EC_;break;
               case 55:var msg=_ED_;break;
               case 56:var msg=_EE_;break;
               case 57:var msg=_EF_;break;
               case 58:var msg=_EG_;break;
               case 59:var msg=_EH_;break;
               case 60:var msg=_EI_;break;
               case 61:var msg=_EJ_;break;
               case 62:var msg=_EK_;break;
               case 63:var msg=_EL_;break;
               case 64:var msg=_EM_;break;
               case 65:var msg=_EN_;break;
               case 66:var msg=_EO_;break;
               default:var msg=_EP_}
            else
             switch(_bjT_)
              {case 0:var msg=_DL_;break;
               case 1:var msg=_DN_;break;
               case 2:var msg=_DO_;break;
               case 3:var msg=_DP_;break;
               case 4:var msg=_DQ_;break;
               case 5:var msg=_DR_;break;
               case 6:var msg=_DS_;break;
               case 7:var msg=_DT_;break;
               case 8:var msg=_DU_;break;
               case 9:var msg=_DV_;break;
               case 10:var msg=_DW_;break;
               case 11:var msg=_DX_;break;
               case 12:var msg=_DY_;break;
               case 13:var msg=_DZ_;break;
               case 14:var msg=_D0_;break;
               case 15:var msg=_D1_;break;
               case 16:var msg=_D2_;break;
               case 17:var msg=_D3_;break;
               case 18:var msg=_D4_;break;
               case 19:var msg=_D5_;break;
               case 20:var msg=_D6_;break;
               case 21:var msg=_D7_;break;
               case 22:var msg=_D8_;break;
               case 23:var msg=_D9_;break;
               case 24:var msg=_D__;break;
               case 25:var msg=_D$_;break;
               case 26:var msg=_Ea_;break;
               case 27:var msg=_Eb_;break;
               case 28:var msg=_Ec_;break;
               case 29:var msg=_Ed_;break;
               case 30:var msg=_Ee_;break;
               case 31:var msg=_Ef_;break;
               case 32:var msg=_Eg_;break;
               default:var msg=_Eh_}}
          else
           var x=e[1],msg=caml_call1(sprintf(_EQ_),x);
          return [0,caml_call3(sprintf(_DM_),msg,s$0,s)]}
        return 0});
    unix_inet_addr_of_string(_ER_);
    unix_inet_addr_of_string(_ES_);
    try
     {unix_inet_addr_of_string(_aMF_)}
    catch(_bjS_)
     {_bjS_ = caml_wrap_exception(_bjS_);if(_bjS_[1] !== Failure)throw _bjS_}
    try
     {unix_inet_addr_of_string(_aME_)}
    catch(_bjR_)
     {_bjR_ = caml_wrap_exception(_bjR_);if(_bjR_[1] !== Failure)throw _bjR_}
    create$2(0,7);
    var create$11=function(size){return create$6(char$0,c_layout,size)};
    create$11(0);
    var
     to_bytes$1=
      function(a)
       {function _bjQ_(i){return caml_ba_get_1(a,i)}
        return init(caml_ba_dim_1(a),_bjQ_)},
     of_bytes$0=
      function(b)
       {var
         size=caml_ml_bytes_length(b),
         a=create$11(size),
         _bjO_=size - 1 | 0,
         _bjN_=0;
        if(! (_bjO_ < 0))
         {var i=_bjN_;
          for(;;)
           {caml_ba_set_1(a,i,caml_bytes_get(b,i));
            var _bjP_=i + 1 | 0;
            if(_bjO_ !== i){var i=_bjP_;continue}
            break}}
        return a},
     gen=
      function(len)
       {var buf=caml_create_bytes(len);
        if(! _1_Lib_RandomBuffer_System_randombytes(buf))failwith(_ET_);
        return buf},
     size$0=32,
     init$3=function(param){return Hacl_Hash_Core_SHA2_init_256(0)},
     update$0=Hacl_Hash_Core_SHA2_update_256,
     finish=function(st){var output=caml_create_bytes(32);return output},
     digest=
      function(msg)
       {var output=caml_create_bytes(32);
        Hacl_Hash_SHA2_hash_256(msg,output);
        return output},
     digest$0=
      function(key,msg)
       {var output=caml_create_bytes(32);
        Hacl_HMAC_compute_sha2_256(output,key,msg);
        return output},
     HMAC=[0,digest$0],
     size$1=64,
     init$4=function(param){return Hacl_Hash_Core_SHA2_init_512(0)},
     update$1=Hacl_Hash_Core_SHA2_update_512,
     finish$0=function(st){var output=caml_create_bytes(64);return output},
     digest$1=
      function(msg)
       {var output=caml_create_bytes(64);
        Hacl_Hash_SHA2_hash_512(msg,output);
        return output},
     digest$2=
      function(key,msg)
       {var output=caml_create_bytes(64);
        Hacl_HMAC_compute_sha2_512(output,key,msg);
        return output},
     HMAC$0=[0,digest$2],
     direct=
      function(opt,inbuf,len)
       {if(opt)var sth=opt[1],key=sth;else var key=caml_create_bytes(0);
        var _bjL_=len < 1?1:0,_bjM_=_bjL_ || (64 < len?1:0);
        if(_bjM_)invalid_arg(_EU_);
        var outbuf=caml_create_bytes(len);
        Hacl_Blake2b_32_blake2b(key,inbuf,len,outbuf);
        return [0,outbuf]},
     keybytes=32,
     secret_key_size=32,
     public_key_size=32;
    init(32,function(param){return 0 === param?9:0});
    var
     size$2=64,
     pk_size=32,
     size$3=32,
     to_bytes$2=
      function(param)
       {if(0 === param[0]){var buf=param[1];return copy(buf)}
        var buf$0=param[1];
        return copy(buf$0)},
     of_bytes_opt=
      function(seed)
       {return caml_ml_bytes_length(seed) !== 32?0:[0,[0,copy(seed)]]},
     of_bytes_opt$0=
      function(pk){return caml_ml_bytes_length(pk) !== 32?0:[0,[1,copy(pk)]]},
     blit_to_bytes=
      function(key,opt,buf)
       {if(opt)var sth=opt[1],pos=sth;else var pos=0;
        if(0 === key[0]){var sk=key[1];return blit(sk,0,buf,pos,size$3)}
        var pk=key[1];
        return blit(pk,0,buf,pos,pk_size)},
     to_public_key=
      function(param)
       {if(0 === param[0]){var pk=caml_create_bytes(32);return [1,pk]}
        var pk$0=param[1];
        return [1,pk$0]},
     size$4=64,
     pk_size_raw=64,
     pk_size$0=33,
     size$5=32,
     of_bytes_opt$1=
      function(buf)
       {var pk=caml_create_bytes(64),len=caml_ml_bytes_length(buf);
        if(len === 33)
         {if(1 - Hacl_P256_decompression_compressed_form(buf,pk))
           failwith(_EX_);
          return Hacl_P256_verify_q(pk)?[0,[1,pk]]:0}
        if(len === 65)
         {if(1 - Hacl_P256_decompression_not_compressed_form(buf,pk))
           failwith(_EY_);
          return Hacl_P256_verify_q(pk)?[0,[1,pk]]:0}
        return 0},
     of_bytes_opt$2=
      function(buf)
       {if
         (caml_ml_bytes_length(buf)
          ===
          32
          &&
          Hacl_P256_is_more_than_zero_less_than_order(buf))
         return [0,[0,copy(buf)]];
        return 0},
     to_bytes$3=
      function(key)
       {if(opt$3)var sth=opt$3[1],comp=sth;else var comp=1;
        if(0 === key[0]){var sk=key[1];return copy(sk)}
        var pk=key[1];
        if(comp)
         {var buf=caml_create_bytes(33);
          Hacl_P256_compression_compressed_form(pk,buf);
          return buf}
        var buf$0=caml_create_bytes(65);
        Hacl_P256_compression_not_compressed_form(pk,buf$0);
        if(caml_bytes_equal(sub(buf$0,1,pk_size_raw),pk))return buf$0;
        throw [0,Assert_failure,_EZ_]},
     _E2_=[0,size$0,digest,init$3,update$0,finish,HMAC],
     _E1_=[0,size$1,digest$1,init$4,update$1,finish$0,HMAC$0],
     create$12=
      function(opt,_bjI_,param)
       {if(opt)var sth=opt[1],sign=sth;else var sign=1;
        if(_bjI_)var sth$0=_bjI_[1],verify=sth$0;else var verify=1;
        var
         _bjJ_=verify?num_512:0,
         _bjK_=sign?num_256:0,
         flags=1 | _bjK_ | _bjJ_;
        return caml_secp256k1_context_create(flags)},
     randomize=
      function(ctx,buf)
       {if(caml_ba_dim_1(buf) < 32)invalid_arg(_E3_);
        return caml_secp256k1_context_randomize(ctx,buf)},
     len$0=32,
     public_bytes=64,
     compressed_pk_bytes=33,
     read_sk_exn=
      function(ctx,buf)
       {var buflen=caml_ba_dim_1(buf);
        if(buflen < 32)invalid_arg(caml_call1(sprintf(_E5_),buflen));
        var match=caml_secp256k1_ec_seckey_verify(ctx,buf);
        if(0 === match)return invalid_arg(_E6_);
        var a=caml_ba_sub(buf,0,32),b=create$11(caml_ba_dim_1(a));
        caml_ba_blit(a,b);
        return [0,b]},
     read_sk=
      function(ctx,buf)
       {try
         {var _bjH_=[0,read_sk_exn(ctx,buf)];return _bjH_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Invalid_argument){var msg=exn[2];return [1,msg]}
          throw exn}},
     read_pk_exn=
      function(ctx,buf)
       {var buflen=caml_ba_dim_1(buf);
        if(buflen < 33)invalid_arg(caml_call1(sprintf(_E7_),buflen));
        var outbuf=create$11(public_bytes);
        return caml_secp256k1_ec_pubkey_parse(ctx,outbuf,buf)
                ?[1,outbuf]
                :invalid_arg(_E8_)},
     write$0=
      function(opt,ctx,_bjA_,buf,param)
       {if(opt)var sth=opt[1],compress=sth;else var compress=1;
        if(_bjA_)var sth$0=_bjA_[1],pos=sth$0;else var pos=0;
        if(0 === param[0])
         {var
           sk=param[1],
           buflen=caml_ba_dim_1(buf),
           _bjB_=pos < 0?1:0,
           _bjC_=_bjB_ || ((buflen - 32 | 0) < pos?1:0);
          if(_bjC_)invalid_arg(_E9_);
          var a=caml_ba_sub(sk,0,32),b=caml_ba_sub(buf,pos,32);
          caml_ba_blit(a,b);
          return len$0}
        var pk=param[1],buflen$0=caml_ba_dim_1(buf),_bjD_=pos < 0?1:0;
        if(_bjD_)
         var _bjE_=_bjD_;
        else
         {var _bjF_=compress?(buflen$0 - 33 | 0) < pos?1:0:compress;
          if(_bjF_)
           var _bjE_=_bjF_;
          else
           var
            _bjG_=1 - compress,
            _bjE_=_bjG_?(buflen$0 - 65 | 0) < pos?1:0:_bjG_}
        if(_bjE_)invalid_arg(caml_call2(sprintf(_E__),pos,buflen$0));
        var len=compress?33:65,buf$0=caml_ba_sub(buf,pos,len);
        return caml_secp256k1_ec_pubkey_serialize(ctx,buf$0,pk)},
     to_bytes$4=
      function(opt,ctx,sk)
       {if(opt)var sth=opt[1],compress=sth;else var compress=1;
        if(0 === sk[0])
         {var buf=create$11(len$0);
          write$0([0,compress],ctx,0,buf,sk);
          return buf}
        var _bjz_=compress?len$0:public_bytes,buf$0=create$11(1 + _bjz_ | 0);
        write$0([0,compress],ctx,0,buf$0,sk);
        return buf$0},
     size$6=64,
     recoverable_bytes=65,
     read_exn=
      function(ctx,buf)
       {var buflen=caml_ba_dim_1(buf);
        if(buflen < 64)invalid_arg(caml_call1(sprintf(_E$_),buflen));
        var signature=create$11(size$6);
        return caml_secp256k1_ecdsa_signature_parse_compact(ctx,signature,buf)
                ?[0,signature]
                :invalid_arg(_Fa_)},
     read$0=
      function(ctx,buf)
       {try
         {var _bjy_=[0,read_exn(ctx,buf)];return _bjy_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Invalid_argument){var msg=exn[2];return [1,msg]}
          throw exn}},
     write_exn=
      function(opt,ctx,buf,param)
       {if(opt)var sth=opt[1],der=sth;else var der=0;
        if(0 === param[0])
         {var signature=param[1],buflen=caml_ba_dim_1(buf);
          if(der)
           {var
             len=
              caml_secp256k1_ecdsa_signature_serialize_der(ctx,buf,signature);
            return 0 === len?invalid_arg(_Fb_):len}
          if(buflen < 64)invalid_arg(caml_call1(sprintf(_Fc_),buflen));
          caml_secp256k1_ecdsa_signature_serialize_compact(ctx,buf,signature);
          return size$6}
        var signature$0=param[1],buflen$0=caml_ba_dim_1(buf);
        if(buflen$0 < 65)invalid_arg(caml_call1(sprintf(_Fd_),buflen$0));
        var
         recid=
          caml_secp256k1_ecdsa_recoverable_signature_serialize_compact
           (ctx,buf,signature$0);
        caml_ba_set_1(buf,64,char_of_int(recid));
        return recoverable_bytes},
     Weak_tabler=
      function(H)
       {function create(k,d)
         {var c=create$5(0);caml_ephe_set_data(c,d);set_key(c,k);return c}
        function equal(c,x)
         {var match=get_key(c);
          if(match){var k=match[1];return 0 === caml_int_compare(x,k)?0:1}
          return 2}
        var prng=[num_246,function(_bjx_){return make_self_init(0)}];
        function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
        function resize(h)
         {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
          function do_bucket(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var rest=param$0[3],c=param$0[2],hkey=param$0[1];
                raise_if_invalid_offset(c,0,_R_);
                if(caml_ephe_check_key(c,0))return [0,hkey,c,do_bucket(rest)];
                h[1] = h[1] - 1 | 0;
                var param$0=rest;
                continue}
              return 0}}
          var d=h[2],_bjp_=d.length - 1 - 1 | 0,_bjo_=0;
          if(! (_bjp_ < 0))
           {var i=_bjo_;
            for(;;)
             {d[1 + i] = do_bucket(caml_check_bound(d,i)[1 + i]);
              var _bjq_=i + 1 | 0;
              if(_bjp_ !== i){var i=_bjq_;continue}
              break}}
          var
           _bjr_=nsize < max_array_length?1:0,
           _bjs_=_bjr_?(osize >>> 1 | 0) <= h[1]?1:0:_bjr_;
          if(_bjs_)
           {var ndata=caml_make_vect(nsize,0);
            h[2] = ndata;
            var
             insert_bucket=
              function(param)
               {if(param)
                 {var rest=param[3],data=param[2],hkey=param[1];
                  insert_bucket(rest);
                  var nidx=key_index(h,hkey);
                  ndata[1 + nidx]
                  =
                  [0,hkey,data,caml_check_bound(ndata,nidx)[1 + nidx]];
                  return 0}
                return 0},
             _bju_=osize - 1 | 0,
             _bjt_=0;
            if(! (_bju_ < 0))
             {var i$0=_bjt_;
              for(;;)
               {insert_bucket(caml_check_bound(odata,i$0)[1 + i$0]);
                var _bjw_=i$0 + 1 | 0;
                if(_bju_ !== i$0){var i$0=_bjw_;continue}
                break}}
            var _bjv_=0}
          else
           var _bjv_=_bjs_;
          return _bjv_}
        function replace(h,k,d)
         {function replace_bucket(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var next=param$0[3],c=param$0[2],hk=param$0[1];
                if(k === hk)
                 {var match=equal(c,k);
                  if(0 === match)
                   {caml_ephe_unset_data(c);
                    set_key(c,k);
                    return caml_ephe_set_data(c,d)}
                  var param$0=next;
                  continue}
                var param$0=next;
                continue}
              throw Not_found}}
          var i=key_index(h,k),l=caml_check_bound(h[2],i)[1 + i];
          try
           {var _bjm_=replace_bucket(l);return _bjm_}
          catch(_bjn_)
           {_bjn_ = caml_wrap_exception(_bjn_);
            if(_bjn_ === Not_found)
             {var container=create(k,d);
              caml_check_bound(h[2],i)[1 + i] = [0,k,container,l];
              h[1] = h[1] + 1 | 0;
              var _bjl_=h[2].length - 1 << 1 < h[1]?1:0;
              return _bjl_?resize(h):_bjl_}
            throw _bjn_}}
        function create$0(sz)
         {if(opt$0)
           var sth=opt$0[1],random=sth;
          else
           var random=randomized_default;
          var x=16;
          for(;;)
           {if(! (sz <= x) && ! (max_array_length < (x * 2 | 0)))
             {var x$0=x * 2 | 0,x=x$0;continue}
            if(random)
             var
              _bjj_=caml_obj_tag(prng),
              _bjk_=
               num_250 === _bjj_
                ?prng[1]
                :num_246 === _bjj_?force_lazy_block(prng):prng,
              seed=bits(_bjk_);
            else
             var seed=0;
            return [0,0,caml_make_vect(x,0),seed,x]}}
        function remove(h,k)
         {var hkey=caml_call1(H[2],k);
          function remove_bucket(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var next=param$0[3],c=param$0[2],hk=param$0[1];
                if(hkey === hk)
                 {var match=equal(c,hkey);
                  switch(match)
                   {case 0:h[1] = h[1] - 1 | 0;return next;
                    case 1:return [0,hk,c,remove_bucket(next)];
                    default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
                return [0,hk,c,remove_bucket(next)]}
              return 0}}
          var
           i=key_index(h,hkey),
           _bji_=remove_bucket(caml_check_bound(h[2],i)[1 + i]);
          caml_check_bound(h[2],i)[1 + i] = _bji_;
          return 0}
        function find_opt(h,k)
         {var
           hkey=caml_call1(H[2],k),
           _bjh_=key_index(h,hkey),
           param$0=caml_check_bound(h[2],_bjh_)[1 + _bjh_],
           param=param$0;
          for(;;)
           {if(param)
             {var rest=param[3],c=param[2],hk=param[1];
              if(hkey === hk)
               {var match=equal(c,hkey);
                switch(match)
                 {case 0:
                   var d=caml_ephe_get_data(c);
                   if(d)return d;
                   var param=rest;
                   continue;
                  case 1:var param=rest;continue;
                  default:var param=rest;continue}}
              var param=rest;
              continue}
            return 0}}
        function replace$0(t,k,v){return replace(t,caml_call1(H[2],k),v)}
        function length(t){return t[1]}
        function clear(h)
         {h[1] = 0;
          var len=h[2].length - 1,_bjf_=len - 1 | 0,_bje_=0;
          if(! (_bjf_ < 0))
           {var i=_bje_;
            for(;;)
             {caml_check_bound(h[2],i)[1 + i] = 0;
              var _bjg_=i + 1 | 0;
              if(_bjf_ !== i){var i=_bjg_;continue}
              break}}
          return 0}
        function fold_v(f,h,init)
         {var d$0=h[2],accu$1=[0,init],_bjb_=d$0.length - 1 - 1 | 0,_bja_=0;
          if(! (_bjb_ < 0))
           {var i=_bja_;
            a:
            for(;;)
             {var
               _bjc_=accu$1[1],
               b$0=caml_check_bound(d$0,i)[1 + i],
               b=b$0,
               accu=_bjc_;
              for(;;)
               {if(b)
                 {var
                   rest=b[3],
                   c=b[2],
                   match=get_key(c),
                   match$0=caml_ephe_get_data(c),
                   switch$0=0;
                  if(match && match$0)
                   {var d=match$0[1],accu$0=caml_call2(f,d,accu);switch$0 = 1}
                  if(! switch$0)var accu$0=accu;
                  var b=rest,accu=accu$0;
                  continue}
                accu$1[1] = accu;
                var _bjd_=i + 1 | 0;
                if(_bjb_ !== i){var i=_bjd_;continue a}
                break}
              break}}
          return accu$1[1]}
        return [0,create$0,remove,find_opt,replace$0,length,clear,fold_v]},
     Strong_tabler=
      function(H)
       {var
         include=Make(H),
         create=include[1],
         clear=include[2],
         remove=include[6],
         find_opt=include[8],
         replace=include[10],
         fold=include[14],
         length=include[15];
        function fold_v(f,t,init)
         {return caml_call3
                  (fold,
                   function(param,v,acc){return caml_call2(f,v,acc)},
                   t,
                   init)}
        return [0,create,remove,find_opt,replace,length,clear,fold_v]},
     data=function(param){var data=param[1];return data},
     create$13=
      function(capacity)
       {if(0 < capacity)return [0,[0,capacity]];
        throw [0,Invalid_argument,_Ff_]},
     capacity=
      function(dll){var _bi$_=dll[1],capacity=_bi$_[1];return capacity},
     add_and_return_erased=
      function(dll,data)
       {var _bi8_=dll[1];
        if(0 === _bi8_[0])
         {var capacity=_bi8_[1],node=[0,data,0,0];
          dll[1] = [1,capacity,1,node,node];
          return [0,node,0]}
        var _bi9_=_bi8_[1];
        if(1 === _bi9_)
         {var size=_bi8_[2],first=_bi8_[3],last=_bi8_[4];
          if(1 === size)
           {if(first === last)
             {if(0 === first[3])
               {if(0 === first[2])
                 {if(0 === last[3])
                   {if(0 === last[2])
                     {var node$0=[0,data,0,0];
                      _bi8_[3] = node$0;
                      _bi8_[4] = node$0;
                      return [0,node$0,[0,last[1]]]}
                    throw [0,Assert_failure,_Fg_]}
                  throw [0,Assert_failure,_Fh_]}
                throw [0,Assert_failure,_Fi_]}
              throw [0,Assert_failure,_Fj_]}
            throw [0,Assert_failure,_Fk_]}
          throw [0,Assert_failure,_Fl_]}
        var size$0=_bi8_[2],first$0=_bi8_[3],last$0=_bi8_[4];
        if(0 === first$0[2])
         {if(0 === last$0[3])
           {if(size$0 < _bi9_)
             {var node$1=[0,data,0,[0,first$0]];
              first$0[2] = [0,node$1];
              _bi8_[3] = node$1;
              _bi8_[2] = _bi8_[2] + 1 | 0;
              return [0,node$1,0]}
            var _bi__=last$0[2];
            if(_bi__)
             {var new_last=_bi__[1];
              _bi8_[4] = new_last;
              new_last[3] = 0;
              last$0[2] = 0;
              last$0[3] = 0;
              var node$2=[0,data,0,[0,_bi8_[3]]];
              first$0[2] = [0,node$2];
              _bi8_[3] = node$2;
              return [0,node$2,[0,last$0[1]]]}
            throw [0,Assert_failure,_Fm_]}
          throw [0,Assert_failure,_Fn_]}
        throw [0,Assert_failure,_Fo_]},
     add$2=function(dll,data){return add_and_return_erased(dll,data)[1]},
     add_list=
      function(dll,l)
       {var capacity$0=capacity(dll),length$0=length(l);
        if(length$0 < capacity$0)
         return rev(map$1(function(_bi7_){return add$2(dll,_bi7_)},l));
        var
         param=
          fold_left$0
           (function(param,x)
             {var acc=param[2],index=param[1];
              return index < (length$0 - capacity$0 | 0)
                      ?[0,index + 1 | 0,acc]
                      :[0,index + 1 | 0,[0,add$2(dll,x),acc]]},
            _Fp_,
            l),
         acc=param[2];
        return rev(acc)},
     clear$3=
      function(dll)
       {var _bi6_=dll[1];
        if(0 === _bi6_[0])return 0;
        var capacity=_bi6_[1];
        dll[1] = [0,capacity];
        return 0},
     fold$1=
      function(dll,init,f)
       {var _bi5_=dll[1];
        if(0 === _bi5_[0])return init;
        var first=_bi5_[3],acc=init,node=first;
        for(;;)
         {var acc$0=caml_call2(f,acc,node),_bi4_=node[3];
          if(_bi4_){var node$0=_bi4_[1],acc=acc$0,node=node$0;continue}
          return acc$0}},
     elements=
      function(t){return fold$1(t,0,function(acc,elt){return [0,elt,acc]})},
     elements_data=
      function(t){return fold$1(t,0,function(acc,elt){return [0,elt[1],acc]})},
     remove=
      function(c,node)
       {var _bi0_=c[1];
        if(0 === _bi0_[0])throw [0,Assert_failure,_Fq_];
        var _bi1_=node[2],_bi2_=node[3];
        if(_bi1_)
         {var _bi3_=_bi1_[1];
          if(_bi2_)
           {var next=_bi2_[1];_bi3_[3] = node[3];next[2] = node[2]}
          else
           {_bi3_[3] = 0;_bi0_[4] = _bi3_}}
        else
         if(_bi2_)
          {var next$0=_bi2_[1];next$0[2] = 0;_bi0_[3] = next$0}
         else
          {if(node !== _bi0_[3])throw [0,Assert_failure,_Ft_];
           if(node !== _bi0_[4])throw [0,Assert_failure,_Fs_];
           if(1 !== _bi0_[2])throw [0,Assert_failure,_Fr_];
           c[1] = [0,_bi0_[1]]}
        node[2] = 0;
        node[3] = 0;
        _bi0_[2] = _bi0_[2] - 1 | 0;
        return 0},
     promote_write=
      function(dll,node)
       {var _biW_=dll[1];
        if(0 === _biW_[0])throw [0,Assert_failure,_Fu_];
        if(_biW_[3] === node)return 0;
        var prev_first=_biW_[3],_biX_=node[2],_biY_=node[3];
        if(_biX_)
         {var _biZ_=_biX_[1];
          if(_biY_)
           {var next=_biY_[1];_biZ_[3] = node[3];next[2] = node[2]}
          else
           {_biZ_[3] = 0;_biW_[4] = _biZ_}
          prev_first[2] = [0,node];
          node[2] = 0;
          node[3] = [0,_biW_[3]];
          _biW_[3] = node;
          return 0}
        if(_biY_)throw [0,Assert_failure,_Fv_];
        throw [0,Assert_failure,_Fw_]},
     create$14=
      function(capacity)
       {return 0 < capacity?[0,[0,capacity]]:invalid_arg(_Fx_)},
     capacity$0=
      function(r)
       {var _biV_=r[1];
        if(0 === _biV_[0]){var capacity=_biV_[1];return capacity}
        var data=_biV_[1];
        return data.length - 1},
     add$3=
      function(r,v)
       {var _biT_=r[1];
        if(0 === _biT_[0])
         {var size=_biT_[1];r[1] = [1,caml_make_vect(size,v),0];return 0}
        var size$0=_biT_[1].length - 1;
        _biT_[2]
        =
        _biT_[2] === ((2 * size$0 | 0) - 1 | 0)?size$0:_biT_[2] + 1 | 0;
        var _biU_=caml_mod(_biT_[2],size$0);
        caml_check_bound(_biT_[1],_biU_)[1 + _biU_] = v;
        return 0},
     clear$4=
      function(r)
       {var _biS_=r[1];
        if(0 === _biS_[0])return 0;
        var data=_biS_[1];
        r[1] = [0,data.length - 1];
        return 0},
     fold$2=
      function(r,init,f)
       {var _biM_=r[1];
        if(0 === _biM_[0])return init;
        var
         data=_biM_[1],
         pos=_biM_[2],
         size=data.length - 1,
         acc=[0,init],
         _biO_=min(pos,size - 1 | 0),
         _biN_=0;
        if(! (_biO_ < 0))
         {var i=_biN_;
          for(;;)
           {var
             _biP_=caml_mod(pos - i | 0,size),
             _biQ_=caml_check_bound(data,_biP_)[1 + _biP_];
            acc[1] = caml_call2(f,acc[1],_biQ_);
            var _biR_=i + 1 | 0;
            if(_biO_ !== i){var i=_biR_;continue}
            break}}
        return acc[1]},
     elements$0=
      function(t){return fold$2(t,0,function(acc,elt){return [0,elt,acc]})},
     LRU_Collection=
      [0,
       data,
       create$13,
       capacity,
       add$2,
       add_and_return_erased,
       add_list,
       clear$3,
       fold$1,
       elements,
       elements_data,
       remove,
       promote_write,
       promote_write,
       promote_write],
     data$0=function(x){return x},
     add$4=function(r,x){add$3(r,x);return x},
     add_and_return_erased$0=
      function(r,x)
       {var _biJ_=r[1];
        if(0 === _biJ_[0])
         var replaced=0;
        else
         {var size=_biJ_[1].length - 1;
          if((size - 1 | 0) <= _biJ_[2])
           var
            _biK_=caml_mod(_biJ_[2] + 1 | 0,size),
            _biL_=[0,caml_check_bound(_biJ_[1],_biK_)[1 + _biK_]];
          else
           var _biL_=0;
          var replaced=_biL_}
        add$3(r,x);
        return [0,x,replaced]},
     add_list$0=
      function(r,xs$1)
       {iter$0(function(_biI_){return add$3(r,_biI_)},xs$1);
        var n$1=capacity$0(r),l=rev(xs$1);
        if(0 <= n$1)
         {var xs=l,acc=0,n=n$1;
          for(;;)
           {if(xs && 0 !== n)
             {var
               xs$0=xs[2],
               x=xs[1],
               n$0=n - 1 | 0,
               acc$0=[0,x,acc],
               xs=xs$0,
               acc=acc$0,
               n=n$0;
              continue}
            return rev(rev(acc))}}
        throw [0,Invalid_argument,_Fe_]},
     remove$0=function(param,_biH_){return 0},
     promote=function(param,_biG_){return 0},
     promote_read=function(param,_biF_){return 0},
     promote_write$0=function(c,e){add$4(c,e);return 0},
     FIFO_Sloppy_Collection=
      [0,
       data$0,
       create$14,
       capacity$0,
       add$4,
       add_and_return_erased$0,
       add_list$0,
       clear$4,
       fold$2,
       elements$0,
       elements$0,
       remove$0,
       promote,
       promote_read,
       promote_write$0],
     promote_read$0=function(param,_biE_){return 0},
     promote$0=function(param,_biD_){return 0},
     FIFO_Precise_Collection=
      [0,
       data,
       create$13,
       capacity,
       add$2,
       add_and_return_erased,
       add_list,
       clear$3,
       fold$1,
       elements,
       elements_data,
       remove,
       promote$0,
       promote_read$0,
       promote_write],
     map_maker=
      function(replacement,overflow,accounting)
       {var
         Tabler=0 === overflow?Strong_tabler:Weak_tabler,
         _bix_=
          0 === replacement
           ?LRU_Collection
           :0 === accounting?FIFO_Precise_Collection:FIFO_Sloppy_Collection;
        return function(H)
         {var Table=Tabler(H);
          function create(n)
           {var _biC_=_bix_[2](n);return [0,caml_call1(Table[1],n),_biC_]}
          function replace(param,k,v)
           {var
             collection=param[2],
             table=param[1],
             match=caml_call2(Table[3],table,k);
            if(match){var node=match[1];_bix_[11](collection,node)}
            var
             _biz_=_bix_[5](collection,[0,k,v]),
             _biA_=_biz_[2],
             _biB_=_biz_[1];
            if(_biA_)
             {var match$0=_biA_[1],kerased=match$0[1];
              caml_call2(Table[2],table,kerased);
              return caml_call3(Table[4],table,k,_biB_)}
            return caml_call3(Table[4],table,k,_biB_)}
          function find_opt(param,k)
           {var
             collection=param[2],
             table=param[1],
             match=caml_call2(Table[3],table,k);
            if(match)
             {var node=match[1];
              _bix_[12](collection,node);
              var match$0=_bix_[1](node),v=match$0[2];
              return [0,v]}
            return 0}
          function fold(f,param,init)
           {var collection=param[2];
            function f$0(acc,kv)
             {var match=_bix_[1](kv),v=match[2],k=match[1];
              return caml_call3(f,k,v,acc)}
            return _bix_[8](collection,init,f$0)}
          function fold_v(f,param,init)
           {var table=param[1];
            function _biy_(n,acc)
             {var match=_bix_[1](n),v=match[2];return caml_call2(f,v,acc)}
            return caml_call3(Table[7],_biy_,table,init)}
          function remove(param,k)
           {var
             collection=param[2],
             table=param[1],
             match=caml_call2(Table[3],table,k);
            if(match)
             {var node=match[1];
              _bix_[11](collection,node);
              return caml_call2(Table[2],table,k)}
            return 0}
          function length(param)
           {var table=param[1];return caml_call1(Table[5],table)}
          function capacity(param)
           {var collection=param[2];return _bix_[3](collection)}
          function clear(param)
           {var collection=param[2],table=param[1];
            caml_call1(Table[6],table);
            return _bix_[7](collection)}
          return [0,
                  create,
                  replace,
                  fold,
                  fold_v,
                  find_opt,
                  remove,
                  length,
                  capacity,
                  clear,
                  H]}},
     zbase=ml_z_of_int(58),
     make$5=
      function(alphabet)
       {if(caml_ml_string_length(alphabet) !== 58)invalid_arg(_Fy_);
        var
         str=make(num_256,num_255),
         _bit_=caml_ml_string_length(alphabet) - 1 | 0,
         _bis_=0;
        if(! (_bit_ < 0))
         {var i=_bis_;
          for(;;)
           {var char$0=caml_string_get(alphabet,i);
            if(num_255 !== caml_bytes_get(str,char$0))
             {var _biu_=caml_bytes_get(str,char$0),_biv_=char_of_int(char$0);
              caml_call3(kstr(invalid_arg,_Fz_),_biv_,_biu_,i)}
            caml_bytes_set(str,char$0,char_of_int(i));
            var _biw_=i + 1 | 0;
            if(_bit_ !== i){var i=_biw_;continue}
            break}}
        return [0,alphabet,to_string(str)]},
     bitcoin=make$5(_FA_);
    make$5(_FB_);
    make$5(_FC_);
    var
     count_trailing_char=
      function(s,c)
       {var len=caml_ml_string_length(s),i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 <= i)
           {if(caml_string_get(s,i) !== c)return (len - i | 0) - 1 | 0;
            var i$0=i - 1 | 0,i=i$0;
            continue}
          return len}},
     checksum=
      function(s)
       {var
         _biq_=to_bytes(s),
         _bir_=caml_call1(_E2_[2],_biq_),
         hash=caml_call1(_E2_[2],_bir_);
        return sub_string(hash,0,4)},
     safe_encode=
      function(alphabet$0,s$3)
       {var s$4=symbol(s$3,checksum(s$3));
        if(alphabet$0)var sth=alphabet$0[1],sth$0=sth;else var sth$0=bitcoin;
        var
         len=caml_ml_string_length(s$4),
         s=
          init$0
           (len,
            function(i){return caml_string_get(s$4,(len - i | 0) - 1 | 0)}),
         zero=caml_string_get(sth$0[1],0),
         zeros=count_trailing_char(s,0),
         res_len=((len * 8 | 0) + 4 | 0) / 5 | 0,
         res=make(res_len,0),
         s$0=ml_z_of_bits(s),
         i$1=res_len - 1 | 0,
         s$1=s$0,
         i=i$1;
        for(;;)
         {if(caml_equal(s$1,zero$0))
           {var ress=sub_string(res,i + 1 | 0,(res_len - i | 0) - 1 | 0);
            return symbol(make$0(zeros,zero),ress)}
          var
           match=ml_z_div_rem(s$1,zbase),
           r=match[2],
           s$2=match[1],
           x=ml_z_to_int(r),
           opt=[0,sth$0],
           alphabet=opt?sth$0:bitcoin;
          caml_bytes_set(res,i,caml_string_get(alphabet[1],x));
          var i$0=i - 1 | 0,s$1=s$2,i=i$0;
          continue}},
     safe_decode=
      function(alphabet,s)
       {function _bin_(s)
         {var len=caml_ml_string_length(s);
          if(4 <= len)
           {var msg=sub$0(s,0,len - 4 | 0),msg_hash=sub$0(s,len - 4 | 0,4);
            return caml_string_notequal(msg_hash,checksum(msg))?0:[0,msg]}
          return 0}
        if(alphabet)var sth=alphabet[1],sth$0=sth;else var sth$0=bitcoin;
        var
         _bil_=[0,zero$0],
         _bim_=
          fold_left$2
           (function(a,c)
             {var
               opt=[0,sth$0],
               alphabet=opt?sth$0:bitcoin,
               pos=caml_string_get(alphabet[2],c),
               match=num_255 <= pos?0:[0,pos];
              if(a && match)
               {var i=match[1],a$0=a[1];
                return [0,ml_z_add(ml_z_of_int(i),ml_z_mul(a$0,zbase))]}
              return 0},
            _bil_,
            s);
        return bind
                (map$0
                  (function(res)
                    {var
                      res$0=ml_z_to_bits(res),
                      res_tzeros=count_trailing_char(res$0,0),
                      len$0=caml_ml_string_length(res$0) - res_tzeros | 0,
                      c=caml_string_get(sth$0[1],0),
                      len=caml_ml_string_length(s),
                      i=0;
                     for(;;)
                      {if(i === len)
                        var _bio_=len;
                       else
                        {if(caml_string_get(s,i) === c)
                          {var i$0=i + 1 | 0,i=i$0;continue}
                         var _bio_=i}
                       var
                        _bip_=
                         init$0
                          (len$0,
                           function(i)
                            {return caml_string_get(res$0,(len$0 - i | 0) - 1 | 0)});
                       return symbol(make$0(_bio_,0),_bip_)}},
                   _bim_),
                 _bin_)},
     simple_decode=
      function(alphabet,param,s)
       {var of_raw=param[6],prefix=param[1];
        function _bij_(_bik_){return remove_prefix(prefix,_bik_)}
        return symbol_bind$0
                (symbol_bind$0(safe_decode(alphabet,s),_bij_),of_raw)},
     simple_encode=
      function(alphabet,param,d)
       {var to_raw=param[5],prefix=param[1];
        return safe_encode(alphabet,symbol(prefix,caml_call1(to_raw,d)))},
     MakeEncodings=
      function(E)
       {var encodings=[0,E[1]];
        function check_ambiguous_prefix(prefix,length,encodings)
         {return iter$0
                  (function(param)
                    {var
                      match=param[1],
                      s=match[3],
                      l=match[2],
                      _big_=length === l?1:0;
                     if(_big_)
                      var
                       _bih_=0 !== remove_prefix(s,prefix)?1:0,
                       _bii_=_bih_ || (0 !== remove_prefix(prefix,s)?1:0);
                     else
                      var _bii_=_big_;
                     return _bii_
                             ?caml_call2(kprintf(invalid_arg,_FD_),s,prefix)
                             :_bii_},
                   encodings)}
        function make_encoded_prefix(prefix,len)
         {var
           zeros=safe_encode(0,symbol(prefix,make$0(len,0))),
           ones=safe_encode(0,symbol(prefix,make$0(len,num_255))),
           len$0=caml_ml_string_length(zeros);
          if(caml_ml_string_length(ones) !== len$0)kprintf(invalid_arg,_FE_);
          var i=0;
          for(;;)
           {if(i === len$0)
             var len$1=len$0;
            else
             {var _bif_=caml_string_get(ones,i);
              if(caml_string_get(zeros,i) === _bif_)
               {var i$0=i + 1 | 0,i=i$0;continue}
              var len$1=i}
            if(0 === len$1)invalid_arg(_FF_);
            return [0,sub$0(zeros,0,len$1),caml_ml_string_length(zeros)]}}
        function register_encoding(prefix,length,to_raw,of_raw,wrap)
         {function to_raw$0(x)
           {var s=caml_call1(to_raw,x);
            if(caml_ml_string_length(s) === length)return s;
            throw [0,Assert_failure,_FG_]}
          function of_raw$0(s)
           {if(caml_ml_string_length(s) === length)
             return caml_call1(of_raw,s);
            throw [0,Assert_failure,_FH_]}
          var
           match=make_encoded_prefix(prefix,length),
           encoded_length=match[2],
           encoded_prefix=match[1];
          check_ambiguous_prefix(encoded_prefix,encoded_length,encodings[1]);
          var
           encoding=
            [0,
             prefix,
             length,
             encoded_prefix,
             encoded_length,
             to_raw$0,
             of_raw$0,
             wrap];
          encodings[1] = [0,[0,encoding],encodings[1]];
          return encoding}
        function check_encoded_prefix(enc,p,l)
         {if(caml_string_notequal(enc[3],p))
           {var _bic_=enc[3];caml_call2(kstr(failwith,_FI_),p,_bic_)}
          var _bid_=enc[4] !== l?1:0;
          if(_bid_)
           {var _bie_=enc[4];return caml_call3(kstr(failwith,_FJ_),l,p,_bie_)}
          return _bid_}
        function decode(alphabet,s)
         {function _bib_(s)
           {var param=encodings[1];
            for(;;)
             {if(param)
               {var
                 encodings$0=param[2],
                 match=param[1][1],
                 wrap=match[7],
                 of_raw=match[6],
                 prefix=match[1],
                 match$0=remove_prefix(prefix,s);
                if(match$0)
                 {var msg=match$0[1];
                  return map$0(wrap,caml_call1(of_raw,msg))}
                var param=encodings$0;
                continue}
              return 0}}
          return bind(safe_decode(alphabet,s),_bib_)}
        return [0,
                encodings,
                check_ambiguous_prefix,
                make_encoded_prefix,
                register_encoding,
                check_encoded_prefix,
                decode]},
     include$8=MakeEncodings([0,0]),
     register_encoding=include$8[4],
     check_encoded_prefix=include$8[5],
     decode$0=include$8[6],
     MakeRaw=
      function(H)
       {function of_bytes_exn(s)
         {var match=caml_call1(H[2],s);
          if(match){var pk=match[1];return pk}
          var _bia_=H[1];
          return caml_call1(kstr(invalid_arg,_FK_),_bia_)}
        function of_bytes(s)
         {var match=caml_call1(H[2],s);
          if(match){var pk=match[1];return [0,pk]}
          var _bh$_=H[1];
          return caml_call1(generic_error(_FL_),_bh$_)}
        function of_string_exn(s)
         {var match=caml_call1(H[4],s);
          if(match){var pk=match[1];return pk}
          var _bh__=H[1];
          return caml_call1(kstr(invalid_arg,_FM_),_bh__)}
        function of_string(s)
         {var match=caml_call1(H[4],s);
          if(match){var pk=match[1];return [0,pk]}
          var _bh9_=H[1];
          return caml_call1(generic_error(_FN_),_bh9_)}
        function to_hex(s){return arg(0,caml_call1(H[3],s))}
        function of_hex_opt(s)
         {var _bh8_=to_string$1(s);return caml_call1(H[4],_bh8_)}
        function of_hex_exn(s)
         {var _bh6_=to_string$1(s),match=caml_call1(H[4],_bh6_);
          if(match){var x=match[1];return x}
          var _bh7_=H[1];
          return caml_call1(kstr(invalid_arg,_FO_),_bh7_)}
        function of_hex(s)
         {var match=of_hex_opt(s);
          if(match){var pk=match[1];return caml_call1(ok,pk)}
          var _bh5_=H[1];
          return caml_call1(generic_error(_FP_),_bh5_)}
        return [0,
                of_bytes_exn,
                of_bytes,
                of_string_exn,
                of_string,
                to_hex,
                of_hex_opt,
                of_hex_exn,
                of_hex]},
     MakeB58=
      function(H)
       {function of_b58check_opt(s){return simple_decode(0,H[2],s)}
        function of_b58check_exn(s)
         {var match=of_b58check_opt(s);
          if(match){var x=match[1];return x}
          var _bh4_=H[1];
          return caml_call1(kstr(failwith,_FQ_),_bh4_)}
        function of_b58check(s)
         {var match=of_b58check_opt(s);
          if(match){var x=match[1];return [0,x]}
          var _bh3_=H[1];
          return caml_call2(generic_error(_FR_),_bh3_,s)}
        function to_b58check(s){return simple_encode(0,H[2],s)}
        function to_short_b58check(s)
         {var _bh2_=10 + caml_ml_string_length(H[2][1]) | 0;
          return sub$0(to_b58check(s),0,_bh2_)}
        return [0,
                of_b58check_opt,
                of_b58check_exn,
                of_b58check,
                to_b58check,
                to_short_b58check]},
     MakeEncoder=
      function(H)
       {function pp$0(ppf,t){return pp(ppf,caml_call1(H[3],t))}
        function pp_short(ppf,t){return pp(ppf,caml_call1(H[4],t))}
        var _bhQ_=obj1([0,H[2],H[8],0,0]),_bhR_=0,_bhS_=H[6];
        function _bhT_(_bh1_){return wrap_error(_bhS_,_bh1_)}
        var
         eta=conv(H[3],_bhT_,_bhR_,output),
         _bhU_=[0,symbol(H[1],_FS_)],
         encoding=splitted(def$0(H[2],_bhU_,0,eta),_bhQ_),
         of_b58check=H[5],
         _bhV_=0,
         _bhW_=H[3];
        function _bhX_(s)
         {var match=caml_call1(H[7],s);
          if(match){var v=match[1];return [0,v]}
          var _bh0_=H[2];
          return [1,caml_call2(strf(_FT_),_bh0_,s)]}
        var
         _bhY_=H[2],
         _bhZ_=H[2],
         rpc_arg=
          make$4([0,caml_call1(strf(_FU_),_bhZ_)],_bhY_,_bhX_,_bhW_,_bhV_);
        return [0,pp$0,pp_short,encoding,of_b58check,rpc_arg]},
     Weak_FIFO_Cache_Maker=map_maker(1,1,1),
     MakeIterator=
      function(H)
       {var
         compare=H[2],
         include=caml_call1(Make$10,[0,compare]),
         Legacy=include[1],
         empty=include[2],
         is_empty=include[3],
         mem=include[4],
         add=include[5],
         singleton=include[6],
         remove=include[7],
         union=include[8],
         inter=include[9],
         disjoint=include[10],
         diff=include[11],
         compare$0=include[12],
         equal=include[13],
         subset=include[14],
         iter=include[15],
         iter_e=include[16],
         iter_s=include[17],
         iter_p=include[18],
         iter_es=include[19],
         iter_ep=include[20],
         map=include[21],
         fold=include[22],
         fold_e=include[23],
         fold_s=include[24],
         fold_es=include[25],
         for_all=include[26],
         exists=include[27],
         filter=include[28],
         partition=include[29],
         cardinal=include[30],
         elements=include[31],
         min_elt=include[32],
         max_elt=include[33],
         choose=include[34],
         split=include[35],
         find=include[36],
         find_first=include[37],
         find_last=include[38],
         of_list=include[39],
         to_seq_from=include[40],
         to_seq=include[41],
         add_seq=include[42],
         of_seq=include[43],
         Found=[num_248,_FV_,caml_fresh_oo_id(0)];
        function random_elt(s)
         {var n=int$0(caml_call1(cardinal,s));
          try
           {var _bhP_=0;
            caml_call3
             (fold,
              function(x,i){if(i === n)throw [0,Found,x];return i + 1 | 0},
              s,
              _bhP_);
            throw [0,Assert_failure,_FW_]}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Found){var x=exn[2];return x}
            throw exn}}
        var
         _bhE_=list$1(0,H[1]),
         _bhF_=0,
         encoding=
          conv
           (elements,
            function(l)
             {return fold_left$0
                      (function(m,x){return caml_call2(add,x,m)},empty,l)},
            _bhF_,
            _bhE_),
         Set=
          [0,
           Legacy,
           empty,
           is_empty,
           mem,
           add,
           singleton,
           remove,
           union,
           inter,
           disjoint,
           diff,
           compare$0,
           equal,
           subset,
           iter,
           iter_e,
           iter_s,
           iter_p,
           iter_es,
           iter_ep,
           map,
           fold,
           fold_e,
           fold_s,
           fold_es,
           for_all,
           exists,
           filter,
           partition,
           cardinal,
           elements,
           min_elt,
           max_elt,
           choose,
           split,
           find,
           find_first,
           find_last,
           of_list,
           to_seq_from,
           to_seq,
           add_seq,
           of_seq,
           Found,
           random_elt,
           encoding],
         hash=H[5],
         equal$0=H[3],
         include$0=caml_call1(MakeSeeded$0,[0,equal$0,hash]),
         Legacy$0=include$0[1],
         create=include$0[2],
         clear=include$0[3],
         reset=include$0[4],
         add$0=include$0[5],
         remove$0=include$0[6],
         find$0=include$0[7],
         find_all=include$0[8],
         replace=include$0[9],
         mem$0=include$0[10],
         iter$1=include$0[11],
         iter_s$0=include$0[12],
         iter_p$0=include$0[13],
         iter_e$0=include$0[14],
         iter_es$0=include$0[15],
         iter_ep$0=include$0[16],
         filter_map_inplace=include$0[17],
         try_map_inplace=include$0[18],
         fold$0=include$0[19],
         fold_s$0=include$0[20],
         fold_e$0=include$0[21],
         fold_es$0=include$0[22],
         length$0=include$0[23],
         stats=include$0[24],
         to_seq$0=include$0[25],
         to_seq_keys=include$0[26],
         to_seq_values=include$0[27],
         add_seq$0=include$0[28],
         replace_seq=include$0[29],
         of_seq$0=include$0[30];
        function encoding$0(arg_encoding)
         {var _bhL_=list$1(0,tup2(H[1],arg_encoding)),_bhM_=0;
          function _bhN_(l)
           {var h=caml_call2(create,0,length(l));
            iter$0
             (function(param)
               {var v=param[2],k=param[1];return caml_call3(add$0,h,k,v)},
              l);
            return h}
          return conv
                  (function(h)
                    {var _bhO_=0;
                     return caml_call3
                             (fold$0,function(k,v,l){return [0,[0,k,v],l]},h,_bhO_)},
                   _bhN_,
                   _bhM_,
                   _bhL_)}
        var
         Table=
          [0,
           Legacy$0,
           create,
           clear,
           reset,
           add$0,
           remove$0,
           find$0,
           find_all,
           replace,
           mem$0,
           iter$1,
           iter_s$0,
           iter_p$0,
           iter_e$0,
           iter_es$0,
           iter_ep$0,
           filter_map_inplace,
           try_map_inplace,
           fold$0,
           fold_s$0,
           fold_e$0,
           fold_es$0,
           length$0,
           stats,
           to_seq$0,
           to_seq_keys,
           to_seq_values,
           add_seq$0,
           replace_seq,
           of_seq$0,
           encoding$0],
         compare$1=H[2],
         include$1=caml_call1(Make$11,[0,compare$1]),
         Legacy$1=include$1[1],
         empty$0=include$1[2],
         is_empty$0=include$1[3],
         mem$1=include$1[4],
         add$1=include$1[5],
         update=include$1[6],
         singleton$0=include$1[7],
         remove$1=include$1[8],
         merge=include$1[9],
         union$0=include$1[10],
         compare$2=include$1[11],
         equal$1=include$1[12],
         iter$2=include$1[13],
         iter_e$1=include$1[14],
         iter_s$1=include$1[15],
         iter_p$1=include$1[16],
         iter_es$1=include$1[17],
         iter_ep$1=include$1[18],
         fold$1=include$1[19],
         fold_e$1=include$1[20],
         fold_s$1=include$1[21],
         fold_es$1=include$1[22],
         for_all$0=include$1[23],
         exists$0=include$1[24],
         filter$0=include$1[25],
         partition$0=include$1[26],
         cardinal$0=include$1[27],
         bindings=include$1[28],
         min_binding=include$1[29],
         max_binding=include$1[30],
         choose$0=include$1[31],
         split$0=include$1[32],
         find$1=include$1[33],
         find_first$0=include$1[34],
         find_last$0=include$1[35],
         map$0=include$1[36],
         mapi=include$1[37],
         to_seq$1=include$1[38],
         to_seq_from$0=include$1[39],
         add_seq$1=include$1[40],
         of_seq$1=include$1[41];
        function encoding$1(arg_encoding)
         {var _bhJ_=list$1(0,tup2(H[1],arg_encoding)),_bhK_=0;
          return conv
                  (bindings,
                   function(l)
                    {return fold_left$0
                             (function(m,param)
                               {var v=param[2],k=param[1];return caml_call3(add$1,k,v,m)},
                              empty$0,
                              l)},
                   _bhK_,
                   _bhJ_)}
        var
         Map=
          [0,
           Legacy$1,
           empty$0,
           is_empty$0,
           mem$1,
           add$1,
           update,
           singleton$0,
           remove$1,
           merge,
           union$0,
           compare$2,
           equal$1,
           iter$2,
           iter_e$1,
           iter_s$1,
           iter_p$1,
           iter_es$1,
           iter_ep$1,
           fold$1,
           fold_e$1,
           fold_s$1,
           fold_es$1,
           for_all$0,
           exists$0,
           filter$0,
           partition$0,
           cardinal$0,
           bindings,
           min_binding,
           max_binding,
           choose$0,
           split$0,
           find$1,
           find_first$0,
           find_last$0,
           map$0,
           mapi,
           to_seq$1,
           to_seq_from$0,
           add_seq$1,
           of_seq$1,
           encoding$1],
         include$2=caml_call1(Make_Lwt,[0,H[3],H[4]]),
         create$0=include$2[1],
         clear$0=include$2[2],
         reset$0=include$2[3],
         find_or_make=include$2[4],
         remove$2=include$2[5],
         find$2=include$2[6],
         mem$2=include$2[7],
         iter_with_waiting_es=include$2[8],
         iter_with_waiting_ep=include$2[9],
         fold_with_waiting_es=include$2[10],
         fold_keys=include$2[11],
         fold_promises=include$2[12],
         fold_resolved=include$2[13],
         length$1=include$2[14],
         stats$0=include$2[15],
         Error_table=
          [0,
           create$0,
           clear$0,
           reset$0,
           find_or_make,
           remove$2,
           find$2,
           mem$2,
           iter_with_waiting_es,
           iter_with_waiting_ep,
           fold_with_waiting_es,
           fold_keys,
           fold_promises,
           fold_resolved,
           length$1,
           stats$0],
         h_encoding=H[1],
         include$3=caml_call1(Weak_FIFO_Cache_Maker,[0,H[3],H[4]]),
         create$1=include$3[1],
         replace$0=include$3[2],
         fold$2=include$3[3],
         fold_v=include$3[4],
         find_opt=include$3[5],
         remove$3=include$3[6],
         length$2=include$3[7],
         capacity=include$3[8],
         clear$1=include$3[9],
         H$0=include$3[10];
        function encoding$2(arg_encoding)
         {var
           eta=
            obj2
             ([0,_FY_,int31$0,0,0],
              [0,_FX_,list$1(0,tup2(h_encoding,arg_encoding)),0,0]);
          function _bhG_(param)
           {var l=param[2],capacity=param[1],h=caml_call1(create$1,capacity);
            iter$0
             (function(param)
               {var v=param[2],k=param[1];return caml_call3(replace$0,h,k,v)},
              l);
            return h}
          return conv
                  (function(h)
                    {var
                      _bhH_=0,
                      _bhI_=
                       caml_call3
                        (fold$2,function(k,v,l){return [0,[0,k,v],l]},h,_bhH_);
                     return [0,caml_call1(capacity,h),_bhI_]},
                   _bhG_,
                   0,
                   eta)}
        var
         WeakRingTable=
          [0,
           h_encoding,
           create$1,
           replace$0,
           fold$2,
           fold_v,
           find_opt,
           remove$3,
           length$2,
           capacity,
           clear$1,
           H$0,
           encoding$2];
        return [0,Set,Table,Map,Error_table,WeakRingTable]},
     Make$13=
      function(H)
       {var
         _bhC_=MakeB58([0,H[2],H[3]]),
         of_b58check_opt=_bhC_[1],
         of_b58check_exn=_bhC_[2],
         of_b58check=_bhC_[3],
         to_b58check=_bhC_[4],
         to_short_b58check=_bhC_[5],
         title=H[1],
         name=H[2],
         raw_encoding=H[4],
         _bhD_=
          MakeEncoder
           ([0,
             title,
             name,
             to_b58check,
             to_short_b58check,
             of_b58check,
             of_b58check_exn,
             of_b58check_opt,
             raw_encoding]),
         pp=_bhD_[1],
         pp_short=_bhD_[2],
         encoding=_bhD_[3],
         of_b58check$0=_bhD_[4],
         rpc_arg=_bhD_[5],
         compare=H[5],
         equal=H[6],
         hash=H[7],
         seeded_hash=H[8],
         include=MakeIterator([0,encoding,compare,equal,hash,seeded_hash]),
         Set=include[1],
         Table=include[2],
         Map=include[3],
         Error_table=include[4],
         WeakRingTable=include[5];
        return [0,
                of_b58check_opt,
                of_b58check_exn,
                to_b58check,
                to_short_b58check,
                pp,
                pp_short,
                encoding,
                of_b58check$0,
                rpc_arg,
                Set,
                Table,
                Map,
                Error_table,
                WeakRingTable]},
     Make_minimal=
      function(K)
       {var _bhm_=K[3],_bhk_=K[1],_bhl_=K[2];
        if(_bhm_)var x=_bhm_[1],size=x;else var size=32;
        function of_string_opt(s)
         {return caml_ml_string_length(s) !== size?0:[0,[0,to_bytes(s)]]}
        function of_string(s)
         {var match=of_string_opt(s);
          if(match){var h=match[1];return [0,h]}
          var _bhB_=K[1];
          return caml_call2
                  (generic_error(_FZ_),_bhB_,caml_ml_string_length(s))}
        function of_string_exn(s)
         {var match=of_string_opt(s);
          if(match){var h=match[1];return h}
          var _bhA_=K[1];
          return caml_call2
                  (kstr(invalid_arg,_F0_),_bhA_,caml_ml_string_length(s))}
        function to_string$0(param){var h=param[1];return to_string(h)}
        function of_hex(s){return of_string(to_string$1(s))}
        function of_hex_opt(s){return of_string_opt(to_string$1(s))}
        function of_hex_exn(s){return of_string_exn(to_string$1(s))}
        function to_hex(s){return arg(0,to_string$0(s))}
        function pp$0(ppf,h)
         {var match=to_hex(h),h$0=match[2];return pp(ppf,h$0)}
        function pp_short(ppf,h)
         {var match=to_hex(h),h$0=match[2];return pp(ppf,sub$0(h$0,0,8))}
        function of_bytes_opt(b)
         {return caml_ml_bytes_length(b) !== size?0:[0,[0,b]]}
        function of_bytes_exn(b)
         {var match=of_bytes_opt(b);
          if(match){var h=match[1];return h}
          var
           _bhz_=K[1],
           msg=caml_call2(sprintf(_F1_),_bhz_,caml_ml_bytes_length(b));
          throw [0,Invalid_argument,msg]}
        function of_bytes(s)
         {var match=of_bytes_opt(s);
          if(match){var x=match[1];return [0,x]}
          var _bhy_=K[1];
          return caml_call1(generic_error(_F2_),_bhy_)}
        function to_bytes$0(param){var h=param[1];return h}
        function hash_bytes(key,l)
         {var input=concat(empty_return,l);return direct(key,input,size)}
        function hash_string(key,l)
         {var key$0=map$0(to_bytes,key),input=concat$0(_F3_,l);
          return direct(key$0,to_bytes(input),size)}
        var path_length=6;
        function to_path(key,l)
         {var
           match=to_hex(key),
           key$0=match[2],
           _bht_=[0,sub$0(key$0,10,(size * 2 | 0) + num_10 | 0),l],
           _bhu_=[0,sub$0(key$0,8,2),_bht_],
           _bhv_=[0,sub$0(key$0,6,2),_bhu_],
           _bhw_=[0,sub$0(key$0,4,2),_bhv_],
           _bhx_=[0,sub$0(key$0,2,2),_bhw_];
          return [0,sub$0(key$0,0,2),_bhx_]}
        function of_path(path)
         {var path$0=concat$0(_F4_,path);
          return of_hex_opt([0,num_3603131,path$0])}
        function of_path_exn(path)
         {var path$0=concat$0(_F5_,path);
          return of_hex_exn([0,num_3603131,path$0])}
        function prefix_path(p)
         {var
           match=arg(0,p),
           p$0=match[2],
           len=caml_ml_string_length(p$0),
           _bho_=2 <= len?sub$0(p$0,0,2):_F$_,
           _bhp_=4 <= len?sub$0(p$0,2,2):_F__,
           _bhq_=6 <= len?sub$0(p$0,4,2):_F9_,
           _bhr_=8 <= len?sub$0(p$0,6,2):_F8_,
           _bhs_=10 <= len?sub$0(p$0,8,2):_F7_,
           p6=
            10 < len
             ?sub$0(p$0,10,min(len + num_10 | 0,(size * 2 | 0) + num_10 | 0))
             :_F6_;
          return [0,_bho_,[0,_bhp_,[0,_bhq_,[0,_bhr_,[0,_bhs_,[0,p6,0]]]]]]}
        var zero=of_hex_exn([0,num_3603131,make$0(size * 2 | 0,48)]);
        function compare(param,_bhn_)
         {var h2=_bhn_[1],h1=param[1];return caml_bytes_compare(h1,h2)}
        var
         include=_gs_([0,compare]),
         symbol=include[1],
         symbol$0=include[2],
         symbol$1=include[3],
         symbol$2=include[4],
         symbol$3=include[5],
         symbol$4=include[6],
         compare$0=include[7],
         equal=include[8],
         max=include[9],
         min$0=include[10];
        return [0,
                _bhk_,
                _bhl_,
                size,
                of_string_opt,
                of_string,
                of_string_exn,
                to_string$0,
                of_hex,
                of_hex_opt,
                of_hex_exn,
                to_hex,
                pp$0,
                pp_short,
                of_bytes_opt,
                of_bytes_exn,
                of_bytes,
                to_bytes$0,
                hash_bytes,
                hash_string,
                path_length,
                to_path,
                of_path,
                of_path_exn,
                prefix_path,
                zero,
                symbol,
                symbol$0,
                symbol$1,
                symbol$2,
                symbol$3,
                symbol$4,
                compare$0,
                equal,
                max,
                min$0]},
     Make$14=
      function(R,K)
       {var
         include=Make_minimal([0,K[1],K[2],K[3]]),
         name=include[1],
         title=include[2],
         size=include[3],
         of_string_opt=include[4],
         of_string=include[5],
         of_string_exn=include[6],
         to_string=include[7],
         of_hex=include[8],
         of_hex_opt=include[9],
         of_hex_exn=include[10],
         to_hex=include[11],
         of_bytes_opt=include[14],
         of_bytes_exn=include[15],
         of_bytes=include[16],
         to_bytes=include[17],
         hash_bytes=include[18],
         hash_string=include[19],
         path_length=include[20],
         to_path=include[21],
         of_path=include[22],
         of_path_exn=include[23],
         prefix_path=include[24],
         zero=include[25],
         symbol=include[26],
         symbol$0=include[27],
         symbol$1=include[28],
         symbol$2=include[29],
         symbol$3=include[30],
         symbol$4=include[31],
         compare=include[32],
         equal=include[33],
         max=include[34],
         min=include[35],
         raw_encoding=conv(to_bytes,of_bytes_exn,0,bytes(size)),
         Data=[num_248,_Ga_,caml_fresh_oo_id(0)];
        function _bhj_(s){return [0,Data,s]}
        var
         b58check_encoding=
          caml_call5(R[1],K[4],size,to_string,of_string_opt,_bhj_),
         include$0=
          Make$13
           ([0,
             title,
             name,
             b58check_encoding,
             raw_encoding,
             compare,
             equal,
             hash,
             seeded_hash]),
         of_b58check_opt=include$0[1],
         of_b58check_exn=include$0[2],
         to_b58check=include$0[3],
         to_short_b58check=include$0[4],
         pp=include$0[5],
         pp_short=include$0[6],
         encoding=include$0[7],
         of_b58check=include$0[8],
         rpc_arg=include$0[9],
         Set=include$0[10],
         Table=include$0[11],
         Map=include$0[12],
         Error_table=include$0[13],
         WeakRingTable=include$0[14];
        return [0,
                name,
                title,
                size,
                of_string_opt,
                of_string,
                of_string_exn,
                to_string,
                of_hex,
                of_hex_opt,
                of_hex_exn,
                to_hex,
                of_bytes_opt,
                of_bytes_exn,
                of_bytes,
                to_bytes,
                hash_bytes,
                hash_string,
                path_length,
                to_path,
                of_path,
                of_path_exn,
                prefix_path,
                zero,
                symbol,
                symbol$0,
                symbol$1,
                symbol$2,
                symbol$3,
                symbol$4,
                compare,
                equal,
                max,
                min,
                hash,
                seeded_hash,
                raw_encoding,
                Data,
                b58check_encoding,
                of_b58check_opt,
                of_b58check_exn,
                to_b58check,
                to_short_b58check,
                pp,
                pp_short,
                encoding,
                of_b58check,
                rpc_arg,
                Set,
                Table,
                Map,
                Error_table,
                WeakRingTable]},
     log2=function(x){return 1 < x?1 + log2((x + 1 | 0) / 2 | 0) | 0:0};
    Make_minimal([0,name$1,title$0,0]);
    var
     _Gp_=
      function(R,K,Contents)
       {var
         include=Make$14(R,K),
         name=include[1],
         title=include[2],
         size=include[3],
         of_string_opt=include[4],
         of_string=include[5],
         of_string_exn=include[6],
         to_string=include[7],
         of_hex=include[8],
         of_hex_opt=include[9],
         of_hex_exn=include[10],
         to_hex=include[11],
         of_bytes_opt=include[12],
         of_bytes_exn=include[13],
         of_bytes=include[14],
         to_bytes=include[15],
         hash_bytes=include[16],
         hash_string=include[17],
         path_length=include[18],
         to_path=include[19],
         of_path=include[20],
         of_path_exn=include[21],
         prefix_path=include[22],
         zero=include[23],
         symbol=include[24],
         symbol$0=include[25],
         symbol$1=include[26],
         symbol$2=include[27],
         symbol$3=include[28],
         symbol$4=include[29],
         compare=include[30],
         equal=include[31],
         max=include[32],
         min=include[33],
         hash=include[34],
         seeded_hash=include[35],
         Data=include[37],
         b58check_encoding=include[38],
         of_b58check_opt=include[39],
         of_b58check_exn=include[40],
         to_b58check=include[41],
         to_short_b58check=include[42],
         pp=include[43],
         pp_short=include[44],
         encoding=include[45],
         of_b58check=include[46],
         rpc_arg=include[47],
         Set=include[48],
         Table=include[49],
         Map=include[50],
         Error_table=include[51],
         WeakRingTable=include[52],
         elt_bytes=Contents[1],
         empty=caml_call2(hash_bytes,0,0);
        function leaf(x)
         {return caml_call2(hash_bytes,0,[0,caml_call1(Contents[1],x),0])}
        function node(x,y)
         {var _bhi_=[0,caml_call1(to_bytes,y),0];
          return caml_call2(hash_bytes,0,[0,caml_call1(to_bytes,x),_bhi_])}
        function compute(xs)
         {if(xs)
           {var _bhg_=xs[1];
            if(xs[2])
             {var
               last=last_exn(xs),
               n$1=length(xs),
               a=caml_make_vect(n$1 + 1 | 0,leaf(last));
              iteri
               (function(i,x)
                 {var _bhh_=leaf(x);
                  caml_check_bound(a,i)[1 + i] = _bhh_;
                  return 0},
                xs);
              var n=n$1;
              for(;;)
               {var m=(n + 1 | 0) / 2 | 0,_bg8_=m - 1 | 0,_bg7_=0;
                if(! (_bg8_ < 0))
                 {var i=_bg7_;
                  for(;;)
                   {var
                     _bhb_=(2 * i | 0) + 1 | 0,
                     _bhd_=2 * i | 0,
                     _bhc_=caml_check_bound(a,_bhb_)[1 + _bhb_],
                     _bhe_=node(caml_check_bound(a,_bhd_)[1 + _bhd_],_bhc_);
                    caml_check_bound(a,i)[1 + i] = _bhe_;
                    var _bhf_=i + 1 | 0;
                    if(_bg8_ !== i){var i=_bhf_;continue}
                    break}}
                var
                 _bg9_=caml_check_bound(a,n)[1 + n],
                 _bg__=node(a[1 + n],_bg9_);
                caml_check_bound(a,m)[1 + m] = _bg__;
                if(1 === m)return caml_check_bound(a,0)[1];
                if(0 === (m % 2 | 0)){var n=m;continue}
                var _bha_=m + 1 | 0,_bg$_=caml_check_bound(a,m)[1 + m];
                caml_check_bound(a,_bha_)[1 + _bha_] = _bg$_;
                var n$0=m + 1 | 0,n=n$0;
                continue}}
            return leaf(_bhg_)}
          return empty}
        function compute_path(xs,j$2)
         {if(xs)
           {if(xs[2])
             {var
               last=last_exn(xs),
               n$1=length(xs),
               _bg4_=j$2 < 0?1:0,
               _bg5_=_bg4_ || (n$1 <= j$2?1:0);
              if(_bg5_)invalid_arg(_Gb_);
              var a=caml_make_vect(n$1 + 1 | 0,leaf(last));
              iteri
               (function(i,x)
                 {var _bg6_=leaf(x);
                  caml_check_bound(a,i)[1 + i] = _bg6_;
                  return 0},
                xs);
              var n=n$1,p=0,j=j$2;
              for(;;)
               {var m=(n + 1 | 0) / 2 | 0;
                if(0 === (j % 2 | 0))
                 var
                  _bgR_=j + 1 | 0,
                  p$0=[0,p,caml_check_bound(a,_bgR_)[1 + _bgR_]];
                else
                 var
                  _bg3_=j - 1 | 0,
                  p$0=[1,caml_check_bound(a,_bg3_)[1 + _bg3_],p];
                var _bgT_=m - 1 | 0,_bgS_=0;
                if(! (_bgT_ < 0))
                 {var i=_bgS_;
                  for(;;)
                   {var
                     _bgY_=(2 * i | 0) + 1 | 0,
                     _bg0_=2 * i | 0,
                     _bgZ_=caml_check_bound(a,_bgY_)[1 + _bgY_],
                     _bg1_=node(caml_check_bound(a,_bg0_)[1 + _bg0_],_bgZ_);
                    caml_check_bound(a,i)[1 + i] = _bg1_;
                    var _bg2_=i + 1 | 0;
                    if(_bgT_ !== i){var i=_bg2_;continue}
                    break}}
                var
                 _bgU_=caml_check_bound(a,n)[1 + n],
                 _bgV_=node(a[1 + n],_bgU_);
                caml_check_bound(a,m)[1 + m] = _bgV_;
                if(1 === m)return p$0;
                if(0 === (m % 2 | 0))
                 {var j$0=j / 2 | 0,n=m,p=p$0,j=j$0;continue}
                var _bgX_=m + 1 | 0,_bgW_=caml_check_bound(a,m)[1 + m];
                caml_check_bound(a,_bgX_)[1 + _bgX_] = _bgW_;
                var j$1=j / 2 | 0,n$0=m + 1 | 0,n=n$0,p=p$0,j=j$1;
                continue}}
            return 0}
          return invalid_arg(_Gc_)}
        function _bgI_(p,h)
         {if(typeof p === "number")
           return [0,leaf(h),1,0];
          else
           {if(0 === p[0])
             {var
               r=p[2],
               p$0=p[1],
               match=_bgI_(p$0,h),
               pos=match[3],
               s=match[2],
               l=match[1];
              return [0,node(l,r),s * 2 | 0,pos]}
            var
             p$1=p[2],
             l$0=p[1],
             match$0=_bgI_(p$1,h),
             pos$0=match$0[3],
             s$0=match$0[2],
             r$0=match$0[1];
            return [0,node(l$0,r$0),s$0 * 2 | 0,pos$0 + s$0 | 0]}}
        function check_path(p,h)
         {var match=_bgI_(p,h),pos=match[3],h$0=match[1];return [0,h$0,pos]}
        var
         encoding$0=
          mu
           (_Go_,
            0,
            0,
            function(path_encoding)
             {var _bgJ_=0;
              function _bgK_(param){return 0}
              var
               _bgL_=
                [0,
                 [0,
                  _Gf_,
                  0,
                  input$0,
                  function(param){return typeof param === "number"?_Gd_:0},
                  _bgK_,
                  _Ge_],
                 _bgJ_];
              function _bgM_(param){var p=param[2],r=param[1];return [1,r,p]}
              function _bgN_(param)
               {if(typeof param !== "number" && 1 === param[0])
                 {var p=param[2],r=param[1];return [0,[0,r,p]]}
                return 0}
              var
               _bgO_=
                [0,
                 [0,
                  _Gj_,
                  0,
                  obj2([0,_Gh_,encoding,0,0],[0,_Gg_,path_encoding,0,0]),
                  _bgN_,
                  _bgM_,
                  _Gi_],
                 _bgL_];
              function _bgP_(param){var r=param[2],p=param[1];return [0,p,r]}
              function _bgQ_(param)
               {if(typeof param !== "number" && 0 === param[0])
                 {var r=param[2],p=param[1];return [0,[0,p,r]]}
                return 0}
              return union$0
                      (0,
                       [0,
                        [0,
                         _Gn_,
                         0,
                         obj2([0,_Gl_,path_encoding,0,0],[0,_Gk_,encoding,0,0]),
                         _bgQ_,
                         _bgP_,
                         _Gm_],
                        _bgO_])});
        function bounded_path_encoding(max_length,param)
         {if(max_length)
           {var
             max_length$0=max_length[1],
             max_depth=log2(max_length$0),
             limit=caml_mul(max_depth,size + 1 | 0) + 1 | 0,
             eta=[19,limit,encoding$0];
            return [0,eta,0]}
          return encoding$0}
        return [0,
                elt_bytes,
                name,
                title,
                pp,
                pp_short,
                symbol,
                symbol$0,
                symbol$1,
                symbol$2,
                symbol$3,
                symbol$4,
                compare,
                equal,
                max,
                min,
                hash_bytes,
                hash_string,
                zero,
                size,
                to_hex,
                of_hex,
                of_hex_opt,
                of_hex_exn,
                to_string,
                of_string,
                of_string_opt,
                of_string_exn,
                to_bytes,
                of_bytes,
                of_bytes_opt,
                of_bytes_exn,
                to_b58check,
                to_short_b58check,
                of_b58check,
                of_b58check_exn,
                of_b58check_opt,
                Data,
                b58check_encoding,
                encoding,
                rpc_arg,
                hash,
                seeded_hash,
                to_path,
                of_path,
                of_path_exn,
                prefix_path,
                path_length,
                [0,
                 Set[1],
                 Set[2],
                 Set[3],
                 Set[4],
                 Set[5],
                 Set[6],
                 Set[7],
                 Set[8],
                 Set[9],
                 Set[10],
                 Set[11],
                 Set[12],
                 Set[13],
                 Set[14],
                 Set[15],
                 Set[16],
                 Set[17],
                 Set[18],
                 Set[19],
                 Set[20],
                 Set[21],
                 Set[22],
                 Set[23],
                 Set[24],
                 Set[25],
                 Set[26],
                 Set[27],
                 Set[28],
                 Set[29],
                 Set[30],
                 Set[31],
                 Set[32],
                 Set[33],
                 Set[34],
                 Set[35],
                 Set[36],
                 Set[37],
                 Set[38],
                 Set[39],
                 Set[40],
                 Set[41],
                 Set[42],
                 Set[43],
                 Set[45],
                 Set[46]],
                Map,
                Table,
                Error_table,
                [0,
                 WeakRingTable[2],
                 WeakRingTable[3],
                 WeakRingTable[4],
                 WeakRingTable[5],
                 WeakRingTable[6],
                 WeakRingTable[7],
                 WeakRingTable[8],
                 WeakRingTable[9],
                 WeakRingTable[10],
                 WeakRingTable[11],
                 WeakRingTable[12]],
                compute,
                empty,
                encoding$0,
                bounded_path_encoding,
                compute_path,
                check_path]},
     _Gq_=
      function(_bgE_,_bgD_)
       {var _bgF_=Make$14(_bgE_,_bgD_),_bgG_=_bgF_[52],_bgH_=_bgF_[48];
        return [0,
                _bgF_[1],
                _bgF_[2],
                _bgF_[43],
                _bgF_[44],
                _bgF_[24],
                _bgF_[25],
                _bgF_[26],
                _bgF_[27],
                _bgF_[28],
                _bgF_[29],
                _bgF_[30],
                _bgF_[31],
                _bgF_[32],
                _bgF_[33],
                _bgF_[16],
                _bgF_[17],
                _bgF_[23],
                _bgF_[3],
                _bgF_[11],
                _bgF_[8],
                _bgF_[9],
                _bgF_[10],
                _bgF_[7],
                _bgF_[5],
                _bgF_[4],
                _bgF_[6],
                _bgF_[15],
                _bgF_[14],
                _bgF_[12],
                _bgF_[13],
                _bgF_[41],
                _bgF_[42],
                _bgF_[46],
                _bgF_[40],
                _bgF_[39],
                _bgF_[37],
                _bgF_[38],
                _bgF_[45],
                _bgF_[47],
                _bgF_[34],
                _bgF_[35],
                _bgF_[19],
                _bgF_[20],
                _bgF_[21],
                _bgF_[22],
                _bgF_[18],
                [0,
                 _bgH_[1],
                 _bgH_[2],
                 _bgH_[3],
                 _bgH_[4],
                 _bgH_[5],
                 _bgH_[6],
                 _bgH_[7],
                 _bgH_[8],
                 _bgH_[9],
                 _bgH_[10],
                 _bgH_[11],
                 _bgH_[12],
                 _bgH_[13],
                 _bgH_[14],
                 _bgH_[15],
                 _bgH_[16],
                 _bgH_[17],
                 _bgH_[18],
                 _bgH_[19],
                 _bgH_[20],
                 _bgH_[21],
                 _bgH_[22],
                 _bgH_[23],
                 _bgH_[24],
                 _bgH_[25],
                 _bgH_[26],
                 _bgH_[27],
                 _bgH_[28],
                 _bgH_[29],
                 _bgH_[30],
                 _bgH_[31],
                 _bgH_[32],
                 _bgH_[33],
                 _bgH_[34],
                 _bgH_[35],
                 _bgH_[36],
                 _bgH_[37],
                 _bgH_[38],
                 _bgH_[39],
                 _bgH_[40],
                 _bgH_[41],
                 _bgH_[42],
                 _bgH_[43],
                 _bgH_[45],
                 _bgH_[46]],
                _bgF_[50],
                _bgF_[49],
                _bgF_[51],
                [0,
                 _bgG_[2],
                 _bgG_[3],
                 _bgG_[4],
                 _bgG_[5],
                 _bgG_[6],
                 _bgG_[7],
                 _bgG_[8],
                 _bgG_[9],
                 _bgG_[10],
                 _bgG_[11],
                 _bgG_[12]]]},
     _Gr_=[0,name$2,title$1,0,b58check_prefix],
     _Gs_=[0,register_encoding],
     include$9=function(_bgC_){return _Gq_(_Gs_,_bgC_)}(_Gr_),
     pp$8=include$9[3],
     pp_short=include$9[4],
     hash_bytes=include$9[15],
     to_bytes$5=include$9[27],
     to_b58check=include$9[31],
     of_b58check_exn=include$9[34],
     of_b58check_opt=include$9[35],
     b58check_encoding=include$9[37],
     encoding$3=include$9[38],
     rpc_arg=include$9[39],
     Set$0=include$9[47];
    def(_Gu_,_Gt_,pp_short);
    def(_Gw_,_Gv_,pp_short);
    caml_call3(check_encoded_prefix,b58check_encoding,_Gx_,51);
    var
     size$7=4,
     of_string_opt$0=
      function(s){return caml_ml_string_length(s) !== 4?0:[0,s]},
     to_string$2=function(s){return s},
     of_hex_exn=
      function(s)
       {var s$0=to_string$1(s),match=of_string_opt$0(s$0);
        if(match){var h=match[1];return h}
        return caml_call2
                (kstr(invalid_arg,_Gy_),name$3,caml_ml_string_length(s$0))},
     of_bytes_exn$0=
      function(b)
       {var match=caml_ml_bytes_length(b) !== 4?0:[0,to_string(b)];
        if(match){var h=match[1];return h}
        var msg=caml_call2(sprintf(_Gz_),name$3,caml_ml_bytes_length(b));
        throw [0,Invalid_argument,msg]};
    of_hex_exn([0,num_3603131,make$0(8,48)]);
    var
     Data=[num_248,_GA_,caml_fresh_oo_id(0)],
     b58check_encoding$0=
      caml_call5
       (register_encoding,
        chain_id,
        size$7,
        to_string$2,
        of_string_opt$0,
        function(s){return [0,Data,s]}),
     raw_encoding=conv(to_bytes,of_bytes_exn$0,0,bytes(size$7)),
     include$10=
      Make$13
       ([0,
         title$2,
         name$3,
         b58check_encoding$0,
         raw_encoding,
         compare$6,
         equal$1,
         hash,
         seeded_hash]),
     of_b58check_exn$0=include$10[2],
     to_b58check$0=include$10[3],
     pp$9=include$10[5],
     pp_short$0=include$10[6],
     encoding$4=include$10[7],
     _GB_=[0,name$4,title$3,size$8,b58check_prefix$9],
     _GC_=[0,register_encoding],
     include$11=function(_bgB_){return _Gq_(_GC_,_bgB_)}(_GB_),
     name$5=include$11[1],
     title$4=include$11[2],
     pp$10=include$11[3],
     compare$10=include$11[11],
     hash_bytes$0=include$11[15],
     to_b58check$1=include$11[31],
     to_short_b58check=include$11[32],
     Data$0=include$11[36],
     b58check_encoding$1=include$11[37],
     encoding$5=include$11[38],
     l1=include$11[46];
    def([0,title$4],name$5,pp$10);
    caml_call3(check_encoded_prefix,b58check_encoding$1,_GD_,36);
    var
     to_string$3=function(s){return to_string(to_bytes$2(s))},
     of_string_opt$1=function(s){return of_bytes_opt$0(to_bytes(s))},
     size$9=function(param){return pk_size},
     Data$1=[num_248,_GE_,caml_fresh_oo_id(0)],
     _GF_=function(x){return [0,Data$1,x]},
     b58check_encoding$2=
      caml_call5
       (register_encoding,
        ed25519_public_key,
        size$9(0),
        to_string$3,
        of_string_opt$1,
        _GF_);
    caml_call3(check_encoded_prefix,b58check_encoding$2,_GG_,54);
    var
     include$12=MakeRaw([0,name$6,of_bytes_opt$0,to_string$3,of_string_opt$1]),
     of_bytes_exn$1=include$12[1],
     include$13=MakeB58([0,name$6,b58check_encoding$2]),
     of_b58check_opt$0=include$13[1],
     of_b58check_exn$1=include$13[2],
     of_b58check=include$13[3],
     to_b58check$2=include$13[4],
     to_short_b58check$0=include$13[5],
     raw_encoding$0=conv(to_bytes$2,of_bytes_exn$1,0,bytes(size$9(0))),
     include$14=
      MakeEncoder
       ([0,
         title$5,
         name$6,
         to_b58check$2,
         to_short_b58check$0,
         of_b58check,
         of_b58check_exn$1,
         of_b58check_opt$0,
         raw_encoding$0]),
     encoding$6=include$14[3],
     to_string$4=function(s){return to_string(to_bytes$2(s))},
     of_string_opt$2=function(s){return of_bytes_opt(to_bytes(s))},
     Data$2=[num_248,_GH_,caml_fresh_oo_id(0)],
     b58check_encoding$3=
      caml_call5
       (register_encoding,
        ed25519_seed,
        size$3,
        to_string$4,
        of_string_opt$2,
        function(sk){return [0,Data$2,sk]}),
     _GI_=function(x){return [0,Data$2,x]},
     _GJ_=
      function(buf)
       {var sk=sub(to_bytes(buf),0,size$3);return of_bytes_opt(sk)},
     secret_key_encoding=
      caml_call5
       (register_encoding,
        ed25519_secret_key,
        64,
        function(sk)
         {var pk=to_public_key(sk),buf=caml_create_bytes(64);
          blit_to_bytes(sk,0,buf);
          blit_to_bytes(pk,[0,size$3],buf);
          return to_string(buf)},
        _GJ_,
        _GI_),
     of_b58check_opt$1=
      function(s)
       {var match=simple_decode(0,b58check_encoding$3,s);
        if(match){var x=match[1];return [0,x]}
        return simple_decode(0,secret_key_encoding,s)},
     of_b58check_exn$2=
      function(s)
       {var match=of_b58check_opt$1(s);
        if(match){var x=match[1];return x}
        return caml_call1(kstr(failwith,_GK_),name$7)},
     of_b58check$0=
      function(s)
       {var match=of_b58check_opt$1(s);
        if(match){var x=match[1];return [0,x]}
        return caml_call2(generic_error(_GL_),name$7,s)},
     to_b58check$3=function(s){return simple_encode(0,b58check_encoding$3,s)},
     to_short_b58check$1=
      function(s)
       {var _bgA_=10 + caml_ml_string_length(b58check_encoding$3[1]) | 0;
        return sub$0(to_b58check$3(s),0,_bgA_)};
    caml_call3(check_encoded_prefix,b58check_encoding$3,_GM_,54);
    caml_call3(check_encoded_prefix,secret_key_encoding,_GN_,98);
    var
     include$15=MakeRaw([0,name$7,of_bytes_opt,to_string$4,of_string_opt$2]),
     of_bytes_exn$2=include$15[1],
     raw_encoding$1=conv(to_bytes$2,of_bytes_exn$2,0,bytes(size$3)),
     include$16=
      MakeEncoder
       ([0,
         title$6,
         name$7,
         to_b58check$3,
         to_short_b58check$1,
         of_b58check$0,
         of_b58check_exn$2,
         of_b58check_opt$1,
         raw_encoding$1]),
     encoding$7=include$16[3],
     to_bytes$6=function(s){return copy(s)},
     to_string$5=function(s){return to_string(to_bytes$6(s))},
     of_bytes_opt$3=function(s){return caml_ml_bytes_length(s) === 64?[0,s]:0},
     of_string_opt$3=function(s){return of_bytes_opt$3(to_bytes(s))},
     Data$3=[num_248,_GO_,caml_fresh_oo_id(0)],
     b58check_encoding$4=
      caml_call5
       (register_encoding,
        ed25519_signature,
        size$2,
        to_string$5,
        of_string_opt$3,
        function(x){return [0,Data$3,x]});
    caml_call3(check_encoded_prefix,b58check_encoding$4,_GP_,99);
    var
     include$17=MakeRaw([0,name$8,of_bytes_opt$3,to_string$5,of_string_opt$3]),
     of_bytes_exn$3=include$17[1],
     include$18=MakeB58([0,name$8,b58check_encoding$4]),
     of_b58check_opt$2=include$18[1],
     of_b58check_exn$3=include$18[2],
     of_b58check$1=include$18[3],
     to_b58check$4=include$18[4],
     to_short_b58check$2=include$18[5],
     raw_encoding$2=conv(to_bytes$6,of_bytes_exn$3,0,bytes(size$2));
    MakeEncoder
     ([0,
       title$7,
       name$8,
       to_b58check$4,
       to_short_b58check$2,
       of_b58check$1,
       of_b58check_exn$3,
       of_b58check_opt$2,
       raw_encoding$2]);
    make(size$2,0);
    var
     _GQ_=[0,name$9,title$8,size$10,b58check_prefix$11],
     _GR_=[0,register_encoding],
     include$19=function(_bgz_){return _Gq_(_GR_,_bgz_)}(_GQ_),
     name$10=include$19[1],
     title$9=include$19[2],
     pp$11=include$19[3],
     compare$11=include$19[11],
     hash_bytes$1=include$19[15],
     to_b58check$5=include$19[31],
     to_short_b58check$3=include$19[32],
     Data$4=include$19[36],
     b58check_encoding$5=include$19[37],
     encoding$8=include$19[38],
     l3=include$19[46];
    def([0,title$9],name$10,pp$11);
    caml_call3(check_encoded_prefix,b58check_encoding$5,_GS_,36);
    var
     to_string$6=function(s){return to_string(to_bytes$3(s))},
     of_string_opt$4=function(s){return of_bytes_opt$1(to_bytes(s))},
     size$11=function(param){return pk_size$0},
     Data$5=[num_248,_GT_,caml_fresh_oo_id(0)],
     _GU_=function(x){return [0,Data$5,x]},
     b58check_encoding$6=
      caml_call5
       (register_encoding,
        p256_public_key,
        size$11(0),
        to_string$6,
        of_string_opt$4,
        _GU_);
    caml_call3(check_encoded_prefix,b58check_encoding$6,_GV_,55);
    var
     include$20=
      MakeRaw([0,name$11,of_bytes_opt$1,to_string$6,of_string_opt$4]),
     of_bytes_exn$4=include$20[1],
     include$21=MakeB58([0,name$11,b58check_encoding$6]),
     of_b58check_opt$3=include$21[1],
     of_b58check_exn$4=include$21[2],
     of_b58check$2=include$21[3],
     to_b58check$6=include$21[4],
     to_short_b58check$4=include$21[5],
     raw_encoding$3=conv(to_bytes$3,of_bytes_exn$4,0,bytes(size$11(0))),
     include$22=
      MakeEncoder
       ([0,
         title$10,
         name$11,
         to_b58check$6,
         to_short_b58check$4,
         of_b58check$2,
         of_b58check_exn$4,
         of_b58check_opt$3,
         raw_encoding$3]),
     encoding$9=include$22[3],
     to_string$7=function(s){return to_string(to_bytes$3(s))},
     of_string_opt$5=function(s){return of_bytes_opt$2(to_bytes(s))},
     Data$6=[num_248,_GW_,caml_fresh_oo_id(0)],
     b58check_encoding$7=
      caml_call5
       (register_encoding,
        p256_secret_key,
        size$5,
        to_string$7,
        of_string_opt$5,
        function(x){return [0,Data$6,x]});
    caml_call3(check_encoded_prefix,b58check_encoding$7,_GX_,54);
    var
     include$23=
      MakeRaw([0,name$12,of_bytes_opt$2,to_string$7,of_string_opt$5]),
     of_bytes_exn$5=include$23[1],
     include$24=MakeB58([0,name$12,b58check_encoding$7]),
     of_b58check_opt$4=include$24[1],
     of_b58check_exn$5=include$24[2],
     of_b58check$3=include$24[3],
     to_b58check$7=include$24[4],
     to_short_b58check$5=include$24[5],
     raw_encoding$4=conv(to_bytes$3,of_bytes_exn$5,0,bytes(size$5)),
     include$25=
      MakeEncoder
       ([0,
         title$11,
         name$12,
         to_b58check$7,
         to_short_b58check$5,
         of_b58check$3,
         of_b58check_exn$5,
         of_b58check_opt$4,
         raw_encoding$4]),
     encoding$10=include$25[3],
     to_bytes$7=function(s){return copy(s)},
     to_string$8=function(s){return to_string(to_bytes$7(s))},
     of_bytes_opt$4=function(s){return caml_ml_bytes_length(s) === 64?[0,s]:0},
     of_string_opt$6=function(s){return of_bytes_opt$4(to_bytes(s))},
     Data$7=[num_248,_GY_,caml_fresh_oo_id(0)],
     b58check_encoding$8=
      caml_call5
       (register_encoding,
        p256_signature,
        size$4,
        to_string$8,
        of_string_opt$6,
        function(x){return [0,Data$7,x]});
    caml_call3(check_encoded_prefix,b58check_encoding$8,_GZ_,98);
    var
     include$26=
      MakeRaw([0,name$13,of_bytes_opt$4,to_string$8,of_string_opt$6]),
     of_bytes_exn$6=include$26[1],
     include$27=MakeB58([0,name$13,b58check_encoding$8]),
     of_b58check_opt$5=include$27[1],
     of_b58check_exn$6=include$27[2],
     of_b58check$4=include$27[3],
     to_b58check$8=include$27[4],
     to_short_b58check$6=include$27[5],
     raw_encoding$5=conv(to_bytes$7,of_bytes_exn$6,0,bytes(size$4));
    MakeEncoder
     ([0,
       title$12,
       name$13,
       to_b58check$8,
       to_short_b58check$6,
       of_b58check$4,
       of_b58check_exn$6,
       of_b58check_opt$5,
       raw_encoding$5]);
    make(size$4,0);
    var
     _G0_=[0,name$14,title$13,size$12,b58check_prefix$10],
     _G1_=[0,register_encoding],
     include$28=function(_bgy_){return _Gq_(_G1_,_bgy_)}(_G0_),
     name$15=include$28[1],
     title$14=include$28[2],
     pp$12=include$28[3],
     compare$12=include$28[11],
     hash_bytes$2=include$28[15],
     to_b58check$9=include$28[31],
     to_short_b58check$7=include$28[32],
     Data$8=include$28[36],
     b58check_encoding$9=include$28[37],
     encoding$11=include$28[38],
     l2=include$28[46];
    def([0,title$14],name$15,pp$12);
    caml_call3(check_encoded_prefix,b58check_encoding$9,_G2_,36);
    var
     ctx=create$12(0,0,0),
     match$1=randomize(ctx,of_bytes$0(gen(32))),
     context=0 === match$1?failwith(_G3_):ctx,
     to_bytes$8=function(pk){return to_bytes$1(to_bytes$4(0,context,pk))},
     of_bytes_opt$5=
      function(s)
       {try
         {var _bgw_=[0,read_pk_exn(context,of_bytes$0(s))];return _bgw_}
        catch(_bgx_){return 0}},
     to_string$9=function(s){return to_string(to_bytes$8(s))},
     of_string_opt$7=function(s){return of_bytes_opt$5(to_bytes(s))},
     size$13=function(param){return compressed_pk_bytes},
     Data$9=[num_248,_G4_,caml_fresh_oo_id(0)],
     _G5_=function(x){return [0,Data$9,x]},
     b58check_encoding$10=
      caml_call5
       (register_encoding,
        secp256k1_public_key,
        size$13(0),
        to_string$9,
        of_string_opt$7,
        _G5_);
    caml_call3(check_encoded_prefix,b58check_encoding$10,_G6_,55);
    var
     include$29=
      MakeRaw([0,name$16,of_bytes_opt$5,to_string$9,of_string_opt$7]),
     of_bytes_exn$7=include$29[1],
     include$30=MakeB58([0,name$16,b58check_encoding$10]),
     of_b58check_opt$6=include$30[1],
     of_b58check_exn$7=include$30[2],
     of_b58check$5=include$30[3],
     to_b58check$10=include$30[4],
     to_short_b58check$8=include$30[5],
     raw_encoding$6=conv(to_bytes$8,of_bytes_exn$7,0,bytes(size$13(0))),
     include$31=
      MakeEncoder
       ([0,
         title$15,
         name$16,
         to_b58check$10,
         to_short_b58check$8,
         of_b58check$5,
         of_b58check_exn$7,
         of_b58check_opt$6,
         raw_encoding$6]),
     encoding$12=include$31[3],
     of_bytes_opt$6=
      function(s)
       {var match=read_sk(context,of_bytes$0(s));
        if(0 === match[0]){var x=match[1];return [0,x]}
        return 0},
     _G7_=0,
     to_bytes$9=function(x){return to_bytes$1(to_bytes$4(_G7_,context,x))},
     to_string$10=function(s){return to_string(to_bytes$9(s))},
     of_string_opt$8=function(s){return of_bytes_opt$6(to_bytes(s))},
     Data$10=[num_248,_G8_,caml_fresh_oo_id(0)],
     b58check_encoding$11=
      caml_call5
       (register_encoding,
        secp256k1_secret_key,
        len$0,
        to_string$10,
        of_string_opt$8,
        function(x){return [0,Data$10,x]});
    caml_call3(check_encoded_prefix,b58check_encoding$11,_G9_,54);
    var
     include$32=
      MakeRaw([0,name$17,of_bytes_opt$6,to_string$10,of_string_opt$8]),
     of_bytes_exn$8=include$32[1],
     include$33=MakeB58([0,name$17,b58check_encoding$11]),
     of_b58check_opt$7=include$33[1],
     of_b58check_exn$8=include$33[2],
     of_b58check$6=include$33[3],
     to_b58check$11=include$33[4],
     to_short_b58check$9=include$33[5],
     raw_encoding$7=conv(to_bytes$9,of_bytes_exn$8,0,bytes(len$0)),
     include$34=
      MakeEncoder
       ([0,
         title$16,
         name$17,
         to_b58check$11,
         to_short_b58check$9,
         of_b58check$6,
         of_b58check_exn$8,
         of_b58check_opt$7,
         raw_encoding$7]),
     encoding$13=include$34[3],
     of_bytes_opt$7=
      function(s)
       {var match=read$0(context,of_bytes$0(s));
        if(0 === match[0]){var s$0=match[1];return [0,s$0]}
        return 0},
     to_bytes$10=
      function(t)
       {if(opt$4)var sth=opt$4[1],der=sth;else var der=0;
        if(0 === t[0])
         if(der)
          var
           buf=create$11(72),
           nb_written=write_exn([0,der],context,buf,t),
           _bgv_=caml_ba_sub(buf,0,nb_written);
         else
          {var buf$0=create$11(size$6);
           write_exn([0,der],context,buf$0,t);
           var _bgv_=buf$0}
        else
         {var buf$1=create$11(recoverable_bytes);
          write_exn(0,context,buf$1,t);
          var _bgv_=buf$1}
        return to_bytes$1(_bgv_)},
     to_string$11=function(s){return to_string(to_bytes$10(s))},
     of_string_opt$9=function(s){return of_bytes_opt$7(to_bytes(s))},
     Data$11=[num_248,_G__,caml_fresh_oo_id(0)],
     b58check_encoding$12=
      caml_call5
       (register_encoding,
        secp256k1_signature,
        size$6,
        to_string$11,
        of_string_opt$9,
        function(x){return [0,Data$11,x]});
    caml_call3(check_encoded_prefix,b58check_encoding$12,_G$_,99);
    var
     include$35=
      MakeRaw([0,name$18,of_bytes_opt$7,to_string$11,of_string_opt$9]),
     of_bytes_exn$9=include$35[1],
     include$36=MakeB58([0,name$18,b58check_encoding$12]),
     of_b58check_opt$8=include$36[1],
     of_b58check_exn$9=include$36[2],
     of_b58check$7=include$36[3],
     to_b58check$12=include$36[4],
     to_short_b58check$10=include$36[5],
     raw_encoding$8=conv(to_bytes$10,of_bytes_exn$9,0,bytes(size$6));
    MakeEncoder
     ([0,
       title$17,
       name$18,
       to_b58check$12,
       to_short_b58check$10,
       of_b58check$7,
       of_b58check_exn$9,
       of_b58check_opt$8,
       raw_encoding$8]);
    caml_call1(of_bytes_exn$9,make(size$6,0));
    var
     Data$12=[num_248,_Ha_,caml_fresh_oo_id(0)],
     _Hb_=function(x){return [0,Data$12,x]},
     _Hc_=function(param){throw [0,Assert_failure,_Hd_]};
    caml_call5
     (register_encoding,
      _Hf_,
      2,
      function(param){throw [0,Assert_failure,_He_]},
      _Hc_,
      _Hb_);
    var
     _Hg_=0,
     _Hh_=function(x){return [2,x]},
     _Hk_=
      [0,
       [0,
        _Hj_,
        0,
        encoding$8,
        function(param)
         {if(2 === param[0]){var x=param[1];return [0,x]}return 0},
        _Hh_,
        _Hi_],
       _Hg_],
     _Hl_=function(x){return [1,x]},
     _Ho_=
      [0,
       [0,
        _Hn_,
        0,
        encoding$11,
        function(param)
         {if(1 === param[0]){var x=param[1];return [0,x]}return 0},
        _Hl_,
        _Hm_],
       _Hk_],
     _Hp_=function(x){return [0,x]},
     _Hs_=
      union$0
       (0,
        [0,
         [0,
          _Hr_,
          0,
          encoding$5,
          function(param)
           {if(0 === param[0]){var x=param[1];return [0,x]}return 0},
          _Hp_,
          _Hq_],
         _Ho_]),
     _Hu_=[0,title$18],
     raw_encoding$9=function(eta){return def$0(_Ht_,0,_Hu_,eta)}(_Hs_),
     of_b58check_opt$9=
      function(s)
       {var match=caml_call2(decode$0,0,s);
        if(match)
         {var _bgu_=match[1];
          if(_bgu_[1] === Data$0){var pkh=_bgu_[2];return [0,[0,pkh]]}
          if(_bgu_[1] === Data$8){var pkh$0=_bgu_[2];return [0,[1,pkh$0]]}
          if(_bgu_[1] === Data$4){var pkh$1=_bgu_[2];return [0,[2,pkh$1]]}}
        return 0},
     of_b58check_exn$10=
      function(s)
       {var match=of_b58check_opt$9(s);
        if(match){var x=match[1];return x}
        return caml_call1(kstr(failwith,_Hv_),name$19)},
     of_b58check$8=
      function(s)
       {var match=of_b58check_opt$9(s);
        if(match){var x=match[1];return [0,x]}
        return caml_call2(generic_error(_Hw_),name$19,s)},
     to_b58check$13=
      function(param)
       {switch(param[0])
         {case 0:var pkh=param[1];return caml_call1(to_b58check$1,pkh);
          case 1:var pkh$0=param[1];return caml_call1(to_b58check$9,pkh$0);
          default:var pkh$1=param[1];return caml_call1(to_b58check$5,pkh$1)}},
     to_short_b58check$11=
      function(param)
       {switch(param[0])
         {case 0:var pkh=param[1];return caml_call1(to_short_b58check,pkh);
          case 1:
           var pkh$0=param[1];return caml_call1(to_short_b58check$7,pkh$0);
          default:
           var pkh$1=param[1];return caml_call1(to_short_b58check$3,pkh$1)}};
    if(l1 === l2)
     {if(l1 === l3)
       {var
         compare$13=
          function(a,match)
           {switch(a[0])
             {case 0:
               var _bgr_=a[1];
               if(0 === match[0])
                {var y=match[1];return caml_call2(compare$10,_bgr_,y)}
               break;
              case 1:
               var _bgs_=a[1];
               if(1 === match[0])
                {var y$0=match[1];return caml_call2(compare$12,_bgs_,y$0)}
               break;
              default:
               var _bgt_=a[1];
               if(2 === match[0])
                {var y$1=match[1];return caml_call2(compare$11,_bgt_,y$1)}}
            return caml_compare(a,match)},
         include$37=_gs_([0,compare$13]),
         compare$14=include$37[7],
         equal$3=include$37[8],
         include$38=
          MakeEncoder
           ([0,
             title$18,
             name$19,
             to_b58check$13,
             to_short_b58check$11,
             of_b58check$8,
             of_b58check_exn$10,
             of_b58check_opt$9,
             raw_encoding$9]),
         pp$13=include$38[1],
         encoding$14=include$38[3],
         of_b58check$9=include$38[4],
         rpc_arg$0=include$38[5];
        MakeIterator([0,encoding$14,compare$14,equal$3,hash,seeded_hash]);
        var rpc_arg$1=like(rpc_arg$0,_Hy_,_Hx_);
        def([0,title$18],name$19,pp$13);
        var
         Data$13=[num_248,_Hz_,caml_fresh_oo_id(0)],
         _HA_=function(x){return [0,Data$13,x]},
         _HB_=function(param){throw [0,Assert_failure,_HC_]};
        caml_call5
         (register_encoding,
          _HE_,
          2,
          function(param){throw [0,Assert_failure,_HD_]},
          _HB_,
          _HA_);
        var
         of_b58check_opt$10=
          function(s)
           {var match=caml_call2(decode$0,0,s);
            if(match)
             {var _bgq_=match[1];
              if(_bgq_[1] === Data$1)
               {var public_key=_bgq_[2];return [0,[0,public_key]]}
              if(_bgq_[1] === Data$9)
               {var public_key$0=_bgq_[2];return [0,[1,public_key$0]]}
              if(_bgq_[1] === Data$5)
               {var public_key$1=_bgq_[2];return [0,[2,public_key$1]]}}
            return 0},
         of_b58check_exn$11=
          function(s)
           {var match=of_b58check_opt$10(s);
            if(match){var x=match[1];return x}
            return caml_call1(kstr(failwith,_HF_),name$20)},
         of_b58check$10=
          function(s)
           {var match=of_b58check_opt$10(s);
            if(match){var x=match[1];return [0,x]}
            return caml_call2(generic_error(_HG_),name$20,s)},
         to_b58check$14=
          function(param)
           {switch(param[0])
             {case 0:var pk=param[1];return caml_call1(to_b58check$2,pk);
              case 1:var pk$0=param[1];return caml_call1(to_b58check$10,pk$0);
              default:var pk$1=param[1];return caml_call1(to_b58check$6,pk$1)}},
         to_short_b58check$12=
          function(param)
           {switch(param[0])
             {case 0:
               var pk=param[1];return caml_call1(to_short_b58check$0,pk);
              case 1:
               var pk$0=param[1];return caml_call1(to_short_b58check$8,pk$0);
              default:
               var pk$1=param[1];return caml_call1(to_short_b58check$4,pk$1)}},
         _HH_=0,
         _HI_=function(x){return [2,x]},
         _HL_=
          [0,
           [0,
            _HK_,
            0,
            encoding$9,
            function(param)
             {if(2 === param[0]){var x=param[1];return [0,x]}return 0},
            _HI_,
            _HJ_],
           _HH_],
         _HM_=function(x){return [1,x]},
         _HP_=
          [0,
           [0,
            _HO_,
            0,
            encoding$12,
            function(param)
             {if(1 === param[0]){var x=param[1];return [0,x]}return 0},
            _HM_,
            _HN_],
           _HL_],
         _HQ_=function(x){return [0,x]},
         _HT_=
          union$0
           (0,
            [0,
             [0,
              _HS_,
              0,
              encoding$6,
              function(param)
               {if(0 === param[0]){var x=param[1];return [0,x]}return 0},
              _HQ_,
              _HR_],
             _HP_]),
         _HV_=[0,title$19],
         raw_encoding$10=function(eta){return def$0(_HU_,0,_HV_,eta)}(_HT_),
         include$39=
          MakeEncoder
           ([0,
             title$19,
             name$20,
             to_b58check$14,
             to_short_b58check$12,
             of_b58check$10,
             of_b58check_exn$11,
             of_b58check_opt$10,
             raw_encoding$10]),
         encoding$15=include$39[3],
         Data$14=[num_248,_HW_,caml_fresh_oo_id(0)],
         _HX_=function(x){return [0,Data$14,x]},
         _HY_=function(param){throw [0,Assert_failure,_HZ_]};
        caml_call5
         (register_encoding,
          _H1_,
          2,
          function(param){throw [0,Assert_failure,_H0_]},
          _HY_,
          _HX_);
        var
         of_b58check_opt$11=
          function(b)
           {var match=caml_call2(decode$0,0,b);
            if(match)
             {var _bgp_=match[1];
              if(_bgp_[1] === Data$2){var sk=_bgp_[2];return [0,[0,sk]]}
              if(_bgp_[1] === Data$10){var sk$0=_bgp_[2];return [0,[1,sk$0]]}
              if(_bgp_[1] === Data$6){var sk$1=_bgp_[2];return [0,[2,sk$1]]}}
            return 0},
         of_b58check_exn$12=
          function(s)
           {var match=of_b58check_opt$11(s);
            if(match){var x=match[1];return x}
            return caml_call1(kstr(failwith,_H2_),name$21)},
         of_b58check$11=
          function(s)
           {var match=of_b58check_opt$11(s);
            if(match){var x=match[1];return [0,x]}
            return caml_call2(generic_error(_H3_),name$21,s)},
         to_b58check$15=
          function(param)
           {switch(param[0])
             {case 0:var sk=param[1];return to_b58check$3(sk);
              case 1:var sk$0=param[1];return caml_call1(to_b58check$11,sk$0);
              default:var sk$1=param[1];return caml_call1(to_b58check$7,sk$1)}},
         to_short_b58check$13=
          function(param)
           {switch(param[0])
             {case 0:var sk=param[1];return to_short_b58check$1(sk);
              case 1:
               var sk$0=param[1];return caml_call1(to_short_b58check$9,sk$0);
              default:
               var sk$1=param[1];return caml_call1(to_short_b58check$5,sk$1)}},
         _H4_=0,
         _H5_=function(x){return [2,x]},
         _H8_=
          [0,
           [0,
            _H7_,
            0,
            encoding$10,
            function(param)
             {if(2 === param[0]){var x=param[1];return [0,x]}return 0},
            _H5_,
            _H6_],
           _H4_],
         _H9_=function(x){return [1,x]},
         _Ia_=
          [0,
           [0,
            _H$_,
            0,
            encoding$13,
            function(param)
             {if(1 === param[0]){var x=param[1];return [0,x]}return 0},
            _H9_,
            _H__],
           _H8_],
         _Ib_=function(x){return [0,x]},
         _Ie_=
          union$0
           (0,
            [0,
             [0,
              _Id_,
              0,
              encoding$7,
              function(param)
               {if(0 === param[0]){var x=param[1];return [0,x]}return 0},
              _Ib_,
              _Ic_],
             _Ia_]),
         _Ig_=[0,title$20],
         raw_encoding$11=function(eta){return def$0(_If_,0,_Ig_,eta)}(_Ie_);
        MakeEncoder
         ([0,
           title$20,
           name$21,
           to_b58check$15,
           to_short_b58check$13,
           of_b58check$11,
           of_b58check_exn$12,
           of_b58check_opt$11,
           raw_encoding$11]);
        var
         to_bytes$11=
          function(param)
           {switch(param[0])
             {case 0:var b=param[1];return to_bytes$6(b);
              case 1:var b$0=param[1];return to_bytes$10(b$0);
              case 2:var b$1=param[1];return to_bytes$7(b$1);
              default:var b$2=param[1];return b$2}},
         of_bytes_opt$8=
          function(s){return caml_ml_bytes_length(s) === 64?[0,[3,s]]:0},
         to_string$12=function(s){return to_string(to_bytes$11(s))},
         of_string_opt$10=function(s){return of_bytes_opt$8(to_bytes(s))},
         Data$15=[num_248,_Ih_,caml_fresh_oo_id(0)],
         b58check_encoding$13=
          caml_call5
           (register_encoding,
            generic_signature,
            size$2,
            to_string$12,
            of_string_opt$10,
            function(x){return [0,Data$15,x]});
        caml_call3(check_encoded_prefix,b58check_encoding$13,_Ii_,96);
        var
         include$40=
          MakeRaw([0,name$22,of_bytes_opt$8,to_string$12,of_string_opt$10]),
         of_bytes_exn$10=include$40[1],
         of_b58check_opt$12=
          function(s)
           {if(has_prefix(b58check_encoding$4[3],s))
             {var _bgm_=caml_call1(of_b58check_opt$2,s);
              return map$0(function(x){return [0,x]},_bgm_)}
            if(has_prefix(b58check_encoding$12[3],s))
             {var _bgn_=caml_call1(of_b58check_opt$8,s);
              return map$0(function(x){return [1,x]},_bgn_)}
            if(has_prefix(b58check_encoding$8[3],s))
             {var _bgo_=caml_call1(of_b58check_opt$5,s);
              return map$0(function(x){return [2,x]},_bgo_)}
            return simple_decode(0,b58check_encoding$13,s)},
         of_b58check_exn$13=
          function(s)
           {var match=of_b58check_opt$12(s);
            if(match){var x=match[1];return x}
            return caml_call1(kstr(failwith,_Ij_),name$22)},
         of_b58check$12=
          function(s)
           {var match=of_b58check_opt$12(s);
            if(match){var x=match[1];return [0,x]}
            return caml_call2(generic_error(_Ik_),name$22,s)},
         to_b58check$16=
          function(param)
           {switch(param[0])
             {case 0:var b=param[1];return caml_call1(to_b58check$4,b);
              case 1:var b$0=param[1];return caml_call1(to_b58check$12,b$0);
              case 2:var b$1=param[1];return caml_call1(to_b58check$8,b$1);
              default:
               var b$2=param[1];
               return simple_encode(0,b58check_encoding$13,[3,b$2])}},
         to_short_b58check$14=
          function(param)
           {switch(param[0])
             {case 0:var b=param[1];return caml_call1(to_short_b58check$2,b);
              case 1:
               var b$0=param[1];return caml_call1(to_short_b58check$10,b$0);
              case 2:
               var b$1=param[1];return caml_call1(to_short_b58check$6,b$1);
              default:
               var b$2=param[1];
               return simple_encode(0,b58check_encoding$13,[3,b$2])}},
         raw_encoding$12=conv(to_bytes$11,of_bytes_exn$10,0,bytes(size$2)),
         include$41=
          MakeEncoder
           ([0,
             title$21,
             name$22,
             to_b58check$16,
             to_short_b58check$14,
             of_b58check$12,
             of_b58check_exn$13,
             of_b58check_opt$12,
             raw_encoding$12]),
         encoding$16=include$41[3],
         rpc_arg$2=include$41[5],
         _Il_=[0,name$23,title$22,0,b58check_prefix$3],
         _Im_=[0,register_encoding],
         include$42=function(_bgl_){return _Gq_(_Im_,_bgl_)}(_Il_),
         name$24=include$42[1],
         title$23=include$42[2],
         pp$14=include$42[3],
         pp_short$1=include$42[4],
         hash$2=include$42[17],
         to_b58check$17=include$42[31],
         b58check_encoding$14=include$42[37],
         encoding$17=include$42[38],
         protocols_arg=include$42[39],
         Table=include$42[49];
        caml_call3(check_encoded_prefix,b58check_encoding$14,_In_,51);
        def([0,title$23],name$24,pp$14);
        var
         _Io_=[0,name$25,title$24,0,b58check_prefix$6],
         _Ip_=[0,register_encoding],
         include$43=function(_bgk_){return _Gq_(_Ip_,_bgk_)}(_Io_),
         to_bytes$12=include$43[27],
         b58check_encoding$15=include$43[37],
         encoding$18=include$43[38];
        caml_call3(check_encoded_prefix,b58check_encoding$15,_Iq_,51);
        var
         _Ir_=[0,to_bytes$12],
         _Is_=[0,name$26,title$25,0,b58check_prefix$7],
         _It_=[0,register_encoding],
         include$44=function(_bgj_){return _Gp_(_It_,_Is_,_bgj_)}(_Ir_),
         to_bytes$13=include$44[28],
         b58check_encoding$16=include$44[38];
        caml_call3(check_encoded_prefix,b58check_encoding$16,_Iu_,52);
        var
         _Iv_=[0,to_bytes$13],
         _Iw_=[0,name$27,title$26,0,b58check_prefix$8],
         _Ix_=[0,register_encoding],
         include$45=function(_bgi_){return _Gp_(_Ix_,_Iw_,_bgi_)}(_Iv_),
         b58check_encoding$17=include$45[38],
         encoding$19=include$45[39];
        caml_call3(check_encoded_prefix,b58check_encoding$17,_Iy_,53);
        var
         _Iz_=[0,name$28,title$27,0,b58check_prefix$0],
         _IA_=[0,register_encoding],
         include$46=function(_bgh_){return _Gq_(_IA_,_bgh_)}(_Iz_),
         name$29=include$46[1],
         title$28=include$46[2],
         pp$15=include$46[3],
         pp_short$2=include$46[4],
         to_bytes$14=include$46[27],
         b58check_encoding$18=include$46[37],
         encoding$20=include$46[38],
         Set$1=include$46[47],
         Map=include$46[48];
        caml_call3(check_encoded_prefix,b58check_encoding$18,_IB_,51);
        def([0,title$28],name$29,pp$15);
        var
         _IC_=[0,to_bytes$14],
         _ID_=[0,name$30,title$29,0,b58check_prefix$1],
         _IE_=[0,register_encoding],
         include$47=function(_bgg_){return _Gp_(_IE_,_ID_,_bgg_)}(_IC_),
         to_bytes$15=include$47[28],
         b58check_encoding$19=include$47[38];
        caml_call3(check_encoded_prefix,b58check_encoding$19,_IF_,52);
        var
         _IG_=[0,to_bytes$15],
         _IH_=[0,name$31,title$30,0,b58check_prefix$2],
         _II_=[0,register_encoding],
         include$48=function(_bgf_){return _Gp_(_II_,_IH_,_bgf_)}(_IG_),
         pp_short$3=include$48[5],
         b58check_encoding$20=include$48[38],
         encoding$21=include$48[39];
        caml_call3(check_encoded_prefix,b58check_encoding$20,_IJ_,53);
        var
         nonce_size=24,
         _IK_=[0,name$32,title$31,size$14,b58check_prefix$12],
         _IL_=[0,register_encoding],
         include$49=function(_bge_){return _Gq_(_IL_,_bge_)}(_IK_);
        caml_call3(check_encoded_prefix,include$49[37],_IM_,30);
        var nonce=make(nonce_size,0);
        to_bytes(_IN_);
        to_bytes(_IO_);
        var
         make_target=
          function(f)
           {var _bgb_=f < 0.?1:0,_bgc_=_bgb_ || (256. < f?1:0);
            if(_bgc_)invalid_arg(_IP_);
            var
             match=caml_modf_float(f),
             shift=match[2],
             frac=match[1],
             shift$0=shift | 0;
            if(frac == 0.)
             var n=caml_int64_shift_left(_IQ_,54),_bgd_=caml_int64_sub(n,_Z_);
            else
             var _bgd_=caml_int64_of_float(Math.pow(2.,54. - frac));
            var m=ml_z_of_int64(_bgd_);
            return num_202 <= shift$0
                    ?ml_z_shift_right(m,shift$0 - 202 | 0)
                    :ml_z_logor
                      (ml_z_shift_left(m,num_202 - shift$0 | 0),
                       ml_z_pred(ml_z_shift_left(one,num_202 - shift$0 | 0)))};
        make_target(24.);
        make_target(0.);
        bytes(public_key_size);
        bytes(secret_key_size);
        bytes(nonce_size);
        var
         _IR_=[0,name$33,title$32,0,b58check_prefix$4],
         _IS_=[0,register_encoding],
         include$50=function(_bga_){return _Gq_(_IS_,_bga_)}(_IR_),
         pp$16=include$50[3],
         pp_short$4=include$50[4],
         b58check_encoding$21=include$50[37],
         encoding$22=include$50[38];
        caml_call3(check_encoded_prefix,b58check_encoding$21,_IT_,52);
        var
         _IU_=[0,name$34,title$33,0,b58check_prefix$5],
         _IV_=[0,register_encoding],
         include$51=function(_bf$_){return _Gq_(_IV_,_bf$_)}(_IU_),
         name$35=include$51[1],
         title$34=include$51[2],
         pp$17=include$51[3],
         b58check_encoding$22=include$51[37],
         encoding$23=include$51[38];
        caml_call3(check_encoded_prefix,b58check_encoding$22,_IW_,52);
        def([0,title$34],name$35,pp$17);
        var
         Parse_error$2=[num_248,_IX_,caml_fresh_oo_id(0)],
         semi_colon_and_rules=
          function(lexbuf)
           {var ocaml_lex_state=13;
            for(;;)
             {var ocaml_lex_state$0=engine(tbl,ocaml_lex_state,lexbuf);
              if(2 < ocaml_lex_state$0 >>> 0)
               {caml_call1(lexbuf[1],lexbuf);
                var ocaml_lex_state=ocaml_lex_state$0;
                continue}
              switch(ocaml_lex_state$0)
               {case 0:return _IY_(lexbuf);
                case 1:return 0;
                default:throw Parse_error$2}}},
         _IY_=
          function(lexbuf)
           {lexbuf[10] = caml_make_vect(8,-1);
            var _bf6_=lexbuf[6];
            caml_check_bound(lexbuf[10],4)[5] = _bf6_;
            var _bf7_=lexbuf[6];
            caml_check_bound(lexbuf[10],3)[4] = _bf7_;
            var ocaml_lex_state$0=0;
            for(;;)
             {var
               ocaml_lex_state=
                caml_new_lex_engine(tbl,ocaml_lex_state$0,lexbuf),
               _bf3_=0 <= ocaml_lex_state?1:0,
               _bf4_=_bf3_?lexbuf[12] !== dummy_pos?1:0:_bf3_;
              if(_bf4_)
               {lexbuf[11] = lexbuf[12];
                var _bf5_=lexbuf[12];
                lexbuf[12]
                =
                [0,_bf5_[1],_bf5_[2],_bf5_[3],lexbuf[4] + lexbuf[6] | 0]}
              if(3 < ocaml_lex_state >>> 0)
               {caml_call1(lexbuf[1],lexbuf);
                var ocaml_lex_state$0=ocaml_lex_state;
                continue}
              switch(ocaml_lex_state)
               {case 0:
                 var
                  _bf8_=caml_check_bound(lexbuf[10],1)[2],
                  pattern=
                   sub_lexeme(lexbuf,caml_check_bound(lexbuf[10],0)[1],_bf8_),
                  _bf9_=lexbuf[6],
                  level=
                   sub_lexeme(lexbuf,caml_check_bound(lexbuf[10],2)[3],_bf9_);
                 return [0,[0,pattern,level],semi_colon_and_rules(lexbuf)];
                case 1:
                 var
                  _bf__=lexbuf[6],
                  level$0=
                   sub_lexeme(lexbuf,caml_check_bound(lexbuf[10],0)[1],_bf__);
                 return [0,[0,_IZ_,level$0],semi_colon_and_rules(lexbuf)];
                case 2:return 0;
                default:throw Parse_error$2}}},
         rules=
          function(buf)
           {try
             {var _bf1_=[0,_IY_(buf)];return _bf1_}
            catch(_bf2_)
             {_bf2_ = caml_wrap_exception(_bf2_);
              if(_bf2_ === Parse_error$2)return 0;
              throw _bf2_}},
         sub_equal=
          function(str,ofs,patt)
           {var
             str_len=caml_ml_string_length(str),
             patt_len=caml_ml_string_length(patt),
             _bf0_=(ofs + patt_len | 0) <= str_len?1:0;
            if(_bf0_)
             {var ofs$0=ofs,ofs_patt=0;
              for(;;)
               {var _bfW_=ofs_patt === patt_len?1:0;
                if(_bfW_)
                 var _bfX_=_bfW_;
                else
                 {var
                   _bfY_=caml_string_get(patt,ofs_patt),
                   _bfZ_=caml_string_get(str,ofs$0) === _bfY_?1:0;
                  if(_bfZ_)
                   {var
                     ofs_patt$0=ofs_patt + 1 | 0,
                     ofs$1=ofs$0 + 1 | 0,
                     ofs$0=ofs$1,
                     ofs_patt=ofs_patt$0;
                    continue}
                  var _bfX_=_bfZ_}
                return _bfX_}}
            return _bf0_},
         rules$0=[0,0],
         load_rules=
          function(str,fail_on_error)
           {function loop(param)
             {var param$0=param;
              for(;;)
               {if(param$0)
                 {var
                   rest=param$0[2],
                   match=param$0[1],
                   level_str=match[2],
                   pattern$0=match[1],
                   len=caml_ml_string_length(pattern$0),
                   loop$1=
                    function(len,pattern)
                     {function loop(ofs)
                       {if(ofs === len)return _Jk_;
                        try
                         {var _bfU_=[0,index_from(pattern,ofs,42)],_bfS_=_bfU_}
                        catch(_bfV_)
                         {_bfV_ = caml_wrap_exception(_bfV_);
                          if(_bfV_ !== Not_found)throw _bfV_;
                          var _bfS_=0}
                        if(_bfS_)
                         {var ofs$0=_bfS_[1],_bfT_=loop(ofs$0 + 1 | 0);
                          return [0,sub$0(pattern,ofs,ofs$0 - ofs | 0),_bfT_]}
                        return [0,sub$0(pattern,ofs,len - ofs | 0),0]}
                      return loop},
                   loop$0=loop$1(len,pattern$0),
                   pattern=loop$0(0),
                   s=caml_bytes_of_string(level_str),
                   str=caml_string_of_bytes(map$2(lowercase,s)),
                   level=
                    caml_string_notequal(str,_I8_)
                     ?caml_string_notequal(str,_I9_)
                       ?caml_string_notequal(str,_I__)
                         ?caml_string_notequal(str,_I$_)
                           ?caml_string_notequal(str,_Ja_)
                             ?caml_string_notequal(str,_Jb_)?0:_Jc_
                             :_Jd_
                           :_Je_
                         :_Jf_
                       :_Jg_
                     :_Jh_;
                  if(level)
                   {var level$0=level[1];
                    return [0,[0,pattern,level$0],loop(rest)]}
                  if(fail_on_error)throw [0,Failure,_Jl_];
                  caml_call1
                   (eprintf(symbol$0(_I1_,symbol$0(fmt$0,_I0_))),level_str);
                  var param$0=rest;
                  continue}
                return 0}}
            var match=rules(from_string(0,str));
            if(match){var l=match[1];rules$0[1] = loop(l);return 0}
            if(fail_on_error)throw [0,Failure,_Jm_];
            return eprintf(_Jn_)};
        try
         {var _aMB_=[0,caml_sys_getenv(_aMA_)],_Jo_=_aMB_}
        catch(_bfR_)
         {_bfR_ = caml_wrap_exception(_bfR_);
          if(_bfR_ !== Not_found)throw _bfR_;
          var _Jo_=0}
        if(_Jo_){var str=_Jo_[1];load_rules(str,0)}
        var
         equal$4=function(a,b){return caml_string_equal(a[1],b[1])},
         hash$3=function(s){return caml_hash(10,num_100,0,s[1])},
         Sections=Make$0([0,equal$4,hash$3]),
         sections=caml_call1(Sections[1],32),
         find_level=
          function(name)
           {var param=rules$0[1];
            for(;;)
             {if(param)
               {var
                 rest=param[2],
                 match=param[1],
                 level=match[2],
                 pattern$0=match[1],
                 length=caml_ml_string_length(name),
                 loop$0=
                  function(length)
                   {function loop(offset,pattern)
                     {if(offset === length)
                       {var
                         _bfL_=0 === pattern?1:0,
                         _bfM_=_bfL_ || caml_equal(pattern,_Ji_);
                        return _bfM_}
                      if(pattern)
                       {var
                         pattern$0=pattern[2],
                         literal=pattern[1],
                         literal_length=caml_ml_string_length(literal),
                         max_offset=length - literal_length | 0,
                         offset$0=offset;
                        for(;;)
                         {var _bfN_=offset$0 <= max_offset?1:0;
                          if(_bfN_)
                           {var
                             _bfO_=sub_equal(name,offset$0,literal),
                             _bfP_=
                              _bfO_?loop(offset$0 + literal_length | 0,pattern$0):_bfO_;
                            if(! _bfP_)
                             {var offset$1=offset$0 + 1 | 0,offset$0=offset$1;continue}
                            var _bfQ_=_bfP_}
                          else
                           var _bfQ_=_bfN_;
                          return _bfQ_}}
                      return 0}
                    return loop},
                 loop=loop$0(length);
                if(pattern$0)
                 var
                  pattern=pattern$0[2],
                  literal=pattern$0[1],
                  _bfJ_=sub_equal(name,0,literal),
                  _bfK_=
                   _bfJ_?loop(caml_ml_string_length(literal),pattern):_bfJ_;
                else
                 var _bfK_=caml_string_equal(name,_Jj_);
                if(_bfK_)return level;
                var param=rest;
                continue}
              return 2}},
         make$6=
          function(name)
           {var section=[0,name,2,0];
            try
             {var _bfH_=caml_call2(Sections[6],sections,section);return _bfH_}
            catch(_bfI_)
             {_bfI_ = caml_wrap_exception(_bfI_);
              if(_bfI_ === Not_found)
               {section[2] = find_level(name);
                caml_call2(Sections[4],sections,section);
                return section}
              throw _bfI_}},
         default_section=make$6(_Jp_),
         Logger_closed=[num_248,_Jq_,caml_fresh_oo_id(0)],
         make$7=function(output,close){return [0,0,output,from_fun(close)]},
         location_key=new_key(0),
         logger=
          make$7(function(section,level,lines){return return_unit},return$1),
         check_name_exn=
          function(name,make_exn)
           {iter$1
             (function(c)
               {var switch$0=0;
                if(96 <= c)
                 {if(num_123 <= c)
                   {if(num_126 !== c)switch$0 = 1}
                  else
                   if(! (97 <= c))switch$0 = 1}
                else
                 {var _bfF_=c + num_43 | 0;
                  if(47 < _bfF_ >>> 0)
                   {if(! (52 <= _bfF_))switch$0 = 1}
                  else
                   if(! (21 <= _bfF_))
                    switch(_bfF_)
                     {case 1:
                      case 3:
                      case 4:
                      case 15:
                      case 16:
                      case 17:
                      case 19:
                      case 20:switch$0 = 1;break
                      }}
                var _bfG_=switch$0?0:1;
                if(_bfG_)return 0;
                throw caml_call2(make_exn,name,c)},
              name);
            return 0},
         encoding$24=
          string_enum
           (map$1
             (function(l)
               {switch(l)
                 {case 0:var _bfE_=_I2_;break;
                  case 1:var _bfE_=_I3_;break;
                  case 2:var _bfE_=_I4_;break;
                  case 3:var _bfE_=_I5_;break;
                  case 4:var _bfE_=_I6_;break;
                  default:var _bfE_=_I7_}
                return [0,_bfE_,l]},
              _Jr_)),
         to_lwt_log=function(s){return make$6(concat$0(_Jt_,s))},
         encoding$25=list$1(0,output),
         registered_sections=[0,Set[1]],
         registered=[0,0],
         _Ju_=0,
         find_registered_exn=
          function(scheme_to_find)
           {var _bfD_=registered[1];
            return find
                    (function(param)
                      {var scheme=param[1];
                       return caml_string_equal(scheme,scheme_to_find)},
                     _bfD_)},
         Activation_error=[num_248,_Jx_,caml_fresh_oo_id(0)],
         _Jy_=function(reason){return [0,Activation_error,reason]},
         _Jz_=
          function(param)
           {if(param[1] === Activation_error)
             {var reason=param[2];return [0,reason]}
            return 0},
         _JA_=0,
         _JB_=function(uri){return [1,uri]},
         _JC_=
          function(param)
           {if(0 === param[0])return 0;var uri=param[1];return [0,uri]},
         _JH_=
          [0,
           [0,
            _JG_,
            0,
            obj1([0,_JE_,obj1([0,_JD_,output,0,0]),0,0]),
            _JC_,
            _JB_,
            _JF_],
           _JA_],
         _JI_=function(uri){return [0,uri]},
         _JJ_=
          function(param)
           {if(0 === param[0]){var uri=param[1];return [0,uri]}return 0},
         _JO_=
          union$0
           (0,
            [0,
             [0,
              _JN_,
              0,
              obj1([0,_JL_,obj1([0,_JK_,output,0,0]),0,0]),
              _JJ_,
              _JI_,
              _JM_],
             _JH_]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _JR_,
          title$35,
          description$0,
          [0,
           function(ppf,param)
            {if(0 === param[0])
              {var uri=param[1];return caml_call3(pf(ppf),_JP_,title$35,uri)}
             var uri$0=param[1];
             return caml_call3(pf(ppf),_JQ_,title$35,uri$0)}],
          _JO_,
          _Jz_,
          _Jy_);
        var
         all=[0,0],
         registration_exn=
          function(fmt)
           {return kstr
                    (function(s){return [0,Invalid_argument,symbol(_JS_,s)]},
                     fmt)},
         add$5=
          function(E)
           {try
             {var _bfA_=all[1];
              find
               (function(param)
                 {var match=param[1],n=match[1];
                  return caml_string_equal(E[1],n)},
                _bfA_)}
            catch(_bfC_)
             {var _bfz_=registration_exn(_JT_);
              check_name_exn(E[1],_bfz_);
              all[1] = [0,[0,[0,E[1],E]],all[1]];
              return 0}
            var _bfB_=E[1];
            throw caml_call1(registration_exn(_JU_),_bfB_)},
         Make$15=
          function(E)
           {var name=E[1],doc=E[2],pp=E[3],encoding=E[4],level=E[5];
            function emit(section,x)
             {var x$0=[num_246,function(_bfy_){return caml_call1(x,0)}];
              function v(param)
               {var _bfx_=caml_obj_tag(x$0);
                return num_250 === _bfx_
                        ?x$0[1]
                        :num_246 === _bfx_?force_lazy_block(x$0):x$0}
              return caml_call2
                      (iter_s,
                       function(param)
                        {var definition=param[4],sink=param[3];
                         return caml_call4(definition[3],sink,E,section,v)},
                       _Ju_)}
            add$5(E);
            return [0,name,doc,pp,encoding,level,emit]},
         _J9_=[0,_J8_,list$1(0,error_encoding),0,0],
         _Ka_=[0,_J$_,string_enum(_J__),0,0],
         _Kc_=obj3(opt$2(0,0,_Kb_,output),_Ka_,_J9_),
         _Kd_=0,
         _Ke_=
          function(param)
           {var trace=param[3],severity=param[2],message=param[1];
            return [0,message,severity,trace]},
         v0_encoding=
          conv
           (function(param)
             {var trace=param[3],severity=param[2],message=param[1];
              return [0,message,severity,trace]},
            _Ke_,
            _Kd_,
            _Kc_),
         encoding$26=encoding$0(name$36,[0,v0_encoding]),
         pp$18=
          function(param,f,x)
           {var _bfw_=x[1];
            if(_bfw_)var x$0=_bfw_[1],x$1=x$0;else var x$1=_Kg_;
            return caml_call3(pf(f),_Kf_,name$36,x$1)},
         level=
          function(param)
           {var severity=param[2];return num_243443684 <= severity?5:4};
        Make$15([0,name$36,doc$0,pp$18,encoding$26,level]);
        var
         _Kj_=obj2([0,_Ki_,output,0,0],[0,_Kh_,json$0,0,0]),
         _Kk_=0,
         _Kl_=
          function(param)
           {var attachment=param[2],message=param[1];
            return [0,message,attachment]},
         v0_encoding$0=
          conv
           (function(param)
             {var attachment=param[2],message=param[1];
              return [0,message,attachment]},
            _Kl_,
            _Kk_,
            _Kj_),
         encoding$27=encoding$0(name$37,[0,v0_encoding$0]),
         pp$19=
          function(param,ppf,_bfv_)
           {var attachment=_bfv_[2],message=_bfv_[1];
            return caml_call5(pf(ppf),_Km_,name$37,message,pp$6,attachment)},
         level$0=function(param){return 0};
        Make$15([0,name$37,doc$1,pp$19,encoding$27,level$0]);
        var
         _Kn_=0,
         _Ko_=function(param){var s=param[2];return [0,num_479410653,s]},
         _Kp_=
          function(param)
           {if(typeof param !== "number" && num_479410653 === param[1])
             {var s=param[2];return [0,[0,0,s]]}
            return 0},
         _Kv_=
          [0,
           [0,
            _Ku_,
            0,
            obj2([0,_Ks_,constant(_Kr_),0,0],[0,_Kq_,output,0,0]),
            _Kp_,
            _Ko_,
            _Kt_],
           _Kn_],
         _Kw_=function(param){return num_61323482},
         _Kx_=function(param){return num_61323482 === param?_Ky_:0},
         _KD_=
          [0,[0,_KC_,0,obj1([0,_KA_,constant(_Kz_),0,0]),_Kx_,_Kw_,_KB_],_Kv_],
         _KE_=function(param){return num_40653089},
         _KF_=function(param){return num_40653089 === param?_KG_:0},
         _KN_=
          obj2
           ([0,_KM_,output,0,0],
            [0,
             _KL_,
             union$0
              (0,
               [0,
                [0,_KK_,0,obj1([0,_KI_,constant(_KH_),0,0]),_KF_,_KE_,_KJ_],
                _KD_]),
             0,
             0]),
         _KO_=0,
         _KP_=
          function(param)
           {var event=param[2],name=param[1];return [0,name,event]},
         v0_encoding$1=
          conv
           (function(param)
             {var event=param[2],name=param[1];return [0,name,event]},
            _KP_,
            _KO_,
            _KN_),
         encoding$28=encoding$0(name$38,[0,v0_encoding$1]),
         pp$20=
          function(param,ppf,_bft_)
           {var event=_bft_[2],name=_bft_[1];
            function _bfu_(fmt,param)
             {if(typeof param === "number")
               return num_61323482 <= param
                       ?caml_call1(pf(fmt),_KQ_)
                       :caml_call1(pf(fmt),_KR_);
              var msg=param[2];
              return caml_call2(pf(ppf),_KS_,msg)}
            return caml_call4(pf(ppf),_KT_,name,_bfu_,event)},
         level$1=
          function(param)
           {var event=param[2];return typeof event === "number"?0:4};
        Make$15([0,name$38,doc$2,pp$20,encoding$28,level$1]);
        var
         configure=function(param){return return_unit$0},
         handle=
          function(param,m,section,v)
           {function t(param)
             {var
               ev=caml_call1(v,0),
               sth=fold(default_section,to_lwt_log,section),
               level=caml_call1(m[5],ev);
              function _bfm_(param){return return_unit$0}
              var opt=[0,sth],_bfn_=caml_call1(m[3],0);
              return caml_call2
                      (symbol_bind$2,
                       caml_call2
                        (kstr
                          (function(message)
                            {var location=0,section=opt?sth:default_section;
                             return logger[1]
                                     ?fail(Logger_closed)
                                     :section[2] <= level
                                       ?with_value
                                         (location_key,
                                          location,
                                          function(param)
                                           {var
                                             r=[0,0],
                                             j=[0,caml_ml_string_length(message)],
                                             _bfo_=caml_ml_string_length(message) - 1 | 0;
                                            if(! (_bfo_ < 0))
                                             {var i=_bfo_;
                                              for(;;)
                                               {if(caml_string_unsafe_get(message,i) === 10)
                                                 {var _bfr_=r[1];
                                                  r[1]
                                                  =
                                                  [0,sub$0(message,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_bfr_];
                                                  j[1] = i}
                                                var _bfs_=i - 1 | 0;
                                                if(0 !== i){var i=_bfs_;continue}
                                                break}}
                                            var _bfp_=r[1],_bfq_=[0,sub$0(message,0,j[1]),_bfp_];
                                            return caml_call3(logger[2],section,level,_bfq_)})
                                       :return_unit},
                           _KU_),
                         _bfn_,
                         ev),
                       _bfm_)}
            var
             res=
              catch$0(t,function(exn){return caml_call1(fail$1,[0,Exn,exn])});
            return caml_call2
                    (symbol_bind$2,
                     res,
                     function(param){return 0 === param[0]?res:res})},
         close=
          function(param)
           {function _bfk_(param){return return_unit$0}
            logger[1] = 1;
            var
             _bfi_=logger[3],
             _bfj_=caml_obj_tag(_bfi_),
             _bfl_=
              num_250 === _bfj_
               ?_bfi_[1]
               :num_246 === _bfj_?force_lazy_block(_bfi_):_bfi_;
            return caml_call2(symbol_bind$2,_bfl_,_bfk_)},
         S=[0,uri_scheme,configure,handle,close];
        try
         {var switch$1=0;find_registered_exn(S[1]);switch$1 = 1}
        catch(_bfh_){registered[1] = [0,[0,S[1],S],registered[1]]}
        if(switch$1)
         {var _Jv_=S[1];caml_call1(ksprintf(invalid_arg,_Jw_),_Jv_)}
        var
         _KV_=
          function(P)
           {var section=split_on_char(46,P[1]);
            iter$0
             (function(s)
               {return check_name_exn
                        (s,
                         function(name,char$0)
                          {return caml_call2
                                   (ksprintf(function(s){return [0,Invalid_argument,s]},_Js_),
                                    name,
                                    char$0)})},
              section);
            var name=symbol(_JW_,concat$0(_JV_,section));
            function make(opt,level,message)
             {if(opt)var sth=opt[1],tags=sth;else var tags=empty$0;
              return [0,message,section,level,tags]}
            var _ben_=0;
            function _beo_(param){return empty$0}
            var
             _bep_=
              obj4
               ([0,_J1_,output,0,0],
                [0,_J0_,encoding$25,0,0],
                [0,_JZ_,encoding$24,0,0],
                [2,
                 _JY_,
                 conv
                  (function(tags){return caml_call2(strf(_JX_),pp_set,tags)},
                   _beo_,
                   _ben_,
                   output),
                 empty$0,
                 0,
                 0]),
             _beq_=0;
            function _ber_(param)
             {var
               tags=param[4],
               level=param[3],
               section=param[2],
               message=param[1];
              return [0,message,section,level,tags]}
            var
             v0_encoding=
              conv
               (function(param)
                 {var
                   tags=param[4],
                   level=param[3],
                   section=param[2],
                   message=param[1];
                  return [0,message,section,level,tags]},
                _ber_,
                _beq_,
                _bep_),
             encoding=encoding$0(name,[0,v0_encoding]);
            function pp(param,ppf,_bfg_)
             {var message=_bfg_[1];return caml_call2(pf(ppf),_J2_,message)}
            function level(param){var level=param[3];return level}
            registered_sections[1]
            =
            caml_call2(Set[4],P[1],registered_sections[1]);
            var Event=Make$15([0,name,doc,pp,encoding,level]);
            function emit_async(level,fmt,tags)
             {return kstr
                      (function(message)
                        {function _bff_(param){return make(tags,level,message)}
                         var
                          p=caml_call2(Event[6],[0,section],_bff_),
                          _bfe_=underlying(p)[1];
                         switch(_bfe_[0])
                          {case 1:var exn=_bfe_[1];throw exn;
                           case 2:
                            var
                             p_callbacks=_bfe_[1],
                             callback=
                              function(result)
                               {if(1 === result[0])
                                 {var exn=result[1];
                                  return caml_call1(async_exception_hook[1],exn)}
                                return 0};
                            return add_implicitly_removed_callbac(p_callbacks,callback);
                           default:return 0}},
                       fmt)}
            function emit_lwt(level,fmt,tags)
             {return kstr
                      (function(message)
                        {function _bfc_(param)
                          {if(0 === param[0])return return_unit;
                           var el=param[1];
                           return caml_call2(kstr(fail_with,_J3_),pp_print_error,el)}
                         function _bfd_(param){return make(tags,level,message)}
                         return caml_call2
                                 (symbol_bind$2,caml_call2(Event[6],[0,section],_bfd_),_bfc_)},
                       fmt)}
            function debug(f)
             {var _be__=0,_be$_=0;
              return caml_call2
                      (f,
                       function(_bfa_,_bfb_){return emit_async(_be$_,_bfa_,_bfb_)},
                       _be__)}
            function log_info(f)
             {var _be6_=0,_be7_=1;
              return caml_call2
                      (f,
                       function(_be8_,_be9_){return emit_async(_be7_,_be8_,_be9_)},
                       _be6_)}
            function log_notice(f)
             {var _be2_=0,_be3_=2;
              return caml_call2
                      (f,
                       function(_be4_,_be5_){return emit_async(_be3_,_be4_,_be5_)},
                       _be2_)}
            function warn(f)
             {var _beY_=0,_beZ_=3;
              return caml_call2
                      (f,
                       function(_be0_,_be1_){return emit_async(_beZ_,_be0_,_be1_)},
                       _beY_)}
            function log_error(f)
             {var _beU_=0,_beV_=4;
              return caml_call2
                      (f,
                       function(_beW_,_beX_){return emit_async(_beV_,_beW_,_beX_)},
                       _beU_)}
            function fatal_error(f)
             {var _beQ_=0,_beR_=5;
              return caml_call2
                      (f,
                       function(_beS_,_beT_){return emit_async(_beR_,_beS_,_beT_)},
                       _beQ_)}
            function lwt_debug(f)
             {var _beM_=0,_beN_=0;
              return caml_call2
                      (f,
                       function(_beO_,_beP_){return emit_lwt(_beN_,_beO_,_beP_)},
                       _beM_)}
            function lwt_log_info(f)
             {var _beI_=0,_beJ_=1;
              return caml_call2
                      (f,
                       function(_beK_,_beL_){return emit_lwt(_beJ_,_beK_,_beL_)},
                       _beI_)}
            function lwt_log_notice(f)
             {var _beE_=0,_beF_=2;
              return caml_call2
                      (f,
                       function(_beG_,_beH_){return emit_lwt(_beF_,_beG_,_beH_)},
                       _beE_)}
            function lwt_warn(f)
             {var _beA_=0,_beB_=3;
              return caml_call2
                      (f,
                       function(_beC_,_beD_){return emit_lwt(_beB_,_beC_,_beD_)},
                       _beA_)}
            function lwt_log_error(f)
             {var _bew_=0,_bex_=4;
              return caml_call2
                      (f,
                       function(_bey_,_bez_){return emit_lwt(_bex_,_bey_,_bez_)},
                       _bew_)}
            function lwt_fatal_error(f)
             {var _bes_=0,_bet_=5;
              return caml_call2
                      (f,
                       function(_beu_,_bev_){return emit_lwt(_bet_,_beu_,_bev_)},
                       _bes_)}
            var
             event=def(_J5_,_J4_,pp_print_text),
             exn=
              def
               (_J7_,
                _J6_,
                function(f,e){return pp_print_text(f,to_string$0(e))});
            return [0,
                    Event,
                    debug,
                    log_info,
                    log_notice,
                    warn,
                    log_error,
                    fatal_error,
                    lwt_debug,
                    lwt_log_info,
                    lwt_log_notice,
                    lwt_warn,
                    lwt_log_error,
                    lwt_fatal_error,
                    event,
                    exn]},
         intersect=function(x,y){return 0 !== (x & y)?1:0},
         dummy=-1,
         inexistant=1,
         letter=2,
         not_letter=4,
         search_boundary=32,
         union$2=
          function(l$0,l)
           {var l$2=l$0,l$1=l;
            for(;;)
             {if(l$1)
               {if(l$2)
                 {var
                   r=l$1[2],
                   _bem_=l$1[1],
                   c2=_bem_[2],
                   c1=_bem_[1],
                   r$0=l$2[2],
                   match=l$2[1],
                   c2$0=match[2],
                   c1$0=match[1];
                  if((c2$0 + 1 | 0) < c1)
                   return [0,[0,c1$0,c2$0],union$2(r$0,l$1)];
                  if((c2 + 1 | 0) < c1$0)return [0,[0,c1,c2],union$2(l$2,r)];
                  if(c2$0 < c2)
                   {var l$3=[0,[0,min(c1$0,c1),c2],r],l$2=r$0,l$1=l$3;continue}
                  var l$4=[0,[0,min(c1$0,c1),c2$0],r$0],l$2=l$4,l$1=r;
                  continue}
                return l$1}
              return l$2}},
         inter=
          function(l$0,l)
           {var l$2=l$0,l$1=l;
            for(;;)
             {if(l$1)
               {if(l$2)
                 {var
                   r=l$1[2],
                   _bej_=l$1[1],
                   c2=_bej_[2],
                   c1=_bej_[1],
                   r$0=l$2[2],
                   match=l$2[1],
                   c2$0=match[2],
                   c1$0=match[1];
                  if(caml_lessthan(c2$0,c1)){var l$2=r$0;continue}
                  if(caml_lessthan(c2,c1$0)){var l$1=r;continue}
                  if(caml_lessthan(c2$0,c2))
                   {var _bek_=inter(r$0,l$1);
                    return [0,[0,max(c1$0,c1),c2$0],_bek_]}
                  var _bel_=inter(l$2,r);
                  return [0,[0,max(c1$0,c1),c2],_bel_]}
                return 0}
              return 0}},
         diff=
          function(l$0,l)
           {var l$2=l$0,l$1=l;
            for(;;)
             {if(l$1)
               {if(l$2)
                 {var
                   r=l$1[2],
                   _bei_=l$1[1],
                   c2=_bei_[2],
                   c1=_bei_[1],
                   r$0=l$2[2],
                   match=l$2[1],
                   c2$0=match[2],
                   c1$0=match[1];
                  if(c2$0 < c1)return [0,[0,c1$0,c2$0],diff(r$0,l$1)];
                  if(c2 < c1$0){var l$1=r;continue}
                  var r$1=c2 < c2$0?[0,[0,c2 + 1 | 0,c2$0],r$0]:r$0;
                  if(c1$0 < c1)return [0,[0,c1$0,c1 - 1 | 0],diff(r$1,r)];
                  var l$2=r$1,l$1=r;
                  continue}
                return 0}
              return l$2}},
         single=function(c){return [0,[0,c,c],0]},
         offset=
          function(o,l)
           {if(l)
             {var r=l[2],match=l[1],c2=match[2],c1=match[1];
              return [0,[0,c1 + o | 0,c2 + o | 0],offset(o,r)]}
            return 0},
         empty$5=0,
         hash_rec=
          function(param)
           {if(param)
             {var r=param[2],match=param[1],j=match[2],i=match[1];
              return (i + (13 * j | 0) | 0) + (num_257 * hash_rec(r) | 0) | 0}
            return 0},
         one_char=
          function(param)
           {if(param && ! param[2])
             {var match=param[1],j=match[2],i=match[1];
              if(caml_equal(i,j))return [0,i]}
            return 0},
         compare$15=
          function(param,_beh_)
           {var
             v=_beh_[2],
             j=_beh_[1],
             u=param[2],
             i=param[1],
             c=caml_compare(i,j);
            return 0 === c?caml_compare(u,v):c},
         CSetMap=_au_([0,compare$15]),
         fold_right$1=function(t,init,f){return fold_right(f,t,init)},
         csingle=function(c){return single(c)},
         compare$16=caml_int_compare,
         Set$2=_al_([0,compare$16]),
         hash_combine=function(h,accu){return (accu * num_65599 | 0) + h | 0},
         empty$6=[0,0,Set$2[1]],
         hash$4=
          function(m,accu$1)
           {var
             accu$2=hash_combine(caml_hash(10,num_100,0,m[2]),accu$1),
             l=m[1],
             accu=accu$2;
            for(;;)
             {if(l)
               {var
                 l$0=l[2],
                 match=l[1],
                 i=match[2],
                 a=match[1],
                 accu$0=hash_combine(a,hash_combine(i,accu)),
                 l=l$0,
                 accu=accu$0;
                continue}
              return accu}},
         _KW_=
          function(idx,marks)
           {if(marks)
             {var _beg_=marks[1];
              if(-1 === _beg_[2])
               {var rem=marks[2],a=_beg_[1];
                return [0,[0,a,idx],_KW_(idx,rem)]}}
            return marks},
         marks_set_idx=
          function(marks,idx)
           {var _bef_=marks[2];return [0,_KW_(idx,marks[1]),_bef_]},
         first=
          function(f,param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var r=param$0[2],x=param$0[1],res=caml_call1(f,x);
                if(res)return res;
                var param$0=r;
                continue}
              return 0}},
         mk_expr=function(ids,def){ids[1]++;return [0,ids[1],def]},
         empty$7=function(ids){return mk_expr(ids,_KX_)},
         alt=
          function(ids,l)
           {if(l){if(l[2])return mk_expr(ids,[1,l]);var c=l[1];return c}
            return empty$7(ids)},
         seq$0=
          function(ids,kind,x,y)
           {var _bed_=x[2],_bee_=y[2];
            if(typeof _bed_ !== "number" && 1 === _bed_[0] && ! _bed_[1])
             return x;
            if(typeof _bee_ !== "number" && 1 === _bee_[0] && ! _bee_[1])
             return y;
            if(typeof _bed_ === "number")return y;
            if(typeof _bee_ === "number" && num_332064784 === kind)return x;
            return mk_expr(ids,[2,kind,x,y])},
         is_eps=function(expr){return typeof expr[2] === "number"?1:0},
         eps=function(ids){return mk_expr(ids,0)},
         mark=function(ids,m){return mk_expr(ids,[4,m])},
         before=function(ids,c){return mk_expr(ids,[6,c])},
         after=function(ids,c){return mk_expr(ids,[7,c])},
         rename=
          function(ids,x)
           {var _bea_=x[2];
            if(typeof _bea_ !== "number")
             switch(_bea_[0])
              {case 1:
                var l=_bea_[1];
                return mk_expr
                        (ids,[1,map$1(function(_bec_){return rename(ids,_bec_)},l)]);
               case 2:
                var z=_bea_[3],y=_bea_[2],k=_bea_[1],_beb_=rename(ids,z);
                return mk_expr(ids,[2,k,rename(ids,y),_beb_]);
               case 3:
                var y$0=_bea_[3],k$0=_bea_[2],g=_bea_[1];
                return mk_expr(ids,[3,g,k$0,rename(ids,y$0)])
               }
            return mk_expr(ids,x[2])},
         equal$5=
          function(l1,l2)
           {var l1$0=l1,l2$0=l2;
            for(;;)
             {if(l1$0)
               {var _bdT_=l1$0[1];
                switch(_bdT_[0])
                 {case 0:
                   if(l2$0)
                    {var
                      _bdU_=l2$0[1],
                      _bdV_=l1$0[2],
                      _bdW_=_bdT_[2],
                      _bdX_=_bdT_[1];
                     if(0 === _bdU_[0])
                      {var
                        r2=l2$0[2],
                        e2=_bdU_[2],
                        l2$1=_bdU_[1],
                        _bdY_=_bdW_[1] === e2[1]?1:0;
                       if(_bdY_)
                        {var _bdZ_=equal$5(_bdX_,l2$1);
                         if(_bdZ_){var l1$0=_bdV_,l2$0=r2;continue}
                         var _bd0_=_bdZ_}
                       else
                        var _bd0_=_bdY_;
                       return _bd0_}}
                   break;
                  case 1:
                   if(l2$0)
                    {var
                      _bd1_=l2$0[1],
                      _bd2_=l1$0[2],
                      _bd3_=_bdT_[2],
                      _bd4_=_bdT_[1];
                     if(1 === _bd1_[0])
                      {var
                        r2$0=l2$0[2],
                        e2$0=_bd1_[2],
                        marks2=_bd1_[1],
                        _bd5_=_bd3_[1] === e2$0[1]?1:0;
                       if(_bd5_)
                        {var _bd6_=caml_equal(_bd4_,marks2);
                         if(_bd6_){var l1$0=_bd2_,l2$0=r2$0;continue}
                         var _bd7_=_bd6_}
                       else
                        var _bd7_=_bd5_;
                       return _bd7_}}
                   break;
                  default:
                   if(l2$0)
                    {var _bd8_=l2$0[1],_bd9_=l1$0[2],_bd__=_bdT_[1];
                     if(2 === _bd8_[0])
                      {var
                        r2$1=l2$0[2],
                        marks2$0=_bd8_[1],
                        _bd$_=caml_equal(_bd__,marks2$0);
                       if(_bd$_){var l1$0=_bd9_,l2$0=r2$1;continue}
                       return _bd$_}}}}
              else
               if(! l2$0)return 1;
              return 0}},
         hash$5=
          function(l,accu)
           {var l$0=l,accu$0=accu;
            for(;;)
             {if(l$0)
               {var _bdQ_=l$0[1];
                switch(_bdQ_[0])
                 {case 0:
                   var
                    l$1=l$0[2],
                    e=_bdQ_[2],
                    l$2=_bdQ_[1],
                    _bdR_=hash$5(l$2,accu$0),
                    accu$1=hash_combine(388635598,hash_combine(e[1],_bdR_)),
                    l$0=l$1,
                    accu$0=accu$1;
                   continue;
                  case 1:
                   var
                    l$3=l$0[2],
                    e$0=_bdQ_[2],
                    marks=_bdQ_[1],
                    _bdS_=hash$4(marks,accu$0),
                    accu$2=hash_combine(726404471,hash_combine(e$0[1],_bdS_)),
                    l$0=l$3,
                    accu$0=accu$2;
                   continue;
                  default:
                   var
                    l$4=l$0[2],
                    marks$0=_bdQ_[1],
                    accu$3=hash_combine(471882453,hash$4(marks$0,accu$0)),
                    l$0=l$4,
                    accu$0=accu$3;
                   continue}}
              return accu$0}},
         tseq=
          function(kind,x,y,rem)
           {if(x)
             {var _bdP_=x[1];
              if(1 === _bdP_[0] && typeof _bdP_[2][2] === "number" && ! x[2])
               {var marks=_bdP_[1];return [0,[1,marks,y],rem]}
              return [0,[0,x,y,kind],rem]}
            return rem},
         dummy$0=[0,-1,dummy,0,0,-1],
         mk=
          function(idx,cat,desc)
           {return [0,
                    idx,
                    cat,
                    desc,
                    0,
                    hash$5(desc,hash_combine(idx,hash_combine(cat,0)))
                    &
                    num_1073741823]},
         create$15=function(cat,e){return mk(0,cat,[0,[1,empty$6,e],0])},
         equal$6=
          function(x,y)
           {var _bdL_=x[5] === y[5]?1:0;
            if(_bdL_)
             {var _bdM_=x[1] === y[1]?1:0;
              if(_bdM_)
               {var _bdN_=x[2] === y[2]?1:0;
                if(_bdN_)return equal$5(x[3],y[3]);
                var _bdO_=_bdN_}
              else
               var _bdO_=_bdM_}
            else
             var _bdO_=_bdL_;
            return _bdO_},
         hash$6=function(t){return t[5]},
         Table$0=Make([0,equal$6,hash$6]),
         mark_used_indices=
          function(tbl)
           {function _bdG_(param)
             {if(0 === param[0])
               {var l=param[1];return caml_call1(mark_used_indices(tbl),l)}
              var marks=param[1],_bdI_=marks[1];
              return iter$0
                      (function(param)
                        {var
                          i=param[2],
                          _bdJ_=0 <= i?1:0,
                          _bdK_=_bdJ_?(caml_check_bound(tbl,i)[1 + i] = 1,0):_bdJ_;
                         return _bdK_},
                       _bdI_)}
            return function(_bdH_){return iter$0(_bdG_,_bdH_)}},
         remove_matches=find_all(function(param){return 2 === param[0]?0:1}),
         remove_duplicates=
          function(prev,l,y)
           {var l$0=l;
            for(;;)
             {if(l$0)
               {var _bdE_=l$0[1];
                switch(_bdE_[0])
                 {case 0:
                   var
                    r=l$0[2],
                    kind=_bdE_[3],
                    x=_bdE_[2],
                    l$1=_bdE_[1],
                    match=remove_duplicates(prev,l$1,x),
                    prev$0=match[2],
                    l$2=match[1],
                    match$0=remove_duplicates(prev$0,r,y),
                    prev$1=match$0[2],
                    r$0=match$0[1];
                   return [0,tseq(kind,l$2,x,r$0),prev$1];
                  case 1:
                   var _bdF_=_bdE_[2];
                   if(typeof _bdF_[2] === "number")
                    {var r$1=l$0[2];
                     if(memq(y[1],prev)){var l$0=r$1;continue}
                     var
                      match$1=remove_duplicates([0,y[1],prev],r$1,y),
                      prev$2=match$1[2],
                      r$2=match$1[1];
                     return [0,[0,_bdE_,r$2],prev$2]}
                   var r$3=l$0[2];
                   if(memq(_bdF_[1],prev)){var l$0=r$3;continue}
                   var
                    match$2=remove_duplicates([0,_bdF_[1],prev],r$3,y),
                    prev$3=match$2[2],
                    r$4=match$2[1];
                   return [0,[0,_bdE_,r$4],prev$3];
                  default:return [0,[0,_bdE_,0],prev]}}
              return [0,0,prev]}},
         set_idx=
          function(idx,param)
           {if(param)
             {var _bdA_=param[1];
              switch(_bdA_[0])
               {case 0:
                 var
                  r=param[2],
                  kind=_bdA_[3],
                  x=_bdA_[2],
                  l=_bdA_[1],
                  _bdB_=set_idx(idx,r);
                 return [0,[0,set_idx(idx,l),x,kind],_bdB_];
                case 1:
                 var
                  r$0=param[2],
                  x$0=_bdA_[2],
                  marks=_bdA_[1],
                  _bdC_=set_idx(idx,r$0);
                 return [0,[1,marks_set_idx(marks,idx),x$0],_bdC_];
                default:
                 var r$1=param[2],marks$0=_bdA_[1],_bdD_=set_idx(idx,r$1);
                 return [0,[2,marks_set_idx(marks$0,idx)],_bdD_]}}
            return 0},
         delta_1$0=
          function(counter,marks,c,next_cat,prev_cat,x,rem$0)
           {var _bdu_=x[2];
            if(typeof _bdu_ === "number")
             return [0,[2,marks],rem$0];
            else
             switch(_bdu_[0])
              {case 0:
                var s$0=_bdu_[1],s=s$0;
                for(;;)
                 {if(s)
                   {var rem=s[2],match=s[1],c2=match[2],c1=match[1];
                    if(! (c <= c2)){var s=rem;continue}
                    var _bdv_=c1 <= c?1:0}
                  else
                   var _bdv_=0;
                  return _bdv_?[0,[1,marks,eps_expr],rem$0]:rem$0}
               case 1:
                var l=_bdu_[1];
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return delta_2$0
                          (counter$1,marks,c,next_cat,prev_cat,l,rem$0)}
                return caml_trampoline_return
                        (delta_2$0,[0,marks,c,next_cat,prev_cat,l,rem$0]);
               case 2:
                var
                 z=_bdu_[3],
                 y=_bdu_[2],
                 kind=_bdu_[1],
                 y$0=delta_1(marks,c,next_cat,prev_cat,y,0);
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return delta_seq$0
                          (counter$0,c,next_cat,prev_cat,kind,y$0,z,rem$0)}
                return caml_trampoline_return
                        (delta_seq$0,[0,c,next_cat,prev_cat,kind,y$0,z,rem$0]);
               case 3:
                var
                 y$1=_bdu_[3],
                 kind$0=_bdu_[2],
                 rep_kind=_bdu_[1],
                 y$2=delta_1(marks,c,next_cat,prev_cat,y$1,0),
                 match$0=
                  first
                   (function(param)
                     {if(2 === param[0]){var marks=param[1];return [0,marks]}
                      return 0},
                    y$2);
                if(match$0)
                 var
                  marks$0=match$0[1],
                  y$3=caml_call1(remove_matches,y$2),
                  marks$1=marks$0;
                else
                 var y$3=y$2,marks$1=marks;
                return num_620821490 <= rep_kind
                        ?[0,[2,marks],tseq(kind$0,y$3,x,rem$0)]
                        :tseq(kind$0,y$3,x,[0,[2,marks$1],rem$0]);
               case 4:
                var
                 i=_bdu_[1],
                 _bdw_=marks[2],
                 marks$2=[0,[0,[0,i,-1],remove_assq(i,marks[1])],_bdw_];
                return [0,[2,marks$2],rem$0];
               case 5:
                var e=_bdu_[2],b=_bdu_[1],_bds_=marks[2],_bdt_=marks[1];
                return [0,
                        [2,
                         [0,
                          caml_call1
                           (find_all
                             (function(param)
                               {var i=param[1],_bdy_=i < b?1:0,_bdz_=_bdy_ || (e < i?1:0);
                                return _bdz_}),
                            _bdt_),
                          _bds_]],
                        rem$0];
               case 6:
                var cat=_bdu_[1];
                return intersect(next_cat,cat)?[0,[2,marks],rem$0]:rem$0;
               case 7:
                var cat$0=_bdu_[1];
                return intersect(prev_cat,cat$0)?[0,[2,marks],rem$0]:rem$0;
               default:
                var
                 i$0=_bdu_[1],
                 _bdx_=caml_call2(Set$2[4],i$0,marks[2]),
                 marks$3=[0,marks[1],_bdx_];
                return [0,[2,marks$3],rem$0]}},
         delta_2$0=
          function(counter,marks,c,next_cat,prev_cat,l,rem)
           {if(l)
             {var
               r=l[2],
               y=l[1],
               _bdr_=delta_2(marks,c,next_cat,prev_cat,r,rem);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return delta_1$0(counter$0,marks,c,next_cat,prev_cat,y,_bdr_)}
              return caml_trampoline_return
                      (delta_1$0,[0,marks,c,next_cat,prev_cat,y,_bdr_])}
            return rem},
         delta_seq$0=
          function(counter,c,next_cat,prev_cat,kind,y$1,z,rem)
           {var
             match=
              first
               (function(param)
                 {if(2 === param[0]){var marks=param[1];return [0,marks]}
                  return 0},
                y$1);
            if(match)
             {var marks=match[1];
              if(-730718166 === kind)
               {var _bdp_=delta_1(marks,c,next_cat,prev_cat,z,rem);
                return tseq(kind,caml_call1(remove_matches,y$1),z,_bdp_)}
              if(num_332064784 <= kind)
               {var l=0,param=y$1;
                for(;;)
                 {if(param)
                   {var _bdo_=param[1];
                    if(2 === _bdo_[0])
                     {var r=param[2],y=caml_call1(remove_matches,r),y$0=rev(l);
                      return tseq
                              (kind,
                               y$0,
                               z,
                               delta_1(marks,c,next_cat,prev_cat,z,tseq(kind,y,z,rem)))}
                    var param$0=param[2],l$0=[0,_bdo_,l],l=l$0,param=param$0;
                    continue}
                  throw [0,Assert_failure,_KY_]}}
              var _bdq_=tseq(kind,caml_call1(remove_matches,y$1),z,rem);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return delta_1$0(counter$0,marks,c,next_cat,prev_cat,z,_bdq_)}
              return caml_trampoline_return
                      (delta_1$0,[0,marks,c,next_cat,prev_cat,z,_bdq_])}
            return tseq(kind,y$1,z,rem)},
         delta_1=
          function(marks,c,next_cat,prev_cat,x,rem)
           {return caml_trampoline
                    (delta_1$0(0,marks,c,next_cat,prev_cat,x,rem))},
         delta_2=
          function(marks,c,next_cat,prev_cat,l,rem)
           {return caml_trampoline
                    (delta_2$0(0,marks,c,next_cat,prev_cat,l,rem))},
         delta_seq=
          function(c,next_cat,prev_cat,kind,y,z,rem)
           {return caml_trampoline
                    (delta_seq$0(0,c,next_cat,prev_cat,kind,y,z,rem))},
         delta_4=
          function(c,next_cat,prev_cat,l,rem)
           {if(l)
             {var r=l[2],y$1=l[1],rem$0=delta_4(c,next_cat,prev_cat,r,rem);
              switch(y$1[0])
               {case 0:
                 var
                  kind=y$1[3],
                  z=y$1[2],
                  y=y$1[1],
                  y$0=delta_4(c,next_cat,prev_cat,y,0);
                 return delta_seq(c,next_cat,prev_cat,kind,y$0,z,rem$0);
                case 1:
                 var e=y$1[2],marks=y$1[1];
                 return delta_1(marks,c,next_cat,prev_cat,e,rem$0);
                default:return [0,y$1,rem$0]}}
            return rem},
         status=
          function(s)
           {var _bdj_=s[4];
            if(_bdj_){var st=_bdj_[1];return st}
            var _bdk_=s[3];
            if(_bdk_)
             {var _bdl_=_bdk_[1];
              if(2 === _bdl_[0])
               {var
                 m=_bdl_[1],
                 _bdn_=m[1],
                 _bdm_=m[2],
                 _bdi_=-1,
                 ma=
                  fold_left$0
                   (function(ma,param){var i=param[1];return max(ma,i)},
                    _bdi_,
                    _bdn_),
                 res=caml_make_vect(ma + 1 | 0,-1);
                iter$0
                 (function(param)
                   {var v=param[2],i=param[1];
                    caml_check_bound(res,i)[1 + i] = v;
                    return 0},
                  _bdn_);
                var st$0=[0,res,_bdm_]}
              else
               var st$0=1}
            else
             var st$0=0;
            s[4] = [0,st$0];
            return st$0},
         split$1=
          function(s,cm)
           {var t=s;
            for(;;)
             {if(t)
               {var t$0=t[2],match=t[1],y=match[2],x=match[1];
                caml_bytes_set(cm,x,1);
                caml_bytes_set(cm,y + 1 | 0,1);
                var t=t$0;
                continue}
              return 0}},
         get_ofs=
          function(t,i)
           {if(t[2].length - 1 <= ((2 * i | 0) + 1 | 0))throw Not_found;
            var _bdf_=2 * i | 0,m1=caml_check_bound(t[2],_bdf_)[1 + _bdf_];
            if(-1 === m1)throw Not_found;
            var
             p1=caml_check_bound(t[4],m1)[1 + m1] - 1 | 0,
             _bdg_=(2 * i | 0) + 1 | 0,
             _bdh_=caml_check_bound(t[2],_bdg_)[1 + _bdg_],
             p2=caml_check_bound(t[4],_bdh_)[1 + _bdh_] - 1 | 0;
            return [0,p1,p2]},
         iter$5=
          function(n,f,v)
           {var n$0=n,v$0=v;
            for(;;)
             {if(0 === n$0)return v$0;
              var v$1=caml_call1(f,v$0),n$1=n$0 - 1 | 0,n$0=n$1,v$0=v$1;
              continue}},
         unknown$0=-2,
         break$0=-3,
         category$1=
          function(re,color)
           {if(-1 === color)return inexistant;
            if(color === re[6])return 28;
            var param=caml_bytes_get(re[4],color),switch$0=0;
            if(num_170 <= param)
             if(num_187 <= param)
              {var _bdc_=param - 192 | 0;
               if(54 < _bdc_ >>> 0)
                {if(56 <= _bdc_)switch$0 = 1}
               else
                if(23 !== _bdc_)switch$0 = 1}
             else
              {var _bdd_=param - 171 | 0;
               if(14 < _bdd_ >>> 0 || 10 === _bdd_)switch$0 = 1}
            else
             if(65 <= param)
              {var _bde_=param + num_91 | 0;
               if(5 < _bde_ >>> 0)
                {if(! (32 <= _bde_))switch$0 = 1}
               else
                if(4 === _bde_)switch$0 = 1}
             else
              if(48 <= param)
               {if(! (58 <= param))switch$0 = 1}
              else
               if(10 === param)return 12;
            return switch$0?letter:not_letter},
         dummy_next=[0],
         unknown_state=[0,unknown$0,0,dummy_next,0,dummy$0],
         mk_state=
          function(ncol,desc)
           {var match=status(desc),switch$0=0;
            if(typeof match === "number" && 0 !== match)
             {var break_state=0;switch$0 = 1}
            if(! switch$0)var break_state=1;
            var
             _bc__=0,
             _bc$_=break_state?dummy_next:caml_make_vect(ncol,unknown_state),
             _bda_=desc[1],
             _bdb_=break_state?break$0:desc[1];
            return [0,_bdb_,_bda_,_bc$_,_bc__,desc]},
         find_state=
          function(re,desc)
           {try
             {var _bc8_=caml_call2(Table$0[7],re[8],desc);return _bc8_}
            catch(_bc9_)
             {_bc9_ = caml_wrap_exception(_bc9_);
              if(_bc9_ === Not_found)
               {var st=mk_state(re[5],desc);
                caml_call3(Table$0[5],re[8],desc,st);
                return st}
              throw _bc9_}},
         delta=
          function(info,cat,color,st)
           {var
             _bc4_=st[5],
             _bc5_=info[1][7],
             prev_cat=_bc4_[2],
             match=
              remove_duplicates
               (0,delta_4(color,cat,prev_cat,_bc4_[3],0),eps_expr),
             expr=match[1],
             tbl=_bc5_[1],
             len=tbl.length - 1,
             switch$0=0,
             v=0,
             ofs=0;
            if(0 <= len && ! ((tbl.length - 1 - len | 0) < 0))
             {var _bc2_=(len | 0) - 1 | 0;
              if(! (_bc2_ < 0))
               {var i=ofs;
                for(;;)
                 {tbl[1 + i] = v;
                  var _bc3_=i + 1 | 0;
                  if(_bc2_ !== i){var i=_bc3_;continue}
                  break}}
              switch$0 = 1}
            if(! switch$0)invalid_arg(_U_);
            caml_call1(mark_used_indices(tbl),expr);
            var len$0=tbl.length - 1,idx=0;
            for(;;)
             {if(idx !== len$0 && caml_check_bound(tbl,idx)[1 + idx])
               {var idx$0=idx + 1 | 0,idx=idx$0;continue}
              if(idx === len$0)_bc5_[1] = caml_make_vect(2 * len$0 | 0,0);
              var
               expr$0=set_idx(idx,expr),
               desc=mk(idx,cat,expr$0),
               len$1=info[3].length - 1,
               _bc6_=desc[1] === len$1?1:0,
               _bc7_=_bc6_?0 < len$1?1:0:_bc6_;
              if(_bc7_)
               {var pos=info[3];
                info[3] = caml_make_vect(2 * len$1 | 0,0);
                blit$1(pos,0,info[3],0,len$1)}
              return desc}},
         validate=
          function(info,s,pos,st)
           {var
             _bc1_=caml_string_get(s,pos),
             color=caml_bytes_get(info[2],_bc1_),
             cat=category$1(info[1],color),
             desc=delta(info,cat,color,st),
             st$0=find_state(info[1],desc);
            caml_check_bound(st[3],color)[1 + color] = st$0;
            return 0},
         final$0=
          function(info,st,cat)
           {try
             {var _bcZ_=assq(cat,st[4]);return _bcZ_}
            catch(_bc0_)
             {_bc0_ = caml_wrap_exception(_bc0_);
              if(_bc0_ === Not_found)
               {var
                 st$0=delta(info,cat,-1,st),
                 _bcY_=status(st$0),
                 res=[0,st$0[1],_bcY_];
                st[4] = [0,[0,cat,res],st[4]];
                return res}
              throw _bc0_}},
         find_initial_state=
          function(re,cat)
           {try
             {var _bcW_=assq(cat,re[2]);return _bcW_}
            catch(_bcX_)
             {_bcX_ = caml_wrap_exception(_bcX_);
              if(_bcX_ === Not_found)
               {var st=find_state(re,create$15(cat,re[1]));
                re[2] = [0,[0,cat,st],re[2]];
                return st}
              throw _bcX_}},
         get_color=
          function(re,s,pos)
           {if(0 <= pos)
             {var slen=caml_ml_string_length(s);
              if(slen <= pos)return -1;
              if
               (pos
                ===
                (slen - 1 | 0)
                &&
                -1
                !==
                re[6]
                &&
                10
                ===
                caml_string_get(s,pos))
               return re[6];
              var _bcV_=caml_string_get(s,pos);
              return caml_bytes_get(re[3],_bcV_)}
            return -1},
         scan_str=
          function(info,s,st$8,groups)
           {var pos$4=info[4],last=info[5];
            if
             (last
              ===
              caml_ml_string_length(s)
              &&
              -1
              !==
              info[1][6]
              &&
              pos$4
              <
              last
              &&
              10
              ===
              caml_string_get(s,last - 1 | 0))
             {var
               info$0=[0,info[1],info[2],info[3],info[4],last - 1 | 0],
               st$9=scan_str(info$0,s,st$8,groups);
              if(st$9[1] === -3)return st$9;
              var pos$5=last - 1 | 0;
              for(;;)
               {var
                 _bcS_=info$0[1][6],
                 st$6=caml_check_bound(st$9[3],_bcS_)[1 + _bcS_];
                if(0 <= st$6[1])
                 {if(groups)
                   {var _bcT_=st$6[1];
                    caml_check_bound(info$0[3],_bcT_)[1 + _bcT_] = pos$5 + 1 | 0}
                  return st$6}
                if(st$6[1] === -3)
                 {if(groups)
                   {var _bcU_=st$6[2];
                    caml_check_bound(info$0[3],_bcU_)[1 + _bcU_] = pos$5 + 1 | 0}
                  return st$6}
                var
                 color=info$0[1][6],
                 real_c=caml_bytes_get(info$0[2],10),
                 cat=category$1(info$0[1],color),
                 desc=delta(info$0,cat,real_c,st$9),
                 st$7=find_state(info$0[1],desc);
                caml_check_bound(st$9[3],color)[1 + color] = st$7;
                continue}}
            if(groups)
             {var pos=pos$4,st=st$8;
              a:
              for(;;)
               {if(pos < info[5])
                 {var
                   _bcJ_=caml_string_get(s,pos),
                   _bcK_=caml_bytes_get(info[2],_bcJ_),
                   st$0=caml_check_bound(st[3],_bcK_)[1 + _bcK_],
                   pos$0=pos,
                   st$2=st,
                   st$1=st$0;
                  for(;;)
                   {if(0 <= st$1[1])
                     {var pos$1=pos$0 + 1 | 0;
                      if(pos$1 < info[5])
                       {var
                         _bcL_=caml_string_get(s,pos$1),
                         _bcM_=caml_bytes_get(info[2],_bcL_),
                         st$3=caml_check_bound(st$1[3],_bcM_)[1 + _bcM_],
                         _bcN_=st$1[1];
                        caml_check_bound(info[3],_bcN_)[1 + _bcN_] = pos$1;
                        var pos$0=pos$1,st$2=st$1,st$1=st$3;
                        continue}
                      var _bcO_=st$1[1];
                      caml_check_bound(info[3],_bcO_)[1 + _bcO_] = pos$1;
                      return st$1}
                    if(st$1[1] === -3)
                     {var _bcP_=st$1[2];
                      caml_check_bound(info[3],_bcP_)[1 + _bcP_] = pos$0 + 1 | 0;
                      return st$1}
                    validate(info,s,pos$0,st$2);
                    var pos=pos$0,st=st$2;
                    continue a}}
                return st}}
            var pos$2=pos$4,st$4=st$8;
            for(;;)
             {if(pos$2 < last)
               {var
                 _bcQ_=caml_string_get(s,pos$2),
                 _bcR_=caml_bytes_get(info[2],_bcQ_),
                 st$5=caml_check_bound(st$4[3],_bcR_)[1 + _bcR_];
                if(0 <= st$5[1])
                 {var pos$3=pos$2 + 1 | 0,pos$2=pos$3,st$4=st$5;continue}
                if(st$5[1] === -3)return st$5;
                validate(info,s,pos$2,st$4);
                continue}
              return st$4}},
         cseq=
          function(c$0,c)
           {return caml_lessequal(c$0,c)?[0,[0,c$0,c],0]:[0,[0,c,c$0],0]},
         cadd=function(c,s){return union$2(single(c),s)},
         trans_set=
          function(cache,cm,s)
           {var match=one_char(s);
            if(match){var i=match[1];return csingle(caml_bytes_get(cm,i))}
            var v=[0,hash_rec(s),s];
            try
             {var _bcG_=caml_call2(CSetMap[27],v,cache[1]);return _bcG_}
            catch(_bcH_)
             {_bcH_ = caml_wrap_exception(_bcH_);
              if(_bcH_ === Not_found)
               {var
                 l=
                  fold_right$1
                   (s,
                    empty$5,
                    function(param,l)
                     {var j=param[2],i=param[1],_bcI_=caml_bytes_get(cm,j);
                      return union$2(cseq(caml_bytes_get(cm,i),_bcI_),l)});
                cache[1] = caml_call3(CSetMap[4],v,l,cache[1]);
                return l}
              throw _bcH_}},
         is_charset=
          function(param)
           {var param$0=param;
            for(;;)
             {var switch$0=0;
              if(typeof param$0 === "number")
               switch$0 = 1;
              else
               switch(param$0[0])
                {case 0:return 1;
                 case 13:
                  var r=param$0[2],r$0=param$0[1],_bcF_=is_charset(r$0);
                  if(_bcF_){var param$0=r;continue}
                  return _bcF_;
                 case 4:
                 case 5:var param$1=param$0[2];break;
                 case 2:
                 case 11:
                 case 12:var l=param$0[1];return for_all(is_charset,l);
                 case 7:
                 case 9:
                 case 10:var param$1=param$0[1];break;
                 default:switch$0 = 1}
              if(switch$0)return 0;
              var param$0=param$1;
              continue}},
         _K0_=cseq(num_216,num_222),
         _K1_=union$2(cseq(num_192,num_214),_K0_),
         cupper=union$2(cseq(65,90),_K1_),
         clower=offset(32,cupper),
         calpha=fold_right(cadd,_K2_,union$2(clower,cupper)),
         cdigit=cseq(48,57),
         calnum=union$2(calpha,cdigit),
         cword=cadd(95,calnum),
         equal$7=
          function(x1,x2)
           {var x1$0=x1,x2$0=x2;
            for(;;)
             {var switch$0=0;
              if(typeof x1$0 === "number")
               switch(x1$0)
                {case 0:
                  if(typeof x2$0 === "number" && 0 === x2$0)switch$0 = 1;
                  break;
                 case 1:
                  if(typeof x2$0 === "number" && 1 === x2$0)switch$0 = 1;
                  break;
                 case 2:
                  if(typeof x2$0 === "number" && 2 === x2$0)switch$0 = 1;
                  break;
                 case 3:
                  if(typeof x2$0 === "number" && 3 === x2$0)switch$0 = 1;
                  break;
                 case 4:
                  if(typeof x2$0 === "number" && 4 === x2$0)switch$0 = 1;
                  break;
                 case 5:
                  if(typeof x2$0 === "number" && 5 === x2$0)switch$0 = 1;
                  break;
                 case 6:
                  if(typeof x2$0 === "number" && 6 === x2$0)switch$0 = 1;
                  break;
                 case 7:
                  if(typeof x2$0 === "number" && 7 === x2$0)switch$0 = 1;
                  break;
                 case 8:
                  if(typeof x2$0 === "number" && 8 === x2$0)switch$0 = 1;
                  break;
                 default:if(typeof x2$0 === "number" && 9 <= x2$0)switch$0 = 1}
              else
               switch(x1$0[0])
                {case 0:
                  if(typeof x2$0 !== "number" && 0 === x2$0[0])
                   {var s2=x2$0[1],s1=x1$0[1];return caml_equal(s1,s2)}
                  break;
                 case 1:
                  if(typeof x2$0 !== "number" && 1 === x2$0[0])
                   {var l2=x2$0[1],l1=x1$0[1];return eq_list(l1,l2)}
                  break;
                 case 2:
                  if(typeof x2$0 !== "number" && 2 === x2$0[0])
                   {var l2$0=x2$0[1],l1$0=x1$0[1];return eq_list(l1$0,l2$0)}
                  break;
                 case 3:
                  if(typeof x2$0 !== "number" && 3 === x2$0[0])
                   {var
                     j2=x2$0[3],
                     i2=x2$0[2],
                     x2$1=x2$0[1],
                     j1=x1$0[3],
                     i1=x1$0[2],
                     x1$1=x1$0[1],
                     _bcy_=i1 === i2?1:0;
                    if(_bcy_)
                     {var _bcz_=caml_equal(j1,j2);
                      if(_bcz_){var x1$0=x1$1,x2$0=x2$1;continue}
                      var _bcA_=_bcz_}
                    else
                     var _bcA_=_bcy_;
                    return _bcA_}
                  break;
                 case 4:
                  if(typeof x2$0 !== "number" && 4 === x2$0[0])
                   {var
                     x2$2=x2$0[2],
                     sem2=x2$0[1],
                     x1$2=x1$0[2],
                     sem1=x1$0[1],
                     _bcB_=sem1 === sem2?1:0;
                    if(_bcB_){var x1$0=x1$2,x2$0=x2$2;continue}
                    return _bcB_}
                  break;
                 case 5:
                  if(typeof x2$0 !== "number" && 5 === x2$0[0])
                   {var
                     x2$3=x2$0[2],
                     k2=x2$0[1],
                     x1$3=x1$0[2],
                     k1=x1$0[1],
                     _bcC_=k1 === k2?1:0;
                    if(_bcC_){var x1$0=x1$3,x2$0=x2$3;continue}
                    return _bcC_}
                  break;
                 case 6:
                  if(typeof x2$0 !== "number" && 6 === x2$0[0])return 0;break;
                 case 7:
                  if(typeof x2$0 !== "number" && 7 === x2$0[0])
                   {var x2$4=x2$0[1],x1$4=x1$0[1],x1$0=x1$4,x2$0=x2$4;continue}
                  break;
                 case 8:
                  if(typeof x2$0 !== "number" && 8 === x2$0[0])
                   {var x2$5=x2$0[1],x1$5=x1$0[1],x1$0=x1$5,x2$0=x2$5;continue}
                  break;
                 case 9:
                  if(typeof x2$0 !== "number" && 9 === x2$0[0])
                   {var x2$6=x2$0[1],x1$6=x1$0[1],x1$0=x1$6,x2$0=x2$6;continue}
                  break;
                 case 10:
                  if(typeof x2$0 !== "number" && 10 === x2$0[0])
                   {var x2$7=x2$0[1],x1$7=x1$0[1],x1$0=x1$7,x2$0=x2$7;continue}
                  break;
                 case 11:
                  if(typeof x2$0 !== "number" && 11 === x2$0[0])
                   {var l2$1=x2$0[1],l1$1=x1$0[1];return eq_list(l1$1,l2$1)}
                  break;
                 case 12:
                  if(typeof x2$0 !== "number" && 12 === x2$0[0])
                   {var l2$2=x2$0[1],l1$2=x1$0[1];return eq_list(l1$2,l2$2)}
                  break;
                 case 13:
                  if(typeof x2$0 !== "number" && 13 === x2$0[0])
                   {var
                     x2$8=x2$0[2],
                     x2$9=x2$0[1],
                     x1$8=x1$0[2],
                     x1$9=x1$0[1],
                     _bcD_=equal$7(x1$9,x2$9);
                    if(_bcD_){var x1$0=x1$8,x2$0=x2$8;continue}
                    return _bcD_}
                  break;
                 default:
                  if(typeof x2$0 !== "number" && 14 === x2$0[0])
                   {var
                     r2=x2$0[2],
                     m2=x2$0[1],
                     r1=x1$0[2],
                     m1=x1$0[1],
                     _bcE_=m1 === m2?1:0;
                    if(_bcE_){var x1$0=r1,x2$0=r2;continue}
                    return _bcE_}}
              return switch$0?1:0}},
         eq_list=
          function(l1,l2)
           {var l1$0=l1,l2$0=l2;
            for(;;)
             {if(l1$0)
               {if(l2$0)
                 {var
                   r2=l2$0[2],
                   x2=l2$0[1],
                   r1=l1$0[2],
                   x1=l1$0[1],
                   _bcx_=equal$7(x1,x2);
                  if(_bcx_){var l1$0=r1,l2$0=r2;continue}
                  return _bcx_}}
              else
               if(! l2$0)return 1;
              return 0}},
         sequence=
          function(l){if(l && ! l[2]){var x=l[1];return x}return [1,l]},
         merge_sequences=
          function(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var _bcs_=param$0[1];
                if(typeof _bcs_ !== "number")
                 switch(_bcs_[0])
                  {case 1:
                    var _bct_=_bcs_[1];
                    if(_bct_)
                     {var
                       r$0=param$0[2],
                       y=_bct_[2],
                       x=_bct_[1],
                       r$1=merge_sequences(r$0);
                      if(r$1)
                       {var _bcu_=r$1[1],switch$0=0;
                        if(typeof _bcu_ === "number" || ! (1 === _bcu_[0]))
                         switch$0 = 1;
                        else
                         {var _bcv_=_bcu_[1];
                          if(_bcv_)
                           {var r$2=r$1[2],y$0=_bcv_[2],x$0=_bcv_[1];
                            if(equal$7(x,x$0))
                             {var _bcw_=[0,sequence(y$0),0];
                              return [0,[1,[0,x,[0,[2,[0,sequence(y),_bcw_]],0]]],r$2]}}}}
                      return [0,[1,[0,x,y]],r$1]}
                    break;
                   case 2:
                    var
                     r$3=param$0[2],
                     l=_bcs_[1],
                     param$1=append(l,r$3),
                     param$0=param$1;
                    continue
                   }
                var r=param$0[2];
                return [0,_bcs_,merge_sequences(r)]}
              return 0}},
         enforce_kind=
          function(ids,kind,match,cr)
           {return num_332064784 === kind
                    ?num_332064784 === match?cr:seq$0(ids,match,cr,eps(ids))
                    :cr},
         trans_seq=
          function(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
           {if(param)
             {var _bcq_=param[2],_bcr_=param[1];
              if(_bcq_)
               {var
                 match=
                  translate
                   (ids,kind,ign_group,ign_case,greedy,pos,cache,c,_bcr_),
                 kind$0=match[2],
                 cr=match[1],
                 cr$0=
                  trans_seq
                   (ids,kind,ign_group,ign_case,greedy,pos,cache,c,_bcq_);
                return is_eps(cr$0)
                        ?cr
                        :is_eps(cr)?cr$0:seq$0(ids,kind$0,cr,cr$0)}
              var
               match$0=
                translate
                 (ids,kind,ign_group,ign_case,greedy,pos,cache,c,_bcr_),
               kind$1=match$0[2],
               cr$1=match$0[1];
              return enforce_kind(ids,kind,kind$1,cr$1)}
            return eps(ids)},
         translate=
          function(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
           {var ign_group$0=ign_group,greedy$0=greedy,param$0=param;
            for(;;)
             if(typeof param$0 === "number")
              switch(param$0)
               {case 0:return [0,after(ids,9),kind];
                case 1:return [0,before(ids,9),kind];
                case 2:
                 var _bch_=before(ids,3);
                 return [0,seq$0(ids,num_332064784,after(ids,5),_bch_),kind];
                case 3:
                 var _bci_=before(ids,5);
                 return [0,seq$0(ids,num_332064784,after(ids,3),_bci_),kind];
                case 4:
                 var
                  _bcj_=before(ids,letter),
                  _bck_=[0,seq$0(ids,num_332064784,after(ids,letter),_bcj_),0],
                  _bcl_=before(ids,letter);
                 return [0,
                         alt
                          (ids,
                           [0,seq$0(ids,num_332064784,after(ids,letter),_bcl_),_bck_]),
                         kind];
                case 5:return [0,after(ids,inexistant),kind];
                case 6:return [0,before(ids,inexistant),kind];
                case 7:return [0,before(ids,17),kind];
                case 8:return [0,after(ids,search_boundary),kind];
                default:return [0,before(ids,search_boundary),kind]}
             else
              switch(param$0[0])
               {case 0:
                 var
                  s=param$0[1],
                  s$0=trans_set(cache,c,s),
                  _bcg_=s$0?0:1,
                  _bcm_=_bcg_?empty$7(ids):mk_expr(ids,[0,s$0]);
                 return [0,_bcm_,kind];
                case 1:
                 var l=param$0[1];
                 return [0,
                         trans_seq
                          (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,l),
                         kind];
                case 2:
                 var l$0=param$0[1],merged_sequences=merge_sequences(l$0);
                 if(merged_sequences && ! merged_sequences[2])
                  {var
                    r=merged_sequences[1],
                    match=
                     translate
                      (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
                    kind$0=match[2],
                    cr=match[1];
                   return [0,enforce_kind(ids,kind,kind$0,cr),kind]}
                 return [0,
                         alt
                          (ids,
                           map$1
                            (function(r)
                              {var
                                match=
                                 translate
                                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
                                kind$0=match[2],
                                cr=match[1];
                               return enforce_kind(ids,kind,kind$0,cr)},
                             merged_sequences)),
                         kind];
                case 3:
                 var
                  j=param$0[3],
                  i=param$0[2],
                  r$0=param$0[1],
                  match$0=
                   translate
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$0),
                  kind$1=match$0[2],
                  cr$0=match$0[1];
                 if(j)
                  var
                   j$0=j[1],
                   f=
                    num_620821490 <= greedy$0
                     ?function(rem)
                       {var _bco_=[0,seq$0(ids,kind$1,rename(ids,cr$0),rem),0];
                        return alt(ids,[0,eps(ids),_bco_])}
                     :function(rem)
                       {var _bcp_=[0,eps(ids),0];
                        return alt
                                (ids,[0,seq$0(ids,kind$1,rename(ids,cr$0),rem),_bcp_])},
                   rem=iter$5(j$0 - i | 0,f,eps(ids));
                 else
                  var rem=mk_expr(ids,[3,greedy$0,kind$1,cr$0]);
                 return [0,
                         iter$5
                          (i,
                           function(rem){return seq$0(ids,kind$1,rename(ids,cr$0),rem)},
                           rem),
                         kind];
                case 4:
                 var
                  r$1=param$0[2],
                  kind$2=param$0[1],
                  match$1=
                   translate
                    (ids,kind$2,ign_group$0,ign_case,greedy$0,pos,cache,c,r$1),
                  kind$3=match$1[2],
                  cr$1=match$1[1];
                 return [0,enforce_kind(ids,kind$2,kind$3,cr$1),kind$2];
                case 5:
                 var
                  param$1=param$0[2],
                  greedy$1=param$0[1],
                  greedy$0=greedy$1,
                  param$0=param$1;
                 continue;
                case 6:
                 var r$2=param$0[1];
                 if(ign_group$0){var param$0=r$2;continue}
                 var p=pos[1];
                 pos[1] = pos[1] + 2 | 0;
                 var
                  match$2=
                   translate
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$2),
                  kind$4=match$2[2],
                  cr$2=match$2[1],
                  _bcn_=seq$0(ids,num_332064784,cr$2,mark(ids,p + 1 | 0));
                 return [0,seq$0(ids,num_332064784,mark(ids,p),_bcn_),kind$4];
                case 7:
                 var param$2=param$0[1],ign_group$0=1,param$0=param$2;
                 continue;
                case 8:
                 var
                  r$3=param$0[1],
                  b=pos[1],
                  match$3=
                   translate
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$3),
                  kind$5=match$3[2],
                  cr$3=match$3[1],
                  m=pos[1] - 1 | 0;
                 return m < b
                         ?[0,cr$3,kind$5]
                         :[0,
                           seq$0(ids,num_332064784,mk_expr(ids,[5,b,m]),cr$3),
                           kind$5];
                case 14:
                 var
                  r$4=param$0[2],
                  i$0=param$0[1],
                  match$4=
                   translate
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$4),
                  kind$6=match$4[2],
                  cr$4=match$4[1];
                 return [0,
                         seq$0(ids,num_332064784,mk_expr(ids,[8,i$0]),cr$4),
                         kind$6];
                default:throw [0,Assert_failure,_K4_]}},
         as_set=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var s=param[1];return s}
            throw [0,Assert_failure,_K5_]},
         handle_case=
          function(ign_case,r)
           {var ign_case$0=ign_case,r$0=r;
            for(;;)
             if(typeof r$0 === "number")
              return r$0;
             else
              switch(r$0[0])
               {case 0:
                 var s=r$0[1];
                 if(ign_case$0)
                  var
                   _bcb_=offset(num_32,inter(s,clower)),
                   _bcc_=union$2(s,union$2(offset(32,inter(s,cupper)),_bcb_));
                 else
                  var _bcc_=s;
                 return [0,_bcc_];
                case 1:
                 var l=r$0[1];
                 return [1,
                         map$1
                          (function(_bcf_){return handle_case(ign_case$0,_bcf_)},l)];
                case 2:
                 var
                  l$0=r$0[1],
                  l$1=
                   map$1
                    (function(_bce_){return handle_case(ign_case$0,_bce_)},l$0);
                 return is_charset([2,l$1])
                         ?[0,
                           fold_left$0
                            (function(s,r){return union$2(s,as_set(r))},empty$5,l$1)]
                         :[2,l$1];
                case 3:
                 var j=r$0[3],i=r$0[2],r$1=r$0[1];
                 return [3,handle_case(ign_case$0,r$1),i,j];
                case 4:
                 var r$2=r$0[2],k=r$0[1],r$3=handle_case(ign_case$0,r$2);
                 return is_charset(r$3)?r$3:[4,k,r$3];
                case 5:
                 var r$4=r$0[2],k$0=r$0[1],r$5=handle_case(ign_case$0,r$4);
                 return is_charset(r$5)?r$5:[5,k$0,r$5];
                case 6:var r$6=r$0[1];return [6,handle_case(ign_case$0,r$6)];
                case 7:
                 var r$7=r$0[1],r$8=handle_case(ign_case$0,r$7);
                 return is_charset(r$8)?r$8:[7,r$8];
                case 8:
                 var r$9=r$0[1],r$10=handle_case(ign_case$0,r$9);
                 return is_charset(r$10)?r$10:[8,r$10];
                case 9:var r$11=r$0[1],ign_case$0=0,r$0=r$11;continue;
                case 10:var r$12=r$0[1],ign_case$0=1,r$0=r$12;continue;
                case 11:
                 var
                  l$2=r$0[1],
                  l$3=map$1(function(r){return handle_case(ign_case$0,r)},l$2);
                 return [0,
                         fold_left$0
                          (function(s,r){return inter(s,as_set(r))},cany,l$3)];
                case 12:
                 var
                  l$4=r$0[1],
                  l$5=map$1(function(r){return handle_case(ign_case$0,r)},l$4);
                 return [0,
                         diff
                          (cany,
                           fold_left$0
                            (function(s,r){return union$2(s,as_set(r))},empty$5,l$5))];
                case 13:
                 var
                  r$13=r$0[2],
                  r$14=r$0[1],
                  _bcd_=diff(cany,as_set(handle_case(ign_case$0,r$13)));
                 return [0,inter(as_set(handle_case(ign_case$0,r$14)),_bcd_)];
                default:
                 var r$15=r$0[2],i$0=r$0[1];
                 return [14,i$0,handle_case(ign_case$0,r$15)]}},
         anchored=
          function(param)
           {var param$0=param;
            for(;;)
             {var switch$0=0;
              if(typeof param$0 === "number")
               switch(param$0){case 5:case 8:return 1}
              else
               switch(param$0[0])
                {case 1:var l=param$0[1];return exists(anchored,l);
                 case 2:var l$0=param$0[1];return for_all(anchored,l$0);
                 case 3:
                  var i=param$0[2],r=param$0[1],_bca_=0 < i?1:0;
                  if(_bca_){var param$0=r;continue}
                  return _bca_;
                 case 4:
                 case 5:
                 case 14:var param$1=param$0[2];switch$0 = 1;break;
                 case 0:
                 case 11:
                 case 12:
                 case 13:break;
                 default:var param$1=param$0[1];switch$0 = 1}
              if(switch$0){var param$0=param$1;continue}
              return 0}},
         char$2=function(c){return [0,csingle(c)]},
         alt$0=function(l){if(l && ! l[2]){var r=l[1];return r}return [2,l]},
         seq$1=function(l){if(l && ! l[2]){var r=l[1];return r}return [1,l]},
         repn=
          function(r,i,j)
           {if(i < 0)invalid_arg(_K6_);
            var switch$0=0;
            if(j){var j$0=j[1];if(j$0 < i){invalid_arg(_K7_);switch$0 = 1}}
            return [3,r,i,j]},
         rep=function(r){return repn(r,0,0)},
         bol=0,
         eol=1,
         bow=2,
         eow=3,
         not_boundary=4,
         bos=5,
         eos=6,
         start=8,
         set$0=
          function(str)
           {var
             s=[0,empty$5],
             _bb9_=caml_ml_string_length(str) - 1 | 0,
             _bb8_=0;
            if(! (_bb9_ < 0))
             {var i=_bb8_;
              for(;;)
               {var _bb__=s[1];
                s[1] = union$2(csingle(caml_string_get(str,i)),_bb__);
                var _bb$_=i + 1 | 0;
                if(_bb9_ !== i){var i=_bb$_;continue}
                break}}
            return [0,s[1]]},
         rg=function(c$0,c){return [0,cseq(c$0,c)]},
         compl=
          function(l){var r=[12,l];return is_charset(r)?r:invalid_arg(_K9_)},
         any$0=[0,cany],
         notnl=[0,diff(cany,csingle(10))],
         _K__=[0,rg(num_248,num_255),0],
         _K$_=[0,rg(num_223,num_246),_K__],
         _La_=[0,char$2(num_181),_K$_],
         lower=alt$0([0,rg(97,num_122),_La_]),
         _Lb_=[0,rg(num_216,num_222),0],
         _Lc_=[0,rg(num_192,num_214),_Lb_],
         upper=alt$0([0,rg(65,90),_Lc_]),
         _Ld_=[0,char$2(num_186),0],
         alpha=alt$0([0,lower,[0,upper,[0,char$2(num_170),_Ld_]]]),
         digit=rg(48,57),
         alnum=alt$0([0,alpha,[0,digit,0]]);
        char$2(95);
        set$0(_Le_);
        char$2(num_247);
        char$2(215);
        char$2(32);
        var
         compile=
          function(r$0)
           {if(anchored(r$0))
             var _bb7_=[6,r$0];
            else
             var
              r$1=rep(any$0),
              _bb7_=seq$1([0,[4,-1034406550,r$1],[0,[6,r$0],0]]);
            var regexp=handle_case(0,_bb7_),c=make(num_257,0),lnl=[0,0];
            function colorize(regexp)
             {var regexp$0=regexp;
              for(;;)
               {if(typeof regexp$0 === "number")
                 switch(regexp$0)
                  {case 7:lnl[1] = 1;return 0;
                   case 0:
                   case 1:return split$1(csingle(10),c);
                   case 2:
                   case 3:
                   case 4:return split$1(cword,c);
                   default:return 0}
                else
                 switch(regexp$0[0])
                  {case 0:var s=regexp$0[1];return split$1(s,c);
                   case 1:var l=regexp$0[1];return iter$0(colorize,l);
                   case 2:var l$0=regexp$0[1];return iter$0(colorize,l$0);
                   case 3:var regexp$1=regexp$0[1],regexp$0=regexp$1;continue;
                   case 4:
                   case 5:
                   case 14:var regexp$2=regexp$0[2];break;
                   case 6:
                   case 7:
                   case 8:var regexp$2=regexp$0[1];break;
                   default:throw [0,Assert_failure,_K3_]}
                var regexp$0=regexp$2;
                continue}}
            colorize(regexp);
            var
             _bb6_=lnl[1],
             colors=caml_create_bytes(num_256),
             color_repr=caml_create_bytes(num_256),
             v=[0,0];
            caml_bytes_set(colors,0,0);
            caml_bytes_set(color_repr,0,0);
            var i=1;
            for(;;)
             {if(0 !== caml_bytes_get(c,i))v[1]++;
              caml_bytes_set(colors,i,chr(v[1]));
              var _bb4_=chr(i);
              caml_bytes_set(color_repr,v[1],_bb4_);
              var _bb5_=i + 1 | 0;
              if(num_255 !== i){var i=_bb5_;continue}
              var
               ncolor=v[1] + 1 | 0,
               color_repr$0=sub(color_repr,0,v[1] + 1 | 0),
               lnl$0=_bb6_?ncolor:-1,
               ncolor$0=_bb6_?ncolor + 1 | 0:ncolor,
               ids=[0,0],
               pos=[0,0],
               match=
                translate
                 (ids,
                  num_332064784,
                  0,
                  0,
                  -904640576,
                  pos,
                  [0,CSetMap[1]],
                  colors,
                  regexp),
               kind=match[2],
               r=match[1],
               initial=enforce_kind(ids,num_332064784,kind,r),
               group_count=pos[1] / 2 | 0;
              return [0,
                      initial,
                      0,
                      colors,
                      color_repr$0,
                      ncolor$0,
                      lnl$0,
                      [0,[0,0]],
                      caml_call1(Table$0[1],97),
                      group_count]}},
         exec=
          function(pos$0,len$0,re,s)
           {var groups=1;
            if(pos$0)var sth=pos$0[1],pos=sth;else var pos=0;
            if(len$0)var sth$0=len$0[1],len=sth$0;else var len=-1;
            var _bb1_=pos < 0?1:0;
            if(_bb1_)
             var _bb2_=_bb1_;
            else
             var
              _bb3_=len < -1?1:0,
              _bb2_=_bb3_ || (caml_ml_string_length(s) < (pos + len | 0)?1:0);
            if(_bb2_)invalid_arg(name$39);
            var
             slen=caml_ml_string_length(s),
             last=-1 === len?slen:pos + len | 0,
             n=re[7][1].length - 1 + 1 | 0,
             _bb0_=10 < n?caml_make_vect(n,0):_KZ_.slice(),
             info=[0,re,re[3],_bb0_,pos,last],
             initial_cat=
              0 === pos?33:32 | category$1(re,get_color(re,s,pos - 1 | 0)),
             initial_state=find_initial_state(re,initial_cat),
             st=scan_str(info,s,initial_state,groups);
            if(st[1] === -3)
             var res=status(st[5]);
            else
             {var
               final_cat=
                last === slen?33:32 | category$1(re,get_color(re,s,last)),
               match=final$0(info,st,final_cat),
               res$0=match[2],
               idx=match[1];
              caml_check_bound(info[3],idx)[1 + idx] = last + 1 | 0;
              var res=res$0}
            if(typeof res === "number")
             var match$0=0 === res?0:1;
            else
             var
              pmarks=res[2],
              marks=res[1],
              match$0=[0,[0,s,marks,pmarks,info[3],re[9]]];
            if(typeof match$0 === "number")throw Not_found;
            var substr=match$0[1];
            return substr},
         Parse_error$3=[num_248,_Lf_,caml_fresh_oo_id(0)],
         Not_supported=[num_248,_Lg_,caml_fresh_oo_id(0)],
         re=
          function(opt,s)
           {if(opt)var sth=opt[1],case$0=sth;else var case$0=1;
            var i=[0,0],l=caml_ml_string_length(s);
            function eos$0(param){return i[1] === l?1:0}
            function test2(c$0,c)
             {var _bbX_=(i[1] + 1 | 0) < l?1:0;
              if(_bbX_)
               var
                _bbY_=caml_string_get(s,i[1]) === c$0?1:0,
                _bbZ_=_bbY_?caml_string_get(s,i[1] + 1 | 0) === c?1:0:_bbY_;
              else
               var _bbZ_=_bbX_;
              return _bbZ_}
            function accept(c)
             {var
               _bbV_=1 - eos$0(0),
               _bbW_=_bbV_?caml_string_get(s,i[1]) === c?1:0:_bbV_;
              if(_bbW_)i[1]++;
              return _bbW_}
            function accept2(c$0,c)
             {var r=test2(c$0,c);if(r)i[1] = i[1] + 2 | 0;return r}
            function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
            function char$0(param)
             {if(eos$0(0))throw Parse_error$3;return get(0)}
            function bracket(s)
             {var s$0=s;
              for(;;)
               {if(0 !== s$0 && accept(93))return s$0;
                var c=char$0(0);
                if(accept(45))
                 {if(accept(93))
                   {var _bbU_=[0,char$2(45),s$0];return [0,char$2(c),_bbU_]}
                  var c$0=char$0(0),s$1=[0,rg(c,c$0),s$0],s$0=s$1;
                  continue}
                var s$2=[0,char$2(c),s$0],s$0=s$2;
                continue}}
            function branch(param)
             {var left=0;
              for(;;)
               {if(! eos$0(0) && ! test2(92,num_124) && ! test2(92,41))
                 {if(accept(46))
                   var r=notnl;
                  else
                   if(accept(94))
                    var r=bol;
                   else
                    if(accept(36))
                     var r=eol;
                    else
                     if(accept(91))
                      var r=accept(94)?compl(bracket(0)):alt$0(bracket(0));
                     else
                      if(accept(92))
                       if(accept(40))
                        {var r$0=regexp(0);
                         if(1 - accept2(92,41))throw Parse_error$3;
                         var r=[6,r$0]}
                       else
                        if(accept(96))
                         var r=bos;
                        else
                         if(accept(39))
                          var r=eos;
                         else
                          if(accept(61))
                           var r=start;
                          else
                           if(accept(98))
                            var r=alt$0([0,bow,[0,eow,0]]);
                           else
                            if(accept(66))
                             var r=not_boundary;
                            else
                             if(accept(60))
                              var r=bow;
                             else
                              if(accept(62))
                               var r=eow;
                              else
                               if(accept(num_119))
                                var r=alt$0([0,alnum,[0,char$2(95),0]]);
                               else
                                if(accept(87))
                                 var r=compl([0,alnum,[0,char$2(95),0]]);
                                else
                                 {if(eos$0(0))throw Parse_error$3;
                                  var c=get(0),switch$0=0;
                                  if(63 <= c)
                                   {if(91 <= c)
                                     {if(! (95 <= c))switch$0 = 1}
                                    else
                                     if(! (64 <= c))switch$0 = 1}
                                  else
                                   if(48 <= c)
                                    {if(! (58 <= c))throw Not_supported}
                                   else
                                    if(36 <= c)
                                     switch(c - 36 | 0)
                                      {case 0:case 6:case 7:case 10:switch$0 = 1;break}
                                  if(! switch$0)throw Parse_error$3;
                                  var r=char$2(c)}
                      else
                       {if(eos$0(0))throw Parse_error$3;
                        var c$0=get(0),switch$1=0;
                        if(44 <= c$0)
                         {if(63 === c$0)switch$1 = 1}
                        else
                         if(42 <= c$0)switch$1 = 1;
                        if(switch$1)throw Parse_error$3;
                        var r=char$2(c$0)}
                  var
                   _bbT_=
                    accept(42)
                     ?rep(r)
                     :accept(43)?repn(r,1,0):accept(63)?repn(r,0,_K8_):r,
                   left$0=[0,_bbT_,left],
                   left=left$0;
                  continue}
                return seq$1(rev(left))}}
            function regexp(param)
             {var left=branch(0),left$0=left;
              for(;;)
               {if(accept2(92,num_124))
                 {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
                  continue}
                return left$0}}
            var r=regexp(0);
            if(1 - eos$0(0))throw Parse_error$3;
            return case$0?r:[10,r]};
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        var
         min$0=[0,num_719528,_Lh_],
         max$0=[0,num_2932896,ps_day_max],
         neg=
          function(param)
           {var _bbR_=param[2],_bbS_=param[1];
            return caml_notequal(_bbR_,_Li_)
                    ?[0,
                      - (_bbS_ + 1 | 0) | 0,
                      caml_int64_sub(ps_count_in_day,_bbR_)]
                    :[0,- _bbS_ | 0,_Lj_]},
         add$6=
          function(param,_bbQ_)
           {var
             ps1=_bbQ_[2],
             d1=_bbQ_[1],
             ps0=param[2],
             d0=param[1],
             d=d0 + d1 | 0,
             ps=caml_int64_add(ps0,ps1),
             ps_clamp=caml_int64_mod(ps,ps_count_in_day),
             d$0=d + caml_int64_compare(ps,ps_clamp) | 0;
            return [0,d$0,ps_clamp]},
         of_d_ps=
          function(s)
           {var ps=s[2];
            if(! caml_lessthan(ps,_Lk_) && ! caml_greaterthan(ps,ps_day_max))
             return [0,s];
            return 0},
         of_int_s=
          function(secs)
           {var
             d=abs(secs),
             s=
              [0,
               d / num_86400 | 0,
               caml_int64_mul(caml_int64_of_int32(d % num_86400 | 0),pow)];
            return 0 <= secs?s:neg(s)},
         of_float_s=
          function(secs)
           {if(secs != secs)return 0;
            var days=Math.floor(secs / num_86400$0);
            if(! (days < num_2147483648) && ! (num_2147483647 < days))
             {var
               rem_s=secs % num_86400$0,
               rem_s$0=rem_s < 0.?num_86400$0 + rem_s:rem_s;
              if(num_86400$0 <= rem_s$0)
               return [0,[0,(days | 0) + 1 | 0,_Ll_]];
              var
               match=caml_modf_float(rem_s$0),
               rem_s$1=match[2],
               frac_s=match[1],
               rem_ps=caml_int64_mul(caml_int64_of_float(rem_s$1),pow),
               frac_ps=caml_int64_of_float(frac_s * 1000000000000.);
              return [0,[0,days | 0,caml_int64_add(rem_ps,frac_ps)]]}
            return 0},
         to_float_s=
          function(param)
           {var
             ps=param[2],
             d=param[1],
             days_s=d * num_86400$0,
             day_s=caml_int64_to_float(caml_int64_div(ps,pow)),
             day_rem_ps=caml_int64_to_float(caml_int64_mod(ps,pow));
            return days_s + day_s + day_rem_ps * 1e-12},
         equal$8=
          function(param,_bbN_)
           {var
             ps1=_bbN_[2],
             d1=_bbN_[1],
             ps0=param[2],
             d0=param[1],
             _bbO_=0 === caml_int_compare(d0,d1)?1:0,
             _bbP_=_bbO_?0 === caml_int64_compare(ps0,ps1)?1:0:_bbO_;
            return _bbP_},
         compare$17=
          function(param,_bbM_)
           {var
             ps1=_bbM_[2],
             d1=_bbM_[1],
             ps0=param[2],
             d0=param[1],
             c=caml_compare(d0,d1);
            return 0 === c?caml_compare(ps0,ps1):c},
         frac_div=_Lm_.slice(),
         of_span=
          function(span)
           {var d=span[1];
            if(! (d < num_719528) && ! (num_2932896 < d))return [0,span];
            return 0},
         add_span=function(t,d){return of_span(add$6(t,d))},
         mlen=_Ln_.slice(),
         of_date_time=
          function(param)
           {var
             t=param[2],
             tz_offset_s=t[2],
             match$0=t[1],
             ss$0=match$0[3],
             mm$0=match$0[2],
             hh$0=match$0[1],
             date=param[1],
             d=date[3],
             m$0=date[2],
             y$0=date[1],
             _bbz_=0 <= y$0?1:0;
            if(_bbz_)
             {var _bbA_=y$0 <= 9999?1:0;
              if(_bbA_)
               {var _bbB_=1 <= m$0?1:0;
                if(_bbB_)
                 {var _bbC_=m$0 <= 12?1:0;
                  if(_bbC_)
                   {var _bbD_=1 <= d?1:0;
                    if(_bbD_)
                     {var switch$0=0;
                      if(2 === m$0)
                       {var _bbv_=0 === (y$0 % 4 | 0)?1:0;
                        if(_bbv_)
                         var
                          _bbw_=0 !== (y$0 % num_100 | 0)?1:0,
                          _bbx_=_bbw_ || (0 === (y$0 % num_400 | 0)?1:0);
                        else
                         var _bbx_=_bbv_;
                        if(_bbx_){var _bbE_=29;switch$0 = 1}}
                      if(! switch$0)
                       var
                        _bby_=m$0 - 1 | 0,
                        _bbE_=caml_check_bound(mlen,_bby_)[1 + _bby_];
                      var _bbF_=d <= _bbE_?1:0}
                    else
                     var _bbF_=_bbD_}
                  else
                   var _bbF_=_bbC_}
                else
                 var _bbF_=_bbB_}
              else
               var _bbF_=_bbA_}
            else
             var _bbF_=_bbz_;
            if(_bbF_)
             {var
               match=t[1],
               ss=match[3],
               mm=match[2],
               hh=match[1],
               _bbG_=0 <= hh?1:0;
              if(_bbG_)
               {var _bbH_=hh <= 23?1:0;
                if(_bbH_)
                 {var _bbI_=0 <= mm?1:0;
                  if(_bbI_)
                   {var _bbJ_=mm <= 59?1:0;
                    if(_bbJ_)
                     var _bbK_=0 <= ss?1:0,_bbL_=_bbK_?ss <= 60?1:0:_bbK_;
                    else
                     var _bbL_=_bbJ_}
                  else
                   var _bbL_=_bbI_}
                else
                 var _bbL_=_bbH_}
              else
               var _bbL_=_bbG_;
              if(_bbL_)
               {var
                 day=date[3],
                 month=date[2],
                 year=date[1],
                 a=(14 - month | 0) / 12 | 0,
                 y=(year + 4800 | 0) - a | 0,
                 m=(month + (12 * a | 0) | 0) - 3 | 0,
                 d$0=
                  ((((((day + (((num_153 * m | 0) + 2 | 0) / 5 | 0) | 0)
                       +
                       (365 * y | 0)
                       |
                       0)
                      +
                      (y / 4 | 0)
                      |
                      0)
                     -
                     (y / num_100 | 0)
                     |
                     0)
                    +
                    (y / num_400 | 0)
                    |
                    0)
                   -
                   32045
                   |
                   0)
                  -
                  num_2440588
                  |
                  0,
                 hh_ps=
                  caml_int64_mul(caml_int64_of_int32(hh$0),ps_count_in_hour),
                 mm_ps=
                  caml_int64_mul(caml_int64_of_int32(mm$0),ps_count_in_min),
                 ss_ps=caml_int64_mul(caml_int64_of_int32(ss$0),pow),
                 ps=caml_int64_add(hh_ps,caml_int64_add(mm_ps,ss_ps)),
                 d$1=of_int_s(tz_offset_s),
                 t$0=[0,d$0,ps];
                return of_span(add$6(t$0,neg(d$1)))}}
            return 0},
         RFC3339=[num_248,_Lo_,caml_fresh_oo_id(0)],
         error$0=function(r,e){throw [0,RFC3339,r,e]},
         error_pos=function(p,e){return error$0([0,p,p],e)},
         error_exp_digit=function(p){return error_pos(p,_Lp_)},
         is_digit$0=
          function(param)
           {var switcher=param + num_48 | 0;return 9 < switcher >>> 0?0:1},
         parse_digits=
          function(count,k,max,s)
           {var stop=(k + count | 0) - 1 | 0;
            if(max < stop)return error_pos(max,num_3456159);
            var k$0=k,acc=0;
            for(;;)
             {if(stop < k$0)return acc;
              if(is_digit$0(caml_string_get(s,k$0)))
               {var
                 acc$0=
                  ((acc * 10 | 0) + caml_string_get(s,k$0) | 0)
                  +
                  num_48
                  |
                  0,
                 k$1=k$0 + 1 | 0,
                 k$0=k$1,
                 acc=acc$0;
                continue}
              return error_exp_digit(k$0)}},
         parse_char=
          function(c,pos,max,s)
           {return max < pos
                    ?error_pos(max,num_3456159)
                    :caml_string_get(s,pos) === c
                      ?0
                      :error_pos(pos,[0,num_498443355,[0,c,0]])},
         parse_dt_sep=
          function(strict,pos,max,s)
           {if(max < pos)return error_pos(max,num_3456159);
            var
             param=caml_string_get(s,pos),
             switcher=param + num_33 | 0,
             switch$0=0;
            if(82 < switcher >>> 0)
             {var switcher$0=switcher + 1 | 0;
              if(! (84 < switcher$0 >>> 0) && ! strict)
               {var _bbt_=1;switch$0 = 1}}
            else
             if(51 === switcher){var _bbt_=1;switch$0 = 1}
            if(! switch$0)var _bbt_=0;
            if(_bbt_)return 0;
            var _bbu_=strict?0:_Lr_;
            return error_pos(pos,[0,num_498443355,append(_Lq_,_bbu_)])},
         decide_frac_or_tz=
          function(strict,pos,max,s)
           {if(max < pos)return error_pos(max,num_3456159);
            var c=caml_string_get(s,pos),switch$0=0;
            if(90 <= c)
             {if(num_122 === c)
               {if(! strict)return num_18854}
              else
               if(! (91 <= c))switch$0 = 1}
            else
             if(44 <= c)
              {if(! (47 <= c))
                {var switcher=c - 44 | 0;
                 switch(switcher)
                  {case 0:break;
                   case 1:switch$0 = 1;break;
                   default:return num_781960526}}}
             else
              if(43 <= c)switch$0 = 1;
            if(switch$0)return num_18854;
            var _bbs_=strict?0:_Lt_,chars=append(_Ls_,_bbs_);
            return error_pos(pos,[0,num_498443355,chars])},
         parse_frac_ps=
          function(pos,max,s)
           {if(max < pos)return error_pos(max,num_3456159);
            if(is_digit$0(caml_string_get(s,pos)))
             {var k=pos,acc$0=acc,pow$0=pow;
              for(;;)
               {if(max < k)return error_pos(max,num_3456159);
                if(is_digit$0(caml_string_get(s,k)))
                 {var count=(k - pos | 0) + 1 | 0;
                  if(12 < count){var k$0=k + 1 | 0,k=k$0;continue}
                  var
                   pow$1=caml_int64_div(pow$0,_Lu_),
                   acc$1=
                    caml_int64_add
                     (acc$0,
                      caml_int64_mul
                       (caml_int64_of_int32(caml_string_get(s,k) + num_48 | 0),
                        pow$1)),
                   k$1=k + 1 | 0,
                   k=k$1,
                   acc$0=acc$1,
                   pow$0=pow$1;
                  continue}
                return [0,[0,acc$0],k]}}
            return error_exp_digit(pos)},
         parse_tz_s=
          function(strict,pos,max,s)
           {function parse_tz_mag(sign,hh_pos)
             {var mm_pos=hh_pos + 3 | 0,hh=parse_digits(2,hh_pos,max,s);
              parse_char(58,mm_pos - 1 | 0,max,s);
              var mm=parse_digits(2,mm_pos,max,s);
              if(23 < hh)
               return error$0([0,hh_pos,hh_pos + 1 | 0],num_415233371);
              if(59 < mm)
               return error$0([0,mm_pos,mm_pos + 1 | 0],num_415233371);
              var
               secs=(hh * 3600 | 0) + (mm * 60 | 0) | 0,
               _bbq_=0 === secs?1:0,
               _bbr_=_bbq_?-1 === sign?1:0:_bbq_,
               tz_s=0 === _bbr_?[0,caml_mul(sign,secs)]:0;
              return [0,tz_s,mm_pos + 1 | 0]}
            if(max < pos)return error_pos(max,num_3456159);
            var c=caml_string_get(s,pos);
            if(90 === c)return [0,_Lv_,pos];
            if(46 <= c)
             {if(num_122 === c && ! strict)return [0,_Ly_,pos]}
            else
             if(43 <= c)
              {var switcher=c + num_43 | 0;
               switch(switcher)
                {case 0:return parse_tz_mag(1,pos + 1 | 0);
                 case 1:break;
                 default:return parse_tz_mag(-1,pos + 1 | 0)}}
            var _bbp_=strict?0:_Lx_,chars=append(_Lw_,_bbp_);
            return error_pos(pos,[0,num_498443355,chars])},
         of_rfc3339=
          function(opt,_bbj_,_bbi_,s)
           {if(opt)var sth=opt[1],strict=sth;else var strict=0;
            if(_bbj_)var sth$0=_bbj_[1],sub=sth$0;else var sub=0;
            if(_bbi_)var sth$1=_bbi_[1],start=sth$1;else var start=0;
            try
             {var s_len=caml_ml_string_length(s),max=s_len - 1 | 0,switch$0=0;
              if(0 !== s_len && 0 <= start && ! (max < start))
               {var
                 m_pos=start + 5 | 0,
                 d_pos=m_pos + 3 | 0,
                 hh_pos=d_pos + 3 | 0,
                 mm_pos=hh_pos + 3 | 0,
                 ss_pos=mm_pos + 3 | 0,
                 decide_pos=ss_pos + 2 | 0,
                 y=parse_digits(4,start,max,s);
                parse_char(45,m_pos - 1 | 0,max,s);
                var m=parse_digits(2,m_pos,max,s);
                parse_char(45,d_pos - 1 | 0,max,s);
                var d=parse_digits(2,d_pos,max,s);
                parse_dt_sep(strict,hh_pos - 1 | 0,max,s);
                var hh=parse_digits(2,hh_pos,max,s);
                parse_char(58,mm_pos - 1 | 0,max,s);
                var mm=parse_digits(2,mm_pos,max,s);
                parse_char(58,ss_pos - 1 | 0,max,s);
                var
                 ss=parse_digits(2,ss_pos,max,s),
                 match=decide_frac_or_tz(strict,decide_pos,max,s);
                if(num_781960526 <= match)
                 var
                  _bbl_=parse_frac_ps(decide_pos + 1 | 0,max,s),
                  frac=_bbl_[1],
                  tz_pos=_bbl_[2];
                else
                 var frac=0,tz_pos=decide_pos;
                var
                 match$0=parse_tz_s(strict,tz_pos,max,s),
                 last_pos=match$0[2],
                 tz_s_opt=match$0[1];
                if(tz_s_opt)var s$0=tz_s_opt[1],tz_s=s$0;else var tz_s=0;
                var match$1=of_date_time([0,[0,y,m,d],[0,[0,hh,mm,ss],tz_s]]);
                if(match$1)
                 {var t=match$1[1],switch$1=0;
                  if(frac)
                   {var _bbm_=frac[1];
                    if(caml_notequal(_bbm_,_Lz_))
                     {var match$2=add_span(t,[0,0,_bbm_]);
                      if(match$2)
                       var t$0=match$2[1],t$1=t$0;
                      else
                       var t$1=error$0([0,start,last_pos],num_415233371)[1]}
                    else
                     switch$1 = 1}
                  else
                   switch$1 = 1;
                  if(switch$1)var t$1=t;
                  var switch$2=0;
                  if(! sub && last_pos !== max)
                   {var _bbn_=error_pos(last_pos + 1 | 0,-493009593);
                    switch$2 = 1}
                  if(! switch$2)
                   var
                    _bbn_=
                     [0,[0,t$1,tz_s_opt,(last_pos - start | 0) + 1 | 0]];
                  var _bbo_=_bbn_}
                else
                 var _bbo_=error$0([0,start,last_pos],num_415233371);
                var _bbk_=_bbo_;
                switch$0 = 1}
              if(! switch$0)var _bbk_=error_pos(start,num_3456159);
              return _bbk_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] === RFC3339)
               {var e=exn[3],r=exn[2];return [1,[0,76606165,[0,r,e]]]}
              throw exn}},
         to_rfc3339=
          function(opt,_bbg_,tz_offset_s$1,t)
           {var ps$0=t[2];
            if(opt)var sth=opt[1],space=sth;else var space=0;
            if(_bbg_)var sth$0=_bbg_[1],frac=sth$0;else var frac=0;
            var buf=create$1(num_255);
            if(tz_offset_s$1)
             {var tz=tz_offset_s$1[1],switch$0=0;
              if(-86340 <= tz && tz <= 86340 && 0 === (tz % 60 | 0))
               {var _bbh_=[0,tz,0];switch$0 = 1}
              if(! switch$0)var _bbh_=_LA_;
              var sth$1=_bbh_[1],tz_unknown=_bbh_[2]}
            else
             var sth$1=0,tz_unknown=1;
            var
             opt$0=[0,sth$1],
             tz_offset_s=opt$0?sth$1:0,
             match=add_span(t,of_int_s(tz_offset_s));
            if(match)
             var
              local=match[1],
              d$1=local[1],
              ps=local[2],
              tz_offset_s$0=tz_offset_s;
            else
             var d$1=t[1],ps=t[2],tz_offset_s$0=0;
            var
             jd=d$1 + num_2440588 | 0,
             a=jd + 32044 | 0,
             b=((4 * a | 0) + 3 | 0) / num_146097 | 0,
             c=a - ((num_146097 * b | 0) / 4 | 0) | 0,
             d=((4 * c | 0) + 3 | 0) / num_1461 | 0,
             e=c - ((num_1461 * d | 0) / 4 | 0) | 0,
             m=((5 * e | 0) + 2 | 0) / num_153 | 0,
             d$0=(e - (((num_153 * m | 0) + 2 | 0) / 5 | 0) | 0) + 1 | 0,
             m$0=(m + 3 | 0) - (12 * (m / 10 | 0) | 0) | 0,
             y=(((num_100 * b | 0) + d | 0) - 4800 | 0) + (m / 10 | 0) | 0,
             hh=caml_int64_to_int32(caml_int64_div(ps,ps_count_in_hour)),
             hh_rem=caml_int64_mod(ps,ps_count_in_hour),
             ss=caml_int64_to_int32(caml_int64_div(hh_rem,ps_count_in_min)),
             mm_rem=caml_int64_mod(hh_rem,ps_count_in_min),
             mm=caml_int64_to_int32(caml_int64_div(mm_rem,pow)),
             dt_sep=space?32:84;
            caml_call7(bprintf(buf,_LB_),y,m$0,d$0,dt_sep,hh,ss,mm);
            var frac$0=0 <= frac?12 < frac?12:frac:0;
            if(0 !== frac$0)
             {var
               _bbf_=
                caml_int64_div
                 (caml_int64_mod(ps$0,pow),
                  caml_check_bound(frac_div,frac$0)[1 + frac$0]);
              caml_call2(bprintf(buf,_LC_),frac$0,_bbf_)}
            var switch$1=0;
            if(0 === tz_offset_s$0 && ! tz_unknown)
             {bprintf(buf,_LE_);switch$1 = 1}
            if(! switch$1)
             {var switch$2=0;
              if(0 <= tz_offset_s$0 && ! tz_unknown)
               {var tz_sign=43;switch$2 = 1}
              if(! switch$2)var tz_sign=45;
              var
               tz_min=abs(tz_offset_s$0 / 60 | 0),
               tz_hh=tz_min / 60 | 0,
               tz_mm=tz_min % 60 | 0;
              caml_call3(bprintf(buf,_LD_),tz_sign,tz_hh,tz_mm)}
            return contents(buf)},
         pp_rfc3339=
          function(space,frac_s,tz_offset_s,param,ppf,t)
           {var _bbe_=to_rfc3339(space,frac_s,tz_offset_s,t);
            return caml_call2(pf(ppf),_LF_,_bbe_)};
        caml_fresh_oo_id(0);
        make(6,num_255);
        var
         id$4=[0,0],
         attr=
          function(param)
           {id$4[1]++;
            var K=[num_248,_LG_,caml_fresh_oo_id(0)];
            function _bbc_(param)
             {if(param[1] === K){var x=param[2];return x}
              throw [0,Assert_failure,_LH_]}
            function _bbd_(x){return [0,K,x]}
            return [0,id$4[1],_bbd_,_bbc_]};
        attr(0);
        attr(0);
        attr(0);
        var
         Parse_error$4=[num_248,_LI_,caml_fresh_oo_id(0)],
         symbol$21=function(x,y){return (x >>> y | 0) & num_255},
         symbol$22=function(x,y){return (x & num_255) << y},
         need_more=function(x){return [0,Parse_error$4,_LJ_,x]},
         int_of_char=
          function(c)
           {if(65 <= c)
             {if(97 <= c)
               {if(! (num_103 <= c))return (10 + c | 0) - 97 | 0}
              else
               if(! (71 <= c))return (10 + c | 0) - 65 | 0}
            else
             {var switcher=c + num_48 | 0;
              if(! (9 < switcher >>> 0))return c - 48 | 0}
            return -1},
         bad_char=
          function(i,s)
           {var
             _bbb_=caml_string_get(s,i),
             msg=caml_call2(sprintf(_LK_),_bbb_,i);
            return [0,Parse_error$4,msg,s]},
         is_number=
          function(base,n)
           {var _ba$_=0 <= n?1:0,_bba_=_ba$_?n < base?1:0:_ba$_;return _bba_},
         parse_int=
          function(base,s,i)
           {var len=caml_ml_string_length(s),i$0=i[1];
            if(i$0 < len)
             {if(is_number(base,int_of_char(caml_string_get(s,i$0))))
               {var prev=0;
                for(;;)
                 {var j=i[1];
                  if(len <= j)return prev;
                  var c=caml_string_get(s,j),k=int_of_char(c);
                  if(is_number(base,k))
                   {i[1]++;
                    var prev$0=caml_mul(prev,base) + k | 0,prev=prev$0;
                    continue}
                  return prev}}
              throw bad_char(i$0,s)}
            throw need_more(s)},
         parse_dec_int=function(s,i){return parse_int(10,s,i)},
         parse_hex_int=function(s,i){return parse_int(16,s,i)},
         expect_char=
          function(s,i,c)
           {if(i[1] < caml_ml_string_length(s))
             {if(caml_string_get(s,i[1]) !== c)throw bad_char(i[1],s);
              i[1]++;
              return 0}
            throw need_more(s)},
         compare$18=
          function(a,b)
           {var c=caml_int_compare(a >>> 1 | 0,b >>> 1 | 0);
            return 0 === c?caml_int_compare(a & 1,b & 1):c},
         make$8=
          function(a,b,c,d)
           {var
             _ba8_=symbol$22(d,0),
             _ba9_=symbol$22(c,8) | _ba8_,
             _ba__=symbol$22(b,16);
            return symbol$22(a,24) | _ba__ | _ba9_},
         parse_dotted_quad=
          function(s,i)
           {var a=parse_dec_int(s,i);
            expect_char(s,i,46);
            var b=parse_dec_int(s,i);
            expect_char(s,i,46);
            var c=parse_dec_int(s,i);
            expect_char(s,i,46);
            var d=parse_dec_int(s,i);
            function valid(a){return (a & num_255) !== a?1:0}
            if(valid(a))throw [0,Parse_error$4,_LL_,s];
            if(valid(b))throw [0,Parse_error$4,_LM_,s];
            if(valid(c))throw [0,Parse_error$4,_LN_,s];
            if(valid(d))throw [0,Parse_error$4,_LO_,s];
            return make$8(a,b,c,d)},
         to_buffer=
          function(b,i)
           {var
             _ba4_=symbol$21(i,0),
             _ba5_=symbol$21(i,8),
             _ba6_=symbol$21(i,16),
             _ba7_=symbol$21(i,24);
            return caml_call4(bprintf(b,_LP_),_ba7_,_ba6_,_ba5_,_ba4_)},
         pp$21=
          function(ppf,i)
           {var b=create$1(15);
            to_buffer(b,i);
            var _ba3_=contents(b);
            return caml_call2(pf(ppf),_LQ_,_ba3_)},
         of_octets_exn=
          function(opt,bs)
           {if(opt)var sth=opt[1],off=sth;else var off=0;
            try
             {var
               _baY_=caml_string_get(bs,3 + off | 0),
               _baZ_=caml_string_get(bs,2 + off | 0),
               _ba0_=caml_string_get(bs,1 + off | 0),
               _ba1_=make$8(caml_string_get(bs,off | 0),_ba0_,_baZ_,_baY_);
              return _ba1_}
            catch(_ba2_){throw need_more(bs)}},
         write_octets_exn=
          function(opt,i,b)
           {if(opt)var sth=opt[1],off=sth;else var off=0;
            try
             {caml_bytes_set(b,off | 0,chr(symbol$21(i,24)));
              caml_bytes_set(b,1 + off | 0,chr(symbol$21(i,16)));
              caml_bytes_set(b,2 + off | 0,chr(symbol$21(i,8)));
              var _baW_=caml_bytes_set(b,3 + off | 0,chr(symbol$21(i,0)));
              return _baW_}
            catch(_baX_){throw need_more(to_string(b))}},
         of_int16=
          function(param){var b=param[2],a=param[1];return a << 16 | b},
         to_int16=function(a){return [0,a >>> 16 | 0,a & num_65535]},
         mask=function(sz){return 0 < sz?32 <= sz?-1:-1 << (32 - sz | 0):0},
         compare$19=
          function(param,_baV_)
           {var
             d2=_baV_[4],
             c2=_baV_[3],
             b2=_baV_[2],
             a2=_baV_[1],
             d1=param[4],
             c1=param[3],
             b1=param[2],
             a1=param[1],
             n=compare$18(a1,a2);
            if(0 === n)
             {var n$0=compare$18(b1,b2);
              if(0 === n$0)
               {var n$1=compare$18(c1,c2);
                return 0 === n$1?compare$18(d1,d2):n$1}
              return n$0}
            return n},
         logand=
          function(param,_baU_)
           {var
             d2=_baU_[4],
             c2=_baU_[3],
             b2=_baU_[2],
             a2=_baU_[1],
             d1=param[4],
             c1=param[3],
             b1=param[2],
             a1=param[1];
            return [0,a1 & a2,b1 & b2,c1 & c2,d1 & d2]},
         make$9=
          function(a,b,c,d,e,f,g,h)
           {var
             _baR_=of_int16([0,g,h]),
             _baS_=of_int16([0,e,f]),
             _baT_=of_int16([0,c,d]);
            return [0,of_int16([0,a,b]),_baT_,_baS_,_baR_]},
         of_string_raw=
          function(s,offset)
           {var compressed=[0,0],len=caml_ml_string_length(s);
            if(len < (offset[1] + 1 | 0))throw need_more(s);
            var use_bracket=91 === caml_string_get(s,offset[1])?1:0;
            if(use_bracket)offset[1]++;
            if(len < (offset[1] + 2 | 0))throw need_more(s);
            if(58 === caml_string_get(s,offset[1]))
             {offset[1]++;
              if(58 !== caml_string_get(s,offset[1]))
               throw bad_char(offset[1],s);
              compressed[1] = 1;
              offset[1]++;
              var l=_LR_}
            else
             var l=0;
            function loop(nb,acc)
             {var nb$0=nb,acc$0=acc;
              for(;;)
               {if(8 <= nb$0)return acc$0;
                if(len <= offset[1])return acc$0;
                var pos=offset[1];
                try
                 {var _baP_=parse_hex_int(s,offset),x=_baP_}
                catch(_baQ_){var x=-1}
                if(0 <= x)
                 {if(7 === nb$0)return [0,x,acc$0];
                  if(offset[1] < len && 58 === caml_string_get(s,offset[1]))
                   {offset[1]++;
                    if(offset[1] < len)
                     {if(58 === caml_string_get(s,offset[1]))
                       {if(compressed[1]){offset[1] += -1;return [0,x,acc$0]}
                        compressed[1] = 1;
                        offset[1]++;
                        var
                         acc$1=[0,-1,[0,x,acc$0]],
                         nb$1=nb$0 + 2 | 0,
                         nb$0=nb$1,
                         acc$0=acc$1;
                        continue}
                      if(is_number(16,int_of_char(caml_string_get(s,offset[1]))))
                       {var
                         acc$2=[0,x,acc$0],
                         nb$2=nb$0 + 1 | 0,
                         nb$0=nb$2,
                         acc$0=acc$2;
                        continue}
                      throw bad_char(offset[1],s)}
                    throw need_more(s)}
                  if(offset[1] < len && 46 === caml_string_get(s,offset[1]))
                   {offset[1] = pos;
                    var
                     v4=parse_dotted_quad(s,offset),
                     match=to_int16(v4),
                     lo=match[2],
                     hi=match[1];
                    return [0,lo,[0,hi,acc$0]]}
                  return [0,x,acc$0]}
                return acc$0}}
            var res=loop(length(l),l),res_len=length(res);
            if(8 < res_len)throw [0,Parse_error$4,_LS_,s];
            if(0 === res_len)throw need_more(s);
            var a=caml_make_vect(8,0);
            if(compressed[1])
             var missing=8 - (res_len - 1 | 0) | 0;
            else
             {if(8 !== res_len)
               {if(offset[1] < len)throw bad_char(offset[1],s);
                throw need_more(s)}
              var missing=0}
            var _baH_=7;
            fold_left$0
             (function(i,x)
               {if(-1 === x)return i - missing | 0;
                if((x & num_65535) !== x)
                 throw [0,Parse_error$4,caml_call1(sprintf(_LT_),i),s];
                caml_check_bound(a,i)[1 + i] = x;
                return i - 1 | 0},
              _baH_,
              res);
            if(use_bracket)expect_char(s,offset,93);
            var
             _baI_=caml_check_bound(a,7)[8],
             _baJ_=caml_check_bound(a,6)[7],
             _baK_=caml_check_bound(a,5)[6],
             _baL_=caml_check_bound(a,4)[5],
             _baM_=caml_check_bound(a,3)[4],
             _baN_=caml_check_bound(a,2)[3],
             _baO_=caml_check_bound(a,1)[2];
            return make$9
                    (caml_check_bound(a,0)[1],
                     _baO_,
                     _baN_,
                     _baM_,
                     _baL_,
                     _baK_,
                     _baJ_,
                     _baI_)},
         of_string_exn=
          function(s)
           {var i=[0,0],x=of_string_raw(s,i);
            if(caml_ml_string_length(s) <= i[1])return x;
            throw bad_char(i[1],s)},
         to_string$13=
          function(l$0)
           {var
             buf=create$1(39),
             t=l$0[4],
             z=l$0[3],
             y=l$0[2],
             x=l$0[1],
             match=to_int16(x),
             b=match[2],
             a=match[1],
             match$0=to_int16(y),
             d=match$0[2],
             c=match$0[1],
             match$1=to_int16(z),
             f=match$1[2],
             e=match$1[1],
             match$2=to_int16(t),
             h=match$2[2],
             g=match$2[1],
             switch$0=0;
            if
             (0
              ===
              a
              &&
              0
              ===
              b
              &&
              0
              ===
              c
              &&
              0
              ===
              d
              &&
              0
              ===
              e
              &&
              num_65535
              ===
              f)
             {var v4=1;switch$0 = 1}
            if(! switch$0)var v4=0;
            var
             param$1=[0,h,[0,g,[0,f,[0,e,[0,d,[0,c,[0,b,[0,a,0]]]]]]]],
             elide=0,
             zeros=0,
             acc=0,
             param=param$1;
            for(;;)
             {if(param)
               {var _baA_=param[1];
                if(0 === _baA_)
                 {var
                   param$0=param[2],
                   zeros$0=zeros - 1 | 0,
                   zeros=zeros$0,
                   param=param$0;
                  continue}
                var xs=param[2];
                if(0 === zeros)
                 {var acc$0=[0,_baA_,acc],zeros=0,acc=acc$0,param=xs;continue}
                var
                 acc$1=[0,_baA_,[0,zeros,acc]],
                 elide$0=min(elide,zeros),
                 elide=elide$0,
                 zeros=0,
                 acc=acc$1,
                 param=xs;
                continue}
              var
               elide$1=min(elide,zeros),
               l=0 === zeros?acc:[0,zeros,acc],
               elide$2=-1 <= elide$1?0:[0,elide$1],
               switch$1=0;
              if(elide$2)
               {var x$0=elide$2[1];
                if(! (-8 <= x$0)){var _baB_=0;switch$1 = 1}}
              if(! switch$1)var _baB_=1;
              if(_baB_)
               {var
                 _baC_=[0,elide$2,0],
                 match$3=
                  fold_left$0
                   (function(param,x$1)
                     {var l$1=param[2],patt=param[1];
                      if(caml_equal([0,x$1],patt))return [0,0,[0,0,l$1]];
                      if(0 <= x$1)return [0,patt,[0,[0,x$1],l$1]];
                      var l=l$1,x=x$1;
                      for(;;)
                       {if(0 <= x)return [0,patt,l];
                        var x$0=x + 1 | 0,l$0=[0,_LU_,l],l=l$0,x=x$0;
                        continue}},
                    _baC_,
                    l),
                 lrev=match$3[2],
                 param$5=rev(lrev),
                 param$2=param$5;
                for(;;)
                 {if(param$2)
                   {var _baD_=param$2[1];
                    if(! _baD_)
                     {var param$4=param$2[2];
                      add_string(buf,_LY_);
                      var param$2=param$4;
                      continue}
                    var _baE_=param$2[2],_baF_=_baD_[1];
                    if(_baE_)
                     {var _baG_=_baE_[1];
                      if(! _baG_)
                       {var param$3=_baE_[2];
                        caml_call1(bprintf(buf,_LW_),_baF_);
                        var param$2=param$3;
                        continue}
                      var switch$2=0;
                      if(_baE_[2])
                       switch$2 = 1;
                      else
                       {var lo=_baG_[1];
                        if(v4)
                         {var addr=of_int16([0,_baF_,lo]);to_buffer(buf,addr)}
                        else
                         switch$2 = 1}
                      if(switch$2)
                       {caml_call1(bprintf(buf,_LV_),_baF_);
                        var param$2=_baE_;
                        continue}}
                    else
                     caml_call1(bprintf(buf,_LX_),_baF_)}
                  return contents(buf)}}
              throw [0,Assert_failure,_LZ_]}},
         pp$22=
          function(ppf,i)
           {var _baz_=to_string$13(i);return caml_call2(pf(ppf),_L0_,_baz_)},
         to_octets=
          function(i)
           {var byte$0=caml_create_bytes(16),d=i[4],c=i[3],b=i[2],a=i[1];
            write_octets_exn([0,0],a,byte$0);
            write_octets_exn([0,4],b,byte$0);
            write_octets_exn([0,8],c,byte$0);
            write_octets_exn([0,12],d,byte$0);
            return to_string(byte$0)},
         mask$0=
          function(sz)
           {var
             _baw_=mask(sz - 96 | 0),
             _bax_=mask(sz - 64 | 0),
             _bay_=mask(sz + num_32 | 0);
            return [0,mask(sz | 0),_bay_,_bax_,_baw_]},
         pre=make$9(0,0,0,0,0,num_65535,0,0),
         sz=96,
         of_string_raw$0=
          function(s,offset)
           {var len=caml_ml_string_length(s);
            if(len < (offset[1] + 1 | 0))throw need_more(s);
            var match=caml_string_get(s,0);
            if(91 === match)return [1,of_string_raw(s,offset)];
            var pos=offset[1];
            try
             {var _bav_=[0,parse_dotted_quad(s,offset)];return _bav_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] === Parse_error$4)
               {var v4_msg=exn[2];
                offset[1] = pos;
                try
                 {var _bau_=[1,of_string_raw(s,offset)];return _bau_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  if(exn[1] === Parse_error$4)
                   {var
                     s$0=exn[3],
                     v6_msg=exn[2],
                     msg=caml_call2(sprintf(_L1_),v4_msg,v6_msg);
                    throw [0,Parse_error$4,msg,s$0]}
                  throw exn}}
              throw exn}},
         v4_of_v6=
          function(match)
           {var m=mask$0(sz),_bat_=logand(pre,m);
            if(caml_equal(logand(match,m),_bat_))
             {var v4=match[4];return [0,v4]}
            return 0},
         of_ptime=
          function(match)
           {var
             ps=match[2],
             days=match[1],
             s_days=caml_int64_mul(caml_int64_of_int32(days),_L2_);
            return caml_int64_add(s_days,caml_int64_div(ps,_L3_))},
         to_ptime=
          function(t)
           {var
             days=caml_int64_to_int32(caml_int64_div(t,_L4_)),
             ps=caml_int64_mul(caml_int64_mod(t,_L6_),_L5_),
             match=bind(of_d_ps([0,days,ps]),of_span);
            if(match){var ptime=match[1];return ptime}
            return invalid_arg(_L7_)},
         max_rfc3999=of_ptime(max$0),
         min_rfc3999=of_ptime(min$0),
         _L__=0,
         _L$_=
          function(s)
           {var match=of_rfc3339(0,0,0,s);
            if(0 === match[0])
             var match$0=match[1],t=match$0[1],match$1=[0,of_ptime(t)];
            else
             var match$1=0;
            if(match$1){var i=match$1[1];return i}
            var match$2=of_string_opt(s);
            if(match$2){var i$0=match$2[1];return i$0}
            throw [0,Invalid_argument,_Ma_]},
         _Mb_=function(_bas_){return wrap_error(_L$_,_bas_)},
         as_string_encoding=
          conv
           (function(i)
             {if
               (caml_call2(symbol$3,min_rfc3999,i)
                &&
                caml_call2(symbol$3,i,max_rfc3999))
               return to_rfc3339(0,_L9_,_L8_,to_ptime(i));
              return of_int64(i)},
            _Mb_,
            _L__,
            output),
         _Mc_=splitted(as_string_encoding,int64$0),
         encoding$29=function(eta){return def$0(_Md_,0,_Me_,eta)}(_Mc_),
         _Mf_=0,
         _Mg_=
          function(s)
           {if(caml_string_notequal(s,_Mh_) && caml_string_notequal(s,_Mi_))
             {try
               {var t=caml_int64_of_string(s)}
              catch(_bar_){return [1,caml_call1(strf(_Mj_),s)]}
              return [0,t]}
            return [0,epoch$0]},
         _Ml_=strf(_Mk_),
         rpc_arg$3=make$4([0,strf(_Mm_)],_Ml_,_Mg_,of_int64,_Mf_),
         pp_hum$0=function(ppf,t){return pp_rfc3339(0,0,0,0,ppf,to_ptime(t))},
         frac_s=3,
         of_seconds_exn=
          function(f)
           {var match=of_float_s(f);
            if(match){var s=match[1];return s}
            return invalid_arg(_Mn_)},
         _Mo_=0,
         _Mq_=
          conv
           (to_float_s,
            function(f)
             {var match=of_float_s(f);
              if(match){var s=match[1];return s}
              return invalid_arg(_Mp_)},
            _Mo_,
            float$2),
         encoding$30=function(eta){return def$0(_Mr_,0,_Ms_,eta)}(_Mq_),
         _Mt_=0,
         _Mu_=function(s){return of_float(to_float_s(s))},
         _Mv_=
          function(s)
           {try
             {var val=of_float_s(caml_float_of_string(s))}
            catch(_baq_){return [1,caml_call1(strf(_Mw_),s)]}
            if(val){var t=val[1];return [0,t]}
            return [1,caml_call1(strf(_Mx_),s)]},
         _Mz_=strf(_My_),
         rpc_arg$4=make$4([0,strf(_MA_)],_Mz_,_Mv_,_Mu_,_Mt_),
         of_seconds_exn$0=
          function(x$0)
           {var
             x=caml_greaterequal(x$0,___)?x$0:caml_int64_neg(x$0),
             days=caml_int64_to_int32(caml_int64_div(x,_MB_)),
             ps=caml_int64_mul(caml_int64_mod(x,_MD_),_MC_),
             match=of_d_ps([0,days,ps]);
            if(match)
             var
              span=match[1],
              span$0=caml_call2(symbol$4,x$0,_ME_)?neg(span):span,
              match$0=of_span(span$0);
            else
             var match$0=0;
            if(match$0){var t=match$0[1];return t}
            return invalid_arg(_MF_)},
         to_seconds=
          function(match)
           {var
             ps=match[2],
             days=match[1],
             s_days=caml_int64_mul(caml_int64_of_int32(days),_MG_);
            return caml_int64_add(s_days,caml_int64_div(ps,_MH_))},
         of_notation_opt=
          function(s)
           {var match=of_rfc3339(0,0,0,s);
            if(0 === match[0]){var match$0=match[1],t=match$0[1];return [0,t]}
            return 0},
         to_notation=function(t){return to_rfc3339(0,[0,frac_s],0,t)},
         _MI_=0,
         rfc_encoding=
          def$0
           (_ML_,
            _MK_,
            _MJ_,
            conv
             (to_notation,
              function(s)
               {var match=of_notation_opt(s);
                if(match){var s$0=match[1];return s$0}
                return kstr
                        (function(msg)
                          {throw [0,Cannot_destruct,[0,0,[0,Failure,msg]]]},
                         fmt$1)},
              _MI_,
              output)),
         binary$0=conv(to_seconds,of_seconds_exn$0,0,int64$0),
         _MM_=0,
         _MN_=function(i){return of_seconds_exn$0(i)},
         _MP_=[0,[0,_MO_,0,int64$0,function(param){return 0},_MN_,0],_MM_],
         _MQ_=function(i){return i},
         json$1=
          union$0
           (0,
            [0,[0,_MR_,0,rfc_encoding,function(i){return [0,i]},_MQ_,0],_MP_]),
         _MS_=splitted(json$1,binary$0),
         encoding$31=function(eta){return def$0(_MT_,0,_MU_,eta)}(_MS_),
         _MV_=0,
         _MW_=
          function(s)
           {if(caml_string_notequal(s,_MX_) && caml_string_notequal(s,_MY_))
             {var match=of_notation_opt(s);
              if(match){var t=match[1];return [0,t]}
              try
               {var t$0=of_seconds_exn$0(caml_int64_of_string(s))}
              catch(_bap_){return [1,caml_call1(strf(_MZ_),s)]}
              return [0,t$0]}
            return [0,epoch]},
         _M1_=strf(_M0_);
        make$4([0,strf(_M2_)],_M1_,_MW_,to_notation,_MV_);
        var
         pp_hum$1=function(ppf,t){return pp_rfc3339(0,[0,frac_s],0,0,ppf,t)},
         stamped_encoding=
          function(arg_encoding)
           {var _bam_=tup2(encoding$31,arg_encoding),_ban_=0;
            function _bao_(param)
             {var data=param[2],stamp=param[1];return [0,data,stamp]}
            return conv
                    (function(param)
                      {var stamp=param[2],data=param[1];return [0,stamp,data]},
                     _bao_,
                     _ban_,
                     _bam_)},
         hash$7=function(t){return caml_int64_to_int32(to_seconds(t))};
        caml_call1(Make$10,[0,compare$17]);
        caml_call1(Make$11,[0,compare$17]);
        caml_call1(Make$12,[0,equal$8,hash$7]);
        register([0,pp_hum$0],encoding$29);
        register([0,pp_hum$1],encoding$31);
        register(0,encoding$30);
        var
         worker_status_encoding=
          function(error_encoding)
           {var _a$8_=0;
            function _a$9_(param)
             {var errs=param[4],t=param[3],t0=param[2];
              return [3,t0,t,[0,errs]]}
            function _a$__(param)
             {if(3 === param[0])
               {var _bal_=param[3];
                if(_bal_)
                 {var errs=_bal_[1],t=param[2],t0=param[1];
                  return [0,[0,0,t0,t,errs]]}}
              return 0}
            var
             _a$$_=
              [0,
               [0,
                _M9_,
                0,
                obj4
                 ([0,_M7_,constant(_M6_),0,0],
                  [0,_M5_,encoding$31,0,0],
                  [0,_M4_,encoding$31,0,0],
                  [0,_M3_,error_encoding,0,0]),
                _a$__,
                _a$9_,
                _M8_],
               _a$8_];
            function _baa_(param)
             {var t=param[3],t0=param[2];return [3,t0,t,0]}
            function _bab_(param)
             {if(3 === param[0] && ! param[3])
               {var t=param[2],t0=param[1];return [0,[0,0,t0,t]]}
              return 0}
            var
             _bac_=
              [0,
               [0,
                _Nd_,
                0,
                obj3
                 ([0,_Nb_,constant(_Na_),0,0],
                  [0,_M$_,encoding$31,0,0],
                  [0,_M__,encoding$31,0,0]),
                _bab_,
                _baa_,
                _Nc_],
               _a$$_];
            function _bad_(param){var t=param[3],t0=param[2];return [2,t0,t]}
            function _bae_(param)
             {if(2 === param[0])
               {var t=param[2],t0=param[1];return [0,[0,0,t0,t]]}
              return 0}
            var
             _baf_=
              [0,
               [0,
                _Nj_,
                0,
                obj3
                 ([0,_Nh_,constant(_Ng_),0,0],
                  [0,_Nf_,encoding$31,0,0],
                  [0,_Ne_,encoding$31,0,0]),
                _bae_,
                _bad_,
                _Ni_],
               _bac_];
            function _bag_(param){var t=param[2];return [1,t]}
            function _bah_(param)
             {if(1 === param[0]){var t=param[1];return [0,[0,0,t]]}return 0}
            var
             _bai_=
              [0,
               [0,
                _No_,
                0,
                obj2([0,_Nm_,constant(_Nl_),0,0],[0,_Nk_,encoding$31,0,0]),
                _bah_,
                _bag_,
                _Nn_],
               _baf_];
            function _baj_(param){var t=param[2];return [0,t]}
            function _bak_(param)
             {if(0 === param[0]){var t=param[1];return [0,[0,0,t]]}return 0}
            return union$0
                    (0,
                     [0,
                      [0,
                       _Nt_,
                       0,
                       obj2([0,_Nr_,constant(_Nq_),0,0],[0,_Np_,encoding$31,0,0]),
                       _bak_,
                       _baj_,
                       _Ns_],
                      _bai_])},
         worker_information_encoding=
          function(error_encoding)
           {var
             _a$5_=
              obj3
               ([0,_Nw_,int31$0,0,0],
                [0,_Nv_,worker_status_encoding(error_encoding),0,0],
                [0,_Nu_,int31$0,0,0]),
             _a$6_=0;
            function _a$7_(param)
             {var
               queue_length=param[3],
               wstatus=param[2],
               instances_number=param[1];
              return [0,instances_number,wstatus,queue_length]}
            return conv
                    (function(param)
                      {var
                        queue_length=param[3],
                        wstatus=param[2],
                        instances_number=param[1];
                       return [0,instances_number,wstatus,queue_length]},
                     _a$7_,
                     _a$6_,
                     _a$5_)},
         _NA_=
          obj3
           ([0,_Nz_,encoding$31,0,0],
            [0,_Ny_,encoding$30,0,0],
            [0,_Nx_,encoding$30,0,0]),
         _NB_=0,
         _NC_=
          function(param)
           {var completed=param[3],treated=param[2],pushed=param[1];
            return [0,pushed,treated,completed]},
         request_status_encoding=
          conv
           (function(param)
             {var completed=param[3],treated=param[2],pushed=param[1];
              return [0,pushed,treated,completed]},
            _NC_,
            _NB_,
            _NA_),
         full_status_encoding=
          function(req_encoding,evt_encoding,error_encoding)
           {var
             requests_encoding=
              list$1
               (0,
                obj2
                 ([0,_NE_,encoding$31,0,0],[0,_ND_,arg$4(0,req_encoding),0,0])),
             events_encoding=
              list$1
               (0,
                obj2
                 ([0,_NG_,encoding$24,0,0],
                  [0,_NF_,arg$4(0,list$1(0,arg$4(0,evt_encoding))),0,0])),
             current_request_encoding=
              obj3
               ([0,_NJ_,encoding$31,0,0],
                [0,_NI_,encoding$31,0,0],
                [0,_NH_,req_encoding,0,0]),
             _a$1_=opt$2(0,0,_NK_,current_request_encoding),
             _a$2_=
              obj4
               ([0,_NN_,worker_status_encoding(error_encoding),0,0],
                [0,_NM_,requests_encoding,0,0],
                [0,_NL_,events_encoding,0,0],
                _a$1_),
             _a$3_=0;
            function _a$4_(param)
             {var
               current_request=param[4],
               backlog=param[3],
               pending_requests=param[2],
               status=param[1];
              return [0,status,pending_requests,backlog,current_request]}
            return conv
                    (function(param)
                      {var
                        current_request=param[4],
                        backlog=param[3],
                        pending_requests=param[2],
                        status=param[1];
                       return [0,status,pending_requests,backlog,current_request]},
                     _a$4_,
                     _a$3_,
                     _a$2_)},
         upgrades_encoding=
          def$0
           (_NS_,
            _NR_,
            _NQ_,
            list$1(0,obj2([0,_NP_,int32$1,0,0],[0,_NO_,encoding$17,0,0]))),
         protocol_overrides_encoding=
          def$0
           (_NX_,
            _NW_,
            _NV_,
            list$1(0,obj2([0,_NU_,encoding$17,0,0],[0,_NT_,encoding$17,0,0])));
        register(0,upgrades_encoding);
        register(0,protocol_overrides_encoding);
        var
         pp$23=
          function(fmt,param)
           {if(param)
             {var _a$X_=param[2],_a$Y_=param[1];
              if(_a$X_)
               {var _a$Z_=arg$0(0,_a$Y_);
                return caml_call5(pf(fmt),_NY_,pp$2,_a$Z_,pp$23,_a$X_)}
              var _a$0_=arg$0(0,_a$Y_);
              return caml_call3(pf(fmt),_NZ_,pp$2,_a$0_)}
            return 0},
         _N1_=list$1(0,def$0(_N0_,0,0,bytes$1)),
         encoding$32=def$0(_N4_,_N3_,_N2_,splitted(list$1(0,bytes$1),_N1_)),
         _Ob_=
          obj8
           ([0,_Oa_,int32$1,0,0],
            [0,_N$_,uint8$0,0,0],
            [0,_N__,encoding$3,0,0],
            [0,_N9_,encoding$29,0,0],
            [0,_N8_,uint8$0,0,0],
            [0,_N7_,encoding$21,0,0],
            [0,_N6_,encoding$32,0,0],
            [0,_N5_,encoding$22,0,0]),
         _Oc_=0,
         _Od_=
          function(param)
           {var
             context=param[8],
             fitness=param[7],
             operations_hash=param[6],
             validation_passes=param[5],
             timestamp=param[4],
             predecessor=param[3],
             proto_level=param[2],
             level=param[1];
            return [0,
                    level,
                    proto_level,
                    predecessor,
                    timestamp,
                    validation_passes,
                    operations_hash,
                    fitness,
                    context]},
         shell_header_encoding=
          def$0
           (_Og_,
            _Of_,
            _Oe_,
            conv
             (function(param)
               {var
                 context=param[8],
                 fitness=param[7],
                 operations_hash=param[6],
                 validation_passes=param[5],
                 timestamp=param[4],
                 predecessor=param[3],
                 proto_level=param[2],
                 level=param[1];
                return [0,
                        level,
                        proto_level,
                        predecessor,
                        timestamp,
                        validation_passes,
                        operations_hash,
                        fitness,
                        context]},
              _Od_,
              _Oc_,
              _Ob_)),
         _Oi_=merge_objs(shell_header_encoding,obj1([0,_Oh_,bytes$0,0,0])),
         _Oj_=0,
         _Ok_=
          function(param)
           {var protocol_data=param[2],shell=param[1];
            return [0,shell,protocol_data]},
         encoding$33=
          def$0
           (_On_,
            _Om_,
            _Ol_,
            conv
             (function(param)
               {var protocol_data=param[2],shell=param[1];
                return [0,shell,protocol_data]},
              _Ok_,
              _Oj_,
              _Oi_)),
         hash$8=
          function(block)
           {return caml_call2
                    (hash_bytes,0,[0,to_bytes_exn(0,encoding$33,block),0])};
        caml_call1(Make$11,[0,compare]);
        register(0,shell_header_encoding);
        register(0,encoding$33);
        var
         encoding$34=def$0(_Op_,0,_Oo_,output),
         encoding$35=def$0(_Or_,0,_Oq_,uint16$0);
        register([0,pp],encoding$34);
        register([0,pp$0],encoding$35);
        var
         pp$24=
          function(ppf,motive)
           {if(typeof motive === "number")
             switch(motive)
              {case 0:return caml_call1(pf(ppf),_Os_);
               case 1:return caml_call1(pf(ppf),_Ot_);
               case 2:return caml_call1(pf(ppf),_Ou_);
               case 3:return caml_call1(pf(ppf),_Ov_);
               case 4:return caml_call1(pf(ppf),_Ow_);
               default:return caml_call1(pf(ppf),_Ox_)}
            var error_code=motive[1];
            return caml_call2(pf(ppf),_Oy_,error_code)},
         _Oz_=0,
         _OA_=
          function(error_code)
           {if(5 < error_code >>> 0)return [0,error_code];
            switch(error_code)
             {case 0:return 0;
              case 1:return 1;
              case 2:return 3;
              case 3:return 5;
              case 4:return 4;
              default:return 2}},
         encoding$36=
          conv
           (function(param)
             {if(typeof param === "number")
               switch(param)
                {case 0:return 0;
                 case 1:return 1;
                 case 2:return 5;
                 case 3:return 2;
                 case 4:return 4;
                 default:return 3}
              var error_code=param[1];
              return error_code},
            _OA_,
            _Oz_,
            int16$0),
         Rejecting=[num_248,_OB_,caml_fresh_oo_id(0)],
         _OC_=function(motive){return [0,Rejecting,motive]},
         _OD_=
          function(param)
           {if(param[1] === Rejecting){var motive=param[2];return [0,motive]}
            return 0},
         _OF_=obj1([0,_OE_,encoding$36,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _OJ_,
          _OI_,
          _OH_,
          [0,
           function(ppf,motive){return caml_call3(pf(ppf),_OG_,pp$24,motive)}],
          _OF_,
          _OD_,
          _OC_);
        var encoding$37=def$0(_OL_,0,_OK_,uint16$0);
        register([0,pp$0],encoding$37);
        var
         pp$25=
          function(ppf,param)
           {var
             p2p_version=param[3],
             distributed_db_version=param[2],
             chain_name=param[1];
            return caml_call7
                    (pf(ppf),
                     _OM_,
                     pp,
                     chain_name,
                     pp$0,
                     distributed_db_version,
                     pp$0,
                     p2p_version)},
         _OQ_=
          obj3
           ([0,_OP_,encoding$34,0,0],
            [0,_OO_,encoding$35,0,0],
            [0,_ON_,encoding$37,0,0]),
         _OR_=0,
         _OS_=
          function(param)
           {var
             p2p_version=param[3],
             distributed_db_version=param[2],
             chain_name=param[1];
            return [0,chain_name,distributed_db_version,p2p_version]},
         _OT_=
          conv
           (function(param)
             {var
               p2p_version=param[3],
               distributed_db_version=param[2],
               chain_name=param[1];
              return [0,chain_name,distributed_db_version,p2p_version]},
            _OS_,
            _OR_,
            _OQ_),
         encoding$38=function(eta){return def$0(_OU_,0,_OV_,eta)}(_OT_);
        register([0,pp$25],encoding$38);
        var
         _OW_=0,
         _OX_=
          conv
           (to_octets,
            function(eta)
             {var
               hihi=of_octets_exn([0,0],eta),
               hilo=of_octets_exn([0,4],eta),
               lohi=of_octets_exn([0,8],eta),
               lolo=of_octets_exn([0,12],eta);
              return [0,hihi,hilo,lohi,lolo]},
            _OW_,
            output),
         _OY_=splitted(conv(to_string$13,of_string_exn,0,output),_OX_),
         encoding$39=function(eta){return def$0(_OZ_,0,_O0_,eta)}(_OY_),
         pp$26=
          function(ppf,addr)
           {var match=v4_of_v6(addr);
            if(match)
             {var addr$0=match[1];
              return caml_call3(pf(ppf),_O1_,pp$21,addr$0)}
            return caml_call3(pf(ppf),_O2_,pp$22,addr)};
        register([0,pp$26],encoding$39);
        var
         pp$27=include$49[3],
         encoding$40=include$49[38],
         rpc_arg$5=include$49[39],
         rpc_arg$6=like(rpc_arg$5,_O4_,_O3_),
         compare$20=
          function(param,_a$W_)
           {var
             p2=_a$W_[2],
             a2=_a$W_[1],
             p1=param[2],
             a1=param[1],
             x=compare$19(a1,a2);
            return 0 === x?p1 - p2 | 0:x},
         equal$9=function(p1,p2){return 0 === compare$20(p1,p2)?1:0},
         pp$28=
          function(ppf,param)
           {var port=param[2],addr=param[1],match=v4_of_v6(addr);
            if(match)
             {var addr$0=match[1];
              return caml_call4(pf(ppf),_O5_,pp$21,addr$0,port)}
            return caml_call4(pf(ppf),_O6_,pp$22,addr,port)},
         check_port=
          function(port)
           {var _a$T_=mem_char(port,91);
            if(_a$T_)
             var _a$U_=_a$T_;
            else
             var _a$V_=mem_char(port,93),_a$U_=_a$V_ || mem_char(port,58);
            return _a$U_?invalid_arg(_O7_):_a$U_},
         parse_addr_port=
          function(s)
           {var len=caml_ml_string_length(s);
            if(0 === len)return _O8_;
            if(91 === caml_string_get(s,0))
             {var match=rindex_opt(s,93);
              if(match)
               {var
                 pos=match[1],
                 addr=sub$0(s,1,pos - 1 | 0),
                 port=
                  pos === (len - 1 | 0)
                   ?_O9_
                   :58 === caml_string_get(s,pos + 1 | 0)
                     ?sub$0(s,pos + 2 | 0,(len - pos | 0) - 2 | 0)
                     :invalid_arg(_O__);
                check_port(port);
                return [0,addr,port]}
              return invalid_arg(_O$_)}
            var match$0=rindex_opt(s,93);
            if(match$0)return invalid_arg(_Pa_);
            try {var pos$0=index(s,58)}catch(_a$S_){return [0,s,_Pb_]}
            try
             {index_from(s,pos$0 + 1 | 0,58)}
            catch(_a$R_)
             {var
               addr$0=sub$0(s,0,pos$0),
               port$0=sub$0(s,pos$0 + 1 | 0,(len - pos$0 | 0) - 1 | 0);
              check_port(port$0);
              return [0,addr$0,port$0]}
            return invalid_arg(_Pc_)},
         of_string_exn$0=
          function(param$1,str)
           {var
             match$0=parse_addr_port(str),
             port=match$0[2],
             addr$0=match$0[1];
            if(caml_string_equal(port,_Pd_))
             {var err=[0,Invalid_argument,_Pe_];
              if(! param$1)throw err;
              var x=param$1[1],port$0=x}
            else
             var port$0=caml_int_of_string(port);
            var _a$P_=port$0 < 0?1:0,_a$Q_=_a$P_?num_65535 < port$0?1:0:_a$P_;
            if(_a$Q_)invalid_arg(_Pf_);
            var match=of_string_raw$0(addr$0,[0,0]);
            if(0 === match[0])
             {var
               addr$1=match[1],
               addr=[0,0,0,0,addr$1],
               param=mask$0(sz),
               d=param[4],
               c=param[3],
               b=param[2],
               a=param[1],
               _a$O_=logand(addr,[0,a ^ -1,b ^ -1,c ^ -1,d ^ -1]),
               param$0=logand(pre,mask$0(sz)),
               d2=_a$O_[4],
               c2=_a$O_[3],
               b2=_a$O_[2],
               a2=_a$O_[1],
               d1=param$0[4],
               c1=param$0[3],
               b1=param$0[2],
               a1=param$0[1];
              return [0,[0,a1 | a2,b1 | b2,c1 | c2,d1 | d2],port$0]}
            var addr$2=match[1];
            return [0,addr$2,port$0]},
         of_string$1=
          function(default_port,str)
           {try
             {var _a$N_=[0,of_string_exn$0(default_port,str)];return _a$N_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] === Invalid_argument){var s=exn[2];return [1,s]}
              if(exn[1] === Failure){var s$0=exn[2];return [1,s$0]}
              return _Pg_}},
         to_string$14=
          function(saddr){return caml_call2(strf(_Ph_),pp$28,saddr)},
         _Pi_=0,
         _Pj_=
          conv
           (to_string$14,
            function(eta){return of_string_exn$0(0,eta)},
            _Pi_,
            output),
         encoding$41=function(eta){return def$0(_Pk_,0,_Pl_,eta)}(_Pj_),
         _Pm_=0,
         rpc_arg$7=
          make$4
           (_Po_,
            _Pn_,
            function(eta){return of_string$1(0,eta)},
            to_string$14,
            _Pm_);
        caml_call1(Make$11,[0,compare$20]);
        caml_call1(Make$10,[0,compare$20]);
        caml_call1(MakeSeeded$0,[0,equal$9,hash$1]);
        var
         _Pp_=0,
         _Pq_=
          function(param)
           {switch(param)
             {case 0:return _Pr_;
              case 1:return _Ps_;
              case 2:return _Pt_;
              default:return _Pu_}},
         rpc_arg$8=
          make$4
           (0,
            _PE_,
            function(s)
             {return caml_string_notequal(s,_Pv_)
                      ?caml_string_notequal(s,_Pw_)
                        ?caml_string_notequal(s,_Px_)
                          ?caml_string_notequal(s,_Py_)
                            ?[1,caml_call1(strf(_Pz_),s)]
                            :_PA_
                          :_PB_
                        :_PC_
                      :_PD_},
            _Pq_,
            _Pp_),
         pp_digram=
          function(ppf,param)
           {return typeof param === "number"
                    ?0 === param
                      ?caml_call1(pf(ppf),_PG_)
                      :caml_call1(pf(ppf),_PH_)
                    :0 === param[0]
                      ?caml_call1(pf(ppf),_PI_)
                      :caml_call1(pf(ppf),_PJ_)},
         branch_encoding=
          function(name,obj)
           {var
             _a$K_=merge_objs(obj1([0,_PK_,constant(name),0,0]),obj),
             _a$L_=0;
            function _a$M_(param){var x=param[2];return x}
            return conv(function(x){return [0,0,x]},_a$M_,_a$L_,_a$K_)},
         _PL_=0,
         _PM_=function(param){return 1},
         _PN_=
          function(param)
           {if(typeof param === "number" && 0 !== param)return _PO_;return 0},
         _PS_=
          [0,[0,_PR_,0,branch_encoding(_PP_,encoding),_PN_,_PM_,_PQ_],_PL_],
         _PT_=function(p2p_peer_id){return [1,p2p_peer_id]},
         _PU_=
          function(param)
           {if(typeof param !== "number" && 1 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _PZ_=
          [0,
           [0,
            _PY_,
            0,
            branch_encoding(_PW_,obj1([0,_PV_,encoding$40,0,0])),
            _PU_,
            _PT_,
            _PX_],
           _PS_],
         _P0_=function(p2p_peer_id){return [0,p2p_peer_id]},
         _P1_=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _P6_=
          [0,
           [0,
            _P5_,
            0,
            branch_encoding(_P3_,obj1([0,_P2_,encoding$40,0,0])),
            _P1_,
            _P0_,
            _P4_],
           _PZ_],
         _P7_=function(param){return 0},
         _P8_=
          function(param)
           {if(typeof param === "number" && 0 === param)return _P9_;return 0},
         _Qc_=
          union$0
           (_Qb_,
            [0,[0,_Qa_,0,branch_encoding(_P__,encoding),_P8_,_P7_,_P$_],_P6_]),
         encoding$42=function(eta){return def$0(_Qd_,0,_Qe_,eta)}(_Qc_),
         _Qg_=opt$2(0,0,_Qf_,encoding$31),
         _Qi_=opt$2(0,0,_Qh_,tup2(encoding$40,encoding$31)),
         _Qk_=opt$2(0,0,_Qj_,tup2(encoding$40,encoding$31)),
         _Qm_=opt$2(0,0,_Ql_,tup2(encoding$40,encoding$31)),
         _Qo_=opt$2(0,0,_Qn_,tup2(encoding$40,encoding$31)),
         _Qq_=opt$2(0,0,_Qp_,encoding$31),
         _Qs_=opt$2(0,0,_Qr_,encoding$40),
         _Qw_=
          obj10
           ([0,_Qv_,bool$1,0,0],
            opt$2(0,0,_Qu_,encoding$31),
            [0,_Qt_,encoding$42,0,0],
            _Qs_,
            _Qq_,
            _Qo_,
            _Qm_,
            _Qk_,
            _Qi_,
            _Qg_),
         _Qx_=0,
         _Qy_=
          function(param)
           {var
             last_miss=param[10],
             last_seen=param[9],
             last_disconnection=param[8],
             last_established_connection=param[7],
             last_rejected_connection=param[6],
             last_failed_connection=param[5],
             p2p_peer_id=param[4],
             state=param[3],
             reconnection_time=param[2],
             trusted=param[1],
             switch$0=0;
            if(typeof state === "number")
             var state$0=0 === state?0:1;
            else
             if(0 === state[0])
              if(p2p_peer_id)
               var pi=p2p_peer_id[1],state$0=[0,pi];
              else
               switch$0 = 1;
             else
              if(p2p_peer_id)
               var pi$0=p2p_peer_id[1],state$0=[1,pi$0];
              else
               switch$0 = 1;
            if(switch$0)var state$0=invalid_arg(_PF_);
            return [0,
                    trusted,
                    reconnection_time,
                    state$0,
                    last_failed_connection,
                    last_rejected_connection,
                    last_established_connection,
                    last_disconnection,
                    last_seen,
                    last_miss]},
         _Qz_=
          conv
           (function(param)
             {var
               last_miss=param[9],
               last_seen=param[8],
               last_disconnection=param[7],
               last_established_connection=param[6],
               last_rejected_connection=param[5],
               last_failed_connection=param[4],
               state=param[3],
               reconnection_time=param[2],
               trusted=param[1];
              if(typeof state === "number")
               var p2p_peer_id=0 === state?0:0;
              else
               if(0 === state[0])
                var pi=state[1],p2p_peer_id=[0,pi];
               else
                var pi$0=state[1],p2p_peer_id=[0,pi$0];
              return [0,
                      trusted,
                      reconnection_time,
                      state,
                      p2p_peer_id,
                      last_failed_connection,
                      last_rejected_connection,
                      last_established_connection,
                      last_disconnection,
                      last_seen,
                      last_miss]},
            _Qy_,
            _Qx_,
            _Qw_),
         encoding$43=function(eta){return def$0(_QA_,0,_QB_,eta)}(_Qz_),
         branch_encoding$0=
          function(name,obj)
           {var
             _a$H_=merge_objs(obj1([0,_QC_,constant(name),0,0]),obj),
             _a$I_=0;
            function _a$J_(param){var x=param[2];return x}
            return conv(function(x){return [0,0,x]},_a$J_,_a$I_,_a$H_)},
         _QD_=0,
         _QE_=function(p2p_peer_id){return [5,p2p_peer_id]},
         _QF_=
          function(param)
           {if(typeof param !== "number" && 5 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _QK_=
          [0,
           [0,
            _QJ_,
            0,
            branch_encoding$0(_QH_,obj1([0,_QG_,encoding$40,0,0])),
            _QF_,
            _QE_,
            _QI_],
           _QD_],
         _QL_=function(p2p_peer_id){return [4,p2p_peer_id]},
         _QM_=
          function(param)
           {if(typeof param !== "number" && 4 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _QR_=
          [0,
           [0,
            _QQ_,
            0,
            branch_encoding$0(_QO_,obj1([0,_QN_,encoding$40,0,0])),
            _QM_,
            _QL_,
            _QP_],
           _QK_],
         _QS_=function(p2p_peer_id){return [3,p2p_peer_id]},
         _QT_=
          function(param)
           {if(typeof param !== "number" && 3 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _QY_=
          [0,
           [0,
            _QX_,
            0,
            branch_encoding$0(_QV_,obj1([0,_QU_,encoding$40,0,0])),
            _QT_,
            _QS_,
            _QW_],
           _QR_],
         _QZ_=function(p2p_peer_id){return [2,p2p_peer_id]},
         _Q0_=
          function(param)
           {if(typeof param !== "number" && 2 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _Q5_=
          [0,
           [0,
            _Q4_,
            0,
            branch_encoding$0(_Q2_,obj1(opt$2(0,0,_Q1_,encoding$40))),
            _Q0_,
            _QZ_,
            _Q3_],
           _QY_],
         _Q6_=function(p2p_peer_id){return [1,p2p_peer_id]},
         _Q7_=
          function(param)
           {if(typeof param !== "number" && 1 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _Ra_=
          [0,
           [0,
            _Q$_,
            0,
            branch_encoding$0(_Q9_,obj1([0,_Q8_,encoding$40,0,0])),
            _Q7_,
            _Q6_,
            _Q__],
           _Q5_],
         _Rb_=function(p2p_peer_id){return [0,p2p_peer_id]},
         _Rc_=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var p2p_peer_id=param[1];return [0,p2p_peer_id]}
            return 0},
         _Rh_=
          [0,
           [0,
            _Rg_,
            0,
            branch_encoding$0(_Re_,obj1([0,_Rd_,encoding$40,0,0])),
            _Rc_,
            _Rb_,
            _Rf_],
           _Ra_],
         _Ri_=function(param){return 0},
         _Rj_=function(param){return typeof param === "number"?_Rk_:0},
         kind_encoding=
          union$0
           (_Ro_,
            [0,
             [0,_Rn_,0,branch_encoding$0(_Rl_,encoding),_Rj_,_Ri_,_Rm_],
             _Rh_]),
         _Rp_=stamped_encoding(kind_encoding),
         encoding$44=function(eta){return def$0(_Rq_,0,_Rr_,eta)}(_Rp_);
        register([0,pp$28],encoding$41);
        register([0,pp_digram],encoding$42);
        register(0,encoding$43);
        register(0,encoding$44);
        var
         compare$21=
          function(param,_a$G_)
           {var
             p2=_a$G_[2],
             a2=_a$G_[1],
             p1=param[2],
             a1=param[1],
             x=compare$19(a1,a2);
            return 0 === x?caml_compare(p1,p2):x},
         equal$10=function(p1,p2){return 0 === compare$21(p1,p2)?1:0},
         pp$29=
          function(ppf,param)
           {var port=param[2],addr=param[1];
            if(port)
             {var port$0=port[1];
              return caml_call4(pf(ppf),_Rs_,pp$22,addr,port$0)}
            return caml_call3(pf(ppf),_Rt_,pp$22,addr)},
         _Rw_=obj2([0,_Rv_,encoding$39,0,0],opt$2(0,0,_Ru_,uint16$0)),
         encoding$45=function(eta){return def$0(_Rx_,0,_Ry_,eta)}(_Rw_);
        caml_call1(Make$11,[0,compare$21]);
        caml_call1(Make$10,[0,compare$21]);
        caml_call1(Make$12,[0,equal$10,hash$0]);
        var
         encoding$46=
          function(metadata_encoding)
           {var
             _a$D_=
              obj8
               ([0,_RG_,bool$1,0,0],
                [0,_RF_,encoding$40,0,0],
                [0,_RE_,encoding$45,0,0],
                [0,_RD_,uint16$0,0,0],
                [0,_RC_,encoding$38,0,0],
                [0,_RB_,bool$1,0,0],
                [0,_RA_,metadata_encoding,0,0],
                [0,_Rz_,metadata_encoding,0,0]),
             _a$E_=0;
            function _a$F_(param)
             {var
               remote_metadata=param[8],
               local_metadata=param[7],
               private_node=param[6],
               announced_version=param[5],
               remote_socket_port=param[4],
               id_point=param[3],
               peer_id=param[2],
               incoming=param[1];
              return [0,
                      incoming,
                      peer_id,
                      id_point,
                      remote_socket_port,
                      announced_version,
                      private_node,
                      local_metadata,
                      remote_metadata]}
            return conv
                    (function(param)
                      {var
                        remote_metadata=param[8],
                        local_metadata=param[7],
                        private_node=param[6],
                        announced_version=param[5],
                        remote_socket_port=param[4],
                        id_point=param[3],
                        peer_id=param[2],
                        incoming=param[1];
                       return [0,
                               incoming,
                               peer_id,
                               id_point,
                               remote_socket_port,
                               announced_version,
                               private_node,
                               local_metadata,
                               remote_metadata]},
                     _a$F_,
                     _a$E_,
                     _a$D_)},
         pp$30=
          function(ppf,event)
           {if(typeof event === "number")
             switch(event)
              {case 0:return pp(ppf,_RH_);
               case 1:return pp(ppf,_RI_);
               case 2:return pp(ppf,_RJ_);
               default:return pp(ppf,_RK_)}
            else
             switch(event[0])
              {case 0:var p=event[1];pp(ppf,_RL_);return pp$28(ppf,p);
               case 1:
                var p$0=event[1];
                pp(ppf,_RM_);
                return caml_call2(pp$27,ppf,p$0);
               case 2:var p$1=event[1];pp(ppf,_RN_);return pp$28(ppf,p$1);
               case 3:var p$2=event[1];pp(ppf,_RO_);return pp$28(ppf,p$2);
               case 4:var p$3=event[1];pp(ppf,_RP_);return pp$28(ppf,p$3);
               case 5:var pi=event[1];pp(ppf,_RQ_);return pp$28(ppf,pi);
               case 6:var pi$0=event[1];pp(ppf,_RR_);return pp$28(ppf,pi$0);
               case 7:var pi$1=event[1];pp(ppf,_RS_);return pp$28(ppf,pi$1);
               case 8:
                var pi$2=event[2];
                pp(ppf,_RT_);
                return caml_call2(pp$27,ppf,pi$2);
               case 9:
                var source=event[1];
                pp(ppf,_RU_);
                return caml_call2(pp$27,ppf,source);
               case 10:
                var source$0=event[1];
                pp(ppf,_RV_);
                return caml_call2(pp$27,ppf,source$0);
               case 11:
                var source$1=event[1];
                pp(ppf,_RW_);
                return caml_call2(pp$27,ppf,source$1);
               case 12:
                var source$2=event[1];
                pp(ppf,_RX_);
                return caml_call2(pp$27,ppf,source$2);
               case 13:
                var source$3=event[1];
                pp(ppf,_RY_);
                return caml_call2(pp$27,ppf,source$3);
               case 14:
                var source$4=event[1];
                pp(ppf,_RZ_);
                return caml_call2(pp$27,ppf,source$4);
               case 15:
                var source$5=event[1];
                pp(ppf,_R0_);
                return caml_call2(pp$27,ppf,source$5);
               case 16:
                var source$6=event[1];
                pp(ppf,_R1_);
                return caml_call2(pp$27,ppf,source$6);
               case 17:
                var source$7=event[1];
                pp(ppf,_R2_);
                return caml_call2(pp$27,ppf,source$7);
               case 18:
                var source$8=event[1];
                pp(ppf,_R3_);
                return caml_call2(pp$27,ppf,source$8);
               case 19:
                var source$9=event[1];
                pp(ppf,_R4_);
                return caml_call2(pp$27,ppf,source$9);
               case 20:
                var source$10=event[1];
                pp(ppf,_R5_);
                return caml_call2(pp$27,ppf,source$10);
               default:
                var source$11=event[1];
                pp(ppf,_R6_);
                return caml_call2(pp$27,ppf,source$11)}},
         branch_encoding$1=
          function(name,obj)
           {var
             _a$A_=merge_objs(obj1([0,_R7_,constant(name),0,0]),obj),
             _a$B_=0;
            function _a$C_(param){var x=param[2];return x}
            return conv(function(x){return [0,0,x]},_a$C_,_a$B_,_a$A_)},
         _R8_=0,
         _R9_=function(source){return [11,source]},
         _R__=
          function(param)
           {if(typeof param !== "number" && 11 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _Sd_=
          [0,
           [0,
            _Sc_,
            0,
            branch_encoding$1(_Sa_,obj1([0,_R$_,encoding$40,0,0])),
            _R__,
            _R9_,
            _Sb_],
           _R8_],
         _Se_=function(source){return [12,source]},
         _Sf_=
          function(param)
           {if(typeof param !== "number" && 12 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _Sk_=
          [0,
           [0,
            _Sj_,
            0,
            branch_encoding$1(_Sh_,obj1([0,_Sg_,encoding$40,0,0])),
            _Sf_,
            _Se_,
            _Si_],
           _Sd_],
         _Sl_=function(source){return [9,source]},
         _Sm_=
          function(param)
           {if(typeof param !== "number" && 9 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _Sr_=
          [0,
           [0,
            _Sq_,
            0,
            branch_encoding$1(_So_,obj1([0,_Sn_,encoding$40,0,0])),
            _Sm_,
            _Sl_,
            _Sp_],
           _Sk_],
         _Ss_=function(source){return [10,source]},
         _St_=
          function(param)
           {if(typeof param !== "number" && 10 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _Sy_=
          [0,
           [0,
            _Sx_,
            0,
            branch_encoding$1(_Sv_,obj1([0,_Su_,encoding$40,0,0])),
            _St_,
            _Ss_,
            _Sw_],
           _Sr_],
         _Sz_=function(source){return [19,source]},
         _SA_=
          function(param)
           {if(typeof param !== "number" && 19 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _SF_=
          [0,
           [0,
            _SE_,
            0,
            branch_encoding$1(_SC_,obj1([0,_SB_,encoding$40,0,0])),
            _SA_,
            _Sz_,
            _SD_],
           _Sy_],
         _SG_=function(source){return [18,source]},
         _SH_=
          function(param)
           {if(typeof param !== "number" && 18 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _SM_=
          [0,
           [0,
            _SL_,
            0,
            branch_encoding$1(_SJ_,obj1([0,_SI_,encoding$40,0,0])),
            _SH_,
            _SG_,
            _SK_],
           _SF_],
         _SN_=function(source){return [17,source]},
         _SO_=
          function(param)
           {if(typeof param !== "number" && 17 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _ST_=
          [0,
           [0,
            _SS_,
            0,
            branch_encoding$1(_SQ_,obj1([0,_SP_,encoding$40,0,0])),
            _SO_,
            _SN_,
            _SR_],
           _SM_],
         _SU_=function(source){return [16,source]},
         _SV_=
          function(param)
           {if(typeof param !== "number" && 16 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _S0_=
          [0,
           [0,
            _SZ_,
            0,
            branch_encoding$1(_SX_,obj1([0,_SW_,encoding$40,0,0])),
            _SV_,
            _SU_,
            _SY_],
           _ST_],
         _S1_=function(source){return [15,source]},
         _S2_=
          function(param)
           {if(typeof param !== "number" && 15 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _S7_=
          [0,
           [0,
            _S6_,
            0,
            branch_encoding$1(_S4_,obj1([0,_S3_,encoding$40,0,0])),
            _S2_,
            _S1_,
            _S5_],
           _S0_],
         _S8_=function(source){return [14,source]},
         _S9_=
          function(param)
           {if(typeof param !== "number" && 14 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _Tc_=
          [0,
           [0,
            _Tb_,
            0,
            branch_encoding$1(_S$_,obj1([0,_S__,encoding$40,0,0])),
            _S9_,
            _S8_,
            _Ta_],
           _S7_],
         _Td_=function(source){return [13,source]},
         _Te_=
          function(param)
           {if(typeof param !== "number" && 13 === param[0])
             {var source=param[1];return [0,source]}
            return 0},
         _Tj_=
          [0,
           [0,
            _Ti_,
            0,
            branch_encoding$1(_Tg_,obj1([0,_Tf_,encoding$40,0,0])),
            _Te_,
            _Td_,
            _Th_],
           _Tc_],
         _Tk_=function(param){return 3},
         _Tl_=
          function(param)
           {if(typeof param === "number" && 3 <= param)return _Tm_;return 0},
         _Tq_=
          [0,[0,_Tp_,0,branch_encoding$1(_Tn_,encoding),_Tl_,_Tk_,_To_],_Tj_],
         _Tr_=function(param){return 2},
         _Ts_=
          function(param)
           {if(typeof param === "number" && 2 === param)return _Tt_;return 0},
         _Tx_=
          [0,[0,_Tw_,0,branch_encoding$1(_Tu_,encoding),_Ts_,_Tr_,_Tv_],_Tq_],
         _Ty_=function(g){return [21,g]},
         _Tz_=
          function(param)
           {if(typeof param !== "number" && 21 === param[0])
             {var g=param[1];return [0,g]}
            return 0},
         _TE_=
          [0,
           [0,
            _TD_,
            0,
            branch_encoding$1(_TB_,obj1([0,_TA_,encoding$40,0,0])),
            _Tz_,
            _Ty_,
            _TC_],
           _Tx_],
         _TF_=function(g){return [20,g]},
         _TG_=
          function(param)
           {if(typeof param !== "number" && 20 === param[0])
             {var g=param[1];return [0,g]}
            return 0},
         _TL_=
          [0,
           [0,
            _TK_,
            0,
            branch_encoding$1(_TI_,obj1([0,_TH_,encoding$40,0,0])),
            _TG_,
            _TF_,
            _TJ_],
           _TE_],
         _TM_=function(param){var g=param[2],id_p=param[1];return [8,id_p,g]},
         _TN_=
          function(param)
           {if(typeof param !== "number" && 8 === param[0])
             {var g=param[2],id_p=param[1];return [0,[0,id_p,g]]}
            return 0},
         _TT_=
          [0,
           [0,
            _TS_,
            0,
            branch_encoding$1
             (_TQ_,obj2([0,_TP_,encoding$45,0,0],[0,_TO_,encoding$40,0,0])),
            _TN_,
            _TM_,
            _TR_],
           _TL_],
         _TU_=function(param){var id=param[2],p=param[1];return [7,p,id]},
         _TV_=
          function(param)
           {if(typeof param !== "number" && 7 === param[0])
             {var id=param[2],p=param[1];return [0,[0,p,id]]}
            return 0},
         _T1_=
          [0,
           [0,
            _T0_,
            0,
            branch_encoding$1
             (_TY_,
              obj2
               ([0,_TX_,encoding$41,0,0],
                opt$2(0,0,_TW_,tup2(encoding$45,encoding$40)))),
            _TV_,
            _TU_,
            _TZ_],
           _TT_],
         _T2_=
          function(param)
           {var g=param[3],id_p=param[2],p=param[1];return [6,p,id_p,g]},
         _T3_=
          function(param)
           {if(typeof param !== "number" && 6 === param[0])
             {var g=param[3],id_p=param[2],p=param[1];return [0,[0,p,id_p,g]]}
            return 0},
         _T__=
          [0,
           [0,
            _T9_,
            0,
            branch_encoding$1
             (_T7_,
              obj3
               ([0,_T6_,encoding$41,0,0],
                [0,_T5_,encoding$45,0,0],
                [0,_T4_,encoding$40,0,0])),
            _T3_,
            _T2_,
            _T8_],
           _T1_],
         _T$_=
          function(param)
           {var g=param[3],id_p=param[2],p=param[1];return [5,p,id_p,g]},
         _Ua_=
          function(param)
           {if(typeof param !== "number" && 5 === param[0])
             {var g=param[3],id_p=param[2],p=param[1];return [0,[0,p,id_p,g]]}
            return 0},
         _Uh_=
          [0,
           [0,
            _Ug_,
            0,
            branch_encoding$1
             (_Ue_,
              obj3
               ([0,_Ud_,encoding$41,0,0],
                [0,_Uc_,encoding$45,0,0],
                [0,_Ub_,encoding$40,0,0])),
            _Ua_,
            _T$_,
            _Uf_],
           _T__],
         _Ui_=function(p){return [4,p]},
         _Uj_=
          function(param)
           {if(typeof param !== "number" && 4 === param[0])
             {var p=param[1];return [0,p]}
            return 0},
         _Uo_=
          [0,
           [0,
            _Un_,
            0,
            branch_encoding$1(_Ul_,obj1([0,_Uk_,encoding$41,0,0])),
            _Uj_,
            _Ui_,
            _Um_],
           _Uh_],
         _Up_=function(p){return [3,p]},
         _Uq_=
          function(param)
           {if(typeof param !== "number" && 3 === param[0])
             {var p=param[1];return [0,p]}
            return 0},
         _Uv_=
          [0,
           [0,
            _Uu_,
            0,
            branch_encoding$1(_Us_,obj1([0,_Ur_,encoding$41,0,0])),
            _Uq_,
            _Up_,
            _Ut_],
           _Uo_],
         _Uw_=function(p){return [2,p]},
         _Ux_=
          function(param)
           {if(typeof param !== "number" && 2 === param[0])
             {var p=param[1];return [0,p]}
            return 0},
         _UC_=
          [0,
           [0,
            _UB_,
            0,
            branch_encoding$1(_Uz_,obj1([0,_Uy_,encoding$41,0,0])),
            _Ux_,
            _Uw_,
            _UA_],
           _Uv_],
         _UD_=function(p){return [1,p]},
         _UE_=
          function(param)
           {if(typeof param !== "number" && 1 === param[0])
             {var p=param[1];return [0,p]}
            return 0},
         _UJ_=
          [0,
           [0,
            _UI_,
            0,
            branch_encoding$1(_UG_,obj1([0,_UF_,encoding$40,0,0])),
            _UE_,
            _UD_,
            _UH_],
           _UC_],
         _UK_=function(p){return [0,p]},
         _UL_=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var p=param[1];return [0,p]}
            return 0},
         _UQ_=
          [0,
           [0,
            _UP_,
            0,
            branch_encoding$1(_UN_,obj1([0,_UM_,encoding$41,0,0])),
            _UL_,
            _UK_,
            _UO_],
           _UJ_],
         _UR_=function(param){return 1},
         _US_=
          function(param)
           {if(typeof param === "number" && 1 === param)return _UT_;return 0},
         _UX_=
          [0,[0,_UW_,0,branch_encoding$1(_UU_,encoding),_US_,_UR_,_UV_],_UQ_],
         _UY_=function(param){return 0},
         _UZ_=
          function(param)
           {if(typeof param === "number" && 0 === param)return _U0_;return 0},
         _U5_=
          union$0
           (_U4_,
            [0,
             [0,_U3_,0,branch_encoding$1(_U1_,encoding),_UZ_,_UY_,_U2_],
             _UX_]),
         encoding$47=function(eta){return def$0(_U6_,0,_U7_,eta)}(_U5_);
        register([0,pp$29],encoding$45);
        register([0,pp$30],encoding$47);
        var
         print_size=
          function(ppf,sz)
           {function ratio(n){return sz / (1 << n)}
            if(sz < num_1024)return caml_call2(pf(ppf),_U8_,sz);
            if(sz < 1048576)
             {var _a$y_=ratio(10);return caml_call2(pf(ppf),_U9_,_a$y_)}
            var _a$z_=ratio(20);
            return caml_call2(pf(ppf),_U__,_a$z_)},
         print_size64=
          function(ppf,sz)
           {function ratio(n){return caml_int64_to_float(sz) / (1 << n)}
            if(caml_lessthan(sz,caml_int64_shift_left(_U$_,10)))
             return caml_call2(pf(ppf),_Va_,sz);
            if(caml_lessthan(sz,caml_int64_shift_left(_Vb_,20)))
             {var _a$u_=ratio(10);return caml_call2(pf(ppf),_Vc_,_a$u_)}
            if(caml_lessthan(sz,caml_int64_shift_left(_Vd_,30)))
             {var _a$v_=ratio(20);return caml_call2(pf(ppf),_Ve_,_a$v_)}
            if(caml_lessthan(sz,caml_int64_shift_left(_Vf_,40)))
             {var _a$w_=ratio(30);return caml_call2(pf(ppf),_Vg_,_a$w_)}
            var _a$x_=ratio(40);
            return caml_call2(pf(ppf),_Vh_,_a$x_)},
         pp$31=
          function(ppf,stat)
           {var _a$q_=stat[3],_a$r_=stat[2],_a$s_=stat[4],_a$t_=stat[1];
            return caml_call9
                    (pf(ppf),
                     _Vi_,
                     print_size64,
                     _a$t_,
                     print_size,
                     _a$s_,
                     print_size64,
                     _a$r_,
                     print_size,
                     _a$q_)},
         _Vn_=
          obj4
           ([0,_Vm_,int64$0,0,0],
            [0,_Vl_,int64$0,0,0],
            [0,_Vk_,int31$0,0,0],
            [0,_Vj_,int31$0,0,0]),
         _Vo_=0,
         _Vp_=
          function(param)
           {var
             current_outflow=param[4],
             current_inflow=param[3],
             total_recv=param[2],
             total_sent=param[1];
            return [0,total_sent,total_recv,current_inflow,current_outflow]},
         _Vq_=
          conv
           (function(param)
             {var
               current_outflow=param[4],
               current_inflow=param[3],
               total_recv=param[2],
               total_sent=param[1];
              return [0,total_sent,total_recv,current_inflow,current_outflow]},
            _Vp_,
            _Vo_,
            _Vn_),
         encoding$48=function(eta){return def$0(_Vr_,0,_Vs_,eta)}(_Vq_);
        register([0,pp$31],encoding$48);
        var
         _Vt_=0,
         _Vu_=
          function(param)
           {switch(param)
             {case 0:return _Vv_;case 1:return _Vw_;default:return _Vx_}},
         rpc_arg$9=
          make$4
           (0,
            _VF_,
            function(s)
             {return caml_string_notequal(s,_Vy_)
                      ?caml_string_notequal(s,_Vz_)
                        ?caml_string_notequal(s,_VA_)
                          ?[1,caml_call1(strf(_VB_),s)]
                          :_VC_
                        :_VD_
                      :_VE_},
            _Vu_,
            _Vt_),
         pp_digram$0=
          function(ppf,param)
           {switch(param)
             {case 0:return caml_call1(pf(ppf),_VG_);
              case 1:return caml_call1(pf(ppf),_VH_);
              default:return caml_call1(pf(ppf),_VI_)}},
         _VK_=string_enum(_VJ_),
         encoding$49=function(eta){return def$0(_VL_,0,_VM_,eta)}(_VK_),
         encoding$50=
          function(peer_metadata_encoding,conn_metadata_encoding)
           {var
             _a$f_=opt$2(0,0,_VN_,tup2(encoding$45,encoding$31)),
             _a$g_=opt$2(0,0,_VO_,tup2(encoding$45,encoding$31)),
             _a$h_=opt$2(0,0,_VP_,tup2(encoding$45,encoding$31)),
             _a$i_=opt$2(0,0,_VQ_,tup2(encoding$45,encoding$31)),
             _a$j_=opt$2(0,0,_VR_,tup2(encoding$45,encoding$31)),
             _a$k_=
              obj6
               (opt$2(0,0,_VS_,tup2(encoding$45,encoding$31)),
                _a$j_,
                _a$i_,
                _a$h_,
                _a$g_,
                _a$f_),
             _a$l_=opt$2(0,0,_VU_,encoding$45),
             _a$m_=
              merge_objs
               (obj7
                 ([0,_VZ_,float$2,0,0],
                  [0,_VY_,bool$1,0,0],
                  opt$2(0,0,_VX_,conn_metadata_encoding),
                  [0,_VW_,peer_metadata_encoding,0,0],
                  [0,_VV_,encoding$49,0,0],
                  _a$l_,
                  [0,_VT_,encoding$48,0,0]),
                _a$k_),
             _a$n_=0;
            function _a$o_(param)
             {var
               _a$p_=param[2],
               last_miss=_a$p_[6],
               last_seen=_a$p_[5],
               last_disconnection=_a$p_[4],
               last_established_connection=_a$p_[3],
               last_rejected_connection=_a$p_[2],
               last_failed_connection=_a$p_[1],
               match=param[1],
               stat=match[7],
               id_point=match[6],
               state=match[5],
               peer_metadata=match[4],
               conn_metadata=match[3],
               trusted=match[2],
               score=match[1];
              return [0,
                      score,
                      trusted,
                      conn_metadata,
                      peer_metadata,
                      state,
                      id_point,
                      stat,
                      last_failed_connection,
                      last_rejected_connection,
                      last_established_connection,
                      last_disconnection,
                      last_seen,
                      last_miss]}
            return conv
                    (function(param)
                      {var
                        last_miss=param[13],
                        last_seen=param[12],
                        last_disconnection=param[11],
                        last_established_connection=param[10],
                        last_rejected_connection=param[9],
                        last_failed_connection=param[8],
                        stat=param[7],
                        id_point=param[6],
                        state=param[5],
                        peer_metadata=param[4],
                        conn_metadata=param[3],
                        trusted=param[2],
                        score=param[1];
                       return [0,
                               [0,
                                score,
                                trusted,
                                conn_metadata,
                                peer_metadata,
                                state,
                                id_point,
                                stat],
                               [0,
                                last_failed_connection,
                                last_rejected_connection,
                                last_established_connection,
                                last_disconnection,
                                last_seen,
                                last_miss]]},
                     _a$o_,
                     _a$n_,
                     _a$m_)},
         kind_encoding$0=string_enum(_V0_),
         _V5_=
          obj4
           ([0,_V4_,kind_encoding$0,0,0],
            [0,_V3_,encoding$31,0,0],
            [0,_V2_,encoding$39,0,0],
            opt$2(0,0,_V1_,uint16$0)),
         _V6_=0,
         _V7_=
          function(param)
           {var port=param[4],addr=param[3],timestamp=param[2],kind=param[1];
            return [0,kind,timestamp,[0,addr,port]]},
         _V8_=
          conv
           (function(param)
             {var
               match=param[3],
               port=match[2],
               addr=match[1],
               timestamp=param[2],
               kind=param[1];
              return [0,kind,timestamp,addr,port]},
            _V7_,
            _V6_,
            _V5_),
         encoding$51=function(eta){return def$0(_V9_,0,_V__,eta)}(_V8_);
        register([0,pp_digram$0],encoding$49);
        register(0,encoding$51);
        var
         pp$32=
          function(ppf,param)
           {var h_lst=param[2],hd=param[1],repeats=10;
            function pp_hash_list(ppf,param)
             {var r=param[4],d=param[3],acc=param[2],h_lst=param[1];
              if(h_lst)
               {var
                 tl=h_lst[2],
                 hd=h_lst[1],
                 new_d=1 < r?d:d * 2 | 0,
                 new_r=1 < r?r - 1 | 0:repeats;
                return caml_call6
                        (pf(ppf),
                         _V$_,
                         pp$8,
                         hd,
                         acc,
                         pp_hash_list,
                         [0,tl,acc - d | 0,new_d,new_r])}
              return caml_call1(pf(ppf),_Wa_)}
            var _a$e_=hash$8(hd);
            return caml_call5
                    (pf(ppf),_Wb_,pp$8,_a$e_,pp_hash_list,[0,h_lst,-1,1,9])},
         pp_short$5=
          function(ppf,param)
           {var
             h_lst=param[2],
             hd=param[1],
             _a$c_=length(h_lst),
             _a$d_=hash$8(hd);
            return caml_call4(pf(ppf),_Wc_,pp$8,_a$d_,_a$c_)},
         _We_=[0,_Wd_,list$0(0,encoding$3),0,0],
         _Wg_=obj2([0,_Wf_,arg$4(0,encoding$33),0,0],_We_),
         encoding$52=function(eta){return def$0(_Wh_,0,_Wi_,eta)}(_Wg_);
        register([0,pp_short$5],encoding$52);
        var
         _Wk_=[0,_Wj_,arg$4(0,Set$1[45]),0,0],
         _Wm_=obj2([0,_Wl_,list$1(0,encoding$20),0,0],_Wk_),
         _Wn_=0,
         _Wo_=
          function(param)
           {var pending=param[2],known_valid=param[1];
            return [0,known_valid,pending]},
         _Wp_=
          conv
           (function(param)
             {var pending=param[2],known_valid=param[1];
              return [0,known_valid,pending]},
            _Wo_,
            _Wn_,
            _Wm_),
         encoding$53=function(eta){return def$0(_Wq_,0,_Wr_,eta)}(_Wp_);
        register(0,encoding$53);
        var
         _Wt_=obj1([0,_Ws_,encoding$3,0,0]),
         _Wu_=0,
         _Wv_=function(branch){return [0,branch]},
         _Ww_=
          conv
           (function(param){var branch=param[1];return branch},_Wv_,_Wu_,_Wt_),
         shell_header_encoding$0=
          function(eta){return def$0(_Wx_,0,_Wy_,eta)}(_Ww_),
         _WA_=merge_objs(shell_header_encoding$0,obj1([0,_Wz_,bytes$0,0,0])),
         _WB_=0,
         _WC_=
          function(param)
           {var proto=param[2],shell=param[1];return [0,shell,proto]},
         _WD_=
          conv
           (function(param)
             {var proto=param[2],shell=param[1];return [0,shell,proto]},
            _WC_,
            _WB_,
            _WA_),
         encoding$54=function(eta){return def$0(_WE_,0,_WF_,eta)}(_WD_),
         pp$33=function(fmt,op){return pp$6(fmt,construct$1(encoding$54,op))};
        register([0,pp$33],encoding$54);
        register(0,shell_header_encoding$0);
        var
         _WQ_=
          obj3([0,_WP_,output,0,0],opt$2(0,0,_WO_,output),[0,_WN_,output,0,0]),
         _WR_=0,
         _WS_=
          function(param)
           {var implementation=param[3],interface$0=param[2],name=param[1];
            return [0,name,interface$0,implementation]},
         component_encoding=
          conv
           (function(param)
             {var implementation=param[3],interface$0=param[2],name=param[1];
              return [0,name,interface$0,implementation]},
            _WS_,
            _WR_,
            _WQ_),
         _WV_=0,
         _WW_=
          function(param){return 0 === param?0:1 === param?1:failwith(_WX_)},
         _WY_=conv(function(param){return 0 === param?0:1},_WW_,_WV_,int16$0),
         env_version_encoding=function(eta){return def$0(_WZ_,0,0,eta)}(_WY_),
         _W2_=
          obj2
           ([0,_W1_,env_version_encoding,0,0],
            [0,_W0_,list$1(0,component_encoding),0,0]),
         _W3_=0,
         _W4_=
          function(param)
           {var components=param[2],expected_env=param[1];
            return [0,expected_env,components]},
         _W5_=
          conv
           (function(param)
             {var components=param[2],expected_env=param[1];
              return [0,expected_env,components]},
            _W4_,
            _W3_,
            _W2_),
         encoding$55=function(eta){return def$0(_W6_,0,_W7_,eta)}(_W5_),
         pp_ocaml_component=
          function(ppf,param)
           {var implementation=param[3],interface$0=param[2],name=param[1];
            function _a$b_(ppf,param)
             {if(param){var s=param[1];return caml_call2(pf(ppf),_W8_,s)}
              return caml_call1(pf(ppf),_W9_)}
            return caml_call5
                    (pf(ppf),_W__,name,_a$b_,interface$0,implementation)},
         pp_ocaml=
          function(ppf,param)
           {var
             components=param[2],
             expected_env=param[1],
             _a_8_=[0,function(ppf,param){return caml_call1(pf(ppf),_W$_)}];
            function _a_9_(_a_$_,_a$a_)
             {return pp_print_list(_a_8_,pp_ocaml_component,_a_$_,_a$a_)}
            var _a___=0 === expected_env?_WT_:_WU_;
            return caml_call4(pf(ppf),_Xa_,_a___,_a_9_,components)},
         _Xd_=[0,_Xb_,list$1(0,output),0,_Xc_],
         _Xf_=opt$2(0,0,_Xe_,env_version_encoding),
         _Xi_=obj3(opt$2(0,_Xh_,_Xg_,encoding$17),_Xf_,_Xd_),
         _Xj_=
          function(param)
           {var modules=param[3],expected_env_version=param[2],hash=param[1];
            return [0,hash,expected_env_version,modules]},
         _Xk_=
          function(param)
           {var modules=param[3],expected_env_version=param[2],hash=param[1];
            return [0,hash,expected_env_version,modules]},
         _Xl_=function(eta){return conv(_Xk_,_Xj_,0,eta)}(_Xi_),
         encoding$56=function(eta){return def$0(_Xm_,0,0,eta)}(_Xl_);
        register([0,pp_ocaml],encoding$55);
        register(0,encoding$56);
        var
         _Xn_=0,
         _Xo_=
          function(param)
           {var
             expiration=param[5],
             protocol=param[4],
             genesis=param[3],
             chain_id=param[2];
            return [1,chain_id,genesis,protocol,expiration]},
         _Xp_=
          function(param)
           {if(typeof param !== "number" && 1 === param[0])
             {var
               expiration=param[4],
               protocol=param[3],
               genesis=param[2],
               chain_id=param[1];
              return [0,[0,0,chain_id,genesis,protocol,expiration]]}
            return 0},
         _Xy_=
          [0,
           [0,
            _Xx_,
            0,
            obj5
             ([0,_Xv_,constant(_Xu_),0,0],
              [0,_Xt_,encoding$4,0,0],
              [0,_Xs_,encoding$3,0,0],
              [0,_Xr_,encoding$17,0,0],
              [0,_Xq_,encoding$29,0,0]),
            _Xp_,
            _Xo_,
            _Xw_],
           _Xn_],
         _Xz_=
          function(param)
           {var expiration=param[3],protocol=param[2];
            return [0,protocol,expiration]},
         _XA_=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var expiration=param[2],protocol=param[1];
              return [0,[0,0,protocol,expiration]]}
            return 0},
         _XH_=
          [0,
           [0,
            _XG_,
            0,
            obj3
             ([0,_XE_,constant(_XD_),0,0],
              [0,_XC_,encoding$17,0,0],
              [0,_XB_,encoding$29,0,0]),
            _XA_,
            _Xz_,
            _XF_],
           _Xy_],
         _XI_=function(param){return 0},
         _XJ_=function(param){return typeof param === "number"?_XK_:0},
         _XP_=
          union$0
           (0,
            [0,
             [0,_XO_,0,obj1([0,_XM_,constant(_XL_),0,0]),_XJ_,_XI_,_XN_],
             _XH_]),
         encoding$57=function(eta){return def$0(_XQ_,0,_XR_,eta)}(_XP_),
         pp$34=
          function(ppf,param)
           {if(typeof param === "number")
             return caml_call1(pf(ppf),_XS_);
            else
             {if(0 === param[0])
               {var
                 expiration=param[2],
                 protocol=param[1],
                 _a_6_=of_seconds_exn$0(expiration);
                return caml_call5(pf(ppf),_XT_,pp$14,protocol,pp_hum$1,_a_6_)}
              var
               expiration$0=param[4],
               protocol$0=param[3],
               genesis=param[2],
               chain_id=param[1],
               _a_7_=of_seconds_exn$0(expiration$0);
              return caml_call9
                      (pf(ppf),
                       _XU_,
                       pp$14,
                       protocol$0,
                       pp$8,
                       genesis,
                       pp$9,
                       chain_id,
                       pp_hum$1,
                       _a_7_)}};
        register([0,pp$34],encoding$57);
        var
         Hashtbl=caml_call1(MakeSeeded$0,[0,equal$0,hash$1]),
         _XV_=0,
         _XW_=
          function(param)
           {var
             h=param[8],
             g=param[7],
             f=param[6],
             e=param[5],
             d=param[4],
             c=param[3],
             b=param[2],
             a=param[1];
            return [0,a,b,c,d,e,f,g,zero$0,zero$0,zero$0,h]},
         _XX_=function(param){return 0},
         _X7_=
          [0,
           [0,
            _X6_,
            0,
            obj8
             ([0,_X5_,counter,0,0],
              [0,_X4_,counter,0,0],
              [0,_X3_,counter,0,0],
              [0,_X2_,counter,0,0],
              [0,_X1_,counter,0,0],
              [0,_X0_,counter,0,0],
              [0,_XZ_,counter,0,0],
              [0,_XY_,counter,0,0]),
            _XX_,
            _XW_,
            0],
           _XV_],
         _X8_=
          function(param)
           {var
             o=param[2],
             match=param[1],
             ph=match[10],
             pb=match[9],
             cp=match[8],
             opb=match[7],
             ophs=match[6],
             p=match[5],
             ops=match[4],
             bh=match[3],
             h=match[2],
             b=match[1];
            return [0,b,h,bh,ops,p,ophs,opb,cp,pb,ph,o]},
         _X9_=
          function(param)
           {var
             o=param[11],
             ph=param[10],
             pb=param[9],
             cp=param[8],
             opb=param[7],
             ophs=param[6],
             p=param[5],
             ops=param[4],
             bh=param[3],
             h=param[2],
             b=param[1];
            return [0,[0,[0,b,h,bh,ops,p,ophs,opb,cp,pb,ph],o]]},
         _X$_=obj1([0,_X__,counter,0,0]),
         _Yl_=
          union$0
           (0,
            [0,
             [0,
              _Yk_,
              0,
              merge_objs
               (obj10
                 ([0,_Yj_,counter,0,0],
                  [0,_Yi_,counter,0,0],
                  [0,_Yh_,counter,0,0],
                  [0,_Yg_,counter,0,0],
                  [0,_Yf_,counter,0,0],
                  [0,_Ye_,counter,0,0],
                  [0,_Yd_,counter,0,0],
                  [0,_Yc_,counter,0,0],
                  [0,_Yb_,counter,0,0],
                  [0,_Ya_,counter,0,0]),
                _X$_),
              _X9_,
              _X8_,
              0],
             _X7_]),
         _Ym_=0,
         _Yn_=
          function(param)
           {var
             other=param[11],
             predecessor_header=param[10],
             protocol_branch=param[9],
             checkpoint=param[8],
             operations_for_block=param[7],
             operation_hashes_for_block=param[6],
             protocols=param[5],
             operations=param[4],
             block_header=param[3],
             head=param[2],
             branch=param[1];
            return [0,
                    branch,
                    head,
                    block_header,
                    operations,
                    protocols,
                    operation_hashes_for_block,
                    operations_for_block,
                    checkpoint,
                    protocol_branch,
                    predecessor_header,
                    other]},
         _Yo_=
          function(param)
           {var
             branch=param[1],
             head=param[2],
             block_header=param[3],
             operations=param[4],
             protocols=param[5],
             operation_hashes_for_block=param[6],
             operations_for_block=param[7],
             checkpoint=param[8],
             protocol_branch=param[9],
             predecessor_header=param[10],
             other=param[11];
            return [0,
                    branch,
                    head,
                    block_header,
                    operations,
                    protocols,
                    operation_hashes_for_block,
                    operations_for_block,
                    checkpoint,
                    protocol_branch,
                    predecessor_header,
                    other]},
         sent_requests_encoding=
          function(_a_4_,_a_5_){return conv(_Yo_,_Yn_,_a_4_,_a_5_)}(_Ym_,_Yl_),
         _Yt_=
          obj4
           ([0,_Ys_,sent_requests_encoding,0,0],
            [0,_Yr_,sent_requests_encoding,0,0],
            [0,_Yq_,sent_requests_encoding,0,0],
            [0,_Yp_,sent_requests_encoding,0,0]),
         _Yu_=0,
         _Yv_=
          function(param)
           {var
             scheduled=param[4],
             failed=param[3],
             received=param[2],
             sent=param[1];
            return [0,sent,received,failed,scheduled]},
         _Yw_=
          function(param)
           {var
             scheduled=param[4],
             failed=param[3],
             received=param[2],
             sent=param[1];
            return [0,sent,received,failed,scheduled]},
         requests_encoding=
          function(_a_2_,_a_3_){return conv(_Yw_,_Yv_,_a_2_,_a_3_)}(_Yu_,_Yt_),
         _YH_=
          obj10
           ([0,_YG_,counter,0,0],
            [0,_YF_,counter,0,0],
            [0,_YE_,counter,0,0],
            [0,_YD_,counter,0,0],
            [0,_YC_,counter,0,0],
            [0,_YB_,counter,0,0],
            [0,_YA_,counter,0,0],
            [0,_Yz_,counter,0,0],
            [0,_Yy_,counter,0,0],
            [0,_Yx_,counter,0,0]),
         _YI_=0,
         _YJ_=
          function(param)
           {var
             outdated=param[10],
             duplicate=param[9],
             refused=param[8],
             branch_refused=param[7],
             branch_delayed=param[6],
             applied=param[5],
             refused_by_postfilter=param[4],
             refused_by_prefilter=param[3],
             cannot_parse=param[2],
             cannot_download=param[1];
            return [0,
                    cannot_download,
                    cannot_parse,
                    refused_by_prefilter,
                    refused_by_postfilter,
                    applied,
                    branch_delayed,
                    branch_refused,
                    refused,
                    duplicate,
                    outdated]},
         prevalidator_results_encoding=
          conv
           (function(param)
             {var
               outdated=param[10],
               duplicate=param[9],
               refused=param[8],
               branch_refused=param[7],
               branch_delayed=param[6],
               applied=param[5],
               refused_by_postfilter=param[4],
               refused_by_prefilter=param[3],
               cannot_parse=param[2],
               cannot_download=param[1];
              return [0,
                      cannot_download,
                      cannot_parse,
                      refused_by_prefilter,
                      refused_by_postfilter,
                      applied,
                      branch_delayed,
                      branch_refused,
                      refused,
                      duplicate,
                      outdated]},
            _YJ_,
            _YI_,
            _YH_),
         _YP_=
          obj5
           ([0,_YO_,sent_requests_encoding,0,0],
            [0,_YN_,sent_requests_encoding,0,0],
            [0,_YM_,sent_requests_encoding,0,0],
            [0,_YL_,counter,0,0],
            [0,_YK_,counter,0,0]),
         _YQ_=0,
         _YR_=
          function(param)
           {var
             outdated=param[5],
             unexpected=param[4],
             received=param[3],
             failed=param[2],
             sent=param[1];
            return [0,sent,failed,received,unexpected,outdated]},
         _YS_=
          function(param)
           {var
             sent=param[1],
             failed=param[2],
             received=param[3],
             unexpected=param[4],
             outdated=param[5];
            return [0,sent,failed,received,unexpected,outdated]},
         responses_encoding=
          function(_a_0_,_a_1_){return conv(_YS_,_YR_,_a_0_,_a_1_)}(_YQ_,_YP_),
         _YW_=
          obj3([0,_YV_,counter,0,0],[0,_YU_,counter,0,0],[0,_YT_,counter,0,0]),
         _YX_=0,
         _YY_=
          function(param)
           {var protocol=param[3],operations=param[2],block=param[1];
            return [0,block,operations,protocol]},
         _YZ_=
          function(param)
           {var block=param[1],operations=param[2],protocol=param[3];
            return [0,block,operations,protocol]},
         unadvertised_encoding=
          function(_a_Y_,_a_Z_){return conv(_YZ_,_YY_,_a_Y_,_a_Z_)}(_YX_,_YW_),
         _Y2_=obj2([0,_Y1_,counter,0,0],[0,_Y0_,counter,0,0]),
         _Y3_=0,
         _Y4_=
          function(param)
           {var branch=param[2],head=param[1];return [0,head,branch]},
         _Y5_=
          function(param)
           {var head=param[1],branch=param[2];return [0,head,branch]},
         advertisements_kind_encoding=
          function(_a_W_,_a_X_){return conv(_Y5_,_Y4_,_a_W_,_a_X_)}(_Y3_,_Y2_),
         _Y8_=
          obj2
           ([0,_Y7_,advertisements_kind_encoding,0,0],
            [0,_Y6_,advertisements_kind_encoding,0,0]),
         _Y9_=0,
         _Y__=
          function(param)
           {var received=param[2],sent=param[1];return [0,sent,received]},
         _Y$_=
          function(param)
           {var sent=param[1],received=param[2];return [0,sent,received]},
         advertisements_encoding=
          function(_a_U_,_a_V_){return conv(_Y$_,_Y__,_a_U_,_a_V_)}(_Y9_,_Y8_),
         _Zc_=
          obj2
           ([0,_Zb_,unadvertised_encoding,0,0],
            [0,_Za_,advertisements_encoding,0,0]),
         _Zl_=
          merge_objs
           (obj8
             ([0,_Zk_,responses_encoding,0,0],
              [0,_Zj_,requests_encoding,0,0],
              [0,_Zi_,counter,0,0],
              [0,_Zh_,counter,0,0],
              [0,_Zg_,prevalidator_results_encoding,0,0],
              [0,_Zf_,counter,0,0],
              [0,_Ze_,counter,0,0],
              [0,_Zd_,counter,0,0]),
            _Zc_),
         _Zm_=0,
         _Zn_=
          function(param)
           {var
             _a_T_=param[2],
             advertisements=_a_T_[2],
             unadvertised=_a_T_[1],
             match=param[1],
             future_blocks_advertised=match[8],
             inactive_chains=match[7],
             unactivated_chains=match[6],
             prevalidator_results=match[5],
             old_heads=match[4],
             valid_blocks=match[3],
             requests=match[2],
             responses=match[1];
            return [0,
                    responses,
                    requests,
                    valid_blocks,
                    old_heads,
                    prevalidator_results,
                    unactivated_chains,
                    inactive_chains,
                    future_blocks_advertised,
                    unadvertised,
                    advertisements]},
         _Zo_=
          function(param)
           {var
             responses=param[1],
             requests=param[2],
             valid_blocks=param[3],
             old_heads=param[4],
             prevalidator_results=param[5],
             unactivated_chains=param[6],
             inactive_chains=param[7],
             future_blocks_advertised=param[8],
             unadvertised=param[9],
             advertisements=param[10];
            return [0,
                    [0,
                     responses,
                     requests,
                     valid_blocks,
                     old_heads,
                     prevalidator_results,
                     unactivated_chains,
                     inactive_chains,
                     future_blocks_advertised],
                    [0,unadvertised,advertisements]]},
         encoding$58=
          function(_a_R_,_a_S_){return conv(_Zo_,_Zn_,_a_R_,_a_S_)}(_Zm_,_Zl_),
         _Zr_=obj2([0,_Zq_,bool$1,0,0],[0,_Zp_,bool$1,0,0]),
         _Zs_=0,
         _Zt_=
          function(param)
           {var private_node=param[2],disable_mempool=param[1];
            return [0,disable_mempool,private_node]},
         _Zu_=
          function(param)
           {var private_node=param[2],disable_mempool=param[1];
            return [0,disable_mempool,private_node]},
         encoding$59=
          function(_a_P_,_a_Q_){return conv(_Zu_,_Zt_,_a_P_,_a_Q_)}(_Zs_,_Zr_),
         _ZA_=[0,0,0,0],
         _Zz_=
          [2,
           _Zy_,
           0,
           function(t)
            {return caml_call1(caml_get_public_method(t,-822977931,3),t)}],
         _ZB_=
          function(wait)
           {if(! _ZA_[1])
             {var
               _a_J_=create_table(_Zx_),
               _a_K_=new_variable(_a_J_,_ZC_),
               _a_L_=get_method_label(_a_J_,_ZD_);
              set_method
               (_a_J_,
                _a_L_,
                function(self_1){var env=self_1[1 + _a_K_];return env[1]});
              var
               _a_M_=
                function(_a_N_)
                 {var _a_O_=create_object_opt(0,_a_J_);
                  _a_O_[1 + _a_K_] = _a_N_;
                  return _a_O_};
              init_class(_a_J_);
              _ZA_[1] = _a_M_}
            return caml_call1(_ZA_[1],[0,wait])},
         _ZE_=function(_a_I_){return [0,_ZB_,_a_I_]},
         wait_query=seal(function(_a_H_){return symbol$20(_ZE_,_Zz_,_a_H_)}),
         _ZH_=[0,0,0,0],
         _ZG_=
          [2,
           _ZF_,
           0,
           function(t)
            {return caml_call1(caml_get_public_method(t,840186522,4),t)}],
         _ZI_=
          function(monitor)
           {if(! _ZH_[1])
             {var
               _a_B_=create_table(_Zv_),
               _a_C_=new_variable(_a_B_,_ZJ_),
               _a_D_=get_method_label(_a_B_,_ZK_);
              set_method
               (_a_B_,
                _a_D_,
                function(self_2){var env=self_2[1 + _a_C_];return env[1]});
              var
               _a_E_=
                function(_a_F_)
                 {var _a_G_=create_object_opt(0,_a_B_);
                  _a_G_[1 + _a_C_] = _a_F_;
                  return _a_G_};
              init_class(_a_B_);
              _ZH_[1] = _a_E_}
            return caml_call1(_ZH_[1],[0,monitor])},
         _ZL_=function(_a_A_){return [0,_ZI_,_a_A_]},
         monitor_query=
          seal(function(_a_z_){return symbol$20(_ZL_,_ZG_,_a_z_)}),
         _ZM_=
          function(t)
           {return caml_call1(caml_get_public_method(t,-654894431,5),t)},
         _ZP_=[0,0,0,0],
         _ZO_=[0,_ZN_,0,rpc_arg$4,of_seconds_exn(10.),_ZM_],
         _ZQ_=
          function(timeout)
           {if(! _ZP_[1])
             {var
               _a_t_=create_table(shared$1),
               _a_u_=new_variable(_a_t_,_ZR_),
               _a_v_=get_method_label(_a_t_,_ZS_);
              set_method
               (_a_t_,
                _a_v_,
                function(self_3){var env=self_3[1 + _a_u_];return env[1]});
              var
               _a_w_=
                function(_a_x_)
                 {var _a_y_=create_object_opt(0,_a_t_);
                  _a_y_[1 + _a_u_] = _a_x_;
                  return _a_y_};
              init_class(_a_t_);
              _ZP_[1] = _a_w_}
            return caml_call1(_ZP_[1],[0,timeout])},
         _ZT_=function(_a_s_){return [0,_ZQ_,_a_s_]},
         timeout_query=
          seal(function(_a_r_){return symbol$20(_ZT_,_ZO_,_a_r_)}),
         _ZW_=symbol$17(symbol$17(root$0,_ZV_),_ZU_);
        caml_call2(get_service$0(_ZX_,empty$4),encoding$40,_ZW_);
        var _Z0_=symbol$17(symbol$17(root$0,_ZZ_),_ZY_);
        caml_call2(get_service$0(_Z1_,empty$4),encoding$38,_Z0_);
        var
         _Z4_=symbol$17(symbol$17(root$0,_Z3_),_Z2_),
         _Z5_=list$1(0,encoding$38);
        caml_call2(get_service$0(_Z6_,empty$4),_Z5_,_Z4_);
        var _Z9_=symbol$17(symbol$17(root$0,_Z8_),_Z7_);
        caml_call2(get_service$0(_Z__,empty$4),encoding$48,_Z9_);
        var __b_=symbol$17(symbol$17(root$0,__a_),_Z$_);
        caml_call2(get_service$0(__c_,empty$4),encoding$47,__b_);
        var __f_=symbol$18(symbol$17(symbol$17(root$0,__e_),__d_),rpc_arg$7);
        caml_call3(put_service$0(__g_,timeout_query),encoding,encoding,__f_);
        var
         connection_info_encoding=encoding$46(encoding$59),
         __j_=symbol$17(symbol$17(root$0,__i_),__h_),
         __k_=list$1(0,connection_info_encoding);
        caml_call2(get_service$0(__l_,empty$4),__k_,__j_);
        var __o_=symbol$18(symbol$17(symbol$17(root$0,__n_),__m_),rpc_arg$6);
        caml_call2(get_service$0(__p_,empty$4),connection_info_encoding,__o_);
        var __s_=symbol$18(symbol$17(symbol$17(root$0,__r_),__q_),rpc_arg$6);
        caml_call2(delete_service$0(__t_,wait_query),encoding,__s_);
        var __w_=symbol$18(symbol$17(symbol$17(root$0,__v_),__u_),rpc_arg$7);
        caml_call2(get_service$0(__x_,empty$4),encoding$43,__w_);
        var
         __B_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,__A_),__z_),rpc_arg$7),__y_),
         __C_=list$1(0,encoding$44);
        caml_call2(get_service$0(__D_,monitor_query),__C_,__B_);
        var
         __G_=[0,0,0,0],
         __F_=
          [3,
           __E_,
           0,
           rpc_arg$8,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_155623867,6),t)}],
         __H_=
          function(filters)
           {if(! __G_[1])
             {var
               _a_l_=create_table(_Zw_),
               _a_m_=new_variable(_a_l_,__I_),
               _a_n_=get_method_label(_a_l_,__J_);
              set_method
               (_a_l_,
                _a_n_,
                function(self_6){var env=self_6[1 + _a_m_];return env[1]});
              var
               _a_o_=
                function(_a_p_)
                 {var _a_q_=create_object_opt(0,_a_l_);
                  _a_q_[1 + _a_m_] = _a_p_;
                  return _a_q_};
              init_class(_a_l_);
              __G_[1] = _a_o_}
            return caml_call1(__G_[1],[0,filters])},
         __K_=function(_a_k_){return [0,__H_,_a_k_]},
         filter_query=seal(function(_a_j_){return symbol$20(__K_,__F_,_a_j_)}),
         __N_=symbol$17(symbol$17(root$0,__M_),__L_),
         __O_=list$1(0,tup2(encoding$41,encoding$43));
        caml_call2(get_service$0(__P_,filter_query),__O_,__N_);
        var
         __T_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,__S_),__R_),rpc_arg$7),__Q_);
        caml_call2(get_service$0(__U_,empty$4),encoding,__T_);
        var
         __Y_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,__X_),__W_),rpc_arg$7),__V_);
        caml_call2(get_service$0(__Z_,empty$4),encoding,__Y_);
        var
         __3_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,__2_),__1_),rpc_arg$7),__0_);
        caml_call2(get_service$0(__4_,empty$4),encoding,__3_);
        var
         __8_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,__7_),__6_),rpc_arg$7),__5_);
        caml_call2(get_service$0(__9_,empty$4),encoding,__8_);
        var
         _$b_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$a_),__$_),rpc_arg$7),____);
        caml_call2(get_service$0(_$c_,empty$4),bool$1,_$b_);
        var
         _$f_=symbol$18(symbol$17(symbol$17(root$0,_$e_),_$d_),rpc_arg$6),
         _$g_=encoding$50(encoding$58,encoding$59);
        caml_call2(get_service$0(_$h_,empty$4),_$g_,_$f_);
        var
         _$l_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$k_),_$j_),rpc_arg$6),_$i_),
         _$m_=list$1(0,encoding$51);
        caml_call2(get_service$0(_$n_,monitor_query),_$m_,_$l_);
        var
         _$q_=[0,0,0,0],
         _$p_=
          [3,
           _$o_,
           0,
           rpc_arg$9,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_155623867,7),t)}],
         _$r_=
          function(filters)
           {if(! _$q_[1])
             {var
               _a_d_=create_table(_Zw_),
               _a_e_=new_variable(_a_d_,_$s_),
               _a_f_=get_method_label(_a_d_,_$t_);
              set_method
               (_a_d_,
                _a_f_,
                function(self_9){var env=self_9[1 + _a_e_];return env[1]});
              var
               _a_g_=
                function(_a_h_)
                 {var _a_i_=create_object_opt(0,_a_d_);
                  _a_i_[1 + _a_e_] = _a_h_;
                  return _a_i_};
              init_class(_a_d_);
              _$q_[1] = _a_g_}
            return caml_call1(_$q_[1],[0,filters])},
         _$u_=function(_a_c_){return [0,_$r_,_a_c_]},
         filter$1=seal(function(_a_b_){return symbol$20(_$u_,_$p_,_a_b_)}),
         _$x_=symbol$17(symbol$17(root$0,_$w_),_$v_),
         _$y_=list$1(0,tup2(encoding$40,encoding$50(encoding$58,encoding$59)));
        caml_call2(get_service$0(_$z_,filter$1),_$y_,_$x_);
        var
         _$D_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$C_),_$B_),rpc_arg$6),_$A_);
        caml_call2(get_service$0(_$E_,empty$4),encoding,_$D_);
        var
         _$I_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$H_),_$G_),rpc_arg$6),_$F_);
        caml_call2(get_service$0(_$J_,empty$4),encoding,_$I_);
        var
         _$N_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$M_),_$L_),rpc_arg$6),_$K_);
        caml_call2(get_service$0(_$O_,empty$4),encoding,_$N_);
        var
         _$S_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$R_),_$Q_),rpc_arg$6),_$P_);
        caml_call2(get_service$0(_$T_,empty$4),encoding,_$S_);
        var
         _$X_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_$W_),_$V_),rpc_arg$6),_$U_);
        caml_call2(get_service$0(_$Y_,empty$4),bool$1,_$X_);
        var _$2_=symbol$17(symbol$17(symbol$17(root$0,_$1_),_$0_),_$Z_);
        caml_call2(get_service$0(_$3_,empty$4),encoding,_$2_);
        var
         Connection_closed=[num_248,_$4_,caml_fresh_oo_id(0)],
         _$5_=function(param){return Connection_closed},
         _$6_=function(param){return param === Connection_closed?_$7_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _$$_,
          _$__,
          _$9_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_$8_)}],
          encoding,
          _$6_,
          _$5_);
        var
         Decipher_error=[num_248,_aaa_,caml_fresh_oo_id(0)],
         Invalid_message_size=[num_248,_aab_,caml_fresh_oo_id(0)],
         Invalid_incoming_ciphertext_si=[num_248,_aac_,caml_fresh_oo_id(0)],
         Rejected_socket_connection=[num_248,_aad_,caml_fresh_oo_id(0)],
         Rejected_by_nack=[num_248,_aae_,caml_fresh_oo_id(0)],
         Rejected_no_common_protocol=[num_248,_aaf_,caml_fresh_oo_id(0)],
         Decoding_error=[num_248,_aag_,caml_fresh_oo_id(0)],
         Myself=[num_248,_aah_,caml_fresh_oo_id(0)],
         Not_enough_proof_of_work=[num_248,_aai_,caml_fresh_oo_id(0)],
         Invalid_auth=[num_248,_aaj_,caml_fresh_oo_id(0)],
         Invalid_chunks_size=[num_248,_aak_,caml_fresh_oo_id(0)],
         _aal_=function(param){return Decipher_error},
         _aam_=function(param){return param === Decipher_error?_aan_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aar_,
          _aaq_,
          _aap_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_aao_)}],
          encoding,
          _aam_,
          _aal_);
        var
         _aas_=function(param){return Invalid_message_size},
         _aat_=function(param){return param === Invalid_message_size?_aau_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aay_,
          _aax_,
          _aaw_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_aav_)}],
          encoding,
          _aat_,
          _aas_);
        var
         _aaz_=function(param){return Invalid_incoming_ciphertext_si},
         _aaA_=
          function(param)
           {return param === Invalid_incoming_ciphertext_si?_aaB_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aaF_,
          _aaE_,
          _aaD_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_aaC_)}],
          encoding,
          _aaA_,
          _aaz_);
        var
         _aaG_=function(param){return Rejected_socket_connection},
         _aaH_=
          function(param){return param === Rejected_socket_connection?_aaI_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aaM_,
          _aaL_,
          _aaK_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_aaJ_)}],
          encoding,
          _aaH_,
          _aaG_);
        var
         _aaN_=
          function(param)
           {var alternative_points=param[2],motive=param[1];
            return [0,Rejected_by_nack,motive,alternative_points]},
         _aaO_=
          function(param)
           {if(param[1] === Rejected_by_nack)
             {var alternative_points=param[3],motive=param[2];
              return [0,[0,motive,alternative_points]]}
            return 0},
         _aaR_=
          obj2
           ([0,_aaQ_,encoding$36,0,0],opt$2(0,0,_aaP_,list$1(0,encoding$41)));
        caml_call8
         (register_error_kind,
          num_950914574,
          _aaV_,
          _aaU_,
          _aaT_,
          [0,
           function(ppf,param)
            {var alt_points=param[2],motive=param[1];
             function _a_a_(ppf,param)
              {if(opt$5)
                var sth=opt$5[1],default$0=sth;
               else
                var default$0=_gj_;
               if(param){var value=param[1];return pp$0(ppf,length(value))}
               return pp_print_text(ppf,default$0)}
             return caml_call5(pf(ppf),_aaS_,pp$24,motive,_a_a_,alt_points)}],
          _aaR_,
          _aaO_,
          _aaN_);
        var
         _aaW_=
          function(announced)
           {return [0,Rejected_no_common_protocol,announced]},
         _aaX_=
          function(param)
           {if(param[1] === Rejected_no_common_protocol)
             {var announced=param[2];return [0,announced]}
            return 0},
         _aaZ_=obj1([0,_aaY_,encoding$38,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _aa3_,
          _aa2_,
          _aa1_,
          [0,function(ppf,lst){return caml_call1(pf(ppf),_aa0_)}],
          _aaZ_,
          _aaX_,
          _aaW_);
        var
         _aa4_=function(re){return [0,Decoding_error,re]},
         _aa5_=
          function(param)
           {if(param[1] === Decoding_error){var re=param[2];return [0,re]}
            return 0},
         _aa7_=obj1([0,_aa6_,read_error_encoding,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _aa$_,
          _aa__,
          _aa9_,
          [0,
           function(ppf,re){return caml_call3(pf(ppf),_aa8_,pp_read_error,re)}],
          _aa7_,
          _aa5_,
          _aa4_);
        var
         _aba_=function(id){return [0,Myself,id]},
         _abb_=
          function(param)
           {if(param[1] === Myself){var id=param[2];return [0,id]}return 0},
         _abd_=obj1([0,_abc_,encoding$45,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _abh_,
          _abg_,
          _abf_,
          [0,function(ppf,id){return caml_call3(pf(ppf),_abe_,pp$29,id)}],
          _abd_,
          _abb_,
          _aba_);
        var
         _abi_=function(id){return [0,Not_enough_proof_of_work,id]},
         _abj_=
          function(param)
           {if(param[1] === Not_enough_proof_of_work)
             {var id=param[2];return [0,id]}
            return 0},
         _abl_=obj1([0,_abk_,encoding$40,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _abp_,
          _abo_,
          _abn_,
          [0,function(ppf,id){return caml_call3(pf(ppf),_abm_,pp$27,id)}],
          _abl_,
          _abj_,
          _abi_);
        var
         _abq_=function(param){return Invalid_auth},
         _abr_=function(param){return param === Invalid_auth?_abs_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _abw_,
          _abv_,
          _abu_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_abt_)}],
          encoding,
          _abr_,
          _abq_);
        var
         _abx_=
          function(param)
           {var max=param[3],min=param[2],value=param[1];
            return [0,Invalid_chunks_size,value,min,max]},
         _aby_=
          function(param)
           {if(param[1] === Invalid_chunks_size)
             {var max=param[4],min=param[3],value=param[2];
              return [0,[0,value,min,max]]}
            return 0},
         _abC_=
          obj3
           ([0,_abB_,int31$0,0,0],[0,_abA_,int31$0,0,0],[0,_abz_,int31$0,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _abG_,
          _abF_,
          _abE_,
          [0,
           function(ppf,param)
            {var max=param[3],min=param[2],value=param[1];
             return caml_call4(pf(ppf),_abD_,min,max,value)}],
          _abC_,
          _aby_,
          _abx_);
        var
         Pending_connection=[num_248,_abH_,caml_fresh_oo_id(0)],
         Connected=[num_248,_abI_,caml_fresh_oo_id(0)],
         Connection_refused=[num_248,_abJ_,caml_fresh_oo_id(0)],
         Rejected=[num_248,_abK_,caml_fresh_oo_id(0)],
         Too_many_connections=[num_248,_abL_,caml_fresh_oo_id(0)],
         Private_mode=[num_248,_abM_,caml_fresh_oo_id(0)],
         Point_banned=[num_248,_abN_,caml_fresh_oo_id(0)],
         Peer_banned=[num_248,_abO_,caml_fresh_oo_id(0)],
         P2p_layer_disabled=[num_248,_abP_,caml_fresh_oo_id(0)],
         _abQ_=function(param){return Pending_connection},
         _abR_=function(param){return param === Pending_connection?_abS_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _abW_,
          _abV_,
          _abU_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_abT_)}],
          encoding,
          _abR_,
          _abQ_);
        var
         _abX_=function(param){return Connected},
         _abY_=function(param){return param === Connected?_abZ_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _ab3_,
          _ab2_,
          _ab1_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_ab0_)}],
          encoding,
          _abY_,
          _abX_);
        var
         _ab4_=function(param){return Connection_refused},
         _ab5_=function(param){return param === Connection_refused?_ab6_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _ab__,
          _ab9_,
          _ab8_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_ab7_)}],
          encoding,
          _ab5_,
          _ab4_);
        var
         _ab$_=
          function(param)
           {var motive=param[2],peer=param[1];return [0,Rejected,peer,motive]},
         _aca_=
          function(param)
           {if(param[1] === Rejected)
             {var motive=param[3],peer=param[2];return [0,[0,peer,motive]]}
            return 0},
         _acd_=obj2([0,_acc_,encoding$40,0,0],[0,_acb_,encoding$36,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _ach_,
          _acg_,
          _acf_,
          [0,
           function(ppf,param)
            {var motive=param[2],peer=param[1];
             return caml_call5(pf(ppf),_ace_,pp$27,peer,pp$24,motive)}],
          _acd_,
          _aca_,
          _ab$_);
        var
         _aci_=function(param){return Too_many_connections},
         _acj_=function(param){return param === Too_many_connections?_ack_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aco_,
          _acn_,
          _acm_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_acl_)}],
          encoding,
          _acj_,
          _aci_);
        var
         _acp_=function(param){return Private_mode},
         _acq_=function(param){return param === Private_mode?_acr_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _acv_,
          _acu_,
          _act_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_acs_)}],
          encoding,
          _acq_,
          _acp_);
        var
         _acw_=function(point){return [0,Point_banned,point]},
         _acx_=
          function(param)
           {if(param[1] === Point_banned){var point=param[2];return [0,point]}
            return 0},
         _acz_=obj1([0,_acy_,encoding$41,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _acD_,
          _acC_,
          _acB_,
          [0,
           function(ppf,param)
            {var addr=param[1];return caml_call3(pf(ppf),_acA_,pp$26,addr)}],
          _acz_,
          _acx_,
          _acw_);
        var
         _acE_=function(peer_id){return [0,Peer_banned,peer_id]},
         _acF_=
          function(param)
           {if(param[1] === Peer_banned)
             {var peer_id=param[2];return [0,peer_id]}
            return 0},
         _acH_=obj1([0,_acG_,encoding$40,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _acL_,
          _acK_,
          _acJ_,
          [0,
           function(ppf,peer_id)
            {return caml_call3(pf(ppf),_acI_,pp$27,peer_id)}],
          _acH_,
          _acF_,
          _acE_);
        var
         _acM_=function(param){return P2p_layer_disabled},
         _acN_=function(param){return param === P2p_layer_disabled?_acO_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _acS_,
          _acR_,
          _acQ_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_acP_)}],
          encoding,
          _acN_,
          _acM_);
        var
         _acV_=obj2([0,_acU_,output,0,0],[0,_acT_,output,0,0]),
         _acW_=0,
         _acX_=
          function(param)
           {var commit_date=param[2],commit_hash=param[1];
            return [0,commit_hash,commit_date]},
         commit_info_encoding=
          conv
           (function(param)
             {var commit_date=param[2],commit_hash=param[1];
              return [0,commit_hash,commit_date]},
            _acX_,
            _acW_,
            _acV_),
         _acY_=0,
         _acZ_=function(param){return 1},
         _ac0_=
          function(param)
           {if(typeof param === "number" && 0 !== param)return _ac1_;return 0},
         _ac5_=[0,[0,_ac4_,0,constant(_ac2_),_ac0_,_acZ_,_ac3_],_acY_],
         _ac6_=function(n){return [0,n]},
         _ac7_=
          function(param)
           {if(typeof param === "number")return 0;var n=param[1];return [0,n]},
         _ac$_=
          [0,[0,_ac__,0,obj1([0,_ac8_,int31$0,0,0]),_ac7_,_ac6_,_ac9_],_ac5_],
         _ada_=function(param){return 0},
         _adb_=
          function(param)
           {if(typeof param === "number" && 0 === param)return _adc_;return 0},
         additional_info_encoding=
          union$0(0,[0,[0,_adf_,0,constant(_add_),_adb_,_ada_,_ade_],_ac$_]),
         _adj_=
          obj3
           ([0,_adi_,int31$0,0,0],
            [0,_adh_,int31$0,0,0],
            [0,_adg_,additional_info_encoding,0,0]),
         _adk_=0,
         _adl_=
          function(param)
           {var additional_info=param[3],minor=param[2],major=param[1];
            return [0,major,minor,additional_info]},
         current_version_encoding=
          conv
           (function(param)
             {var additional_info=param[3],minor=param[2],major=param[1];
              return [0,major,minor,additional_info]},
            _adl_,
            _adk_,
            _adj_),
         _adp_=
          obj3
           ([0,_ado_,current_version_encoding,0,0],
            [0,_adn_,encoding$38,0,0],
            [0,_adm_,option(commit_info_encoding),0,0]),
         _adq_=0,
         _adr_=
          function(param)
           {var
             commit_info=param[3],
             network_version=param[2],
             version=param[1];
            return [0,version,network_version,commit_info]},
         encoding$60=
          conv
           (function(param)
             {var
               commit_info=param[3],
               network_version=param[2],
               version=param[1];
              return [0,version,network_version,commit_info]},
            _adr_,
            _adq_,
            _adp_),
         parse_chain=
          function(s)
           {try
             {var
               _a9__=
                caml_string_notequal(s,_adx_)
                 ?caml_string_notequal(s,_ady_)
                   ?[0,[0,num_803298286,caml_call1(of_b58check_exn$0,s)]]
                   :_adz_
                 :_adA_;
              return _a9__}
            catch(_a9$_){return _adw_}},
         to_string$15=
          function(param)
           {if(typeof param === "number")
             return num_936572018 <= param?_adB_:_adC_;
            var h=param[2];
            return caml_call1(to_b58check$0,h)},
         chain_arg=make$4([0,descr],name$40,parse_chain,to_string$15,0),
         parse_block=
          function(s)
           {function count_delims(s)
             {return map$1
                      (function(d)
                        {var _a99_=0;
                         return [0,
                                 fold_left$2
                                  (function(i,c){return c === d?i + 1 | 0:i},_a99_,s),
                                 d]},
                       delims)}
            function split_on_delim(counts)
             {var
               _a98_=0,
               match=
                fold_left$0
                 (function(i,param){var v=param[1];return i + v | 0},
                  _a98_,
                  counts);
              if(0 === match)return [0,[0,s,0],32];
              if(1 === match)
               {var delim=assoc(1,counts);return [0,split(delim,0,0,s),delim]}
              throw Exit}
            try
             {var _a9z_=split_on_delim(count_delims(s)),_a9A_=_a9z_[1];
              if(_a9A_)
               {var _a9B_=_a9A_[1],switch$0=0;
                if(caml_string_notequal(_a9B_,_adE_))
                 if(caml_string_notequal(_a9B_,_adF_))
                  if(caml_string_notequal(_a9B_,_adG_))
                   if(caml_string_notequal(_a9B_,_adH_))
                    {if(! caml_string_notequal(_a9B_,_adI_))
                      {var _a9M_=_a9A_[2],switch$1=0;
                       if(_a9M_)
                        if(_a9M_[2])
                         {switch$0 = 1;switch$1 = 1}
                        else
                         {var _a9N_=_a9z_[2],_a9O_=_a9M_[1],switch$2=0;
                          if(46 <= _a9N_)
                           {if(num_126 !== _a9N_){switch$1 = 1;switch$2 = 2}}
                          else
                           if(43 <= _a9N_)
                            {var switcher$0=_a9N_ + num_43 | 0;
                             switch(switcher$0)
                              {case 0:
                                var
                                 _a9P_=
                                  [0,
                                   [0,
                                    num_884916592,
                                    [0,num_850585938,- caml_int_of_string(_a9O_) | 0]]];
                                switch$2 = 1;
                                break;
                               case 1:switch$1 = 1;switch$2 = 2;break
                               }}
                           else
                            {switch$1 = 1;switch$2 = 2}
                          var switch$3=0;
                          switch(switch$2)
                           {case 2:switch$3 = 1;break;
                            case 0:
                             var
                              _a9P_=
                               [0,
                                [0,
                                 num_884916592,
                                 [0,num_850585938,caml_int_of_string(_a9O_)]]];
                             break
                            }
                          if(! switch$3)var _a9Q_=_a9P_}
                       else
                        var _a9Q_=_adK_;
                       if(! switch$1){var _a9I_=_a9Q_;switch$0 = 2}}}
                   else
                    {var _a9R_=_a9A_[2],switch$4=0;
                     if(_a9R_)
                      if(_a9R_[2])
                       {switch$0 = 1;switch$4 = 1}
                      else
                       {var _a9S_=_a9z_[2],switch$5=0,_a9T_=_a9R_[1];
                        if(45 !== _a9S_ && num_126 !== _a9S_)
                         {switch$4 = 1;switch$5 = 1}
                        if(! switch$5)
                         var _a9U_=[0,[0,num_803493184,caml_int_of_string(_a9T_)]]}
                     else
                      var _a9U_=_adL_;
                     if(! switch$4){var _a9I_=_a9U_;switch$0 = 2}}
                  else
                   {var _a9V_=_a9A_[2],switch$6=0;
                    if(_a9V_)
                     {if(_a9V_[2])
                       switch$0 = 1;
                      else
                       if(43 === _a9z_[2])
                        {var
                          n=_a9V_[1],
                          _a9W_=[0,[0,num_93357412,caml_int_of_string(n)]];
                         switch$6 = 1}}
                    else
                     {var _a9W_=_adM_;switch$6 = 1}
                    if(switch$6){var _a9I_=_a9W_;switch$0 = 2}}
                 else
                  {var _a9X_=_a9A_[2],switch$7=0;
                   if(_a9X_)
                    if(_a9X_[2])
                     switch$0 = 1;
                    else
                     {var _a9Y_=_a9z_[2],_a9Z_=_a9X_[1],switch$8=0;
                      if(46 <= _a9Y_)
                       {if(num_126 !== _a9Y_)switch$8 = 2}
                      else
                       if(43 <= _a9Y_)
                        {var switcher$1=_a9Y_ + num_43 | 0;
                         switch(switcher$1)
                          {case 0:
                            var
                             _a90_=
                              [0,
                               [0,
                                num_884916592,
                                [0,num_973294248,- caml_int_of_string(_a9Z_) | 0]]];
                            switch$8 = 1;
                            break;
                           case 1:switch$8 = 2;break
                           }}
                       else
                        switch$8 = 2;
                      var switch$9=0;
                      switch(switch$8)
                       {case 2:switch$9 = 1;break;
                        case 0:
                         var
                          _a90_=
                           [0,
                            [0,
                             num_884916592,
                             [0,num_973294248,caml_int_of_string(_a9Z_)]]];
                         break
                        }
                      if(! switch$9){var _a91_=_a90_;switch$7 = 1}}
                   else
                    {var _a91_=_adN_;switch$7 = 1}
                   if(switch$7){var _a9I_=_a91_;switch$0 = 2}}
                else
                 {var _a92_=_a9A_[2],switch$10=0;
                  if(_a92_)
                   if(_a92_[2])
                    switch$0 = 1;
                   else
                    {var _a93_=_a9z_[2],_a94_=_a92_[1],switch$11=0;
                     if(46 <= _a93_)
                      {if(num_126 !== _a93_)switch$11 = 2}
                     else
                      if(43 <= _a93_)
                       {var switcher$2=_a93_ + num_43 | 0;
                        switch(switcher$2)
                         {case 0:
                           var
                            _a95_=
                             [0,
                              [0,
                               num_884916592,
                               [0,num_508281962,- caml_int_of_string(_a94_) | 0]]];
                           switch$11 = 1;
                           break;
                          case 1:switch$11 = 2;break
                          }}
                      else
                       switch$11 = 2;
                     var switch$12=0;
                     switch(switch$11)
                      {case 2:switch$12 = 1;break;
                       case 0:
                        var
                         _a95_=
                          [0,
                           [0,
                            num_884916592,
                            [0,num_508281962,caml_int_of_string(_a94_)]]];
                        break
                       }
                     if(! switch$12){var _a96_=_a95_;switch$10 = 1}}
                  else
                   {var _a96_=_adO_;switch$10 = 1}
                  if(switch$10){var _a9I_=_a96_;switch$0 = 2}}
                var switch$13=0;
                switch(switch$0)
                 {case 0:
                   var _a9C_=_a9A_[2],switch$14=0;
                   if(_a9C_)
                    if(_a9C_[2])
                     switch$14 = 1;
                    else
                     {var _a9D_=_a9z_[2],_a9E_=_a9C_[1],switch$15=0;
                      if(46 <= _a9D_)
                       {if(num_126 !== _a9D_){switch$14 = 1;switch$15 = 2}}
                      else
                       if(43 <= _a9D_)
                        {var switcher=_a9D_ + num_43 | 0;
                         switch(switcher)
                          {case 0:
                            var
                             _a9J_=- caml_int_of_string(_a9E_) | 0,
                             _a9G_=
                              [0,
                               [0,
                                num_803298286,
                                [0,caml_call1(of_b58check_exn,_a9B_),_a9J_]]];
                            switch$15 = 1;
                            break;
                           case 1:switch$14 = 1;switch$15 = 2;break
                           }}
                       else
                        {switch$14 = 1;switch$15 = 2}
                      var switch$16=0;
                      switch(switch$15)
                       {case 2:switch$16 = 1;break;
                        case 0:
                         var
                          _a9F_=caml_int_of_string(_a9E_),
                          _a9G_=
                           [0,
                            [0,
                             num_803298286,
                             [0,caml_call1(of_b58check_exn,_a9B_),_a9F_]]];
                         break
                        }
                      if(! switch$16)var _a9H_=_a9G_}
                   else
                    {var match=caml_call1(of_b58check_opt,_a9B_);
                     if(match)
                      var h=match[1],_a9K_=[0,[0,num_803298286,[0,h,0]]];
                     else
                      {var l=caml_int_of_string(s);
                       if(caml_call2(_gq_,l,0))throw Exit;
                       var
                        _a9L_=
                         caml_call2(_gr_,l,0)
                          ?_adJ_
                          :[0,[0,num_93357412,caml_int_of_string(s)]],
                        _a9K_=_a9L_}
                     var _a9H_=_a9K_}
                   if(! switch$14){var _a9I_=_a9H_;switch$13 = 1}
                   break;
                  case 2:switch$13 = 1;break
                  }
                if(switch$13)return _a9I_}
              throw Exit}
            catch(_a97_){return _adD_}},
         alias_to_string=
          function(param)
           {return num_508281962 === param
                    ?_adP_
                    :num_973294248 <= param?_adQ_:_adR_},
         to_string$16=
          function(param)
           {if(typeof param === "number")return _adS_;
            var _a9n_=param[1];
            if(num_803493184 <= _a9n_)
             {if(num_884916592 <= _a9n_)
               {var _a9o_=param[2],_a9p_=_a9o_[2],_a9q_=_a9o_[1];
                if(0 === _a9p_)return alias_to_string(_a9q_);
                if(0 <= _a9p_)
                 {var _a9r_=alias_to_string(_a9q_);
                  return caml_call2(sprintf(_adT_),_a9r_,_a9p_)}
                var _a9s_=alias_to_string(_a9q_);
                return caml_call2(sprintf(_adU_),_a9s_,- _a9p_ | 0)}
              var _a9t_=param[2];
              return 0 === _a9t_
                      ?_adV_
                      :0 <= _a9t_
                        ?caml_call1(sprintf(_adW_),_a9t_)
                        :caml_call1(sprintf(_adX_),- _a9t_ | 0)}
            if(num_803298286 <= _a9n_)
             {var _a9u_=param[2],_a9v_=_a9u_[2],_a9w_=_a9u_[1];
              if(0 === _a9v_)return caml_call1(to_b58check,_a9w_);
              if(0 <= _a9v_)
               {var _a9x_=caml_call1(to_b58check,_a9w_);
                return caml_call2(sprintf(_adY_),_a9x_,_a9v_)}
              var _a9y_=caml_call1(to_b58check,_a9w_);
              return caml_call2(sprintf(_adZ_),_a9y_,- _a9v_ | 0)}
            var i=param[2];
            return caml_call1(sprintf(_ad0_),i)},
         blocks_arg=make$4([0,descr$0],name$41,parse_block,to_string$16,0),
         path$1=symbol$18(symbol$17(root$0,_ad1_),chain_arg),
         mempool_path=function(p){return symbol$17(p,_ad2_)},
         dir_path=symbol$17(p,_ad4_),
         path$2=symbol$18(dir_path,blocks_arg),
         _ad7_=obj2([0,_ad6_,int31$0,0,0],opt$2(0,0,_ad5_,int31$0)),
         _ad8_=0,
         _ad9_=
          function(param)
           {var max_op=param[2],max_size=param[1];return [0,max_size,max_op]},
         operation_list_quota_encoding=
          conv
           (function(param)
             {var max_op=param[2],max_size=param[1];
              return [0,max_size,max_op]},
            _ad9_,
            _ad8_,
            _ad7_),
         raw_context_encoding=
          mu
           (_aef_,
            0,
            0,
            function(encoding)
             {var _a9e_=0;
              function _a9f_(param){return 0}
              var
               _a9g_=
                [0,
                 [0,
                  _aea_,
                  0,
                  null$1,
                  function(param){return typeof param === "number"?_ad__:0},
                  _a9f_,
                  _ad$_],
                 _a9e_];
              function _a9h_(k){return [1,k]}
              function _a9i_(param)
               {if(typeof param !== "number" && 1 === param[0])
                 {var k=param[1];return [0,k]}
                return 0}
              var
               t=get_json(encoding),
               s=schema(0,t),
               _a88_=init$2[7],
               _a89_=init$2[6],
               _a8__=init$2[5],
               _a8$_=init$2[4],
               _a9a_=[0,caml_call1(root,s)],
               _a9b_=
                caml_call2
                 (update,
                  element
                   ([0,[0,init$2[1],init$2[2],_a9a_,_a8$_,_a8__,_a89_,_a88_]]),
                  s);
              function _a9c_(v)
               {if(typeof v !== "number" && 79 === v[1])
                 {var
                   l=v[2],
                   destruct=
                    function(n,t,v)
                     {try
                       {var _a9l_=caml_call2(Ezjsonm_encoding[2],t,v);return _a9l_}
                      catch(_a9m_)
                       {_a9m_ = caml_wrap_exception(_a9m_);
                        if(_a9m_[1] === Cannot_destruct)
                         {var match=_a9m_[2],exn=match[2],p=match[1];
                          throw [0,Cannot_destruct,[0,[0,[0,num_331416730,n],p],exn]]}
                        throw _a9m_}};
                  return map$1
                          (function(param)
                            {var v=param[2],n=param[1];return [0,n,destruct(n,t,v)]},
                           l)}
                throw unexpected(v,_oo_)}
              function _a9d_(l)
               {return [0,
                        79,
                        map$1
                         (function(param)
                           {var v=param[2],n=param[1];
                            return [0,n,caml_call2(Ezjsonm_encoding[1],t,v)]},
                          l)]}
              var
               json=caml_call3(Ezjsonm_encoding[3],_a9d_,_a9c_,_a9b_),
               binary=list$1(0,tup2(output,encoding)),
               _a9j_=
                [0,
                 [0,_aec_,0,raw_splitted(json,binary),_a9i_,_a9h_,_aeb_],
                 _a9g_];
              function _a9k_(k){return [0,k]}
              return union$0
                      (0,
                       [0,
                        [0,
                         _aee_,
                         0,
                         bytes$1,
                         function(param)
                          {if(typeof param !== "number" && 0 === param[0])
                            {var k=param[1];return [0,k]}
                           return 0},
                         _a9k_,
                         _aed_],
                        _a9j_])}),
         Invalid_depth_arg=[num_248,_aeg_,caml_fresh_oo_id(0)],
         _aeh_=function(depth){return [0,Invalid_depth_arg,depth]},
         _aei_=
          function(param)
           {if(param[1] === Invalid_depth_arg)
             {var depth=param[2];return [0,depth]}
            return 0},
         _aek_=obj1([0,_aej_,int31$0,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _aeo_,
          _aen_,
          _aem_,
          [0,function(ppf,depth){return caml_call2(pf(ppf),_ael_,depth)}],
          _aek_,
          _aei_,
          _aeh_);
        var
         _aer_=
          merge_objs
           (obj2([0,_aeq_,encoding$17,0,0],[0,_aep_,encoding$17,0,0]),input$0),
         _aes_=0,
         _aet_=
          function(param)
           {var
             match=param[1],
             next_protocol=match[2],
             current_protocol=match[1];
            return [0,current_protocol,next_protocol]},
         raw_protocol_encoding=
          conv
           (function(param)
             {var next_protocol=param[2],current_protocol=param[1];
              return [0,[0,current_protocol,next_protocol],0]},
            _aet_,
            _aes_,
            _aer_),
         _aeu_=[0,0,0,0],
         _aev_=[0,0,0,0],
         _aew_=[0,0,0,0],
         _aex_=[0,0,0,0],
         _aey_=[0,0,0,0],
         _aez_=[0,0,0,0],
         _ag1_=0,
         _ag2_=function(param){return _ag3_},
         operation_data_and_receipt_enc=
          conv(function(param){return 0},_ag2_,_ag1_,encoding),
         Proto=
          [0,
           hash$2,
           encoding,
           encoding,
           encoding,
           encoding,
           operation_data_and_receipt_enc];
        (function(Next_proto)
           {var
             protocol_hash=caml_call1(to_b58check$17,Proto[1]),
             next_protocol_hash=caml_call1(to_b58check$17,Next_proto[1]),
             _a4V_=merge_objs(shell_header_encoding,Proto[2]),
             _a4W_=0;
            function _a4X_(param)
             {var protocol_data=param[2],shell=param[1];
              return [0,shell,protocol_data]}
            var
             eta=
              conv
               (function(param)
                 {var protocol_data=param[2],shell=param[1];
                  return [0,shell,protocol_data]},
                _a4X_,
                _a4W_,
                _a4V_),
             raw_block_header_encoding=def$0(_aeA_,0,0,eta),
             _a4Y_=
              merge_objs
               (obj3
                 ([0,_aeD_,constant(protocol_hash),0,0],
                  [0,_aeC_,encoding$4,0,0],
                  [0,_aeB_,encoding$3,0,0]),
                raw_block_header_encoding),
             _a4Z_=0;
            function _a40_(param)
             {var
               _a87_=param[2],
               protocol_data=_a87_[2],
               shell=_a87_[1],
               match=param[1],
               hash=match[3],
               chain_id=match[2];
              return [0,chain_id,hash,shell,protocol_data]}
            var
             eta$0=
              conv
               (function(param)
                 {var
                   protocol_data=param[4],
                   shell=param[3],
                   hash=param[2],
                   chain_id=param[1];
                  return [0,[0,0,chain_id,hash],[0,shell,protocol_data]]},
                _a40_,
                _a4Z_,
                _a4Y_),
             block_header_encoding=def$0(_aeE_,0,0,eta$0),
             _a41_=Proto[3],
             _a42_=
              [0,_aeF_,arg$4(0,list$1(0,operation_list_quota_encoding)),0,0],
             _a43_=[0,_aeK_,constant(next_protocol_hash),0,0],
             _a44_=
              merge_objs
               (obj7
                 ([0,_aeL_,constant(protocol_hash),0,0],
                  _a43_,
                  [0,_aeJ_,encoding$57,0,0],
                  [0,_aeI_,int31$0,0,0],
                  [0,_aeH_,int31$0,0,0],
                  [0,_aeG_,int31$0,0,0],
                  _a42_),
                _a41_),
             _a45_=0;
            function _a46_(param)
             {var
               protocol_data=param[2],
               match=param[1],
               operation_list_quota=match[7],
               max_block_header_length=match[6],
               max_operation_data_length=match[5],
               max_operations_ttl=match[4],
               test_chain_status=match[3];
              return [0,
                      protocol_data,
                      test_chain_status,
                      max_operations_ttl,
                      max_operation_data_length,
                      max_block_header_length,
                      operation_list_quota]}
            var
             eta$1=
              conv
               (function(param)
                 {var
                   operation_list_quota=param[6],
                   max_block_header_length=param[5],
                   max_operation_data_length=param[4],
                   max_operations_ttl=param[3],
                   test_chain_status=param[2],
                   protocol_data=param[1];
                  return [0,
                          [0,
                           0,
                           0,
                           test_chain_status,
                           max_operations_ttl,
                           max_operation_data_length,
                           max_block_header_length,
                           operation_list_quota],
                          protocol_data]},
                _a46_,
                _a45_,
                _a44_),
             block_metadata_encoding=def$0(_aeM_,0,0,eta$1),
             _a47_=arg$4(0,Next_proto[4]),
             _a48_=merge_objs(arg$4(0,shell_header_encoding$0),_a47_),
             _a49_=
              merge_objs
               (obj1([0,_aeN_,constant(next_protocol_hash),0,0]),_a48_),
             _a4__=0;
            function _a4$_(param)
             {var match=param[2],protocol_data=match[2],shell=match[1];
              return [0,shell,protocol_data]}
            var
             eta$2=
              conv
               (function(param)
                 {var protocol_data=param[2],shell=param[1];
                  return [0,0,[0,shell,protocol_data]]},
                _a4$_,
                _a4__,
                _a49_),
             next_operation_encoding=def$0(_aeO_,0,0,eta$2),
             _a5a_=0;
            function _a5b_(operation_data){return [0,operation_data,0]}
            function _a5c_(param)
             {var _a86_=param[1];return param[2]?0:[0,_a86_]}
            var _a5d_=[0,[0,_aeQ_,0,Proto[4],_a5c_,_a5b_,_aeP_],_a5a_];
            function _a5e_(param)
             {var receipt=param[2],operation_data=param[1];
              return [0,operation_data,[0,receipt]]}
            function _a5f_(param)
             {var _a84_=param[2],_a85_=param[1];
              if(_a84_){var receipt=_a84_[1];return [0,[0,_a85_,receipt]]}
              return 0}
            var
             operation_data_encoding=
              union$0(_aeT_,[0,[0,_aeS_,0,Proto[6],_a5f_,_a5e_,_aeR_],_a5d_]),
             _a5g_=arg$4(0,operation_data_encoding),
             _a5h_=merge_objs(arg$4(0,shell_header_encoding$0),_a5g_),
             _a5i_=
              merge_objs
               (obj3
                 ([0,_aeW_,constant(protocol_hash),0,0],
                  [0,_aeV_,encoding$4,0,0],
                  [0,_aeU_,encoding$20,0,0]),
                _a5h_),
             _a5j_=0;
            function _a5k_(param)
             {var
               _a82_=param[2],
               _a83_=_a82_[2],
               receipt=_a83_[2],
               protocol_data=_a83_[1],
               shell=_a82_[1],
               match=param[1],
               hash=match[3],
               chain_id=match[2];
              return [0,chain_id,hash,shell,protocol_data,receipt]}
            var
             eta$3=
              conv
               (function(param)
                 {var
                   receipt=param[5],
                   protocol_data=param[4],
                   shell=param[3],
                   hash=param[2],
                   chain_id=param[1];
                  return [0,
                          [0,0,chain_id,hash],
                          [0,shell,[0,protocol_data,receipt]]]},
                _a5k_,
                _a5j_,
                _a5i_),
             operation_encoding$0=def$0(_aeX_,0,0,eta$3),
             _a5l_=
              [0,_aeY_,list$1(0,arg$4(0,list$1(0,operation_encoding$0))),0,0],
             _a5m_=opt$2(0,0,_aeZ_,arg$4(0,block_metadata_encoding)),
             _a5n_=[0,_ae0_,arg$4(0,raw_block_header_encoding),0,0],
             _a5o_=
              obj6
               ([0,_ae3_,constant(protocol_hash),0,0],
                [0,_ae2_,encoding$4,0,0],
                [0,_ae1_,encoding$3,0,0],
                _a5n_,
                _a5m_,
                _a5l_),
             _a5p_=0;
            function _a5q_(param)
             {var
               operations=param[6],
               metadata=param[5],
               header=param[4],
               hash=param[3],
               chain_id=param[2];
              return [0,chain_id,hash,header,metadata,operations]}
            var
             block_info_encoding=
              conv
               (function(param)
                 {var
                   operations=param[5],
                   metadata=param[4],
                   header=param[3],
                   hash=param[2],
                   chain_id=param[1];
                  return [0,0,chain_id,hash,header,metadata,operations]},
                _a5q_,
                _a5p_,
                _a5o_),
             _a5r_=symbol$17(p,_ae4_),
             hash=caml_call2(get_service$0(_ae5_,empty$4),encoding$3,_a5r_),
             _a5s_=symbol$17(p,_ae6_),
             header=
              caml_call2
               (get_service$0(_ae7_,empty$4),block_header_encoding,_a5s_),
             _a5t_=symbol$17(symbol$17(p,_ae9_),_ae8_),
             raw_header=caml_call2(get_service$0(_ae__,empty$4),bytes$1,_a5t_),
             _a5u_=symbol$17(p,_ae$_),
             metadata=
              caml_call2
               (get_service$0(_afa_,empty$4),block_metadata_encoding,_a5u_),
             _a5v_=symbol$17(p,_afb_),
             _a5w_=option(encoding$23),
             metadata_hash=
              caml_call2(get_service$0(_afc_,empty$4),_a5w_,_a5v_),
             _a5x_=symbol$17(p,_afd_),
             protocols=
              caml_call2
               (get_service$0(_afe_,empty$4),raw_protocol_encoding,_a5x_),
             path=symbol$17(p,_aff_),
             _a5y_=symbol$17(path,_afg_),
             shell_header=
              caml_call2
               (get_service$0(_afh_,empty$4),shell_header_encoding,_a5y_),
             _a5z_=symbol$17(path,_afi_),
             _a5A_=Proto[2],
             _a5B_=
              merge_objs(obj1([0,_afj_,constant(protocol_hash),0,0]),_a5A_),
             _a5C_=0;
            function _a5D_(param){var h=param[2];return h}
            var
             _a5E_=conv(function(h){return [0,0,h]},_a5D_,_a5C_,_a5B_),
             protocol_data=
              caml_call2(get_service$0(_afk_,empty$4),_a5E_,_a5z_),
             _a5F_=symbol$17(symbol$17(path,_afm_),_afl_),
             raw_protocol_data=
              caml_call2(get_service$0(_afn_,empty$4),bytes$1,_a5F_),
             Header=[0,path,shell_header,protocol_data,raw_protocol_data],
             path$0=symbol$17(p,_afo_),
             _a5G_=list$1(0,arg$4(0,list$1(0,operation_encoding$0))),
             operations=caml_call2(get_service$0(_afp_,empty$4),_a5G_,path$0);
            function destruct(s)
             {try
               {var _a80_=[0,caml_int_of_string(s)];return _a80_}
              catch(_a81_){return [1,caml_call1(sprintf$0(_afq_),s)]}}
            var list_arg=make$4([0,descr$1],name$42,destruct,construct,0);
            function destruct$0(s)
             {try
               {var _a8Y_=[0,caml_int_of_string(s)];return _a8Y_}
              catch(_a8Z_){return [1,caml_call1(sprintf$0(_afr_),s)]}}
            var
             offset_arg=make$4([0,descr$2],name$43,destruct$0,construct,0),
             _a5H_=symbol$18(path$0,list_arg),
             _a5I_=list$1(0,operation_encoding$0),
             operations_in_pass=
              caml_call2(get_service$0(_afs_,empty$4),_a5I_,_a5H_),
             _a5J_=symbol$18(symbol$18(path$0,list_arg),offset_arg),
             operation=
              caml_call2
               (get_service$0(_aft_,empty$4),operation_encoding$0,_a5J_),
             Operations=
              [0,
               path$0,
               operations,
               list_arg,
               offset_arg,
               operations_in_pass,
               operation],
             path$3=symbol$17(p,_afu_),
             _a5K_=list$1(0,list$1(0,encoding$20)),
             operation_hashes=
              caml_call2(get_service$0(_afv_,empty$4),_a5K_,path$3),
             _a5L_=symbol$18(path$3,Operations[3]),
             _a5M_=list$1(0,encoding$20),
             operation_hashes_in_pass=
              caml_call2(get_service$0(_afw_,empty$4),_a5M_,_a5L_),
             _a5N_=Operations[4],
             _a5O_=symbol$18(symbol$18(path$3,Operations[3]),_a5N_),
             operation_hash=
              caml_call2(get_service$0(_afx_,empty$4),encoding$20,_a5O_),
             Operation_hashes=
              [0,
               path$3,
               operation_hashes,
               operation_hashes_in_pass,
               operation_hash],
             _a5P_=symbol$17(p,_afy_),
             _a5Q_=option(encoding$19),
             root=caml_call2(get_service$0(_afz_,empty$4),_a5Q_,_a5P_),
             path$4=symbol$17(p,_afA_),
             _a5R_=option(list$1(0,list$1(0,encoding$18))),
             operation_metadata_hashes=
              caml_call2(get_service$0(_afB_,empty$4),_a5R_,path$4),
             _a5S_=symbol$18(path$4,Operations[3]),
             _a5T_=option(list$1(0,encoding$18)),
             operation_metadata_hashes_in_p=
              caml_call2(get_service$0(_afC_,empty$4),_a5T_,_a5S_),
             _a5U_=Operations[4],
             _a5V_=symbol$18(symbol$18(path$4,Operations[3]),_a5U_),
             _a5W_=option(encoding$18),
             operation_metadata_hash=
              caml_call2(get_service$0(_afD_,empty$4),_a5W_,_a5V_),
             Operation_metadata_hashes=
              [0,
               root,
               path$4,
               operation_metadata_hashes,
               operation_metadata_hashes_in_p,
               operation_metadata_hash],
             path$5=symbol$17(p,_afE_),
             _a5X_=symbol$17(path$5,_afF_),
             _a5Y_=obj1([0,_afG_,bytes$1,0,0]),
             block_header=
              caml_call3
               (post_service$0(_afH_,empty$4),encoding$33,_a5Y_,_a5X_),
             Forge=[0,block_header],
             path$6=symbol$17(path$5,_afI_),
             _a4L_=arg$4(0,encoding$54),
             operation_encoding=
              merge_objs(obj1([0,_WG_,encoding$20,0,0]),_a4L_),
             _a4M_=obj1([0,_WH_,error_encoding$0,0,0]),
             _a4N_=merge_objs(arg$4(0,encoding$54),_a4M_),
             refused_encoding=merge_objs(obj1([0,_WI_,encoding$20,0,0]),_a4N_);
            function build_list(map){return caml_call1(Map[28],map)}
            function build_map(list)
             {var _a8X_=Map[2];
              return fold_right
                      (function(param,m)
                        {var e=param[2],k=param[1];return caml_call3(Map[5],k,e,m)},
                       list,
                       _a8X_)}
            var
             _a4O_=[0,_WJ_,list$1(0,refused_encoding),0,0],
             _a4P_=[0,_WK_,list$1(0,refused_encoding),0,0],
             _a4Q_=[0,_WL_,list$1(0,refused_encoding),0,0],
             _a4R_=
              obj4
               ([0,_WM_,list$1(0,operation_encoding),0,0],_a4Q_,_a4P_,_a4O_),
             _a4S_=0;
            function _a4T_(param)
             {var
               branch_delayed=param[4],
               branch_refused=param[3],
               refused=param[2],
               applied=param[1],
               refused$0=build_map(refused),
               branch_refused$0=build_map(branch_refused),
               branch_delayed$0=build_map(branch_delayed);
              return [0,applied,refused$0,branch_refused$0,branch_delayed$0]}
            var
             block_result_encoding=
              obj2
               ([0,_afK_,shell_header_encoding,0,0],
                [0,
                 _afJ_,
                 list$1
                  (0,
                   conv
                    (function(param)
                      {var
                        branch_delayed=param[4],
                        branch_refused=param[3],
                        refused=param[2],
                        applied=param[1],
                        _a8V_=build_list(branch_delayed),
                        _a8W_=build_list(branch_refused);
                       return [0,applied,build_list(refused),_a8W_,_a8V_]},
                     _a4T_,
                     _a4S_,
                     _a4R_)),
                 0,
                 0]),
             _a5Z_=
              [0,
               _afL_,
               list$1(0,arg$4(0,list$1(0,next_operation_encoding))),
               0,
               0],
             _a50_=arg$4(0,Next_proto[2]),
             _a51_=
              merge_objs
               (obj1([0,_afM_,constant(next_protocol_hash),0,0]),_a50_),
             _a52_=0;
            function _a53_(param){var h=param[2];return h}
            var
             _a54_=
              obj2
               ([0,
                 _afN_,
                 conv(function(h){return [0,0,h]},_a53_,_a52_,_a51_),
                 0,
                 0],
                _a5Z_),
             _a55_=0;
            function _a56_(param)
             {var operations=param[2],protocol_data=param[1];
              return [0,protocol_data,operations]}
            var
             block_param_encoding=
              conv
               (function(param)
                 {var operations=param[2],protocol_data=param[1];
                  return [0,protocol_data,operations]},
                _a56_,
                _a55_,
                _a54_),
             _a57_=
              [1,
               _afO_,
               0,
               rpc_arg$3,
               function(t)
                {return caml_call1(caml_get_public_method(t,634311894,8),t)}],
             _a58_=
              [2,
               _afP_,
               0,
               function(t)
                {return caml_call1(caml_get_public_method(t,459433197,9),t)}];
            function _a59_(sort,timestamp)
             {if(! _aeu_[1])
               {var
                 _a8M_=create_table(_adt_),
                 _a8N_=new_variable(_a8M_,_afQ_),
                 _a8O_=get_method_labels(_a8M_,_adv_),
                 _a8P_=_a8O_[1],
                 _a8Q_=_a8O_[2],
                 _a8R_=
                  function(self_1){var env=self_1[1 + _a8N_];return env[1]};
                set_methods
                 (_a8M_,
                  [0,
                   _a8Q_,
                   function(self_1){var env=self_1[1 + _a8N_];return env[2]},
                   _a8P_,
                   _a8R_]);
                var
                 _a8S_=
                  function(_a8T_)
                   {var _a8U_=create_object_opt(0,_a8M_);
                    _a8U_[1 + _a8N_] = _a8T_;
                    return _a8U_};
                init_class(_a8M_);
                _aeu_[1] = _a8S_}
              return caml_call1(_aeu_[1],[0,timestamp,sort])}
            function _a5__(_a8L_){return [0,_a59_,_a8L_]}
            function _a5$_(_a8K_){return symbol$20(_a5__,_a58_,_a8K_)}
            var
             block_query=
              seal(function(_a8J_){return symbol$20(_a5$_,_a57_,_a8J_)}),
             _a6a_=symbol$17(path$6,_afR_),
             block=
              caml_call3
               (post_service$0(_afS_,block_query),
                block_param_encoding,
                block_result_encoding,
                _a6a_),
             _a6b_=symbol$17(path$6,_afT_),
             _a6c_=list$1(0,arg$4(0,Next_proto[6])),
             _a6d_=list$1(0,next_operation_encoding),
             operations$0=
              caml_call3(post_service$0(_afU_,empty$4),_a6d_,_a6c_,_a6b_),
             Preapply=
              [0,
               path$6,
               block_result_encoding,
               block_param_encoding,
               block_query,
               block,
               operations$0];
            function destruct$1(s){return [0,s]}
            function construct$0(s){return s}
            var
             prefix_arg=make$4(0,_afV_,destruct$1,construct$0,0),
             _a6e_=symbol$18(symbol$17(path$5,_afW_),prefix_arg),
             _a6f_=list$1(0,output),
             complete=caml_call2(get_service$0(_afX_,empty$4),_a6f_,_a6e_),
             Helpers=[0,path$5,Forge,Preapply,complete],
             path$7=symbol$17(symbol$17(symbol$17(p,_af0_),_afZ_),_afY_);
            function construct$1(s){return s}
            function destruct$2(s){return [0,s]}
            var
             context_path_arg=
              make$4([0,descr$3],name$44,destruct$2,construct$1,0),
             _a6g_=
              [1,
               _af1_,
               0,
               int$4,
               function(t)
                {return caml_call1(caml_get_public_method(t,-685117181,10),t)}];
            function _a6h_(depth)
             {if(! _aev_[1])
               {var
                 _a8D_=create_table(shared$2),
                 _a8E_=new_variable(_a8D_,_af2_),
                 _a8F_=get_method_label(_a8D_,_af3_);
                set_method
                 (_a8D_,
                  _a8F_,
                  function(self_2){var env=self_2[1 + _a8E_];return env[1]});
                var
                 _a8G_=
                  function(_a8H_)
                   {var _a8I_=create_object_opt(0,_a8D_);
                    _a8I_[1 + _a8E_] = _a8H_;
                    return _a8I_};
                init_class(_a8D_);
                _aev_[1] = _a8G_}
              return caml_call1(_aev_[1],[0,depth])}
            function _a6i_(_a8C_){return [0,_a6h_,_a8C_]}
            var
             raw_context_query=
              seal(function(_a8B_){return symbol$20(_a6i_,_a6g_,_a8B_)}),
             _a6j_=symbol$19(path$7,context_path_arg),
             read=
              caml_call2
               (get_service$0(_af4_,raw_context_query),
                raw_context_encoding,
                _a6j_),
             Context=[0,path$7,context_path_arg,raw_context_query,read],
             info=
              caml_call2(get_service$0(_af5_,empty$4),block_info_encoding,p),
             _a6k_=arg$4(0,next_operation_encoding),
             _a6l_=[0,_af6_,caml_call1(Map[42],_a6k_),0,0],
             _a6m_=obj1([0,_af7_,error_encoding$0,0,0]),
             _a6n_=merge_objs(arg$4(0,next_operation_encoding),_a6m_),
             _a6o_=[0,_af8_,caml_call1(Map[42],_a6n_),0,0],
             _a6p_=obj1([0,_af9_,error_encoding$0,0,0]),
             _a6q_=merge_objs(arg$4(0,next_operation_encoding),_a6p_),
             _a6r_=[0,_af__,caml_call1(Map[42],_a6q_),0,0],
             _a6s_=obj1([0,_af$_,error_encoding$0,0,0]),
             _a6t_=merge_objs(arg$4(0,next_operation_encoding),_a6s_),
             _a6u_=[0,_aga_,caml_call1(Map[42],_a6t_),0,0],
             _a6v_=arg$4(0,Next_proto[4]),
             _a6w_=arg$4(0,shell_header_encoding$0),
             _a6x_=
              merge_objs
               (merge_objs(obj1([0,_agb_,encoding$20,0,0]),_a6w_),_a6v_),
             _a6y_=0;
            function _a6z_(param)
             {var
               protocol_data=param[2],
               match=param[1],
               shell=match[2],
               hash=match[1];
              return [0,hash,[0,shell,protocol_data]]}
            var
             _a6A_=
              obj5
               ([0,
                 _agc_,
                 list$1
                  (0,
                   conv
                    (function(param)
                      {var op=param[2],hash=param[1];
                       return [0,[0,hash,op[1]],op[2]]},
                     _a6z_,
                     _a6y_,
                     _a6x_)),
                 0,
                 0],
                _a6u_,
                _a6r_,
                _a6o_,
                _a6l_),
             _a6B_=0;
            function _a6C_(param)
             {var
               unprocessed=param[5],
               branch_delayed=param[4],
               branch_refused=param[3],
               refused=param[2],
               applied=param[1];
              return [0,
                      applied,
                      refused,
                      branch_refused,
                      branch_delayed,
                      unprocessed]}
            var
             encoding$0=
              conv
               (function(param)
                 {var
                   unprocessed=param[5],
                   branch_delayed=param[4],
                   branch_refused=param[3],
                   refused=param[2],
                   applied=param[1];
                  return [0,
                          applied,
                          refused,
                          branch_refused,
                          branch_delayed,
                          unprocessed]},
                _a6C_,
                _a6B_,
                _a6A_);
            function pending_operations(path)
             {var _a8A_=symbol$17(path,_agd_);
              return caml_call2(get_service$0(_age_,empty$4),encoding$0,_a8A_)}
            var
             _a6D_=
              [0,
               _agf_,
               _agg_,
               bool$4,
               1,
               function(t)
                {return caml_call1(caml_get_public_method(t,938614981,11),t)}],
             _a6E_=
              [0,
               _agh_,
               _agi_,
               bool$4,
               0,
               function(t)
                {return caml_call1(caml_get_public_method(t,384490291,12),t)}],
             _a6F_=
              [0,
               _agj_,
               _agk_,
               bool$4,
               0,
               function(t)
                {return caml_call1(caml_get_public_method(t,-282652400,13),t)}],
             _a6G_=
              [0,
               _agl_,
               _agm_,
               bool$4,
               1,
               function(t)
                {return caml_call1(caml_get_public_method(t,-835817155,14),t)}];
            function _a6H_(applied,refused,branch_refused,branch_delayed)
             {if(! _aew_[1])
               {var
                 _a8n_=create_table(_ads_),
                 _a8o_=new_variable(_a8n_,_agn_),
                 _a8p_=get_method_labels(_a8n_,_adu_),
                 _a8q_=_a8p_[1],
                 _a8r_=_a8p_[2],
                 _a8s_=_a8p_[3],
                 _a8t_=_a8p_[4],
                 _a8u_=
                  function(self_3){var env=self_3[1 + _a8o_];return env[1]},
                 _a8v_=
                  function(self_3){var env=self_3[1 + _a8o_];return env[2]},
                 _a8w_=
                  function(self_3){var env=self_3[1 + _a8o_];return env[3]};
                set_methods
                 (_a8n_,
                  [0,
                   _a8t_,
                   function(self_3){var env=self_3[1 + _a8o_];return env[4]},
                   _a8q_,
                   _a8w_,
                   _a8r_,
                   _a8v_,
                   _a8s_,
                   _a8u_]);
                var
                 _a8x_=
                  function(_a8y_)
                   {var _a8z_=create_object_opt(0,_a8n_);
                    _a8z_[1 + _a8o_] = _a8y_;
                    return _a8z_};
                init_class(_a8n_);
                _aew_[1] = _a8x_}
              return caml_call1
                      (_aew_[1],[0,branch_delayed,branch_refused,refused,applied])}
            function _a6I_(_a8m_){return [0,_a6H_,_a8m_]}
            function _a6J_(_a8l_){return symbol$20(_a6I_,_a6G_,_a8l_)}
            function _a6K_(_a8k_){return symbol$20(_a6J_,_a6F_,_a8k_)}
            function _a6L_(_a8j_){return symbol$20(_a6K_,_a6E_,_a8j_)}
            var
             mempool_query=
              seal(function(_a8i_){return symbol$20(_a6L_,_a6D_,_a8i_)});
            function monitor_operations(path)
             {var
               _a8g_=symbol$17(path,_ago_),
               _a8h_=list$1(0,next_operation_encoding);
              return caml_call2
                      (get_service$0(_agp_,mempool_query),_a8h_,_a8g_)}
            function get_filter(path)
             {var _a8f_=symbol$17(path,_agq_);
              return caml_call2(get_service$0(_agr_,empty$4),json$0,_a8f_)}
            function set_filter(path)
             {var _a8e_=symbol$17(path,_ags_);
              return caml_call3
                      (post_service$0(_agt_,empty$4),json$0,input$0,_a8e_)}
            function request_operations(path)
             {var _a8d_=symbol$17(path,_agu_);
              return caml_call3
                      (post_service$0(_agv_,empty$4),encoding,encoding,_a8d_)}
            var
             Mempool=
              [0,
               encoding$0,
               pending_operations,
               mempool_query,
               monitor_operations,
               get_filter,
               set_filter,
               request_operations],
             _a4U_=symbol$17(p,_ad3_),
             _a6M_=Set$0[45],
             live_blocks=caml_call2(get_service$0(_agw_,empty$4),_a6M_,_a4U_),
             S=
              [0,
               p,
               hash,
               header,
               raw_header,
               metadata,
               metadata_hash,
               protocols,
               Header,
               Operations,
               Operation_hashes,
               Operation_metadata_hashes,
               Helpers,
               Context,
               info,
               Mempool,
               live_blocks],
             path$8=prefix(path$1,path$2);
            function make_call0(s,ctxt,a,b,q,p)
             {var s$0=caml_call2(prefix$0,path$8,s);
              return caml_call2
                      (caml_call1(make_call(s$0,ctxt),[0,[0,0,a],b]),q,p)}
            function make_call1$0(s,ctxt,a,b,c,q,p)
             {var s$0=caml_call2(prefix$0,path$8,s);
              return caml_call2
                      (caml_call1(make_call(s$0,ctxt),[0,[0,[0,0,a],b],c]),q,p)}
            function make_call2(s,ctxt,a,b,c,d,q,p)
             {var s$0=caml_call2(prefix$0,path$8,s);
              return caml_call3
                      (make_call(s$0,ctxt),[0,[0,[0,[0,0,a],b],c],d],q,p)}
            function hash$0(ctxt)
             {var _a8a_=S[2];
              return function(opt,_a8b_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a8b_)var sth$0=_a8b_[1],block=sth$0;else var block=_agx_;
                if(typeof block !== "number" && num_803298286 === block[1])
                 {var _a8c_=block[2];
                  if(0 === _a8c_[2])
                   {var h=_a8c_[1];return caml_call1(return$3,h)}}
                return make_call0(_a8a_,ctxt,chain,block,0,0)}}
            function header$0(ctxt)
             {var _a7__=S[3];
              return function(opt,_a7$_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7$_)var sth$0=_a7$_[1],block=sth$0;else var block=_agy_;
                return make_call0(_a7__,ctxt,chain,block,0,0)}}
            function raw_header$0(ctxt)
             {var _a78_=S[4];
              return function(opt,_a79_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a79_)var sth$0=_a79_[1],block=sth$0;else var block=_agz_;
                return make_call0(_a78_,ctxt,chain,block,0,0)}}
            function metadata$0(ctxt)
             {var _a76_=S[5];
              return function(opt,_a77_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a77_)var sth$0=_a77_[1],block=sth$0;else var block=_agA_;
                return make_call0(_a76_,ctxt,chain,block,0,0)}}
            function metadata_hash$0(ctxt)
             {var _a74_=S[6];
              return function(opt,_a75_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a75_)var sth$0=_a75_[1],block=sth$0;else var block=_agB_;
                return make_call0(_a74_,ctxt,chain,block,0,0)}}
            function protocols$0(ctxt)
             {var _a72_=S[7];
              return function(opt,_a73_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a73_)var sth$0=_a73_[1],block=sth$0;else var block=_agC_;
                return make_call0(_a72_,ctxt,chain,block,0,0)}}
            function shell_header$0(ctxt)
             {var _a70_=S[8][2];
              return function(opt,_a71_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a71_)var sth$0=_a71_[1],block=sth$0;else var block=_agD_;
                return make_call0(_a70_,ctxt,chain,block,0,0)}}
            function protocol_data$0(ctxt)
             {var _a7Y_=S[8][3];
              return function(opt,_a7Z_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7Z_)var sth$0=_a7Z_[1],block=sth$0;else var block=_agE_;
                return make_call0(_a7Y_,ctxt,chain,block,0,0)}}
            function raw_protocol_data$0(ctxt)
             {var _a7W_=S[8][4];
              return function(opt,_a7X_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7X_)var sth$0=_a7X_[1],block=sth$0;else var block=_agF_;
                return make_call0(_a7W_,ctxt,chain,block,0,0)}}
            var
             Header$0=
              [0,shell_header$0,protocol_data$0,raw_protocol_data$0];
            function operations$1(ctxt)
             {var _a7U_=S[9][2];
              return function(opt,_a7V_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7V_)var sth$0=_a7V_[1],block=sth$0;else var block=_agG_;
                return make_call0(_a7U_,ctxt,chain,block,0,0)}}
            function operations_in_pass$0(ctxt)
             {var _a7S_=S[9][5];
              return function(opt,_a7T_,n)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7T_)var sth$0=_a7T_[1],block=sth$0;else var block=_agH_;
                return make_call1$0(_a7S_,ctxt,chain,block,n,0,0)}}
            function operation$0(ctxt)
             {var _a7Q_=S[9][6];
              return function(opt,_a7R_,n,m)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7R_)var sth$0=_a7R_[1],block=sth$0;else var block=_agI_;
                return make_call2(_a7Q_,ctxt,chain,block,n,m,0,0)}}
            var
             Operations$0=
              [0,operations$1,operations_in_pass$0,operation$0];
            function operation_hashes$0(ctxt)
             {var _a7O_=S[10][2];
              return function(opt,_a7P_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7P_)var sth$0=_a7P_[1],block=sth$0;else var block=_agJ_;
                return make_call0(_a7O_,ctxt,chain,block,0,0)}}
            function operation_hashes_in_pass$0(ctxt)
             {var _a7M_=S[10][3];
              return function(opt,_a7N_,n)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7N_)var sth$0=_a7N_[1],block=sth$0;else var block=_agK_;
                return make_call1$0(_a7M_,ctxt,chain,block,n,0,0)}}
            function operation_hash$0(ctxt)
             {var _a7K_=S[10][4];
              return function(opt,_a7L_,n,m)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7L_)var sth$0=_a7L_[1],block=sth$0;else var block=_agL_;
                return make_call2(_a7K_,ctxt,chain,block,n,m,0,0)}}
            var
             Operation_hashes$0=
              [0,
               operation_hashes$0,
               operation_hashes_in_pass$0,
               operation_hash$0];
            function root$0(ctxt)
             {var _a7I_=S[11][1];
              return function(opt,_a7J_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7J_)var sth$0=_a7J_[1],block=sth$0;else var block=_agM_;
                return make_call0(_a7I_,ctxt,chain,block,0,0)}}
            function operation_metadata_hashes$0(ctxt)
             {var _a7G_=S[11][3];
              return function(opt,_a7H_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7H_)var sth$0=_a7H_[1],block=sth$0;else var block=_agN_;
                return make_call0(_a7G_,ctxt,chain,block,0,0)}}
            function operation_metadata_hashes_in_p$0(ctxt)
             {var _a7E_=S[11][4];
              return function(opt,_a7F_,n)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7F_)var sth$0=_a7F_[1],block=sth$0;else var block=_agO_;
                return make_call1$0(_a7E_,ctxt,chain,block,n,0,0)}}
            function operation_metadata_hash$0(ctxt)
             {var _a7C_=S[11][5];
              return function(opt,_a7D_,n,m)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7D_)var sth$0=_a7D_[1],block=sth$0;else var block=_agP_;
                return make_call2(_a7C_,ctxt,chain,block,n,m,0,0)}}
            var
             Operation_metadata_hashes$0=
              [0,
               root$0,
               operation_metadata_hashes$0,
               operation_metadata_hashes_in_p$0,
               operation_metadata_hash$0];
            function read$0(ctxt)
             {var _a7t_=S[13][4];
              return function(opt,_a7u_,depth,path)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7u_)var sth$0=_a7u_[1],block=sth$0;else var block=_agS_;
                var _a7v_=0;
                if(! _aex_[1])
                 {var
                   _a7w_=create_table(shared$2),
                   _a7x_=new_variable(_a7w_,_agQ_),
                   _a7y_=get_method_label(_a7w_,_agR_);
                  set_method
                   (_a7w_,
                    _a7y_,
                    function(self_4){var env=self_4[1 + _a7x_];return env[1]});
                  var
                   _a7z_=
                    function(_a7A_)
                     {var _a7B_=create_object_opt(0,_a7w_);
                      _a7B_[1 + _a7x_] = _a7A_;
                      return _a7B_};
                  init_class(_a7w_);
                  _aex_[1] = _a7z_}
                return make_call1$0
                        (_a7t_,
                         ctxt,
                         chain,
                         block,
                         path,
                         caml_call1(_aex_[1],[0,depth]),
                         _a7v_)}}
            var Context$0=[0,read$0];
            function block_header$0(ctxt)
             {var _a7r_=S[12][2][1];
              return function(opt,_a7s_,header)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7s_)var sth$0=_a7s_[1],block=sth$0;else var block=_agT_;
                return make_call0(_a7r_,ctxt,chain,block,0,header)}}
            var Forge$0=[0,block_header$0];
            function block$0(ctxt)
             {var _a7e_=S[12][3][5];
              return function
               (opt,_a7g_,_a7f_,timestamp,protocol_data,operations)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7g_)var sth$0=_a7g_[1],block=sth$0;else var block=_agV_;
                if(_a7f_)var sth$1=_a7f_[1],sort=sth$1;else var sort=0;
                var _a7h_=[0,protocol_data,operations];
                if(! _aey_[1])
                 {var
                   _a7i_=create_table(_adt_),
                   _a7j_=new_variable(_a7i_,_agU_),
                   _a7k_=get_method_labels(_a7i_,_adv_),
                   _a7l_=_a7k_[1],
                   _a7m_=_a7k_[2],
                   _a7n_=
                    function(self_5){var env=self_5[1 + _a7j_];return env[1]};
                  set_methods
                   (_a7i_,
                    [0,
                     _a7m_,
                     function(self_5){var env=self_5[1 + _a7j_];return env[2]},
                     _a7l_,
                     _a7n_]);
                  var
                   _a7o_=
                    function(_a7p_)
                     {var _a7q_=create_object_opt(0,_a7i_);
                      _a7q_[1 + _a7j_] = _a7p_;
                      return _a7q_};
                  init_class(_a7i_);
                  _aey_[1] = _a7o_}
                return make_call0
                        (_a7e_,
                         ctxt,
                         chain,
                         block,
                         caml_call1(_aey_[1],[0,timestamp,sort]),
                         _a7h_)}}
            function operations$2(ctxt)
             {var _a7c_=S[12][3][6];
              return function(opt,_a7d_,operations)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7d_)var sth$0=_a7d_[1],block=sth$0;else var block=_agW_;
                return make_call0(_a7c_,ctxt,chain,block,0,operations)}}
            var Preapply$0=[0,block$0,operations$2];
            function complete$0(ctxt)
             {var _a7a_=S[12][4];
              return function(opt,_a7b_,s)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a7b_)var sth$0=_a7b_[1],block=sth$0;else var block=_agX_;
                return make_call1$0(_a7a_,ctxt,chain,block,s,0,0)}}
            var Helpers$0=[0,Forge$0,Preapply$0,complete$0];
            function info$0(ctxt)
             {var _a6__=S[14];
              return function(opt,_a6$_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a6$_)var sth$0=_a6$_[1],block=sth$0;else var block=_agY_;
                return make_call0(_a6__,ctxt,chain,block,0,0)}}
            function pending_operations$0(ctxt,opt,param)
             {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
              var _a69_=mempool_path(path$1),s=caml_call1(S[15][2],_a69_);
              return caml_call2(make_call1(s,ctxt,chain),0,0)}
            function monitor_operations$0
             (ctxt,opt,_a6U_,_a6T_,_a6S_,_a6R_,param)
             {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
              if(_a6U_)var sth$0=_a6U_[1],applied=sth$0;else var applied=1;
              if(_a6T_)
               var sth$1=_a6T_[1],branch_delayed=sth$1;
              else
               var branch_delayed=1;
              if(_a6S_)
               var sth$2=_a6S_[1],branch_refused=sth$2;
              else
               var branch_refused=0;
              if(_a6R_)var sth$3=_a6R_[1],refused=sth$3;else var refused=0;
              var _a6V_=mempool_path(path$1),s=caml_call1(S[15][4],_a6V_),i=0;
              if(! _aez_[1])
               {var
                 _a6W_=create_table(_ads_),
                 _a6X_=new_variable(_a6W_,_agZ_),
                 _a6Y_=get_method_labels(_a6W_,_adu_),
                 _a6Z_=_a6Y_[1],
                 _a60_=_a6Y_[2],
                 _a61_=_a6Y_[3],
                 _a62_=_a6Y_[4],
                 _a63_=
                  function(self_6){var env=self_6[1 + _a6X_];return env[1]},
                 _a64_=
                  function(self_6){var env=self_6[1 + _a6X_];return env[2]},
                 _a65_=
                  function(self_6){var env=self_6[1 + _a6X_];return env[3]};
                set_methods
                 (_a6W_,
                  [0,
                   _a62_,
                   function(self_6){var env=self_6[1 + _a6X_];return env[4]},
                   _a6Z_,
                   _a65_,
                   _a60_,
                   _a64_,
                   _a61_,
                   _a63_]);
                var
                 _a66_=
                  function(_a67_)
                   {var _a68_=create_object_opt(0,_a6W_);
                    _a68_[1 + _a6X_] = _a67_;
                    return _a68_};
                init_class(_a6W_);
                _aez_[1] = _a66_}
              var
               q=
                caml_call1
                 (_aez_[1],[0,branch_delayed,branch_refused,refused,applied]),
               p=[0,0,chain],
               match=create$8(0),
               push=match[2],
               stream=match[1];
              function on_chunk(v){return caml_call1(push,[0,v])}
              function on_close(param){return caml_call1(push,0)}
              function _a6Q_(close)
               {return caml_call1(return$3,[0,stream,close])}
              return caml_call2
                      (symbol$13,
                       caml_call7
                        (caml_get_public_method(ctxt,num_131416682,2),
                         ctxt,
                         s,
                         on_chunk,
                         on_close,
                         p,
                         q,
                         i),
                       _a6Q_)}
            function request_operations$0(ctxt,opt,param)
             {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
              var _a6P_=mempool_path(path$1),s=caml_call1(S[15][7],_a6P_);
              return caml_call2(make_call1(s,ctxt,chain),0,0)}
            var
             Mempool$0=
              [0,
               pending_operations$0,
               monitor_operations$0,
               request_operations$0];
            function live_blocks$0(ctxt)
             {var _a6N_=S[16];
              return function(opt,_a6O_,param)
               {if(opt)var sth=opt[1],chain=sth;else var chain=num_858743897;
                if(_a6O_)var sth$0=_a6O_[1],block=sth$0;else var block=_ag0_;
                return make_call0(_a6N_,ctxt,chain,block,0,0)}}
            return [0,
                    protocol_hash,
                    next_protocol_hash,
                    raw_block_header_encoding,
                    block_header_encoding,
                    block_metadata_encoding,
                    next_operation_encoding,
                    operation_data_encoding,
                    operation_encoding$0,
                    block_info_encoding,
                    S,
                    path$8,
                    make_call0,
                    make_call1$0,
                    make_call2,
                    hash$0,
                    header$0,
                    raw_header$0,
                    metadata$0,
                    metadata_hash$0,
                    protocols$0,
                    Header$0,
                    Operations$0,
                    Operation_hashes$0,
                    Operation_metadata_hashes$0,
                    Context$0,
                    Helpers$0,
                    info$0,
                    Mempool$0,
                    live_blocks$0]}
          (Proto));
        register_printer
         (function(exn)
           {if
             (exn[1]
              !==
              Cannot_parse
              &&
              exn[1]
              !==
              Dangling_reference
              &&
              exn[1]
              !==
              Bad_reference
              &&
              exn[1]
              !==
              Unexpected
              &&
              exn[1]
              !==
              Duplicate_definition)
             return 0;
            function _a4I_(ppf)
             {var _a4J_=0;
              return function(_a4K_){return print_error(_a4J_,ppf,_a4K_)}}
            return [0,caml_call2(strf(_ag4_),_a4I_,exn)]});
        var
         _ag8_=
          obj3
           ([0,_ag7_,encoding$3,0,0],
            [0,_ag6_,encoding$4,0,0],
            opt$2(0,0,_ag5_,encoding$40)),
         _ag9_=0,
         _ag__=
          function(param)
           {var peer=param[3],chain_id=param[2],block=param[1];
            return [0,chain_id,block,peer]},
         encoding$61=
          conv
           (function(param)
             {var peer=param[3],block=param[2],chain_id=param[1];
              return [0,block,chain_id,peer]},
            _ag__,
            _ag9_,
            _ag8_),
         _ag$_=0,
         _aha_=
          function(param)
           {var err=param[3],s=param[2],r=param[1];return [1,r,s,err]},
         _ahb_=
          function(param)
           {if(1 === param[0])
             {var err=param[3],s=param[2],r=param[1];return [0,[0,r,s,err]]}
            return 0},
         _ahh_=
          [0,
           [0,
            _ahg_,
            0,
            obj3
             ([0,_ahe_,encoding$61,0,0],
              [0,_ahd_,request_status_encoding,0,0],
              [2,_ahc_,error_encoding$0,0,0,0]),
            _ahb_,
            _aha_,
            _ahf_],
           _ag$_],
         _ahi_=function(param){var s=param[2],r=param[1];return [0,r,s]},
         _ahj_=
          function(param)
           {if(0 === param[0]){var s=param[2],r=param[1];return [0,[0,r,s]]}
            return 0},
         _aho_=
          [0,
           [0,
            _ahn_,
            0,
            obj2
             ([0,_ahl_,encoding$61,0,0],[0,_ahk_,request_status_encoding,0,0]),
            _ahj_,
            _ahi_,
            _ahm_],
           _ahh_],
         _ahp_=function(msg){return [2,msg]},
         _ahq_=
          function(param)
           {if(2 === param[0]){var msg=param[1];return [0,msg]}return 0},
         encoding$62=
          union$0
           (0,
            [0,[0,_aht_,0,obj1([0,_ahr_,output,0,0]),_ahq_,_ahp_,_ahs_],_aho_]),
         sync_status_encoding=def$0(_ahw_,0,_ahv_,string_enum(_ahu_)),
         _ahx_=0,
         _ahy_=
          function(param)
           {var
             most_recent_validation=param[3],
             max_head_time=param[2],
             min_head_time=param[1];
            return [4,min_head_time,max_head_time,most_recent_validation]},
         _ahz_=
          function(param)
           {if(typeof param !== "number" && 4 === param[0])
             {var
               most_recent_validation=param[3],
               max_head_time=param[2],
               min_head_time=param[1];
              return [0,
                      [0,min_head_time,max_head_time,most_recent_validation]]}
            return 0},
         _ahF_=
          [0,
           [0,
            _ahE_,
            0,
            obj3
             ([0,_ahC_,encoding$29,0,0],
              [0,_ahB_,encoding$29,0,0],
              [0,_ahA_,encoding$29,0,0]),
            _ahz_,
            _ahy_,
            _ahD_],
           _ahx_],
         _ahG_=
          function(param)
           {var needed=param[2],active=param[1];return [3,active,needed]},
         _ahH_=
          function(param)
           {if(typeof param !== "number" && 3 === param[0])
             {var needed=param[2],active=param[1];
              return [0,[0,active,needed]]}
            return 0},
         _ahM_=
          [0,
           [0,
            _ahL_,
            0,
            obj2([0,_ahJ_,int31$0,0,0],[0,_ahI_,int31$0,0,0]),
            _ahH_,
            _ahG_,
            _ahK_],
           _ahF_],
         _ahN_=function(sync_status){return [2,sync_status]},
         _ahQ_=
          [0,
           [0,
            _ahP_,
            0,
            sync_status_encoding,
            function(param)
             {if(typeof param !== "number" && 2 === param[0])
               {var sync_status=param[1];return [0,sync_status]}
              return 0},
            _ahN_,
            _ahO_],
           _ahM_],
         _ahR_=function(param){return 0},
         _ahV_=
          [0,
           [0,
            _ahU_,
            0,
            input$0,
            function(param){return typeof param === "number"?_ahS_:0},
            _ahR_,
            _ahT_],
           _ahQ_],
         _ahW_=function(err){return [1,err]},
         _ahZ_=
          [0,
           [0,
            _ahY_,
            0,
            error_encoding$0,
            function(param)
             {if(typeof param !== "number" && 1 === param[0])
               {var err=param[1];return [0,err]}
              return 0},
            _ahW_,
            _ahX_],
           _ahV_],
         _ah0_=
          function(param)
           {var
             timestamp=param[6],
             level=param[5],
             fitness=param[4],
             update=param[3],
             request_status=param[2],
             request=param[1];
            return [0,request,request_status,update,fitness,level,timestamp]},
         _ah1_=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var
               timestamp=param[6],
               level=param[5],
               fitness=param[4],
               update=param[3],
               request_status=param[2],
               request=param[1];
              return [0,
                      [0,request,request_status,update,fitness,level,timestamp]]}
            return 0},
         encoding$63=
          union$0
           (0,
            [0,
             [0,
              _ah__,
              0,
              obj6
               ([0,_ah8_,encoding$3,0,0],
                [0,_ah7_,request_status_encoding,0,0],
                [0,_ah6_,string_enum(_ah5_),0,0],
                [0,_ah4_,encoding$32,0,0],
                [0,_ah3_,int32$1,0,0],
                [0,_ah2_,encoding$29,0,0]),
              _ah1_,
              _ah0_,
              _ah9_],
             _ahZ_]);
        obj2([0,_aia_,bool$1,0,0],[0,_ah$_,list$1(0,encoding$40),0,0]);
        var
         _aid_=obj2([0,_aic_,int31$0,0,0],[0,_aib_,int31$0,0,0]),
         _aie_=0,
         _aif_=
          function(param)
           {var scheduler_length=param[2],table_length=param[1];
            return [0,table_length,scheduler_length]},
         table_scheduler_encoding=
          conv
           (function(param)
             {var scheduler_length=param[2],table_length=param[1];
              return [0,table_length,scheduler_length]},
            _aif_,
            _aie_,
            _aid_),
         _ain_=
          obj7
           ([0,_aim_,int31$0,0,0],
            [0,_ail_,int31$0,0,0],
            [0,_aik_,table_scheduler_encoding,0,0],
            [0,_aij_,table_scheduler_encoding,0,0],
            [0,_aii_,table_scheduler_encoding,0,0],
            [0,_aih_,int31$0,0,0],
            [0,_aig_,int31$0,0,0]),
         _aio_=0,
         _aip_=
          function(param)
           {var
             active_peers_length=param[7],
             active_connections_length=param[6],
             block_header_db=param[5],
             operations_db=param[4],
             operation_db=param[3],
             active_chains_length=param[2],
             p2p_readers_length=param[1];
            return [0,
                    p2p_readers_length,
                    active_chains_length,
                    operation_db,
                    operations_db,
                    block_header_db,
                    active_connections_length,
                    active_peers_length]},
         encoding$64=
          conv
           (function(param)
             {var
               active_peers_length=param[7],
               active_connections_length=param[6],
               block_header_db=param[5],
               operations_db=param[4],
               operation_db=param[3],
               active_chains_length=param[2],
               p2p_readers_length=param[1];
              return [0,
                      p2p_readers_length,
                      active_chains_length,
                      operation_db,
                      operations_db,
                      block_header_db,
                      active_connections_length,
                      active_peers_length]},
            _aip_,
            _aio_,
            _ain_),
         encoding$65=string_enum(_aiq_),
         pp$35=
          function(ppf,param)
           {switch(param)
             {case 0:return caml_call1(pf(ppf),_air_);
              case 1:return caml_call1(pf(ppf),_ais_);
              default:return caml_call1(pf(ppf),_ait_)}};
        def(0,_aiu_,pp$35);
        var
         checkpoint_encoding=
          obj4
           ([0,_aiy_,encoding$33,0,0],
            [0,_aix_,int32$1,0,0],
            [0,_aiw_,int32$1,0,0],
            [0,_aiv_,encoding$65,0,0]),
         _aiC_=
          obj3
           ([0,_aiB_,encoding$3,0,0],
            [0,_aiA_,int32$1,0,0],
            [0,_aiz_,error_encoding$0,0,0]),
         _aiD_=0,
         _aiE_=
          function(param)
           {var errors=param[3],level=param[2],hash=param[1];
            return [0,hash,level,errors]},
         invalid_block_encoding=
          conv
           (function(param)
             {var errors=param[3],level=param[2],hash=param[1];
              return [0,hash,level,errors]},
            _aiE_,
            _aiD_,
            _aiC_),
         bootstrap_encoding=
          obj2([0,_aiG_,bool$1,0,0],[0,_aiF_,sync_status_encoding,0,0]),
         _aiI_=symbol$17(p,_aiH_),
         s$0=caml_call2(get_service$0(_aiJ_,empty$4),encoding$4,_aiI_),
         _aiL_=symbol$17(p,_aiK_);
        caml_call2(get_service$0(_aiM_,empty$4),checkpoint_encoding,_aiL_);
        var _aiO_=symbol$17(p,_aiN_);
        caml_call2(get_service$0(_aiP_,empty$4),bootstrap_encoding,_aiO_);
        var bootstrapped_flag_encoding=obj1([0,_aiQ_,bool$1,0,0]);
        caml_call3
         (patch_service$0(_aiR_,empty$4),bootstrapped_flag_encoding,input$0,p);
        var
         _aiU_=
          [1,
           _aiS_,
           _aiT_,
           rpc_arg$3,
           function(x)
            {return caml_call1(caml_get_public_method(x,-646025413,15),x)}],
         _aiX_=
          [3,
           _aiV_,
           _aiW_,
           rpc_arg,
           function(x)
            {return caml_call1(caml_get_public_method(x,616092499,16),x)}],
         _ai1_=[0,0,0,0],
         _ai0_=
          [1,
           _aiY_,
           _aiZ_,
           int$4,
           function(x)
            {return caml_call1(caml_get_public_method(x,520590566,17),x)}],
         _ai2_=
          function(length,heads,min_date)
           {if(! _ai1_[1])
             {var
               _a4x_=create_table(shared$3),
               _a4y_=new_variable(_a4x_,_ai3_),
               _a4z_=get_method_labels(_a4x_,shared$3),
               _a4A_=_a4z_[1],
               _a4B_=_a4z_[2],
               _a4C_=_a4z_[3],
               _a4D_=function(self_1){var env=self_1[1 + _a4y_];return env[1]},
               _a4E_=function(self_1){var env=self_1[1 + _a4y_];return env[2]};
              set_methods
               (_a4x_,
                [0,
                 _a4B_,
                 function(self_1){var env=self_1[1 + _a4y_];return env[3]},
                 _a4C_,
                 _a4E_,
                 _a4A_,
                 _a4D_]);
              var
               _a4F_=
                function(_a4G_)
                 {var _a4H_=create_object_opt(0,_a4x_);
                  _a4H_[1 + _a4y_] = _a4G_;
                  return _a4H_};
              init_class(_a4x_);
              _ai1_[1] = _a4F_}
            return caml_call1(_ai1_[1],[0,min_date,heads,length])},
         _ai4_=function(_a4w_){return [0,_ai2_,_a4w_]},
         _ai5_=function(_a4v_){return symbol$20(_ai4_,_ai0_,_a4v_)},
         _ai6_=function(_a4u_){return symbol$20(_ai5_,_aiX_,_a4u_)},
         list_query=seal(function(_a4t_){return symbol$20(_ai6_,_aiU_,_a4t_)}),
         path$3=symbol$17(p,_ai7_),
         _ai8_=list$1(0,list$1(0,encoding$3));
        caml_call2(get_service$0(_ai9_,list_query),_ai8_,path$3);
        var path$4=symbol$17(p,_ai__),_ai$_=list$1(0,invalid_block_encoding);
        caml_call2(get_service$0(_aja_,empty$4),_ai$_,path$4);
        var _ajb_=symbol$18(path$4,rpc_arg);
        caml_call2(get_service$0(_ajc_,empty$4),invalid_block_encoding,_ajb_);
        var _ajd_=symbol$18(path$4,rpc_arg);
        caml_call2(delete_service$0(_aje_,empty$4),encoding,_ajd_);
        var
         _ajf_=0,
         _ajg_=function(param){var l=param[3],h=param[2];return [1,h,l]},
         _ajh_=
          function(param)
           {if(0 === param[0])return 0;
            var l=param[2],h=param[1];
            return [0,[0,0,h,l]]},
         _ajo_=
          [0,
           [0,
            _ajn_,
            0,
            obj3
             ([0,_ajl_,constant(_ajk_),0,0],
              [0,_ajj_,encoding$3,0,0],
              [0,_aji_,int31$0,0,0]),
            _ajh_,
            _ajg_,
            _ajm_],
           _ajf_],
         _ajp_=function(param){var h=param[2];return [0,h]},
         _ajq_=
          function(param)
           {if(0 === param[0]){var h=param[1];return [0,[0,0,h]]}return 0},
         encoding$66=
          union$0
           (0,
            [0,
             [0,
              _ajv_,
              0,
              obj2([0,_ajt_,constant(_ajs_),0,0],[0,_ajr_,encoding$3,0,0]),
              _ajq_,
              _ajp_,
              _aju_],
             _ajo_]),
         _ajw_=0,
         _ajx_=
          function(param)
           {var t=param[3],req=param[2],errs=param[1];
            return [0,[0,req,t,[0,errs]]]},
         _ajy_=
          function(param)
           {if(0 === param[0])
             {var _a4r_=param[1],_a4s_=_a4r_[3];
              if(_a4s_)
               {var errs=_a4s_[1],t=_a4r_[2],req=_a4r_[1];
                return [0,[0,errs,req,t]]}}
            return 0},
         _ajE_=
          [0,
           [0,
            _ajD_,
            0,
            obj3
             ([0,_ajB_,error_encoding$0,0,0],
              [0,_ajA_,encoding$66,0,0],
              [0,_ajz_,request_status_encoding,0,0]),
            _ajy_,
            _ajx_,
            _ajC_],
           _ajw_],
         _ajF_=
          function(param){var t=param[2],req=param[1];return [0,[0,req,t,0]]},
         _ajG_=
          function(param)
           {if(0 === param[0])
             {var _a4q_=param[1];
              if(! _a4q_[3]){var t=_a4q_[2],req=_a4q_[1];return [0,[0,req,t]]}}
            return 0},
         _ajL_=
          [0,
           [0,
            _ajK_,
            0,
            obj2
             ([0,_ajI_,encoding$66,0,0],[0,_ajH_,request_status_encoding,0,0]),
            _ajG_,
            _ajF_,
            _ajJ_],
           _ajE_],
         _ajM_=function(msg){return [1,msg]},
         _ajN_=
          function(param)
           {if(0 === param[0])return 0;var msg=param[1];return [0,msg]},
         encoding$67=
          union$0
           (0,
            [0,[0,_ajQ_,0,obj1([0,_ajO_,output,0,0]),_ajN_,_ajM_,_ajP_],_ajL_]),
         _ajT_=obj2([0,_ajS_,int31$0,0,0],[0,_ajR_,int31$0,0,0]),
         _ajU_=0,
         _ajV_=
          function(param)
           {var fetched_block_length=param[2],fetched_header_length=param[1];
            return [0,fetched_header_length,fetched_block_length]},
         pipeline_length_encoding=
          conv
           (function(param)
             {var
               fetched_block_length=param[2],
               fetched_header_length=param[1];
              return [0,fetched_header_length,fetched_block_length]},
            _ajV_,
            _ajU_,
            _ajT_);
        obj3
         ([0,_ajY_,pipeline_length_encoding,0,0],
          [0,_ajX_,encoding$3,0,0],
          [0,_ajW_,encoding$3,0,0]);
        var
         _ajZ_=0,
         _aj0_=function(param){return _aj1_},
         _aj2_=
          function(param)
           {var _a4p_=param[1];
            if(typeof _a4p_ === "number" && 0 === _a4p_)return _aj3_;
            return 0},
         _aj8_=
          [0,
           [0,_aj7_,0,obj1([0,_aj5_,constant(_aj4_),0,0]),_aj2_,_aj0_,_aj6_],
           _ajZ_],
         _aj9_=function(param){return _aj__},
         _aj$_=
          function(param)
           {var _a4o_=param[1];
            if(typeof _a4o_ === "number" && 0 !== _a4o_)return _aka_;
            return 0},
         _akf_=
          [0,
           [0,_ake_,0,obj1([0,_akc_,constant(_akb_),0,0]),_aj$_,_aj9_,_akd_],
           _aj8_],
         _akg_=
          function(param){var op=param[3],oph=param[2];return [0,[3,oph,op]]},
         _akh_=
          function(param)
           {var _a4n_=param[1];
            if(typeof _a4n_ !== "number" && 3 === _a4n_[0])
             {var op=_a4n_[2],oph=_a4n_[1];return [0,[0,0,oph,op]]}
            return 0},
         _ako_=
          [0,
           [0,
            _akn_,
            0,
            obj3
             ([0,_akl_,constant(_akk_),0,0],
              [0,_akj_,encoding$20,0,0],
              [0,_aki_,encoding$54,0,0]),
            _akh_,
            _akg_,
            _akm_],
           _akf_],
         _akp_=function(param){var op=param[2];return [0,[2,op]]},
         _akq_=
          function(param)
           {var _a4m_=param[1];
            if(typeof _a4m_ !== "number" && 2 === _a4m_[0])
             {var op=_a4m_[1];return [0,[0,0,op]]}
            return 0},
         _akw_=
          [0,
           [0,
            _akv_,
            0,
            obj2([0,_akt_,constant(_aks_),0,0],[0,_akr_,encoding$54,0,0]),
            _akq_,
            _akp_,
            _aku_],
           _ako_],
         _akx_=
          function(param)
           {var mempool=param[3],peer=param[2];return [0,[1,peer,mempool]]},
         _aky_=
          function(param)
           {var _a4l_=param[1];
            if(typeof _a4l_ !== "number" && 1 === _a4l_[0])
             {var mempool=_a4l_[2],peer=_a4l_[1];
              return [0,[0,0,peer,mempool]]}
            return 0},
         _akF_=
          [0,
           [0,
            _akE_,
            0,
            obj3
             ([0,_akC_,constant(_akB_),0,0],
              [0,_akA_,encoding$40,0,0],
              [0,_akz_,encoding$53,0,0]),
            _aky_,
            _akx_,
            _akD_],
           _akw_],
         _akG_=function(param){var hash=param[2];return [0,[0,hash]]},
         _akH_=
          function(param)
           {var _a4k_=param[1];
            if(typeof _a4k_ !== "number" && 0 === _a4k_[0])
             {var hash=_a4k_[1];return [0,[0,0,hash]]}
            return 0},
         encoding$68=
          union$0
           (0,
            [0,
             [0,
              _akM_,
              0,
              obj2([0,_akK_,constant(_akJ_),0,0],[0,_akI_,encoding$3,0,0]),
              _akH_,
              _akG_,
              _akL_],
             _akF_]),
         _akN_=0,
         _akO_=
          function(param)
           {var t=param[3],req=param[2],errs=param[1];
            return [0,[0,req,t,[0,errs]]]},
         _akP_=
          function(param)
           {if(0 === param[0])
             {var _a4i_=param[1],_a4j_=_a4i_[3];
              if(_a4j_)
               {var errs=_a4j_[1],t=_a4i_[2],req=_a4i_[1];
                return [0,[0,errs,req,t]]}}
            return 0},
         _akV_=
          [0,
           [0,
            _akU_,
            0,
            obj3
             ([0,_akS_,error_encoding$0,0,0],
              [0,_akR_,encoding$68,0,0],
              [0,_akQ_,request_status_encoding,0,0]),
            _akP_,
            _akO_,
            _akT_],
           _akN_],
         _akW_=
          function(param){var t=param[2],req=param[1];return [0,[0,req,t,0]]},
         _akX_=
          function(param)
           {if(0 === param[0])
             {var _a4h_=param[1];
              if(! _a4h_[3]){var t=_a4h_[2],req=_a4h_[1];return [0,[0,req,t]]}}
            return 0},
         _ak2_=
          [0,
           [0,
            _ak1_,
            0,
            obj2
             ([0,_akZ_,encoding$68,0,0],[0,_akY_,request_status_encoding,0,0]),
            _akX_,
            _akW_,
            _ak0_],
           _akV_],
         _ak3_=function(msg){return [1,msg]},
         _ak4_=
          function(param)
           {if(0 === param[0])return 0;var msg=param[1];return [0,msg]},
         encoding$69=
          union$0
           (0,
            [0,[0,_ak7_,0,obj1([0,_ak5_,output,0,0]),_ak4_,_ak3_,_ak6_],_ak2_]),
         _ak9_=[0,_ak8_,Set$1[45],0,0],
         _ak$_=[0,_ak__,list$1(0,encoding$20),0,0];
        obj6
         ([0,_ald_,encoding$3,0,0],
          [0,_alc_,encoding$31,0,0],
          [0,_alb_,Set$1[45],0,0],
          [0,_ala_,Set$1[45],0,0],
          _ak$_,
          _ak9_);
        var
         _alg_=symbol$17(symbol$17(root$0,_alf_),_ale_),
         _alj_=[0,_ali_,worker_information_encoding(error_encoding$0),0,0],
         _alm_=
          list$1
           (0,
            obj4
             ([0,_all_,encoding$4,0,0],
              [0,_alk_,worker_status_encoding(error_encoding$0),0,0],
              _alj_,
              [0,_alh_,int16$0,0,0]));
        caml_call2(get_service$0(_aln_,empty$4),_alm_,_alg_);
        var
         _alq_=symbol$18(symbol$17(symbol$17(root$0,_alp_),_alo_),chain_arg),
         _alr_=full_status_encoding(encoding$68,encoding$69,error_encoding$0);
        caml_call2(get_service$0(_als_,empty$4),_alr_,_alq_);
        var
         _alv_=symbol$17(symbol$17(root$0,_alu_),_alt_),
         _alw_=full_status_encoding(encoding$61,encoding$62,error_encoding$0);
        caml_call2(get_service$0(_alx_,empty$4),_alw_,_alv_);
        var
         _alB_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_alA_),_alz_),chain_arg),
            _aly_),
         _alE_=[0,_alD_,worker_information_encoding(error_encoding$0),0,0],
         _alH_=
          list$1
           (0,
            obj4
             ([0,_alG_,encoding$40,0,0],
              [0,_alF_,worker_status_encoding(error_encoding$0),0,0],
              _alE_,
              [0,_alC_,pipeline_length_encoding,0,0]));
        caml_call2(get_service$0(_alI_,empty$4),_alH_,_alB_);
        var
         _alM_=
          symbol$18
           (symbol$17
             (symbol$18(symbol$17(symbol$17(root$0,_alL_),_alK_),chain_arg),
              _alJ_),
            rpc_arg$6),
         _alN_=full_status_encoding(encoding$66,encoding$67,error_encoding$0);
        caml_call2(get_service$0(_alO_,empty$4),_alN_,_alM_);
        var
         _alR_=symbol$17(symbol$17(root$0,_alQ_),_alP_),
         _alU_=[0,_alT_,worker_information_encoding(error_encoding$0),0,0],
         _alX_=
          list$1
           (0,
            obj4
             ([0,_alW_,encoding$4,0,0],
              [0,_alV_,worker_status_encoding(error_encoding$0),0,0],
              _alU_,
              [0,_alS_,int16$0,0,0]));
        caml_call2(get_service$0(_alY_,empty$4),_alX_,_alR_);
        var
         _al1_=symbol$18(symbol$17(symbol$17(root$0,_al0_),_alZ_),chain_arg),
         _al2_=full_status_encoding(encoding$3,encoding$63,error_encoding$0);
        caml_call2(get_service$0(_al3_,empty$4),_al2_,_al1_);
        var
         _al7_=
          symbol$17
           (symbol$18(symbol$17(symbol$17(root$0,_al6_),_al5_),chain_arg),
            _al4_);
        caml_call2(get_service$0(_al8_,empty$4),encoding$64,_al7_);
        var _al__=symbol$17(root$0,_al9_);
        caml_call2(get_service$0(_al$_,empty$4),encoding$60,_al__);
        var
         Parse_error$5=[num_248,_ama_,caml_fresh_oo_id(0)],
         Too_many_operations=[num_248,_amb_,caml_fresh_oo_id(0)],
         Oversized_operation=[num_248,_amc_,caml_fresh_oo_id(0)],
         Future_block_header=[num_248,_amd_,caml_fresh_oo_id(0)],
         Cannot_serialize_operation_met=[num_248,_ame_,caml_fresh_oo_id(0)],
         _amf_=function(param){return Parse_error$5},
         _amg_=function(param){return param === Parse_error$5?_amh_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aml_,
          _amk_,
          _amj_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_ami_)}],
          encoding,
          _amg_,
          _amf_);
        var
         _amm_=function(param){return Too_many_operations},
         _amn_=function(param){return param === Too_many_operations?_amo_:0};
        caml_call8
         (register_error_kind,
          num_103274127,
          _ams_,
          _amr_,
          _amq_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_amp_)}],
          encoding,
          _amn_,
          _amm_);
        var
         _amt_=
          function(param)
           {var max=param[2],size=param[1];
            return [0,Oversized_operation,size,max]},
         _amu_=
          function(param)
           {if(param[1] === Oversized_operation)
             {var max=param[3],size=param[2];return [0,[0,size,max]]}
            return 0},
         _amx_=obj2([0,_amw_,int31$0,0,0],[0,_amv_,int31$0,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _amB_,
          _amA_,
          _amz_,
          [0,
           function(ppf,param)
            {var max=param[2],size=param[1];
             return caml_call3(pf(ppf),_amy_,size,max)}],
          _amx_,
          _amu_,
          _amt_);
        var
         _amC_=
          function(param)
           {var time=param[3],block_time=param[2],block=param[1];
            return [0,Future_block_header,block,block_time,time]},
         _amD_=
          function(param)
           {if(param[1] === Future_block_header)
             {var time=param[4],block_time=param[3],block=param[2];
              return [0,[0,block,block_time,time]]}
            return 0},
         _amH_=
          obj3
           ([0,_amG_,encoding$3,0,0],
            [0,_amF_,encoding$29,0,0],
            [0,_amE_,encoding$31,0,0]);
        caml_call8
         (register_error_kind,
          num_103274127,
          _amL_,
          _amK_,
          _amJ_,
          [0,
           function(ppf,param)
            {var
              time=param[3],
              block_time=param[2],
              block=param[1],
              _a4g_=of_seconds_exn$0(block_time);
             return caml_call7
                     (pf(ppf),_amI_,pp$8,block,pp_hum$1,_a4g_,pp_hum$1,time)}],
          _amH_,
          _amD_,
          _amC_);
        var
         _amM_=function(param){return Cannot_serialize_operation_met},
         _amN_=
          function(param)
           {return param === Cannot_serialize_operation_met?_amO_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _amS_,
          _amR_,
          _amQ_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_amP_)}],
          encoding,
          _amN_,
          _amM_);
        var
         Unknown_chain=[num_248,_amT_,caml_fresh_oo_id(0)],
         Bad_data_dir=[num_248,_amU_,caml_fresh_oo_id(0)],
         Block_not_invalid=[num_248,_amV_,caml_fresh_oo_id(0)],
         _amW_=function(x){return [0,Unknown_chain,x]},
         _amX_=
          function(param)
           {if(param[1] === Unknown_chain){var x=param[2];return [0,x]}
            return 0},
         _amZ_=obj1([0,_amY_,encoding$4,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _am3_,
          _am2_,
          _am1_,
          [0,function(ppf,id){return caml_call3(pf(ppf),_am0_,pp$9,id)}],
          _amZ_,
          _amX_,
          _amW_);
        var
         _am4_=function(param){return Bad_data_dir},
         _am5_=function(param){return param === Bad_data_dir?_am6_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _am__,
          _am9_,
          _am8_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_am7_)}],
          encoding,
          _am5_,
          _am4_);
        var
         _am$_=function(block){return [0,Block_not_invalid,block]},
         _ana_=
          function(param)
           {if(param[1] === Block_not_invalid)
             {var block=param[2];return [0,block]}
            return 0},
         _anc_=obj1([0,_anb_,encoding$3,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _ang_,
          _anf_,
          _ane_,
          [0,function(ppf,block){return caml_call3(pf(ppf),_and_,pp$8,block)}],
          _anc_,
          _ana_,
          _am$_);
        var
         Inconsistent_hash=[num_248,_anh_,caml_fresh_oo_id(0)],
         Missing_block_metadata_hash=[num_248,_ani_,caml_fresh_oo_id(0)],
         Missing_operation_metadata_has=[num_248,_anj_,caml_fresh_oo_id(0)],
         _ank_=
          function(param)
           {var exp=param[2],got=param[1];
            return [0,Inconsistent_hash,got,exp]},
         _anl_=
          function(param)
           {if(param[1] === Inconsistent_hash)
             {var exp=param[3],got=param[2];return [0,[0,got,exp]]}
            return 0},
         _ano_=obj2([0,_ann_,encoding$22,0,0],[0,_anm_,encoding$22,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _ans_,
          _anr_,
          _anq_,
          [0,
           function(ppf,param)
            {var exp=param[2],got=param[1];
             return caml_call5(pf(ppf),_anp_,pp$16,got,pp$16,exp)}],
          _ano_,
          _anl_,
          _ank_);
        var
         _ant_=function(block){return [0,Missing_block_metadata_hash,block]},
         _anu_=
          function(param)
           {if(param[1] === Missing_block_metadata_hash)
             {var block=param[2];return [0,block]}
            return 0},
         _anw_=obj1([0,_anv_,encoding$3,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _anA_,
          _anz_,
          _any_,
          [0,function(ppf,block){return caml_call3(pf(ppf),_anx_,pp$8,block)}],
          _anw_,
          _anu_,
          _ant_);
        var
         _anB_=
          function(block){return [0,Missing_operation_metadata_has,block]},
         _anC_=
          function(param)
           {if(param[1] === Missing_operation_metadata_has)
             {var block=param[2];return [0,block]}
            return 0},
         _anE_=obj1([0,_anD_,encoding$3,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _anI_,
          _anH_,
          _anG_,
          [0,function(ppf,block){return caml_call3(pf(ppf),_anF_,pp$8,block)}],
          _anE_,
          _anC_,
          _anB_);
        var
         Invalid_locator=[num_248,_anJ_,caml_fresh_oo_id(0)],
         Too_short_locator=[num_248,_anK_,caml_fresh_oo_id(0)],
         _anL_=
          function(param)
           {var loc=param[2],id=param[1];return [0,Invalid_locator,id,loc]},
         _anM_=
          function(param)
           {if(param[1] === Invalid_locator)
             {var loc=param[3],id=param[2];return [0,[0,id,loc]]}
            return 0},
         _anP_=obj2([0,_anO_,encoding$40,0,0],[0,_anN_,encoding$52,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _anT_,
          _anS_,
          _anR_,
          [0,
           function(ppf,param)
            {var locator=param[2],id=param[1];
             return caml_call5(pf(ppf),_anQ_,pp$27,id,pp$32,locator)}],
          _anP_,
          _anM_,
          _anL_);
        var
         _anU_=
          function(param)
           {var loc=param[2],id=param[1];return [0,Too_short_locator,id,loc]},
         _anV_=
          function(param)
           {if(param[1] === Too_short_locator)
             {var loc=param[3],id=param[2];return [0,[0,id,loc]]}
            return 0},
         _anY_=obj2([0,_anX_,encoding$40,0,0],[0,_anW_,encoding$52,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _an2_,
          _an1_,
          _an0_,
          [0,
           function(ppf,param)
            {var locator=param[2],id=param[1];
             return caml_call5(pf(ppf),_anZ_,pp$27,id,pp$32,locator)}],
          _anY_,
          _anV_,
          _anU_);
        var
         Invalid_protocol=[num_248,_an3_,caml_fresh_oo_id(0)],
         _an4_=0,
         _an5_=function(param){return 1},
         _an6_=function(param){return 0 === param?0:_an7_},
         _aoa_=
          [0,
           [0,_an$_,0,obj1([0,_an9_,constant(_an8_),0,0]),_an6_,_an5_,_an__],
           _an4_],
         _aob_=function(param){return 0},
         _aoc_=function(param){return 0 === param?_aod_:0},
         protocol_error_encoding=
          union$0
           (0,
            [0,
             [0,_aoh_,0,obj1([0,_aof_,constant(_aoe_),0,0]),_aoc_,_aob_,_aog_],
             _aoa_]),
         pp_protocol_error=
          function(ppf,param)
           {return 0 === param
                    ?caml_call1(pf(ppf),_aoi_)
                    :caml_call1(pf(ppf),_aoj_)},
         _aok_=
          function(param)
           {var error=param[2],hash=param[1];
            return [0,Invalid_protocol,hash,error]},
         _aol_=
          function(param)
           {if(param[1] === Invalid_protocol)
             {var error=param[3],hash=param[2];return [0,[0,hash,error]]}
            return 0},
         _aon_=
          merge_objs(obj1([0,_aom_,encoding$17,0,0]),protocol_error_encoding);
        caml_call8
         (register_error_kind,
          num_950914574,
          _aor_,
          _aoq_,
          _aop_,
          [0,
           function(ppf,param)
            {var error=param[2],protocol=param[1];
             return caml_call5
                     (pf(ppf),_aoo_,pp_short$1,protocol,pp_protocol_error,error)}],
          _aon_,
          _aol_,
          _aok_);
        var
         Unknown_ancestor=[num_248,_aos_,caml_fresh_oo_id(0)],
         Known_invalid=[num_248,_aot_,caml_fresh_oo_id(0)],
         _aou_=function(param){return Unknown_ancestor},
         _aov_=function(param){return param === Unknown_ancestor?_aow_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aoA_,
          _aoz_,
          _aoy_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_aox_)}],
          encoding,
          _aov_,
          _aou_);
        var
         _aoB_=function(param){return Known_invalid},
         _aoC_=function(param){return param === Known_invalid?_aoD_:0};
        caml_call8
         (register_error_kind,
          num_950914574,
          _aoH_,
          _aoG_,
          _aoF_,
          [0,function(ppf,param){return caml_call1(pf(ppf),_aoE_)}],
          encoding,
          _aoC_,
          _aoB_);
        var
         Inactive_chain=[num_248,_aoI_,caml_fresh_oo_id(0)],
         Checkpoint_error=[num_248,_aoJ_,caml_fresh_oo_id(0)],
         _aoK_=function(chain){return [0,Inactive_chain,chain]},
         _aoL_=
          function(param)
           {if(param[1] === Inactive_chain)
             {var chain=param[2];return [0,chain]}
            return 0},
         _aoN_=obj1([0,_aoM_,encoding$4,0,0]);
        caml_call8
         (register_error_kind,
          num_944934206,
          _aoR_,
          _aoQ_,
          _aoP_,
          [0,function(ppf,chain){return caml_call3(pf(ppf),_aoO_,pp$9,chain)}],
          _aoN_,
          _aoL_,
          _aoK_);
        var
         _aoS_=
          function(param)
           {var peer=param[2],block=param[1];
            return [0,Checkpoint_error,block,peer]},
         _aoT_=
          function(param)
           {if(param[1] === Checkpoint_error)
             {var peer=param[3],block=param[2];return [0,[0,block,peer]]}
            return 0},
         _aoW_=obj2([0,_aoV_,encoding$3,0,0],opt$2(0,0,_aoU_,encoding$40));
        caml_call8
         (register_error_kind,
          num_944934206,
          _ao1_,
          _ao0_,
          _aoZ_,
          [0,
           function(ppf,param)
            {var peer=param[2],block=param[1];
             if(peer)
              {var peer$0=peer[1];
               return caml_call5(pf(ppf),_aoX_,pp$27,peer$0,pp_short,block)}
             return caml_call3(pf(ppf),_aoY_,pp_short,block)}],
          _aoW_,
          _aoT_,
          _aoS_);
        _KV_([0,name$45]);
        def(_ao3_,_ao2_,pp$9);
        var
         _ao__=
          obj6
           ([0,_ao9_,int31$0,0,0],
            [0,_ao8_,int31$0,0,0],
            [0,_ao7_,int31$0,0,0],
            [0,_ao6_,int31$0,0,0],
            [0,_ao5_,int31$0,0,0],
            [0,_ao4_,int31$0,0,0]),
         _ape_=
          merge_objs
           (obj5
             ([0,_apd_,int31$0,0,0],
              [0,_apc_,int31$0,0,0],
              [0,_apb_,int31$0,0,0],
              [0,_apa_,int31$0,0,0],
              [0,_ao$_,int31$0,0,0]),
            _ao__),
         _apk_=
          merge_objs
           (obj5
             ([0,_apj_,float$2,0,0],
              [0,_api_,float$2,0,0],
              [0,_aph_,float$2,0,0],
              [0,_apg_,int31$0,0,0],
              [0,_apf_,int31$0,0,0]),
            _ape_),
         _apl_=0,
         _apm_=
          function(param)
           {var
             _a4d_=param[2],
             _a4e_=_a4d_[2],
             stack_size=_a4e_[6],
             top_heap_words=_a4e_[5],
             compactions=_a4e_[4],
             fragments=_a4e_[3],
             largest_free=_a4e_[2],
             free_blocks=_a4e_[1],
             _a4f_=_a4d_[1],
             free_words=_a4f_[5],
             live_blocks=_a4f_[4],
             live_words=_a4f_[3],
             heap_chunks=_a4f_[2],
             heap_words=_a4f_[1],
             match=param[1],
             major_collections=match[5],
             minor_collections=match[4],
             major_words=match[3],
             promoted_words=match[2],
             minor_words=match[1];
            return [0,
                    minor_words,
                    promoted_words,
                    major_words,
                    minor_collections,
                    major_collections,
                    heap_words,
                    heap_chunks,
                    live_words,
                    live_blocks,
                    free_words,
                    free_blocks,
                    largest_free,
                    fragments,
                    compactions,
                    top_heap_words,
                    stack_size]},
         gc_stat_encoding=
          conv
           (function(param)
             {var
               stack_size=param[16],
               top_heap_words=param[15],
               compactions=param[14],
               fragments=param[13],
               largest_free=param[12],
               free_blocks=param[11],
               free_words=param[10],
               live_blocks=param[9],
               live_words=param[8],
               heap_chunks=param[7],
               heap_words=param[6],
               major_collections=param[5],
               minor_collections=param[4],
               major_words=param[3],
               promoted_words=param[2],
               minor_words=param[1];
              return [0,
                      [0,
                       minor_words,
                       promoted_words,
                       major_words,
                       minor_collections,
                       major_collections],
                      [0,
                       [0,heap_words,heap_chunks,live_words,live_blocks,free_words],
                       [0,
                        free_blocks,
                        largest_free,
                        fragments,
                        compactions,
                        top_heap_words,
                        stack_size]]]},
            _apm_,
            _apl_,
            _apk_),
         _apn_=0,
         _apo_=function(res){return [1,res]},
         _app_=
          function(param)
           {if(0 === param[0])return 0;var x=param[1];return [0,x]},
         _apt_=
          obj3
           ([0,_aps_,int31$0,0,0],[0,_apr_,float$2,0,0],[0,_apq_,int64$0,0,0]),
         _apu_=0,
         _apv_=
          function(param)
           {var resident=param[3],mem=param[2],page_size=param[1];
            return [0,page_size,mem,resident]},
         _apy_=
          [0,
           [0,
            _apx_,
            0,
            conv
             (function(param)
               {var resident=param[3],mem=param[2],page_size=param[1];
                return [0,page_size,mem,resident]},
              _apv_,
              _apu_,
              _apt_),
            _app_,
            _apo_,
            _apw_],
           _apn_],
         _apz_=function(res){return [0,res]},
         _apA_=
          function(param)
           {if(0 === param[0]){var x=param[1];return [0,x]}return 0},
         _apJ_=
          obj8
           ([0,_apI_,int31$0,0,0],
            [0,_apH_,int64$0,0,0],
            [0,_apG_,int64$0,0,0],
            [0,_apF_,int64$0,0,0],
            [0,_apE_,int64$0,0,0],
            [0,_apD_,int64$0,0,0],
            [0,_apC_,int64$0,0,0],
            [0,_apB_,int64$0,0,0]),
         _apK_=0,
         _apL_=
          function(param)
           {var
             dt=param[8],
             data=param[7],
             lib=param[6],
             text=param[5],
             shared=param[4],
             resident=param[3],
             size=param[2],
             page_size=param[1];
            return [0,page_size,size,resident,shared,text,lib,data,dt]},
         proc_stat_encoding=
          union$0
           (_apO_,
            [0,
             [0,
              _apN_,
              0,
              conv
               (function(param)
                 {var
                   dt=param[8],
                   data=param[7],
                   lib=param[6],
                   text=param[5],
                   shared=param[4],
                   resident=param[3],
                   size=param[2],
                   page_size=param[1];
                  return [0,page_size,size,resident,shared,text,lib,data,dt]},
                _apL_,
                _apK_,
                _apJ_),
              _apA_,
              _apz_,
              _apM_],
             _apy_]),
         _apR_=symbol$17(symbol$17(root$0,_apQ_),_apP_);
        caml_call2(get_service$0(_apS_,empty$4),gc_stat_encoding,_apR_);
        var _apV_=symbol$17(symbol$17(root$0,_apU_),_apT_);
        caml_call2(get_service$0(_apW_,empty$4),proc_stat_encoding,_apV_);
        var _ap0_=symbol$17(symbol$17(symbol$17(root$0,_apZ_),_apY_),_apX_);
        caml_call2(get_service$0(_ap1_,empty$4),upgrades_encoding,_ap0_);
        var _ap5_=symbol$17(symbol$17(symbol$17(root$0,_ap4_),_ap3_),_ap2_);
        caml_call2
         (get_service$0(_ap6_,empty$4),protocol_overrides_encoding,_ap5_);
        var
         path$5=symbol$17(root$0,_ap__),
         _aqa_=
          [1,
           _ap$_,
           0,
           chain_arg,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_978086655,18),t)}],
         _aqc_=
          [2,
           _aqb_,
           0,
           function(t)
            {return caml_call1(caml_get_public_method(t,76853739,19),t)}],
         _aqf_=[0,0,0,0],
         _aqe_=
          [2,
           _aqd_,
           0,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_641597244,20),t)}],
         _aqg_=
          function(async,force,chain)
           {if(! _aqf_[1])
             {var
               _a34_=create_table(_ap8_),
               _a35_=new_variable(_a34_,_aqh_),
               _a36_=get_method_labels(_a34_,shared$4),
               _a37_=_a36_[1],
               _a38_=_a36_[2],
               _a39_=_a36_[3],
               _a3__=function(self_1){var env=self_1[1 + _a35_];return env[1]},
               _a3$_=function(self_1){var env=self_1[1 + _a35_];return env[2]};
              set_methods
               (_a34_,
                [0,
                 _a39_,
                 function(self_1){var env=self_1[1 + _a35_];return env[3]},
                 _a37_,
                 _a3$_,
                 _a38_,
                 _a3__]);
              var
               _a4a_=
                function(_a4b_)
                 {var _a4c_=create_object_opt(0,_a34_);
                  _a4c_[1 + _a35_] = _a4b_;
                  return _a4c_};
              init_class(_a34_);
              _aqf_[1] = _a4a_}
            return caml_call1(_aqf_[1],[0,chain,force,async])},
         _aqi_=function(_a33_){return [0,_aqg_,_a33_]},
         _aqj_=function(_a32_){return symbol$20(_aqi_,_aqe_,_a32_)},
         _aqk_=function(_a31_){return symbol$20(_aqj_,_aqc_,_a31_)},
         block_query=
          seal(function(_a30_){return symbol$20(_aqk_,_aqa_,_a30_)}),
         block_param=
          obj2
           ([0,_aqm_,bytes$1,0,0],
            [0,_aql_,list$1(0,arg$4(0,list$1(0,arg$4(0,encoding$54)))),0,0]),
         _aqo_=symbol$17(path$5,_aqn_);
        caml_call3
         (post_service$0(_aqp_,block_query),block_param,encoding$3,_aqo_);
        var
         _aqr_=
          [1,
           _aqq_,
           0,
           chain_arg,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_978086655,21),t)}],
         _aqu_=[0,0,0,0],
         _aqt_=
          [2,
           _aqs_,
           0,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_641597244,22),t)}],
         _aqv_=
          function(async,chain)
           {if(! _aqu_[1])
             {var
               _a3R_=create_table(_ap7_),
               _a3S_=new_variable(_a3R_,_aqw_),
               _a3T_=get_method_labels(_a3R_,_ap7_),
               _a3U_=_a3T_[1],
               _a3V_=_a3T_[2],
               _a3W_=function(self_2){var env=self_2[1 + _a3S_];return env[1]};
              set_methods
               (_a3R_,
                [0,
                 _a3V_,
                 function(self_2){var env=self_2[1 + _a3S_];return env[2]},
                 _a3U_,
                 _a3W_]);
              var
               _a3X_=
                function(_a3Y_)
                 {var _a3Z_=create_object_opt(0,_a3R_);
                  _a3Z_[1 + _a3S_] = _a3Y_;
                  return _a3Z_};
              init_class(_a3R_);
              _aqu_[1] = _a3X_}
            return caml_call1(_aqu_[1],[0,chain,async])},
         _aqx_=function(_a3Q_){return [0,_aqv_,_a3Q_]},
         _aqy_=function(_a3P_){return symbol$20(_aqx_,_aqt_,_a3P_)},
         operation_query=
          seal(function(_a3O_){return symbol$20(_aqy_,_aqr_,_a3O_)}),
         _aqA_=symbol$17(path$5,_aqz_);
        caml_call3
         (post_service$0(_aqB_,operation_query),bytes$1,encoding$20,_aqA_);
        var
         _aqE_=[0,0,0,0],
         _aqD_=
          [2,
           _aqC_,
           0,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_641597244,23),t)}],
         _aqF_=
          function(async)
           {if(! _aqE_[1])
             {var
               _a3I_=create_table(_ap9_),
               _a3J_=new_variable(_a3I_,_aqG_),
               _a3K_=get_method_label(_a3I_,_aqH_);
              set_method
               (_a3I_,
                _a3K_,
                function(self_3){var env=self_3[1 + _a3J_];return env[1]});
              var
               _a3L_=
                function(_a3M_)
                 {var _a3N_=create_object_opt(0,_a3I_);
                  _a3N_[1 + _a3J_] = _a3M_;
                  return _a3N_};
              init_class(_a3I_);
              _aqE_[1] = _a3L_}
            return caml_call1(_aqE_[1],[0,async])},
         _aqI_=function(_a3H_){return [0,_aqF_,_a3H_]},
         protocol_query=
          seal(function(_a3G_){return symbol$20(_aqI_,_aqD_,_a3G_)}),
         _aqK_=symbol$17(path$5,_aqJ_);
        caml_call3
         (post_service$0(_aqL_,protocol_query),encoding$55,encoding$17,_aqK_);
        var
         _aqN_=0,
         _aqO_=function(chain_id){return [2,chain_id]},
         _aqP_=
          function(param)
           {if(2 === param[0]){var chain_id=param[1];return [0,chain_id]}
            return 0},
         _aqT_=
          [0,
           [0,_aqS_,0,obj1([0,_aqQ_,encoding$4,0,0]),_aqP_,_aqO_,_aqR_],
           _aqN_],
         _aqU_=
          function(param)
           {var expiration_date=param[3],protocol=param[2],chain=param[1];
            return [1,chain,protocol,expiration_date]},
         _aqV_=
          function(param)
           {if(1 === param[0])
             {var expiration_date=param[3],protocol=param[2],chain=param[1];
              return [0,[0,chain,protocol,expiration_date]]}
            return 0},
         _aq1_=
          [0,
           [0,
            _aq0_,
            0,
            obj3
             ([0,_aqY_,encoding$4,0,0],
              [0,_aqX_,encoding$17,0,0],
              [0,_aqW_,encoding$29,0,0]),
            _aqV_,
            _aqU_,
            _aqZ_],
           _aqT_],
         _aq2_=function(chain_id){return [0,chain_id]},
         _aq3_=
          function(param)
           {if(0 === param[0]){var chain_id=param[1];return [0,chain_id]}
            return 0},
         chain_status_encoding=
          union$0
           (_aq7_,
            [0,
             [0,_aq6_,0,obj1([0,_aq4_,encoding$4,0,0]),_aq3_,_aq2_,_aq5_],
             _aq1_]),
         path$6=symbol$17(root$0,_aq8_),
         _aq__=symbol$17(path$6,_aq9_),
         _arb_=obj2([0,_ara_,encoding$3,0,0],[0,_aq$_,encoding$29,0,0]);
        caml_call2(get_service$0(_arc_,empty$4),_arb_,_aq__);
        var
         _are_=
          [3,
           _ard_,
           0,
           chain_arg,
           function(t)
            {return caml_call1(caml_get_public_method(t,930008146,24),t)}],
         _arg_=
          [3,
           _arf_,
           0,
           protocols_arg,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_337249679,25),t)}],
         _arj_=[0,0,0,0],
         _ari_=
          [3,
           _arh_,
           0,
           protocols_arg,
           function(t)
            {return caml_call1(caml_get_public_method(t,-695716069,26),t)}],
         _ark_=
          function(protocols,next_protocols,chains)
           {if(! _arj_[1])
             {var
               _a3v_=create_table(shared$5),
               _a3w_=new_variable(_a3v_,_arl_),
               _a3x_=get_method_labels(_a3v_,shared$5),
               _a3y_=_a3x_[1],
               _a3z_=_a3x_[2],
               _a3A_=_a3x_[3],
               _a3B_=function(self_1){var env=self_1[1 + _a3w_];return env[1]},
               _a3C_=function(self_1){var env=self_1[1 + _a3w_];return env[2]};
              set_methods
               (_a3v_,
                [0,
                 _a3y_,
                 function(self_1){var env=self_1[1 + _a3w_];return env[3]},
                 _a3z_,
                 _a3C_,
                 _a3A_,
                 _a3B_]);
              var
               _a3D_=
                function(_a3E_)
                 {var _a3F_=create_object_opt(0,_a3v_);
                  _a3F_[1 + _a3w_] = _a3E_;
                  return _a3F_};
              init_class(_a3v_);
              _arj_[1] = _a3D_}
            return caml_call1(_arj_[1],[0,chains,next_protocols,protocols])},
         _arm_=function(_a3u_){return [0,_ark_,_a3u_]},
         _arn_=function(_a3t_){return symbol$20(_arm_,_ari_,_a3t_)},
         _aro_=function(_a3s_){return symbol$20(_arn_,_arg_,_a3s_)},
         valid_blocks_query=
          seal(function(_a3r_){return symbol$20(_aro_,_are_,_a3r_)}),
         _arq_=symbol$17(path$6,_arp_),
         _art_=
          merge_objs
           (obj2([0,_ars_,encoding$4,0,0],[0,_arr_,encoding$3,0,0]),
            encoding$33);
        caml_call2(get_service$0(_aru_,valid_blocks_query),_art_,_arq_);
        var
         _arx_=[0,0,0,0],
         _arw_=
          [3,
           _arv_,
           0,
           protocols_arg,
           function(t)
            {return caml_call1(caml_get_public_method(t,num_337249679,27),t)}],
         _ary_=
          function(next_protocols)
           {if(! _arx_[1])
             {var
               _a3l_=create_table(_aqM_),
               _a3m_=new_variable(_a3l_,_arz_),
               _a3n_=get_method_label(_a3l_,_arA_);
              set_method
               (_a3l_,
                _a3n_,
                function(self_2){var env=self_2[1 + _a3m_];return env[1]});
              var
               _a3o_=
                function(_a3p_)
                 {var _a3q_=create_object_opt(0,_a3l_);
                  _a3q_[1 + _a3m_] = _a3p_;
                  return _a3q_};
              init_class(_a3l_);
              _arx_[1] = _a3o_}
            return caml_call1(_arx_[1],[0,next_protocols])},
         _arB_=function(_a3k_){return [0,_ary_,_a3k_]},
         heads_query=
          seal(function(_a3j_){return symbol$20(_arB_,_arw_,_a3j_)}),
         _arD_=symbol$18(symbol$17(path$6,_arC_),chain_arg),
         _arF_=merge_objs(obj1([0,_arE_,encoding$3,0,0]),encoding$33);
        caml_call2(get_service$0(_arG_,heads_query),_arF_,_arD_);
        var _arI_=symbol$17(path$6,_arH_);
        caml_call2(get_service$0(_arJ_,empty$4),encoding$17,_arI_);
        var _arL_=symbol$17(path$6,_arK_);
        caml_call2(get_service$0(_arM_,empty$4),output,_arL_);
        var
         _arO_=symbol$17(path$6,_arN_),
         _arP_=list$1(0,chain_status_encoding);
        caml_call2(get_service$0(_arQ_,empty$4),_arP_,_arO_);
        var _arS_=symbol$18(symbol$17(root$0,_arR_),protocols_arg);
        caml_call2(get_service$0(0,empty$4),encoding$55,_arS_);
        var
         _arV_=
          symbol$17(symbol$18(symbol$17(root$0,_arU_),protocols_arg),_arT_);
        caml_call2(get_service$0(0,empty$4),env_version_encoding,_arV_);
        var _arX_=symbol$17(root$0,_arW_),_arY_=list$1(0,encoding$17);
        caml_call2(get_service$0(0,empty$4),_arY_,_arX_);
        var _ar0_=symbol$18(symbol$17(root$0,_arZ_),protocols_arg);
        caml_call2(get_service$0(_ar1_,empty$4),input$0,_ar0_);
        var
         pp_block_error=
          function(ppf,param)
           {if(typeof param === "number")
             switch(param)
              {case 0:return caml_call1(pf(ppf),_atn_);
               case 1:return caml_call1(pf(ppf),_ato_);
               default:return caml_call1(pf(ppf),_atp_)}
            else
             switch(param[0])
              {case 0:
                var oph=param[1];
                return caml_call3(pf(ppf),_atq_,pp_short$2,oph);
               case 1:
                var found=param[2],expected=param[1];
                return caml_call5(pf(ppf),_atr_,pp$23,expected,pp$23,found);
               case 2:
                var found$0=param[2],expected$0=param[1];
                return caml_call3(pf(ppf),_ats_,expected$0,found$0);
               case 3:
                var found$1=param[2],expected$1=param[1];
                return caml_call3(pf(ppf),_att_,expected$1,found$1);
               case 4:
                var oph$0=param[1];
                return caml_call3(pf(ppf),_atu_,pp_short$2,oph$0);
               case 5:
                var originating_block=param[2],operation=param[1];
                return caml_call5
                        (pf(ppf),
                         _atv_,
                         pp_short$2,
                         operation,
                         pp_short,
                         originating_block);
               case 6:
                var
                 timestamp=param[3],
                 expiration=param[2],
                 chain_id=param[1],
                 _a3d_=of_seconds_exn$0(expiration),
                 _a3e_=of_seconds_exn$0(timestamp);
                return caml_call7
                        (pf(ppf),
                         _atw_,
                         pp_hum$1,
                         _a3e_,
                         pp_hum$1,
                         _a3d_,
                         pp_short$0,
                         chain_id);
               case 7:var n=param[1];return caml_call2(pf(ppf),_atx_,n);
               case 8:
                var max=param[3],found$2=param[2],pass=param[1];
                return caml_call4(pf(ppf),_aty_,pass,found$2,max);
               case 9:
                var max$0=param[3],size=param[2],operation$0=param[1];
                return caml_call5
                        (pf(ppf),_atz_,pp_short$2,operation$0,size,max$0);
               case 10:
                var
                 allowed_pass=param[3],
                 pass$0=param[2],
                 operation$1=param[1],
                 _a3f_=0,
                 _a3g_=
                  function(_a3h_,_a3i_)
                   {return pp_print_list(_a3f_,pp$0,_a3h_,_a3i_)};
                return caml_call6
                        (pf(ppf),
                         _atA_,
                         pp_short$2,
                         operation$1,
                         pass$0,
                         _a3g_,
                         allowed_pass);
               default:
                var err=param[1];
                return caml_call3(pf(ppf),_atB_,pp_print_error,err)}},
         _atC_=0,
         _atD_=function(msg){return [1,msg]},
         _atE_=
          function(param)
           {if(typeof param !== "number" && 1 === param[0])
             {var msg=param[1];return [0,msg]}
            return 0},
         _atI_=
          [0,[0,_atH_,0,obj1([0,_atF_,output,0,0]),_atE_,_atD_,_atG_],_atC_],
         _atJ_=function(msg){return [0,msg]},
         _atK_=
          function(param)
           {if(typeof param !== "number" && 0 === param[0])
             {var msg=param[1];return [0,msg]}
            return 0},
         _atO_=
          [0,[0,_atN_,0,obj1([0,_atL_,output,0,0]),_atK_,_atJ_,_atM_],_atI_],
         _atP_=function(param){return 0},
         _atQ_=function(param){return typeof param === "number"?_atR_:0},
         validation_process_error_encod=
          union$0
           (0,
            [0,
             [0,_atV_,0,obj1([0,_atT_,constant(_atS_),0,0]),_atQ_,_atP_,_atU_],
             _atO_]),
         pp_validation_process_error=
          function(ppf,param)
           {if(typeof param === "number")
             return caml_call1(pf(ppf),_atW_);
            else
             {if(0 === param[0])
               {var msg=param[1];return caml_call2(pf(ppf),_atX_,msg)}
              var msg$0=param[1];
              return caml_call2(pf(ppf),_atY_,msg$0)}},
         Invalid_block=[num_248,_atZ_,caml_fresh_oo_id(0)],
         Unavailable_protocol=[num_248,_at0_,caml_fresh_oo_id(0)],
         Inconsistent_operations_hash=[num_248,_at1_,caml_fresh_oo_id(0)],
         Failed_to_checkout_context=[num_248,_at2_,caml_fresh_oo_id(0)],
         Failed_to_get_live_blocks=[num_248,_at3_,caml_fresh_oo_id(0)],
         System_error=[num_248,_at4_,caml_fresh_oo_id(0)],
         Missing_test_protocol=[num_248,_at5_,caml_fresh_oo_id(0)],
         Validation_process_failed=[num_248,_at6_,caml_fresh_oo_id(0)],
         _at7_=
          function(param)
           {var error=param[2],block=param[1];
            return [0,Invalid_block,block,error]},
         _at8_=
          function(param)
           {if(param[1] === Invalid_block)
             {var error=param[3],block=param[2];return [0,[0,block,error]]}
            return 0},
         _at9_=
          function(error_encoding)
           {var _a2t_=0;
            function _a2u_(param){var trace=param[2];return [11,trace]}
            function _a2v_(param)
             {if(typeof param !== "number" && 11 === param[0])
               {var trace=param[1];return [0,[0,0,trace]]}
              return 0}
            var
             _a2w_=[0,_ar2_,list$1(0,error_encoding),0,0],
             _a2x_=
              [0,
               [0,
                _ar6_,
                0,
                obj2([0,_ar4_,constant(_ar3_),0,0],_a2w_),
                _a2v_,
                _a2u_,
                _ar5_],
               _a2t_];
            function _a2y_(param){return 2}
            function _a2z_(param)
             {if(typeof param === "number" && 2 <= param)return _ar7_;
              return 0}
            var
             _a2A_=
              [0,
               [0,
                _ar$_,
                0,
                obj1([0,_ar9_,constant(_ar8_),0,0]),
                _a2z_,
                _a2y_,
                _ar__],
               _a2x_];
            function _a2B_(param)
             {var allowed_pass=param[4],pass=param[3],operation=param[2];
              return [10,operation,pass,allowed_pass]}
            function _a2C_(param)
             {if(typeof param !== "number" && 10 === param[0])
               {var allowed_pass=param[3],pass=param[2],operation=param[1];
                return [0,[0,0,operation,pass,allowed_pass]]}
              return 0}
            var
             _a2D_=[0,_asa_,list$1(0,uint8$0),0,0],
             _a2E_=
              [0,
               [0,
                _asg_,
                0,
                obj4
                 ([0,_ase_,constant(_asd_),0,0],
                  [0,_asc_,encoding$20,0,0],
                  [0,_asb_,uint8$0,0,0],
                  _a2D_),
                _a2C_,
                _a2B_,
                _asf_],
               _a2A_];
            function _a2F_(param)
             {var max=param[4],size=param[3],operation=param[2];
              return [9,operation,size,max]}
            function _a2G_(param)
             {if(typeof param !== "number" && 9 === param[0])
               {var max=param[3],size=param[2],operation=param[1];
                return [0,[0,0,operation,size,max]]}
              return 0}
            var
             _a2H_=
              [0,
               [0,
                _asn_,
                0,
                obj4
                 ([0,_asl_,constant(_ask_),0,0],
                  [0,_asj_,encoding$20,0,0],
                  [0,_asi_,int31$0,0,0],
                  [0,_ash_,int31$0,0,0]),
                _a2G_,
                _a2F_,
                _asm_],
               _a2E_];
            function _a2I_(param)
             {var max=param[4],found=param[3],pass=param[2];
              return [8,pass,found,max]}
            function _a2J_(param)
             {if(typeof param !== "number" && 8 === param[0])
               {var max=param[3],found=param[2],pass=param[1];
                return [0,[0,0,pass,found,max]]}
              return 0}
            var
             _a2K_=
              [0,
               [0,
                _asu_,
                0,
                obj4
                 ([0,_ass_,constant(_asr_),0,0],
                  [0,_asq_,uint8$0,0,0],
                  [0,_asp_,uint16$0,0,0],
                  [0,_aso_,uint16$0,0,0]),
                _a2J_,
                _a2I_,
                _ast_],
               _a2H_];
            function _a2L_(param){var n=param[2];return [7,n]}
            function _a2M_(param)
             {if(typeof param !== "number" && 7 === param[0])
               {var n=param[1];return [0,[0,0,n]]}
              return 0}
            var
             _a2N_=
              [0,
               [0,
                _asz_,
                0,
                obj2([0,_asx_,constant(_asw_),0,0],[0,_asv_,uint8$0,0,0]),
                _a2M_,
                _a2L_,
                _asy_],
               _a2K_];
            function _a2O_(param)
             {var timestamp=param[4],expiration=param[3],chain_id=param[2];
              return [6,chain_id,expiration,timestamp]}
            function _a2P_(param)
             {if(typeof param !== "number" && 6 === param[0])
               {var timestamp=param[3],expiration=param[2],chain_id=param[1];
                return [0,[0,0,chain_id,expiration,timestamp]]}
              return 0}
            var
             _a2Q_=
              [0,
               [0,
                _asG_,
                0,
                obj4
                 ([0,_asE_,constant(_asD_),0,0],
                  [0,_asC_,encoding$4,0,0],
                  [0,_asB_,encoding$29,0,0],
                  [0,_asA_,encoding$29,0,0]),
                _a2P_,
                _a2O_,
                _asF_],
               _a2N_];
            function _a2R_(param)
             {var originating_block=param[3],operation=param[2];
              return [5,operation,originating_block]}
            function _a2S_(param)
             {if(typeof param !== "number" && 5 === param[0])
               {var originating_block=param[2],operation=param[1];
                return [0,[0,0,operation,originating_block]]}
              return 0}
            var
             _a2T_=
              [0,
               [0,
                _asM_,
                0,
                obj3
                 ([0,_asK_,constant(_asJ_),0,0],
                  [0,_asI_,encoding$20,0,0],
                  [0,_asH_,encoding$3,0,0]),
                _a2S_,
                _a2R_,
                _asL_],
               _a2Q_];
            function _a2U_(param){var operation=param[2];return [4,operation]}
            function _a2V_(param)
             {if(typeof param !== "number" && 4 === param[0])
               {var operation=param[1];return [0,[0,0,operation]]}
              return 0}
            var
             _a2W_=
              [0,
               [0,
                _asR_,
                0,
                obj2([0,_asP_,constant(_asO_),0,0],[0,_asN_,encoding$20,0,0]),
                _a2V_,
                _a2U_,
                _asQ_],
               _a2T_];
            function _a2X_(param)
             {var found=param[3],expected=param[2];return [3,expected,found]}
            function _a2Y_(param)
             {if(typeof param !== "number" && 3 === param[0])
               {var found=param[2],expected=param[1];
                return [0,[0,0,expected,found]]}
              return 0}
            var
             _a2Z_=
              [0,
               [0,
                _asX_,
                0,
                obj3
                 ([0,_asV_,constant(_asU_),0,0],
                  [0,_asT_,uint8$0,0,0],
                  [0,_asS_,uint8$0,0,0]),
                _a2Y_,
                _a2X_,
                _asW_],
               _a2W_];
            function _a20_(param)
             {var found=param[3],expected=param[2];return [2,expected,found]}
            function _a21_(param)
             {if(typeof param !== "number" && 2 === param[0])
               {var found=param[2],expected=param[1];
                return [0,[0,0,expected,found]]}
              return 0}
            var
             _a22_=
              [0,
               [0,
                _as3_,
                0,
                obj3
                 ([0,_as1_,constant(_as0_),0,0],
                  [0,_asZ_,int32$1,0,0],
                  [0,_asY_,int32$1,0,0]),
                _a21_,
                _a20_,
                _as2_],
               _a2Z_];
            function _a23_(param){return 1}
            function _a24_(param)
             {if(typeof param === "number" && 1 === param)return _as4_;
              return 0}
            var
             _a25_=
              [0,
               [0,
                _as8_,
                0,
                obj1([0,_as6_,constant(_as5_),0,0]),
                _a24_,
                _a23_,
                _as7_],
               _a22_];
            function _a26_(param){return 0}
            function _a27_(param)
             {if(typeof param === "number" && 0 === param)return _as9_;
              return 0}
            var
             _a28_=
              [0,
               [0,
                _atb_,
                0,
                obj1([0,_as$_,constant(_as__),0,0]),
                _a27_,
                _a26_,
                _ata_],
               _a25_];
            function _a29_(param)
             {var found=param[3],expected=param[2];return [1,expected,found]}
            function _a2__(param)
             {if(typeof param !== "number" && 1 === param[0])
               {var found=param[2],expected=param[1];
                return [0,[0,0,expected,found]]}
              return 0}
            var
             _a2$_=
              [0,
               [0,
                _ath_,
                0,
                obj3
                 ([0,_atf_,constant(_ate_),0,0],
                  [0,_atd_,encoding$32,0,0],
                  [0,_atc_,encoding$32,0,0]),
                _a2__,
                _a29_,
                _atg_],
               _a28_];
            function _a3a_(param){var operation=param[2];return [0,operation]}
            function _a3b_(param)
             {if(typeof param !== "number" && 0 === param[0])
               {var operation=param[1];return [0,[0,0,operation]]}
              return 0}
            var
             _a3c_=
              union$0
               (0,
                [0,
                 [0,
                  _atm_,
                  0,
                  obj2
                   ([0,_atk_,constant(_atj_),0,0],[0,_ati_,encoding$20,0,0]),
                  _a3b_,
                  _a3a_,
                  _atl_],
                 _a2$_]);
            return merge_objs(obj1([0,_at__,encoding$3,0,0]),_a3c_)};
        caml_call8
         (register_recursive_error_kind,
          num_950914574,
          _auc_,
          _aub_,
          _aua_,
          function(ppf,param)
           {var error=param[2],block=param[1];
            return caml_call5
                    (pf(ppf),_at$_,pp_short,block,pp_block_error,error)},
          _at9_,
          _at8_,
          _at7_);
        var
         _aud_=
          function(param)
           {var protocol=param[2],block=param[1];
            return [0,Unavailable_protocol,block,protocol]},
         _aue_=
          function(param)
           {if(param[1] === Unavailable_protocol)
             {var protocol=param[3],block=param[2];
              return [0,[0,block,protocol]]}
            return 0},
         _auh_=obj2([0,_aug_,encoding$3,0,0],[0,_auf_,encoding$17,0,0]);
        caml_call8
         (register_error_kind,
          num_103274127,
          _aul_,
          _auk_,
          _auj_,
          [0,
           function(ppf,param)
            {var protocol=param[2],block=param[1];
             return caml_call5
                     (pf(ppf),_aui_,pp_short$1,protocol,pp_short,block)}],
          _auh_,
          _aue_,
          _aud_);
        var
         _aum_=
          function(param)
           {var found=param[3],expected=param[2],block=param[1];
            return [0,Inconsistent_operations_hash,block,expected,found]},
         _aun_=
          function(param)
           {if(param[1] === Inconsistent_operations_hash)
             {var found=param[4],expected=param[3],block=param[2];
              return [0,[0,block,expected,found]]}
            return 0},
         _aur_=
          obj3
           ([0,_auq_,encoding$3,0,0],
            [0,_aup_,encoding$21,0,0],
            [0,_auo_,encoding$21,0,0]);
        caml_call8
         (register_error_kind,
          num_103274127,
          _auv_,
          _auu_,
          _aut_,
          [0,
           function(ppf,param)
            {var found=param[3],expected=param[2],block=param[1];
             return caml_call7
                     (pf(ppf),
                      _aus_,
                      pp_short,
                      block,
                      pp_short$3,
                      expected,
                      pp_short$3,
                      found)}],
          _aur_,
          _aun_,
          _aum_);
        var
         _auw_=function(h){return [0,Failed_to_checkout_context,h]},
         _aux_=
          function(param)
           {if(param[1] === Failed_to_checkout_context)
             {var h=param[2];return [0,h]}
            return 0},
         _auz_=obj1([0,_auy_,encoding$22,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _auD_,
          _auC_,
          _auB_,
          [0,
           function(ppf,hash)
            {return caml_call3(pf(ppf),_auA_,pp_short$4,hash)}],
          _auz_,
          _aux_,
          _auw_);
        var
         _auE_=function(h){return [0,Failed_to_get_live_blocks,h]},
         _auF_=
          function(param)
           {if(param[1] === Failed_to_get_live_blocks)
             {var h=param[2];return [0,h]}
            return 0},
         _auH_=obj1([0,_auG_,encoding$3,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _auL_,
          _auK_,
          _auJ_,
          [0,function(ppf,hash){return caml_call3(pf(ppf),_auI_,pp$8,hash)}],
          _auH_,
          _auF_,
          _auE_);
        var
         _auM_=
          function(param)
           {var msg=param[3],fn=param[2],errno=param[1];
            return [0,System_error,errno,fn,msg]},
         _auN_=
          function(param)
           {if(param[1] === System_error)
             {var msg=param[4],fn=param[3],errno=param[2];
              return [0,[0,errno,fn,msg]]}
            return 0},
         _auR_=
          obj3([0,_auQ_,output,0,0],[0,_auP_,output,0,0],[0,_auO_,output,0,0]);
        caml_call8
         (register_error_kind,
          num_103274127,
          _auV_,
          _auU_,
          _auT_,
          [0,
           function(ppf,param)
            {var msg=param[3],fn=param[2],errno=param[1];
             return caml_call4(pf(ppf),_auS_,fn,msg,errno)}],
          _auR_,
          _auN_,
          _auM_);
        var
         _auW_=function(protocol){return [0,Missing_test_protocol,protocol]},
         _auX_=
          function(param)
           {if(param[1] === Missing_test_protocol)
             {var protocol=param[2];return [0,protocol]}
            return 0},
         _auZ_=obj1([0,_auY_,encoding$17,0,0]);
        caml_call8
         (register_error_kind,
          num_103274127,
          _au3_,
          _au2_,
          _au1_,
          [0,
           function(ppf,protocol)
            {return caml_call3(pf(ppf),_au0_,pp$14,protocol)}],
          _auZ_,
          _auX_,
          _auW_);
        var
         _au4_=function(error){return [0,Validation_process_failed,error]},
         _au5_=
          function(param)
           {if(param[1] === Validation_process_failed)
             {var error=param[2];return [0,error]}
            return 0},
         _au7_=obj1([0,_au6_,validation_process_error_encod,0,0]);
        caml_call8
         (register_error_kind,
          num_103274127,
          _au$_,
          _au__,
          _au9_,
          [0,
           function(ppf,error)
            {return caml_call3
                     (pf(ppf),_au8_,pp_validation_process_error,error)}],
          _au7_,
          _au5_,
          _au4_);
        var
         Make$16=
          function(H)
           {function pbkdf2(password,salt,count,dk_len)
             {if(count <= 0)invalid_arg(_avb_);
              if(caml_lessequal(dk_len,0))invalid_arg(_avc_);
              var h_len=H[1];
              if(1 <= h_len)
               {var
                 l=0 < dk_len?1 + caml_div(dk_len - 1 | 0,h_len) | 0:0,
                 r=dk_len - caml_mul(l - 1 | 0,h_len) | 0,
                 block=
                  function(i$0)
                   {var b$0=caml_create_bytes(4);
                    caml_bytes_set32(b$0,0,caml_int32_bswap(i$0));
                    var
                     _a2s_=cat(salt,b$0),
                     xor=caml_call2(H[6][1],password,_a2s_),
                     j$1=count - 1 | 0,
                     u=xor,
                     j=j$1;
                    for(;;)
                     {if(0 === j)return xor;
                      var
                       b=caml_call2(H[6][1],password,u),
                       j$0=j - 1 | 0,
                       alen=caml_ml_bytes_length(xor);
                      if(caml_ml_bytes_length(b) !== alen)invalid_arg(_ava_);
                      var _a2p_=alen - 1 | 0,_a2o_=0;
                      if(! (_a2p_ < 0))
                       {var i=_a2o_;
                        for(;;)
                         {var _a2q_=caml_bytes_get(b,i);
                          caml_bytes_set(xor,i,chr(caml_bytes_get(xor,i) ^ _a2q_));
                          var _a2r_=i + 1 | 0;
                          if(_a2p_ !== i){var i=_a2r_;continue}
                          break}}
                      var u=b,j=j$0;
                      continue}},
                 i$1=l - 1 | 0,
                 blocks$1=[0,sub(block(l),0,r),0],
                 blocks=blocks$1,
                 i=i$1;
                for(;;)
                 {if(0 === i)return concat(empty_return,blocks);
                  var
                   i$0=i - 1 | 0,
                   blocks$0=[0,block(i),blocks],
                   blocks=blocks$0,
                   i=i$0;
                  continue}}
              throw Division_by_zero}
            return [0,pbkdf2]},
         SHA256=Make$16(_E2_),
         SHA512=Make$16(_E1_),
         simple_printer=
          make_class
           (_avh_,
            function(_a12_)
             {var
               _a13_=new_variable(_a12_,_avk_),
               _a14_=new_variable(_a12_,_avl_),
               _a15_=get_method_labels(_a12_,shared$6),
               _a16_=_a15_[1],
               _a17_=_a15_[2],
               _a18_=_a15_[3],
               _a19_=_a15_[4],
               _a1__=_a15_[5];
              function _a1$_(self_1,name)
               {function _a2m_(msg)
                 {return caml_call2(self_1[1 + _a13_],name,msg)}
                return function(_a2n_){return kstr(_a2m_,_a2n_)}}
              function _a2a_(self_1){return self_1[1 + _a14_]}
              function _a2b_(self_1){return self_1[1 + _a14_]}
              function _a2c_(self_1)
               {function _a2k_(msg)
                 {return caml_call2(self_1[1 + _a13_],_avm_,msg)}
                return function(_a2l_){return kstr(_a2k_,_a2l_)}}
              set_methods
               (_a12_,
                [0,
                 _a19_,
                 function(self_1)
                  {function _a2i_(msg){return fail([0,Failure,msg])}
                   return function(_a2j_){return kstr(_a2i_,_a2j_)}},
                 _a16_,
                 _a2c_,
                 _a17_,
                 _a2b_,
                 _a1__,
                 _a2a_,
                 _a18_,
                 _a1$_]);
              return function(_a2f_,_a2e_,_a2d_)
               {function _a2g_(x)
                 {return kstr
                          (function(msg){return caml_call2(_a2d_,_avn_,msg)},x)}
                var _a2h_=create_object_opt(_a2e_,_a12_);
                _a2h_[1 + _a14_] = _a2g_;
                _a2h_[1 + _a13_] = _a2d_;
                return _a2h_}});
        make_class
         (_avj_,
          function(_a0R_)
           {var
             _a0S_=new_variable(_a0R_,_avo_),
             _a0T_=get_method_labels(_a0R_,_avi_),
             _a0U_=_a0T_[1],
             _a0V_=_a0T_[2],
             _a0W_=_a0T_[3],
             _a0X_=_a0T_[4],
             _a0Y_=_a0T_[5],
             _a0Z_=_a0T_[6],
             _a00_=_a0T_[7],
             _a01_=_a0T_[8],
             _a02_=_a0T_[9],
             _a03_=_a0T_[10],
             _a04_=_a0T_[11],
             _a05_=_a0T_[12],
             _a06_=_a0T_[13],
             _a07_=_a0T_[14],
             _a08_=_a0T_[15],
             _a09_=_a0T_[16],
             _a0__=_a0T_[17],
             _a0$_=_a0T_[18],
             _a1a_=_a0T_[19],
             _a1b_=_a0T_[20],
             _a1c_=_a0T_[21],
             _a1d_=_a0T_[22],
             _a1e_=_a0T_[23];
            function _a1f_(self_2)
             {var _a11_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a11_,num_1034287848,28),_a11_)}
            function _a1g_(self_2)
             {var _a10_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a10_,num_5495062,29),_a10_)}
            function _a1h_(self_2)
             {var _a1Z_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1Z_,num_1021446370,30),_a1Z_)}
            function _a1i_(self_2)
             {var _a1Y_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1Y_,num_20660969,31),_a1Y_)}
            function _a1j_(self_2)
             {var _a1X_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1X_,num_800093270,32),_a1X_)}
            function _a1k_(self_2)
             {var _a1W_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1W_,num_894980516,33),_a1W_)}
            function _a1l_(self_2)
             {var _a1V_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1V_,num_799445793,34),_a1V_)}
            function _a1m_(self_2)
             {var _a1U_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1U_,num_164354652,35),_a1U_)}
            function _a1n_(self_2)
             {var _a1T_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1T_,num_437335495,36),_a1T_)}
            function _a1o_(self_2)
             {var _a1S_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1S_,num_5395588,37),_a1S_)}
            function _a1p_(self_2)
             {var _a1R_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1R_,num_944268762,38),_a1R_)}
            function _a1q_(self_2)
             {var _a1Q_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1Q_,num_343364604,39),_a1Q_)}
            function _a1r_(self_2)
             {var _a1P_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1P_,num_755617299,40),_a1P_)}
            function _a1s_(self_2)
             {var _a1O_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1O_,num_215364664,41),_a1O_)}
            function _a1t_(self_2)
             {var _a1N_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1N_,num_131416682,42),_a1N_)}
            function _a1u_(self_2)
             {var _a1M_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1M_,num_443964500,43),_a1M_)}
            function _a1v_(self_2)
             {var _a1L_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1L_,num_351273602,44),_a1L_)}
            function _a1w_(self_2)
             {var _a1K_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1K_,num_60991774,45),_a1K_)}
            function _a1x_(self_2)
             {var _a1J_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1J_,num_888960333,46),_a1J_)}
            function _a1y_(self_2)
             {var _a1I_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1I_,num_978086655,47),_a1I_)}
            function _a1z_(self_2)
             {var _a1H_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1H_,num_1055856623,48),_a1H_)}
            function _a1A_(self_2)
             {var _a1G_=self_2[1 + _a0S_];
              return caml_call1
                      (caml_get_public_method(_a1G_,num_881248069,49),_a1G_)}
            set_methods
             (_a0R_,
              [0,
               _a04_,
               function(self_2)
                {var _a1F_=self_2[1 + _a0S_];
                 return caml_call1
                         (caml_get_public_method(_a1F_,num_386853281,50),_a1F_)},
               _a0Y_,
               _a1A_,
               _a1d_,
               _a1z_,
               _a0$_,
               _a1y_,
               _a1c_,
               _a1x_,
               _a0__,
               _a1w_,
               _a1e_,
               _a1v_,
               _a1b_,
               _a1u_,
               _a1a_,
               _a1t_,
               _a09_,
               _a1s_,
               _a07_,
               _a1r_,
               _a0V_,
               _a1q_,
               _a05_,
               _a1p_,
               _a03_,
               _a1o_,
               _a02_,
               _a1n_,
               _a0W_,
               _a1m_,
               _a0U_,
               _a1l_,
               _a00_,
               _a1k_,
               _a0Z_,
               _a1j_,
               _a0X_,
               _a1i_,
               _a08_,
               _a1h_,
               _a01_,
               _a1g_,
               _a06_,
               _a1f_]);
            return function(_a1D_,_a1C_,_a1B_)
             {var _a1E_=create_object_opt(_a1C_,_a0R_);
              _a1E_[1 + _a0S_] = _a1B_;
              return _a1E_}});
        var log=function(param,_a0Q_){return return_unit};
        caml_call2(simple_printer[1],0,log);
        var
         _avN_=
          function(Entity)
           {var
             wallet_encoding=
              list$1(0,obj2([0,_avq_,output,0,0],[0,_avp_,Entity[1],0,0]));
            function load(wallet)
             {return caml_call4
                      (caml_get_public_method(wallet,num_944268762,51),
                       wallet,
                       Entity[4],
                       0,
                       wallet_encoding)}
            function set(wallet,entries)
             {return caml_call4
                      (caml_get_public_method(wallet,num_799445793,52),
                       wallet,
                       Entity[4],
                       entries,
                       wallet_encoding)}
            function autocomplete(wallet)
             {function _a0O_(param)
               {if(0 === param[0])
                 {var list=param[1];
                  return caml_call1
                          (return$3,map$1(function(_a0P_){return _a0P_[1]},list))}
                return return_nil}
              return symbol_bind(load(wallet),_a0O_)}
            function find_opt(wallet,name)
             {function _a0N_(list){return assoc_opt(name,list)}
              return caml_call2(symbol$14,load(wallet),_a0N_)}
            function find(wallet,name)
             {function _a0L_(list)
               {var match=assoc_opt(name,list);
                if(match){var v=match[1];return caml_call1(return$3,v)}
                var _a0M_=Entity[4];
                return caml_call2(failwith$0(_avr_),_a0M_,name)}
              return caml_call2(symbol$13,load(wallet),_a0L_)}
            function rev_find(wallet,v)
             {function _a0I_(list)
               {var param=list;
                for(;;)
                 {if(param)
                   {var l=param[2],x=param[1],v$0=x[2];
                    if(! caml_equal(v,v$0)){var param=l;continue}
                    var _a0J_=[0,x]}
                  else
                   var _a0J_=0;
                  return map$0(function(_a0K_){return _a0K_[1]},_a0J_)}}
              return caml_call2(symbol$14,load(wallet),_a0I_)}
            function rev_find_all(wallet,v)
             {function _a0H_(list)
               {return caml_call1
                        (return$3,
                         caml_call1
                          (filter_map$0
                            (function(param)
                              {var v$0=param[2],n=param[1];
                               return caml_equal(v,v$0)?[0,n]:0}),
                           list))}
              return caml_call2(symbol$13,load(wallet),_a0H_)}
            function mem(wallet,name)
             {function _a0G_(list){return mem_assoc(name,list)}
              return caml_call2(symbol$14,load(wallet),_a0G_)}
            function add(force,wallet,name,value)
             {var keep=[0,0];
              function _a0B_(list)
               {function _a0C_(param)
                 {var
                   list$0=
                    caml_call1
                     (find_all
                       (function(param)
                         {var n=param[1];return caml_string_notequal(n,name)}),
                      list),
                   list$1=[0,[0,name,value],list$0];
                  return keep[1]
                          ?return_unit$0
                          :caml_call4
                            (caml_get_public_method(wallet,num_799445793,53),
                             wallet,
                             Entity[4],
                             list$1,
                             wallet_encoding)}
                var
                 _a0D_=
                  force
                   ?return_unit$0
                   :caml_call2
                     (iter_s,
                      function(param)
                       {var v=param[2],n=param[1];
                        if(caml_string_equal(n,name) && caml_equal(v,value))
                         {keep[1] = 1;return return_unit$0}
                        if(caml_string_equal(n,name) && caml_notequal(v,value))
                         {var _a0E_=Entity[4];
                          return caml_call2(failwith$0(_avs_),_a0E_,n)}
                        if(caml_string_notequal(n,name) && caml_equal(v,value))
                         {var _a0F_=Entity[4];
                          return caml_call2(failwith$0(_avt_),_a0F_,n)}
                        return return_unit$0},
                      list);
                return caml_call2(symbol$13,_a0D_,_a0C_)}
              return caml_call2(symbol$13,load(wallet),_a0B_)}
            function del(wallet,name)
             {function _a0A_(list)
               {var
                 list$0=
                  caml_call1
                   (find_all
                     (function(param)
                       {var n=param[1];return caml_string_notequal(n,name)}),
                    list);
                return caml_call4
                        (caml_get_public_method(wallet,num_799445793,54),
                         wallet,
                         Entity[4],
                         list$0,
                         wallet_encoding)}
              return caml_call2(symbol$13,load(wallet),_a0A_)}
            function update(wallet,name,value)
             {function _a0z_(list)
               {var
                 list$0=
                  map$1
                   (function(param)
                     {var
                       v=param[2],
                       n=param[1],
                       value$0=caml_string_equal(n,name)?value:v;
                      return [0,n,value$0]},
                    list);
                return caml_call4
                        (caml_get_public_method(wallet,num_799445793,55),
                         wallet,
                         Entity[4],
                         list$0,
                         wallet_encoding)}
              return caml_call2(symbol$13,load(wallet),_a0z_)}
            var encoding=Entity[1],of_source=Entity[2],to_source=Entity[3];
            function alias_parameter(param)
             {return [0,
                      function(cctxt,s)
                       {function _a0y_(v){return caml_call1(return$3,[0,s,v])}
                        return caml_call2(symbol$13,find(cctxt,s),_a0y_)},
                      [0,autocomplete]]}
            function alias_param(opt,_a0x_,next)
             {if(opt)var sth=opt[1],name=sth;else var name=_avw_;
              if(_a0x_)
               var sth$0=_a0x_[1],desc=sth$0;
              else
               var desc=symbol(_avv_,symbol(Entity[4],_avu_));
              return [1,name,desc,alias_parameter(0),next]}
            function of_fresh(wallet,force,param)
             {var s=param[1];
              function _a0s_(list)
               {function _a0t_(param){return caml_call1(return$3,s)}
                var
                 _a0u_=
                  force
                   ?return_unit$0
                   :caml_call2
                     (iter_s,
                      function(param)
                       {var v=param[2],n=param[1];
                        if(caml_string_equal(n,s))
                         {var
                           _a0v_=
                            function(value)
                             {var _a0w_=Entity[4];
                              return caml_call3(failwith$0(_avx_),_a0w_,n,value)};
                          return caml_call2(symbol$13,caml_call1(Entity[3],v),_a0v_)}
                        return return_unit$0},
                      list);
                return caml_call2(symbol$13,_a0u_,_a0t_)}
              return caml_call2(symbol$13,load(wallet),_a0s_)}
            function fresh_alias_param(opt,_a0r_,next)
             {if(opt)var sth=opt[1],name=sth;else var name=_avA_;
              if(_a0r_)
               var sth$0=_a0r_[1],desc=sth$0;
              else
               var desc=symbol(_avz_,symbol(Entity[4],_avy_));
              return [1,
                      name,
                      desc,
                      [0,function(param,s){return caml_call1(return$3,[0,s])},0],
                      next]}
            function fresh(name){return caml_call1(return$3,[0,name])}
            function parse_source_string(cctxt,s)
             {var match=split(58,0,_avB_,s);
              if(match)
               {var _a0k_=match[1];
                if(caml_string_notequal(_a0k_,_avC_))
                 if(caml_string_notequal(_a0k_,_avD_))
                  {if(! caml_string_notequal(_a0k_,_avE_))
                    {var _a0m_=match[2];
                     if(_a0m_ && ! _a0m_[2])
                      {var text=_a0m_[1];return caml_call1(of_source,text)}}}
                 else
                  {var _a0n_=match[2];
                   if(_a0n_ && ! _a0n_[2])
                    {var path=_a0n_[1];
                     return caml_call2
                             (symbol$13,
                              caml_call2
                               (caml_get_public_method(cctxt,num_881248069,57),cctxt,path),
                              of_source)}}
                else
                 {var _a0o_=match[2];
                  if(_a0o_ && ! _a0o_[2])
                   {var alias=_a0o_[1];return find(cctxt,alias)}}}
              function _a0l_(param)
               {if(0 === param[0])
                 {var v=param[1];return caml_call1(return$3,v)}
                var a_errs=param[1];
                function _a0p_(param)
                 {if(0 === param[0])
                   {var v=param[1];return caml_call1(return$3,v)}
                  var r_errs=param[1];
                  function _a0q_(param)
                   {if(0 === param[0])
                     {var v=param[1];return caml_call1(return$3,v)}
                    var
                     s_errs=param[1],
                     all_errs=flatten([0,a_errs,[0,r_errs,[0,s_errs,0]]]);
                    return return_error(all_errs)}
                  return symbol_bind(caml_call1(of_source,s),_a0q_)}
                return symbol_bind
                        (caml_call2
                          (symbol$13,
                           caml_call2
                            (caml_get_public_method(cctxt,num_881248069,56),cctxt,s),
                           of_source),
                         _a0p_)}
              return symbol_bind(find(cctxt,s),_a0l_)}
            function source_param(opt,_a0e_,next)
             {if(opt)var sth=opt[1],name=sth;else var name=_avH_;
              if(_a0e_)
               var sth$0=_a0e_[1],desc=sth$0;
              else
               var desc=symbol(_avG_,Entity[4]);
              var
               _a0f_=Entity[4],
               _a0g_=Entity[4],
               _a0h_=Entity[4],
               _a0i_=Entity[4],
               _a0j_=Entity[4],
               desc$0=
                caml_call6(strf(_avF_),desc,_a0j_,_a0i_,_a0h_,_a0g_,_a0f_);
              return [1,name,desc$0,[0,parse_source_string,0],next]}
            function source_arg(opt,_aZ__,_aZ9_,param)
             {if(opt)
               var sth=opt[1],long$0=sth;
              else
               var long$0=symbol(_avL_,Entity[4]);
              if(_aZ__)
               var sth$0=_aZ__[1],placeholder=sth$0;
              else
               var placeholder=_avK_;
              if(_aZ9_)var sth$1=_aZ9_[1],doc=sth$1;else var doc=_avJ_;
              var
               _aZ$_=Entity[4],
               _a0a_=Entity[4],
               _a0b_=Entity[4],
               _a0c_=Entity[4],
               _a0d_=Entity[4],
               doc$0=caml_call6(strf(_avI_),doc,_a0d_,_a0c_,_a0b_,_a0a_,_aZ$_),
               kind=[0,parse_source_string,0];
              return [0,doc$0,[0,long$0,0],placeholder,kind]}
            function force_switch(param)
             {var doc=symbol(_avM_,Entity[4]);
              return [2,[0,long$0,short$0],doc]}
            function name(wallet,d)
             {function _aZ8_(param)
               {if(param){var name=param[1];return caml_call1(return$3,name)}
                return caml_call1(Entity[3],d)}
              return caml_call2(symbol$13,rev_find(wallet,d),_aZ8_)}
            return [0,
                    encoding,
                    load,
                    set,
                    find,
                    find_opt,
                    rev_find,
                    rev_find_all,
                    name,
                    mem,
                    add,
                    del,
                    update,
                    of_source,
                    to_source,
                    alias_parameter,
                    alias_param,
                    fresh_alias_param,
                    force_switch,
                    of_fresh,
                    fresh,
                    source_param,
                    source_arg,
                    autocomplete]},
         Unregistered_key_scheme=[num_248,_avO_,caml_fresh_oo_id(0)],
         Invalid_uri=[num_248,_avP_,caml_fresh_oo_id(0)],
         _avQ_=function(s){return [0,Unregistered_key_scheme,s]},
         _avR_=
          function(param)
           {if(param[1] === Unregistered_key_scheme)
             {var s=param[2];return [0,s]}
            return 0},
         _avT_=obj1([0,_avS_,output,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _avX_,
          _avW_,
          _avV_,
          [0,function(ppf,s){return caml_call2(pf(ppf),_avU_,s)}],
          _avT_,
          _avR_,
          _avQ_);
        var
         _avY_=function(s){return [0,Invalid_uri,of_string$0(s)]},
         _avZ_=
          function(param)
           {if(param[1] === Invalid_uri){var s=param[2];return [0,arg$1(0,s)]}
            return 0},
         _av1_=obj1([0,_av0_,output,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _av5_,
          _av4_,
          _av3_,
          [0,function(ppf,s){return caml_call2(pf(ppf),_av2_,s)}],
          _av1_,
          _avZ_,
          _avY_);
        var
         of_source=function(s){return return$1(caml_call1(of_b58check$9,s))},
         to_source=function(p){return caml_call1(return$3,to_b58check$13(p))},
         include$52=_avN_([0,encoding$14,of_source,to_source,name$46]),
         load=include$52[2],
         set$1=include$52[3],
         find$3=include$52[4],
         rev_find_all=include$52[7],
         add$7=include$52[10],
         del=include$52[11],
         of_fresh=include$52[19],
         fresh=include$52[20];
        def(_av7_,_av6_,pp_print_text);
        var
         to_uri=
          function(s)
           {var o=of_string$0(s),match=scheme(o);
            return match?o:failwith(_av8_)},
         _av9_=0,
         uri_encoding$0=
          conv(function(eta){return arg$1(0,eta)},to_uri,_av9_,output);
        caml_call1(Make$12,[0,equal$2,hash$0]);
        var
         make_pk_uri=
          function(x)
           {var match=scheme(x);
            return match?caml_call1(return$3,x):failwith$0(_av__)},
         make_sk_uri=
          function(x)
           {var match=scheme(x);
            return match?caml_call1(return$3,x):failwith$0(_av$_)},
         of_source$0=function(s){return make_sk_uri(of_string$0(s))},
         to_source$0=function(t){return caml_call1(return$3,arg$1(0,t))},
         Secret_key=_avN_([0,uri_encoding$0,of_source$0,to_source$0,name$47]),
         of_source$1=
          function(s)
           {function _aZ7_(pk_uri){return caml_call1(return$3,[0,pk_uri,0])}
            return caml_call2(symbol$13,make_pk_uri(of_string$0(s)),_aZ7_)},
         to_source$1=
          function(param)
           {var t=param[1];return caml_call1(return$3,arg$1(0,t))},
         _awa_=0,
         _awb_=
          function(param)
           {var key=param[2],uri=param[1];return [0,uri,[0,key]]},
         _awc_=
          function(param)
           {var _aZ5_=param[2],_aZ6_=param[1];
            if(_aZ5_){var key=_aZ5_[1];return [0,[0,_aZ6_,key]]}
            return 0},
         _awg_=
          [0,
           [0,
            _awf_,
            0,
            obj2([0,_awe_,uri_encoding$0,0,0],[0,_awd_,encoding$15,0,0]),
            _awc_,
            _awb_,
            0],
           _awa_],
         _awh_=function(uri){return [0,uri,0]},
         encoding$70=
          union$0
           (0,
            [0,
             [0,
              _awi_,
              0,
              uri_encoding$0,
              function(param){var _aZ4_=param[1];return param[2]?0:[0,_aZ4_]},
              _awh_,
              0],
             _awg_]),
         Public_key=_avN_([0,encoding$70,of_source$1,to_source$1,name$48]),
         signers_table=caml_call2(Hashtbl[2],0,13),
         find_signer_for_key=
          function(scheme)
           {var match=caml_call2(Hashtbl[7],signers_table,scheme);
            if(match){var signer=match[1];return caml_call1(return$3,signer)}
            return caml_call1(fail$1,[0,Unregistered_key_scheme,scheme])},
         Signature_mismatch=[num_248,_awj_,caml_fresh_oo_id(0)],
         _awk_=function(sk){return [0,Signature_mismatch,sk]},
         _awl_=
          function(param)
           {if(param[1] === Signature_mismatch){var sk=param[2];return [0,sk]}
            return 0},
         _awn_=obj1([0,_awm_,uri_encoding$0,0,0]);
        caml_call8
         (register_error_kind,
          num_950914574,
          _awr_,
          _awq_,
          _awp_,
          [0,function(ppf,sk){return caml_call3(pf(ppf),_awo_,pp_hum,sk)}],
          _awn_,
          _awl_,
          _awk_);
        var
         with_scheme_signer=
          function(uri,f)
           {var match=scheme(uri);
            if(match)
             {var
               scheme$0=match[1],
               _aZ3_=function(signer){return caml_call1(f,signer)};
              return caml_call2(symbol$13,find_signer_for_key(scheme$0),_aZ3_)}
            throw [0,Assert_failure,_aws_]},
         raw_get_key=
          function(cctxt,pkh)
           {function _aZM_(initial_result)
             {if(0 === initial_result[0] && initial_result[1][3])
               return return$1(initial_result);
              function _aZ0_(success)
               {return 0 === success[0]
                        ?return$1(success)
                        :return$1(initial_result)}
              function _aZ1_(signer)
               {var
                 path=to_b58check$13(pkh),
                 uri=make$1([0,signer[1]],0,0,0,[0,path],0,0,0);
                function _aZ2_(pk)
                 {return caml_call1(return$3,[0,path,[0,pk],[0,uri]])}
                return caml_call2(symbol$13,caml_call1(signer[6],uri),_aZ2_)}
              return caml_call2
                      (symbol_bind$2,
                       caml_call2(symbol$13,find_signer_for_key(_awt_),_aZ1_),
                       _aZ0_)}
            function _aZN_(names)
             {function _aZO_(param)
               {if(param){var keys=param[1];return caml_call1(return$3,keys)}
                return failwith$0(_awu_)}
              var _aZP_=0;
              return caml_call2
                      (symbol$13,
                       caml_call3
                        (fold_left_s,
                         function(keys_opt,n)
                          {function _aZQ_(sk_uri)
                            {function _aZR_(pk)
                              {var keys2=[0,n,pk,sk_uri],switch$0=0;
                               if(keys_opt)
                                {var _aZY_=keys_opt[1],switch$1=0;
                                 if(_aZY_[2] && ! _aZY_[3])
                                  if(keys2[2] || keys2[3])
                                   switch$1 = 1;
                                  else
                                   {var _aZZ_=keys_opt;switch$0 = 1;switch$1 = 1}
                                 if(! switch$1 && _aZY_[3]){var _aZZ_=keys_opt;switch$0 = 1}}
                               if(! switch$0)var _aZZ_=[0,keys2];
                               return caml_call1(return$3,_aZZ_)}
                             function _aZS_(param)
                              {if(param)
                                {var _aZT_=param[1],_aZU_=_aZT_[2],_aZV_=_aZT_[1];
                                 if(_aZU_)
                                  {var pk=_aZU_[1];return caml_call1(return_some$0,pk)}
                                 var
                                  _aZW_=
                                   function(pk)
                                    {function _aZX_(param){return caml_call1(return_some$0,pk)}
                                     return caml_call2
                                             (symbol$13,
                                              caml_call3(Public_key[12],cctxt,n,[0,_aZV_,[0,pk]]),
                                              _aZX_)};
                                 return caml_call2
                                         (symbol$13,
                                          with_scheme_signer
                                           (_aZV_,function(Signer){return caml_call1(Signer[6],_aZV_)}),
                                          _aZW_)}
                               return return_none$0}
                             return caml_call2
                                     (symbol$13,
                                      caml_call2
                                       (symbol$13,caml_call2(Public_key[5],cctxt,n),_aZS_),
                                      _aZR_)}
                           return caml_call2
                                   (symbol$13,caml_call2(Secret_key[5],cctxt,n),_aZQ_)},
                         _aZP_,
                         names),
                       _aZO_)}
            return caml_call2
                    (symbol_bind$2,
                     caml_call2
                      (symbol$13,caml_call2(rev_find_all,cctxt,pkh),_aZN_),
                     _aZM_)},
         string_before=function(s,n){return sub$0(s,0,n)},
         string_after=
          function(s,n){return sub$0(s,n,caml_ml_string_length(s) - n | 0)},
         full=make(32,num_255),
         make_empty=function(param){return make(32,0)},
         add$8=
          function(s,c)
           {return caml_bytes_set
                    (s,
                     c >>> 3 | 0,
                     chr(caml_bytes_get(s,c >>> 3 | 0) | 1 << (c & 7)))},
         singleton=function(c){var s=make_empty(0);add$8(s,c);return s},
         complement=
          function(s)
           {var r=caml_create_bytes(32),i=0;
            for(;;)
             {caml_bytes_set(r,i,chr(caml_bytes_get(s,i) ^ num_255));
              var _aZL_=i + 1 | 0;
              if(31 !== i){var i=_aZL_;continue}
              return r}},
         union$3=
          function(s1,s2)
           {var r=caml_create_bytes(32),i=0;
            for(;;)
             {var _aZJ_=caml_bytes_get(s2,i);
              caml_bytes_set(r,i,chr(caml_bytes_get(s1,i) | _aZJ_));
              var _aZK_=i + 1 | 0;
              if(31 !== i){var i=_aZK_;continue}
              return r}},
         disjoint=
          function(s1,s2)
           {try
             {var i=0;
              for(;;)
               {var _aZG_=caml_bytes_get(s2,i);
                if(0 !== (caml_bytes_get(s1,i) & _aZG_))throw Exit;
                var _aZH_=i + 1 | 0;
                if(31 !== i){var i=_aZH_;continue}
                var _aZF_=1;
                return _aZF_}}
            catch(_aZI_)
             {_aZI_ = caml_wrap_exception(_aZI_);
              if(_aZI_ === Exit)return 0;
              throw _aZI_}},
         iter$6=
          function(fn,s)
           {var i=0;
            for(;;)
             {var c=caml_bytes_get(s,i);
              if(0 !== c)
               {var j=0;
                for(;;)
                 {if(0 !== (c & 1 << j))caml_call1(fn,chr((i << 3) + j | 0));
                  var _aZE_=j + 1 | 0;
                  if(7 !== j){var j=_aZE_;continue}
                  break}}
              var _aZD_=i + 1 | 0;
              if(31 !== i){var i=_aZD_;continue}
              return 0}},
         op_CHAR=0,
         op_STRING=2,
         op_CHARCLASS=4,
         op_BOL=5,
         op_EOL=6,
         op_WORDBOUNDARY=7,
         op_BEGGROUP=8,
         op_ENDGROUP=9,
         op_REFGROUP=10,
         op_ACCEPT=11,
         op_SIMPLEOPT=12,
         op_SIMPLESTAR=13,
         op_SIMPLEPLUS=14,
         op_GOTO=15,
         op_PUSHBACK=16,
         op_SETMARK=17,
         op_CHECKPROGRESS=18,
         instr=function(opc,arg){return opc | arg << 8},
         displ=function(dest,from){return (dest - from | 0) - 1 | 0},
         is_nullable$2=
          function(param)
           {var param$0=param;
            for(;;)
             if(typeof param$0 === "number")
              switch(param$0)
               {case 0:return 1;case 1:return 1;default:return 1}
             else
              switch(param$0[0])
               {case 0:return 0;
                case 1:var s=param$0[1];return caml_string_equal(s,_awv_);
                case 2:return 0;
                case 3:var rl=param$0[1];return for_all(is_nullable$2,rl);
                case 4:
                 var r2=param$0[2],r1=param$0[1],_aZC_=is_nullable$2(r1);
                 if(_aZC_)return _aZC_;
                 var param$0=r2;
                 continue;
                case 5:return 1;
                case 6:var param$1=param$0[1],param$0=param$1;continue;
                case 7:return 1;
                case 8:var param$2=param$0[2],param$0=param$2;continue;
                default:return 1}},
         first$1=
          function(counter,param)
           {var param$0=param;
            for(;;)
             if(typeof param$0 === "number")
              switch(param$0)
               {case 0:return full;case 1:return full;default:return full}
             else
              switch(param$0[0])
               {case 0:var c=param$0[1];return singleton(c);
                case 1:
                 var s=param$0[1];
                 return caml_string_equal(s,_aww_)
                         ?full
                         :singleton(caml_string_get(s,0));
                case 2:
                 var cmpl=param$0[2],cl=param$0[1];
                 return cmpl?complement(cl):cl;
                case 3:
                 var rl=param$0[1];
                 if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return first_seq$0(counter$0,rl)}
                 return caml_trampoline_return(first_seq$0,[0,rl]);
                case 4:
                 var r2=param$0[2],r1=param$0[1],_aZB_=first$0(r2);
                 return union$3(first$0(r1),_aZB_);
                case 5:return full;
                case 6:var param$1=param$0[1],param$0=param$1;continue;
                case 7:return full;
                case 8:var param$2=param$0[2],param$0=param$2;continue;
                default:return full}},
         first_seq$0=
          function(counter,param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var _aZy_=param$0[1];
                if(typeof _aZy_ === "number")
                 {var param$1=param$0[2],param$0=param$1;continue}
                else
                 switch(_aZy_[0])
                  {case 5:
                    var rl=param$0[2],r=_aZy_[1],_aZz_=first_seq(rl);
                    return union$3(first$0(r),_aZz_);
                   case 7:
                    var rl$0=param$0[2],r$0=_aZy_[1],_aZA_=first_seq(rl$0);
                    return union$3(first$0(r$0),_aZA_);
                   default:
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return first$1(counter$0,_aZy_)}
                    return caml_trampoline_return(first$1,[0,_aZy_])}}
              return full}},
         first$0=function(param){return caml_trampoline(first$1(0,param))},
         first_seq=
          function(param){return caml_trampoline(first_seq$0(0,param))},
         charclass_of_regexp=
          function(fold_case,re)
           {var switch$0=0;
            if(typeof re !== "number")
             switch(re[0])
              {case 0:var c=re[1],match=[0,singleton(c),0];switch$0 = 1;break;
               case 2:
                var compl$0=re[2],cl=re[1],match=[0,cl,compl$0];
                switch$0 = 1;
                break
               }
            if(switch$0)
             {var compl=match[2],cl1=match[1];
              if(fold_case)
               {var r=make_empty(0);
                iter$6
                 (function(c)
                   {add$8(r,lowercase(c));
                    var switch$0=0;
                    if(! (97 <= c) || num_122 < c)switch$0 = 1;
                    var switch$1=0;
                    if(switch$0)
                     {var switch$2=0;
                      if(num_224 <= c && ! (num_246 < c))switch$2 = 1;
                      if(! switch$2)
                       {var switch$3=0;
                        if(num_248 <= c && ! (num_254 < c))switch$3 = 1;
                        if(! switch$3){var _aZx_=c;switch$1 = 1}}}
                    if(! switch$1)var _aZx_=c + num_32 | 0;
                    return add$8(r,_aZx_)},
                  cl1);
                var cl2=r}
              else
               var cl2=cl1;
              var _aZw_=compl?complement(cl2):cl2;
              return to_string(_aZw_)}
            throw [0,Assert_failure,_awx_]},
         t=caml_create_bytes(num_256),
         i=0;
        for(;;)
         {caml_bytes_set(t,i,lowercase(chr(i)));
          var _aMz_=i + 1 | 0;
          if(num_255 !== i){var i=_aMz_;continue}
          to_string(t);
          var
           compare$22=caml_string_compare,
           StringMap$0=_au_([0,compare$22]),
           flush=
            function(buf)
             {var s=contents(buf[1]);
              clear$1(buf[1]);
              var match=caml_ml_string_length(s);
              if(0 === match)return 0;
              if(1 === match)
               {var _aZv_=buf[2];
                buf[2] = [0,[0,caml_string_get(s,0)],_aZv_];
                return 0}
              buf[2] = [0,[1,s],buf[2]];
              return 0},
           dotclass=complement(singleton(10)),
           regexp=
            function(e)
             {var len=caml_ml_string_length(e),group_counter=[0,1];
              function regexpclass1(start)
               {var c=make_empty(0),i$0=start;
                for(;;)
                 {if(len <= i$0)failwith(_awD_);
                  if(93 === caml_string_get(e,i$0) && start < i$0)
                   {var j=i$0 + 1 | 0;return [0,c,j]}
                  var c1=caml_string_get(e,i$0);
                  if
                   ((i$0 + 2 | 0)
                    <
                    len
                    &&
                    45
                    ===
                    caml_string_get(e,i$0 + 1 | 0)
                    &&
                    93
                    !==
                    caml_string_get(e,i$0 + 2 | 0))
                   {var c2=caml_string_get(e,i$0 + 2 | 0);
                    if(! (c2 < c1))
                     {var i=c1;
                      for(;;)
                       {add$8(c,chr(i));
                        var _aZu_=i + 1 | 0;
                        if(c2 !== i){var i=_aZu_;continue}
                        break}}
                    var i$2=i$0 + 3 | 0,i$0=i$2;
                    continue}
                  add$8(c,c1);
                  var i$1=i$0 + 1 | 0,i$0=i$1;
                  continue}}
              function regexp1(i)
               {var sb=[0,create$1(16),0],i$0=i;
                a:
                for(;;)
                 {if(! (len <= i$0))
                   {var switch$0=0;
                    if((i$0 + 2 | 0) <= len && 92 === caml_string_get(e,i$0))
                     {var
                       c$0=caml_string_get(e,i$0 + 1 | 0),
                       _aZr_=num_124 === c$0?1:0,
                       _aZs_=_aZr_ || (41 === c$0?1:0);
                      if(_aZs_)switch$0 = 1}
                    if(! switch$0)
                     {var c$1=caml_string_get(e,i$0);
                      if(36 === c$1)
                       var match=[0,1,i$0 + 1 | 0];
                      else
                       {var switch$1=0;
                        if(91 <= c$1)
                         if(95 <= c$1)
                          switch$1 = 1;
                         else
                          {var switcher$0=c$1 + num_91 | 0;
                           switch(switcher$0)
                            {case 0:
                              var i$5=i$0 + 1 | 0,switch$2=0;
                              if(i$5 < len && 94 === caml_string_get(e,i$5))
                               {var
                                 match$3=regexpclass1(i$5 + 1 | 0),
                                 j$2=match$3[2],
                                 c$4=match$3[1],
                                 match$1=[0,c$4,1,j$2];
                                switch$2 = 1}
                              if(! switch$2)
                               var
                                match$4=regexpclass1(i$5),
                                j$3=match$4[2],
                                c$5=match$4[1],
                                match$1=[0,c$5,0,j$3];
                              var
                               j$0=match$1[3],
                               compl=match$1[2],
                               c$2=match$1[1],
                               match=[0,[2,c$2,compl],j$0];
                              break;
                             case 1:
                              var i$6=i$0 + 1 | 0;
                              if(len <= i$6)
                               var _aZt_=[0,_awA_,i$6];
                              else
                               {var c$3=caml_string_get(e,i$6),switch$3=0;
                                if(58 <= c$3)
                                 if(98 === c$3)
                                  var _aZt_=[0,2,i$6 + 1 | 0];
                                 else
                                  if(num_124 === c$3)switch$3 = 2;else switch$3 = 1;
                                else
                                 {var switcher$1=c$3 - 40 | 0;
                                  if(1 < switcher$1 >>> 0)
                                   if(9 <= switcher$1)
                                    var _aZt_=[0,[9,c$3 + num_48 | 0],i$6 + 1 | 0];
                                   else
                                    switch$3 = 1;
                                  else
                                   if(0 === switcher$1)
                                    {var group_no=group_counter[1];
                                     group_counter[1]++;
                                     var
                                      match$2=regexp0(i$6 + 1 | 0),
                                      j$1=match$2[2],
                                      r$4=match$2[1],
                                      switch$4=0;
                                     if
                                      ((j$1 + 1 | 0)
                                       <
                                       len
                                       &&
                                       92
                                       ===
                                       caml_string_get(e,j$1)
                                       &&
                                       41
                                       ===
                                       caml_string_get(e,j$1 + 1 | 0))
                                      {var _aZt_=[0,[8,group_no,r$4],j$1 + 2 | 0];switch$4 = 1}
                                     if(! switch$4)var _aZt_=failwith(_awC_)}
                                   else
                                    switch$3 = 2}
                                switch(switch$3)
                                 {case 1:var _aZt_=[0,[0,c$3],i$6 + 1 | 0];break;
                                  case 2:throw [0,Assert_failure,_awB_]
                                  }}
                              var match=_aZt_;
                              break;
                             case 2:switch$1 = 1;break;
                             default:var match=[0,0,i$0 + 1 | 0]}}
                        else
                         if(46 === c$1)
                          var match=[0,[2,dotclass,0],i$0 + 1 | 0];
                         else
                          switch$1 = 1;
                        if(switch$1)var match=[0,[0,c$1],i$0 + 1 | 0]}
                      var j=match[2],r=match[1],r$0=r,i$1=j;
                      for(;;)
                       {if(! (len <= i$1))
                         {var
                           match$0=caml_string_get(e,i$1),
                           switcher=match$0 + num_42 | 0;
                          if(! (1 < switcher >>> 0))
                           {if(0 === switcher)
                             {var i$3=i$1 + 1 | 0,r$2=[5,r$0],r$0=r$2,i$1=i$3;continue}
                            var i$4=i$1 + 1 | 0,r$3=[6,r$0],r$0=r$3,i$1=i$4;
                            continue}
                          if(21 === switcher)
                           {var i$2=i$1 + 1 | 0,r$1=[7,r$0],r$0=r$1,i$1=i$2;continue}}
                        var switch$5=0;
                        if(typeof r$0 !== "number" && 0 === r$0[0])
                         {var c=r$0[1];add_char(sb[1],c);switch$5 = 1}
                        if(! switch$5){flush(sb);sb[2] = [0,r$0,sb[2]]}
                        var i$0=i$1;
                        continue a}}}
                  flush(sb);
                  return [0,[3,rev(sb[2])],i$0]}}
              function regexp0(i)
               {var match=regexp1(i),j=match[2],r=match[1],r1=r,i$0=j;
                for(;;)
                 {if
                   ((i$0 + 2 | 0)
                    <=
                    len
                    &&
                    92
                    ===
                    caml_string_get(e,i$0)
                    &&
                    num_124
                    ===
                    caml_string_get(e,i$0 + 1 | 0))
                   {var
                     match$0=regexp1(i$0 + 2 | 0),
                     i$1=match$0[2],
                     r2=match$0[1],
                     r1$0=[4,r1,r2],
                     r1=r1$0,
                     i$0=i$1;
                    continue}
                  return [0,r1,i$0]}}
              var
               match=regexp0(0),
               j=match[2],
               r$0=match[1],
               _aZc_=j === len?r$0:failwith(_awE_),
               prog=[0,caml_make_vect(32,0)],
               progpos=[0,0],
               cpool=[0,StringMap$0[1]],
               cpoolpos=[0,0],
               numgroups=[0,1],
               numregs=[0,0],
               fold_case=0;
              function emit_instr(opc,arg)
               {if(prog[1].length - 1 <= progpos[1])
                 {var newlen=[0,prog[1].length - 1];
                  for(;;)
                   {if(newlen[1] <= progpos[1])
                     {newlen[1] = newlen[1] * 2 | 0;continue}
                    var nprog=caml_make_vect(newlen[1],0);
                    blit$1(prog[1],0,nprog,0,prog[1].length - 1);
                    prog[1] = nprog;
                    break}}
                var _aZp_=instr(opc,arg),_aZq_=progpos[1];
                caml_check_bound(prog[1],_aZq_)[1 + _aZq_] = _aZp_;
                progpos[1]++;
                return 0}
              function emit_hole(param)
               {var p=progpos[1];emit_instr(op_CHAR,0);return p}
              function patch_instr(pos,opc,dest)
               {var _aZo_=instr(opc,displ(dest,pos));
                caml_check_bound(prog[1],pos)[1 + pos] = _aZo_;
                return 0}
              function cpool_index(s)
               {try
                 {var _aZm_=caml_call2(StringMap$0[27],s,cpool[1]);
                  return _aZm_}
                catch(_aZn_)
                 {_aZn_ = caml_wrap_exception(_aZn_);
                  if(_aZn_ === Not_found)
                   {var p=cpoolpos[1];
                    cpool[1] = caml_call3(StringMap$0[4],s,p,cpool[1]);
                    cpoolpos[1]++;
                    return p}
                  throw _aZn_}}
              function allocate_register_if_nullable(r)
               {if(is_nullable$2(r))
                 {var n=numregs[1];
                  if(64 <= n)failwith(_awy_);
                  numregs[1]++;
                  return n}
                return -1}
              function disjoint_modulo_case(c1,c2){return disjoint(c1,c2)}
              function emit_code(param)
               {if(typeof param === "number")
                 switch(param)
                  {case 0:return emit_instr(op_BOL,0);
                   case 1:return emit_instr(op_EOL,0);
                   default:return emit_instr(op_WORDBOUNDARY,0)}
                else
                 switch(param[0])
                  {case 0:var c=param[1];return emit_instr(op_CHAR,c);
                   case 1:
                    var s=param[1],match=caml_ml_string_length(s);
                    if(0 === match)return 0;
                    if(1 === match)
                     return emit_instr(op_CHAR,caml_string_get(s,0));
                    try
                     {var i=index(s,0);
                      emit_code([1,string_before(s,i)]);
                      emit_instr(op_CHAR,0);
                      var _aZk_=emit_code([1,string_after(s,i + 1 | 0)]);
                      return _aZk_}
                    catch(_aZl_)
                     {_aZl_ = caml_wrap_exception(_aZl_);
                      if(_aZl_ === Not_found)
                       return emit_instr(op_STRING,cpool_index(s));
                      throw _aZl_}
                   case 2:
                    var compl=param[2],cl=param[1],cl2=compl?complement(cl):cl;
                    return emit_instr(op_CHARCLASS,cpool_index(to_string(cl2)));
                   case 3:var rl=param[1];return emit_seq_code(rl);
                   case 4:
                    var r2=param[2],r1=param[1],pos_pushback=emit_hole(0);
                    emit_code(r1);
                    var pos_goto_end=emit_hole(0),lbl1=progpos[1];
                    emit_code(r2);
                    var lbl2=progpos[1];
                    patch_instr(pos_pushback,op_PUSHBACK,lbl1);
                    return patch_instr(pos_goto_end,op_GOTO,lbl2);
                   case 5:
                    var
                     r=param[1],
                     regno=allocate_register_if_nullable(r),
                     lbl1$0=emit_hole(0);
                    if(0 <= regno)emit_instr(op_SETMARK,regno);
                    emit_code(r);
                    if(0 <= regno)emit_instr(op_CHECKPROGRESS,regno);
                    emit_instr(op_GOTO,displ(lbl1$0,progpos[1]));
                    var lbl2$0=progpos[1];
                    return patch_instr(lbl1$0,op_PUSHBACK,lbl2$0);
                   case 6:
                    var
                     r$0=param[1],
                     regno$0=allocate_register_if_nullable(r$0),
                     lbl1$1=progpos[1];
                    emit_code(r$0);
                    if(0 <= regno$0)emit_instr(op_CHECKPROGRESS,regno$0);
                    var pos_pushback$0=emit_hole(0);
                    if(0 <= regno$0)emit_instr(op_SETMARK,regno$0);
                    emit_instr(op_GOTO,displ(lbl1$1,progpos[1]));
                    var lbl2$1=progpos[1];
                    return patch_instr(pos_pushback$0,op_PUSHBACK,lbl2$1);
                   case 7:
                    var r$1=param[1],pos_pushback$1=emit_hole(0);
                    emit_code(r$1);
                    var lbl=progpos[1];
                    return patch_instr(pos_pushback$1,op_PUSHBACK,lbl);
                   case 8:
                    var r$2=param[2],n=param[1];
                    emit_instr(op_BEGGROUP,n);
                    emit_code(r$2);
                    emit_instr(op_ENDGROUP,n);
                    numgroups[1] = max(numgroups[1],n + 1 | 0);
                    return 0;
                   default:
                    var n$0=param[1];
                    emit_instr(op_REFGROUP,n$0);
                    numgroups[1] = max(numgroups[1],n$0 + 1 | 0);
                    return 0}}
              function emit_seq_code(param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var _aZd_=param$0[1];
                    if(typeof _aZd_ !== "number")
                     switch(_aZd_[0])
                      {case 5:
                        var _aZe_=_aZd_[1],switch$0=0;
                        if(typeof _aZe_ === "number")
                         switch$0 = 1;
                        else
                         switch(_aZe_[0])
                          {case 0:
                           case 2:
                            var rl=param$0[2],_aZf_=first_seq(rl);
                            if(disjoint_modulo_case(first$0(_aZe_),_aZf_))
                             {emit_instr
                               (op_SIMPLESTAR,
                                cpool_index(charclass_of_regexp(fold_case,_aZe_)));
                              var param$0=rl;
                              continue}
                            break;
                           default:switch$0 = 1}
                        break;
                       case 6:
                        var _aZg_=_aZd_[1],switch$1=0;
                        if(typeof _aZg_ === "number")
                         switch$1 = 1;
                        else
                         switch(_aZg_[0])
                          {case 0:
                           case 2:
                            var rl$0=param$0[2],_aZh_=first_seq(rl$0);
                            if(disjoint_modulo_case(first$0(_aZg_),_aZh_))
                             {emit_instr
                               (op_SIMPLEPLUS,
                                cpool_index(charclass_of_regexp(fold_case,_aZg_)));
                              var param$0=rl$0;
                              continue}
                            break;
                           default:switch$1 = 1}
                        break;
                       case 7:
                        var _aZi_=_aZd_[1],switch$2=0;
                        if(typeof _aZi_ === "number")
                         switch$2 = 1;
                        else
                         switch(_aZi_[0])
                          {case 0:
                           case 2:
                            var rl$1=param$0[2],_aZj_=first_seq(rl$1);
                            if(disjoint_modulo_case(first$0(_aZi_),_aZj_))
                             {emit_instr
                               (op_SIMPLEOPT,
                                cpool_index(charclass_of_regexp(fold_case,_aZi_)));
                              var param$0=rl$1;
                              continue}
                            break;
                           default:switch$2 = 1}
                        break
                       }
                    var param$1=param$0[2];
                    emit_code(_aZd_);
                    var param$0=param$1;
                    continue}
                  return 0}}
              emit_code(_aZc_);
              emit_instr(op_ACCEPT,0);
              var start=first$0(_aZc_);
              if(caml_bytes_equal(start,full))
               var start_pos=-1;
              else
               {var r=make(num_256,0);
                iter$6(function(c){return caml_bytes_set(r,c,1)},start);
                var start_pos=cpool_index(to_string(r))}
              var
               constantpool=caml_make_vect(cpoolpos[1],_awz_),
               _aY__=cpool[1];
              function _aY$_(str,idx)
               {caml_check_bound(constantpool,idx)[1 + idx] = str;return 0}
              caml_call2(StringMap$0[12],_aY$_,_aY__);
              var _aZa_=numregs[1],_aZb_=numgroups[1];
              return [0,
                      sub$1(prog[1],0,progpos[1]),
                      constantpool,
                      fold_case_table,
                      _aZb_,
                      _aZa_,
                      start_pos]},
           last_search_result=[0,[0]],
           search_forward=
            function(re,s,pos)
             {var res=re_search_forward(re,s,pos);
              last_search_result[1] = res;
              if(0 === res.length - 1)throw Not_found;
              return caml_check_bound(res,0)[1]},
           opt_search_forward=
            function(re,s,pos)
             {try
               {var _aY8_=[0,search_forward(re,s,pos)];return _aY8_}
              catch(_aY9_)
               {_aY9_ = caml_wrap_exception(_aY9_);
                if(_aY9_ === Not_found)return 0;
                throw _aY9_}},
           global_replace=
            function(expr,repl,matched)
             {var accu=0,start=0,last_was_empty=0;
              for(;;)
               {var startpos=last_was_empty?start + 1 | 0:start;
                if(caml_ml_string_length(matched) < startpos)
                 var _aY7_=[0,string_after(matched,start),accu];
                else
                 {var match=opt_search_forward(expr,matched,startpos);
                  if(match)
                   {var pos$0=match[1];
                    if(last_search_result[1].length - 1 <= 0)
                     var _aY6_=invalid_arg(_awF_);
                    else
                     {var pos=caml_check_bound(last_search_result[1],1)[2];
                      if(-1 === pos)throw Not_found;
                      var _aY6_=pos}
                    var
                     repl_text=
                      re_replacement_text(repl,last_search_result[1],matched),
                     last_was_empty$0=_aY6_ === pos$0?1:0,
                     accu$0=
                      [0,
                       repl_text,
                       [0,sub$0(matched,start,pos$0 - start | 0),accu]],
                     accu=accu$0,
                     start=_aY6_,
                     last_was_empty=last_was_empty$0;
                    continue}
                  var _aY7_=[0,string_after(matched,start),accu]}
                return concat$0(_awG_,rev(_aY7_))}},
           component_of_sexp=function _aY5_(_aY4_){return _aY5_.fun(_aY4_)},
           component_of_sexp$0=function _aY3_(_aY2_){return _aY3_.fun(_aY2_)};
          caml_update_dummy
           (component_of_sexp,
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1],switch$0=caml_string_compare(atom,_awH_);
                if(0 <= switch$0)
                 {if(! (0 < switch$0))return num_892015045;
                  if(! caml_string_notequal(atom,_awI_))return num_250086680;
                  if(! caml_string_notequal(atom,_awJ_))return num_911188600;
                  if(! caml_string_notequal(atom,_awK_))return num_795008922;
                  if(! caml_string_notequal(atom,_awL_))return num_178940859;
                  if(! caml_string_notequal(atom,_awM_))return num_145160103}
                else
                 {if(! caml_string_notequal(atom,_awN_))return -715788189;
                  if(! caml_string_notequal(atom,_awO_))
                   return ptag_takes_args(loc,sexp);
                  if(! caml_string_notequal(atom,_awP_))return num_127343600;
                  if(! caml_string_notequal(atom,_awQ_))return num_61643255;
                  if(! caml_string_notequal(atom,_awR_))return num_803994504}
                return no_variant_match(0)}
              var _aYX_=sexp[1];
              if(_aYX_)
               {var _aYY_=_aYX_[1];
                if(0 === _aYY_[0])
                 {var
                   sexp_args=_aYX_[2],
                   atom$0=_aYY_[1],
                   switch$1=caml_string_compare(atom$0,_awS_);
                  if(0 <= switch$1)
                   {if
                     (!
                      (0 < switch$1)
                      ||
                      !
                      caml_string_notequal(atom$0,_awT_)
                      ||
                      !
                      caml_string_notequal(atom$0,_awU_)
                      ||
                      !
                      caml_string_notequal(atom$0,_awV_)
                      ||
                      !
                      caml_string_notequal(atom$0,_awW_)
                      ||
                      !
                      caml_string_notequal(atom$0,_awX_))
                     return ptag_no_args(loc,sexp)}
                  else
                   {if(! caml_string_notequal(atom$0,_awY_))
                     return ptag_no_args(loc,sexp);
                    if(! caml_string_notequal(atom$0,_awZ_))
                     {if(sexp_args && ! sexp_args[2])
                       {var v0=sexp_args[1],switch$2=0;
                        if(1 === v0[0])
                         {var _aYZ_=v0[1];
                          if(_aYZ_)
                           {var _aY0_=_aYZ_[2];
                            if(_aY0_)
                             {var _aY1_=_aY0_[2];
                              if(_aY1_ && ! _aY1_[2])
                               {var
                                 v2=_aY1_[1],
                                 v1=_aY0_[1],
                                 v0$1=_aYZ_[1],
                                 v0$2=caml_call1(component_of_sexp$0,v0$1),
                                 v1$0=a_of_sexp(v1),
                                 v2$0=a_of_sexp(v2),
                                 v0$0=[0,v0$2,v1$0,v2$0];
                                switch$2 = 1}}}}
                        if(! switch$2)
                         var v0$0=of_sexp_error(caml_call2(sprintf(_rt_),loc,3),v0);
                        return [0,num_198771759,v0$0]}
                      return ptag_incorrect_n_args(loc,atom$0,sexp)}
                    if
                     (!
                      caml_string_notequal(atom$0,_aw0_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aw1_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aw2_))
                     return ptag_no_args(loc,sexp)}
                  return no_variant_match(0)}
                return nested_list_invalid_poly_var(loc,sexp)}
              return empty_list_invalid_poly_var(loc,sexp)});
          caml_update_dummy
           (component_of_sexp$0,
            function(sexp)
             {try
               {var _aYV_=caml_call1(component_of_sexp,sexp);return _aYV_}
              catch(_aYW_)
               {_aYW_ = caml_wrap_exception(_aYW_);
                if(_aYW_ === No_variant_match)
                 return no_matching_variant_found(tp_loc,sexp);
                throw _aYW_}});
          var
           symbol$23=
            function(x,y)
             {if(y < 1)throw Division_by_zero;
              return 0 < x?1 + caml_div(x - 1 | 0,y) | 0:0},
           unsafe_set_uint8=
            function(t,off,v){caml_bytes_unsafe_set(t,off,chr(v));return 0},
           make_alphabet=
            function(alphabet)
             {if(64 !== caml_ml_string_length(alphabet))invalid_arg(_aw3_);
              if(contains(alphabet,61))invalid_arg(_aw4_);
              var
               emap=
                init$1
                 (caml_ml_string_length(alphabet),
                  function(i){return caml_string_get(alphabet,i)}),
               dmap=caml_make_vect(num_256,-1),
               _aYT_=caml_ml_string_length(alphabet) - 1 | 0,
               _aYS_=0;
              if(! (_aYT_ < 0))
               {var i=_aYS_;
                for(;;)
                 {var chr=caml_string_unsafe_get(alphabet,i);
                  caml_check_bound(dmap,chr)[1 + chr] = i;
                  var _aYU_=i + 1 | 0;
                  if(_aYT_ !== i){var i=_aYU_;continue}
                  break}}
              return [0,emap,dmap]},
           alphabet=make_alphabet(_aw5_);
          make_alphabet(_aw6_);
          var
           unsafe_set_be_uint16=
            function(t,off,v){return caml_bytes_set16(t,off,caml_bswap16(v))},
           Out_of_bounds=[num_248,_aw7_,caml_fresh_oo_id(0)],
           Too_much_input=[num_248,_aw8_,caml_fresh_oo_id(0)],
           get_uint8$0=
            function(t,off)
             {var
               _aYQ_=off < 0?1:0,
               _aYR_=_aYQ_ || (caml_ml_string_length(t) <= off?1:0);
              if(_aYR_)throw Out_of_bounds;
              return caml_string_unsafe_get(t,off)},
           padding=61,
           error_msgf=
            function(fmt)
             {return kprintf(function(err){return [1,[0,3854881,err]]},fmt)},
           _aw$_=
            function(opt,param,_aYG_,len,input)
             {var dmap=param[2];
              if(opt)var sth=opt[1],pad=sth;else var pad=1;
              if(_aYG_)var sth$0=_aYG_[1],off=sth$0;else var off=0;
              if(len)
               var len$0=len[1],len$1=len$0;
              else
               var len$1=caml_ml_string_length(input) - off | 0;
              if
               (0
                <=
                len$1
                &&
                0
                <=
                off
                &&
                !
                ((caml_ml_string_length(input) - len$1 | 0) < off))
               {var
                 n=symbol$23(len$1,4) * 4 | 0,
                 n$0=symbol$23(n,4) * 3 | 0,
                 t=caml_create_bytes(n$0),
                 get_uint8_or_padding=
                  pad
                   ?function(t,i)
                     {if(len$1 <= i)throw Out_of_bounds;
                      return get_uint8$0(t,off + i | 0)}
                   :function(t,i)
                     {try
                       {var _aYO_=i < len$1?get_uint8$0(t,off + i | 0):padding;
                        return _aYO_}
                      catch(_aYP_)
                       {_aYP_ = caml_wrap_exception(_aYP_);
                        if(_aYP_ === Out_of_bounds)return padding;
                        throw _aYP_}},
                 emit=
                  function(a,b,c,d,j)
                   {var
                     x=a << 18 | b << 12 | c << 6 | d,
                     v=x >>> 8 | 0,
                     switch$0=0;
                    if(0 <= j && ! (caml_ml_bytes_length(t) < (j + 1 | 0)))
                     {var switch$1=0;
                      if(0 <= j && ! (caml_ml_bytes_length(t) < (j + 2 | 0)))
                       {unsafe_set_be_uint16(t,j,v);switch$1 = 1}
                      if(! switch$1)unsafe_set_uint8(t,j,v >>> 8 | 0)}
                    else
                     switch$0 = 1;
                    var v$0=x & num_255,off=j + 2 | 0;
                    if(0 <= off && ! (caml_ml_bytes_length(t) <= off))
                     return unsafe_set_uint8(t,off,v$0);
                    return 0},
                 dmap$0=
                  function(i)
                   {var x=dmap[1 + i];if(x === -1)throw Not_found;return x},
                 only_padding=
                  function(pad,idx)
                   {var pad$0=[0,pad + 3 | 0],idx$0=[0,idx];
                    for(;;)
                     {if((idx$0[1] + 4 | 0) < len$1)
                       {var
                         _aYM_=
                          num_15677 !== caml_string_get16(input,off + idx$0[1] | 0)
                           ?1
                           :0,
                         _aYN_=
                          _aYM_
                          ||
                          (num_15677
                            !==
                            caml_string_get16(input,(off + idx$0[1] | 0) + 2 | 0)
                            ?1
                            :0);
                        if(_aYN_)throw Not_found;
                        idx$0[1] = idx$0[1] + 4 | 0;
                        pad$0[1] = pad$0[1] + 3 | 0;
                        continue}
                      for(;;)
                       {if(idx$0[1] < len$1)
                         {if(caml_string_unsafe_get(input,off + idx$0[1] | 0) !== 61)
                           throw Not_found;
                          idx$0[1]++;
                          continue}
                        return pad$0[1]}}};
                try
                 {var j=0,i=0;
                  for(;;)
                   {if(i === n)
                     var pad$5=0;
                    else
                     {var x=get_uint8_or_padding(input,i + 3 | 0);
                      try
                       {var pad$4=0,_aYK_=dmap$0(x),d=_aYK_,pad$0=pad$4}
                      catch(exn$0)
                       {exn$0 = caml_wrap_exception(exn$0);
                        var switch$0=0;
                        if(exn$0 === Not_found && x === 61)
                         var d=0,pad$0=1;
                        else
                         switch$0 = 1;
                        if(switch$0)throw exn$0;
                        var exn=exn$0}
                      var x$0=get_uint8_or_padding(input,i + 2 | 0);
                      try
                       {var _aYJ_=dmap$0(x$0),c=_aYJ_,pad$1=pad$0}
                      catch(exn)
                       {exn = caml_wrap_exception(exn);
                        var switch$1=0;
                        if(exn === Not_found && x$0 === 61 && 1 === pad$0)
                         {var c=0,pad$1=2;switch$1 = 1}
                        if(! switch$1)throw exn;
                        var exn$0=exn}
                      var x$1=get_uint8_or_padding(input,i + 1 | 0);
                      try
                       {var _aYI_=dmap$0(x$1),b=_aYI_,pad$2=pad$1}
                      catch(exn)
                       {exn = caml_wrap_exception(exn);
                        var switch$2=0;
                        if(exn === Not_found && x$1 === 61 && 2 === pad$1)
                         {var b=0,pad$2=3;switch$2 = 1}
                        if(! switch$2)throw exn;
                        var exn$1=exn}
                      var x$2=get_uint8_or_padding(input,i);
                      try
                       {var _aYH_=dmap$0(x$2),a=_aYH_,pad$3=pad$2}
                      catch(exn)
                       {exn = caml_wrap_exception(exn);
                        var switch$3=0;
                        if(exn === Not_found && x$2 === 61 && 3 === pad$2)
                         {var a=0,pad$3=4;switch$3 = 1}
                        if(! switch$3)throw exn;
                        var exn$2=exn}
                      emit(a,b,c,d,j);
                      if((i + 4 | 0) === n)
                       var pad$5=0 === pad$3?0:4 === pad$3?3:pad$3;
                      else
                       {if(0 === pad$3)
                         {var i$0=i + 4 | 0,j$0=j + 3 | 0,j=j$0,i=i$0;continue}
                        if(4 === pad$3)
                         var pad$5=only_padding(3,i + 4 | 0);
                        else
                         {if(1 === pad)throw Too_much_input;
                          var pad$5=only_padding(pad$3,i + 4 | 0)}}}
                    break}}
                catch(_aYL_)
                 {_aYL_ = caml_wrap_exception(_aYL_);
                  if(_aYL_ === Out_of_bounds)return error_msgf(_axb_);
                  if(_aYL_ === Not_found)return error_msgf(_axc_);
                  if(_aYL_ === Too_much_input)return error_msgf(_axd_);
                  throw _aYL_}
                return 0 === pad$5
                        ?[0,[0,caml_string_of_bytes(t),0,n$0]]
                        :[0,[0,caml_string_of_bytes(t),0,n$0 - pad$5 | 0]]}
              return error_msgf(_axa_)},
           decode_exn=
            function(pad,alphabet$1,off$0,len$0,input)
             {if(alphabet$1)
               var sth=alphabet$1[1],alphabet$0=sth;
              else
               var alphabet$0=alphabet;
              var err=_aw$_(pad,alphabet$0,off$0,len$0,input);
              if(0 === err[0])
               var
                match=err[1],
                len=match[3],
                off=match[2],
                res=match[1],
                match$0=[0,sub$0(res,off,len)];
              else
               var match$0=err;
              if(0 === match$0[0]){var res$0=match$0[1];return res$0}
              var match$1=match$0[1],err$0=match$1[2];
              return invalid_arg(err$0)},
           get_q=
            function(param)
             {var param$0=param;
              for(;;)
               {if(param$0)
                 {var _aYF_=param$0[1];
                  if(0 === _aYF_[0]){var q=_aYF_[1];return q}
                  var param$1=param$0[2],param$0=param$1;
                  continue}
                return num_1000$0}},
           get_rest=
            function(pl)
             {var _aYE_=0;
              return fold_right
                      (function(param)
                        {if(0 === param[0])return function(l){return l};
                         var p=param[1];
                         return function(l){return [0,p,l]}},
                       pl,
                       _aYE_)},
           yytransl_const=_axe_.slice(),
           yytransl_block=[0,263,264,0],
           yytablesize=46,
           _axf_=
            function(caml_parser_env)
             {throw [0,YYexit,peek_val(caml_parser_env,0)]},
           _axg_=
            function(caml_parser_env)
             {throw [0,YYexit,peek_val(caml_parser_env,0)]},
           _axh_=
            function(caml_parser_env)
             {throw [0,YYexit,peek_val(caml_parser_env,0)]},
           _axi_=
            function(caml_parser_env)
             {throw [0,YYexit,peek_val(caml_parser_env,0)]},
           _axj_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,2),
               _3=peek_val(caml_parser_env,0);
              return [0,_1,_3]},
           _axk_=
            function(caml_parser_env)
             {var _1=peek_val(caml_parser_env,1);return [0,_1,0]},
           _axl_=
            function(caml_parser_env)
             {var _2=peek_val(caml_parser_env,0);return [0,get_q(_2),0]},
           _axm_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,1),
               _2=peek_val(caml_parser_env,0),
               _aYD_=[0,split$0(0,f(_1),45)];
              return [0,get_q(_2),_aYD_]},
           _axn_=function(caml_parser_env){return 0},
           _axo_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,2),
               _3=peek_val(caml_parser_env,0);
              return [0,_1,_3]},
           _axp_=
            function(caml_parser_env)
             {var _1=peek_val(caml_parser_env,1);return [0,_1,0]},
           _axq_=
            function(caml_parser_env)
             {var _2=peek_val(caml_parser_env,0);return [0,get_q(_2),4]},
           _axr_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,1),
               _2=peek_val(caml_parser_env,0),
               enc=f(_1),
               _aYC_=
                caml_string_notequal(enc,_axs_)
                 ?caml_string_notequal(enc,_axt_)
                   ?caml_string_notequal(enc,_axu_)
                     ?caml_string_notequal(enc,_axv_)?[0,enc]:3
                     :0
                   :2
                 :1;
              return [0,get_q(_2),_aYC_]},
           _axw_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,2),
               _3=peek_val(caml_parser_env,0);
              return [0,_1,_3]},
           _axx_=
            function(caml_parser_env)
             {var _1=peek_val(caml_parser_env,1);return [0,_1,0]},
           _axy_=
            function(caml_parser_env)
             {var _2=peek_val(caml_parser_env,0);return [0,get_q(_2),0]},
           _axz_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,1),
               _2=peek_val(caml_parser_env,0),
               _aYB_=[0,f(_1)];
              return [0,get_q(_2),_aYB_]},
           _axA_=function(caml_parser_env){return 0},
           _axB_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,2),
               _3=peek_val(caml_parser_env,0);
              return [0,_1,_3]},
           _axC_=
            function(caml_parser_env)
             {var _1=peek_val(caml_parser_env,1);return [0,_1,0]},
           _axD_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,3),
               _3=peek_val(caml_parser_env,1),
               _4=peek_val(caml_parser_env,0),
               _aYy_=get_rest(_4),
               _aYz_=f(_3),
               _aYA_=[0,[0,f(_1),_aYz_],_aYy_];
              return [0,get_q(_4),_aYA_]},
           _axE_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,3),
               _4=peek_val(caml_parser_env,0),
               _aYw_=get_rest(_4),
               _aYx_=[0,[1,f(_1)],_aYw_];
              return [0,get_q(_4),_aYx_]},
           _axF_=
            function(caml_parser_env)
             {var _4=peek_val(caml_parser_env,0),_aYv_=[0,0,get_rest(_4)];
              return [0,get_q(_4),_aYv_]},
           _axG_=function(caml_parser_env){return 0},
           _axH_=
            function(caml_parser_env)
             {var
               _1=peek_val(caml_parser_env,1),
               _2=peek_val(caml_parser_env,0);
              return [0,_1,_2]},
           _axI_=
            function(caml_parser_env)
             {var
               _2=peek_val(caml_parser_env,2),
               _4=peek_val(caml_parser_env,0);
              if(caml_string_equal(_2,_axJ_))
               try
                {var _aYt_=[0,num_1000 * caml_float_of_string(_4) | 0];
                 return _aYt_}
               catch(_aYu_)
                {_aYu_ = caml_wrap_exception(_aYu_);
                 if(_aYu_[1] === Failure)throw Parse_error;
                 throw _aYu_}
              return [1,[0,_2,[0,_4]]]},
           _axK_=
            function(caml_parser_env)
             {var
               _2=peek_val(caml_parser_env,2),
               _4=peek_val(caml_parser_env,0);
              return [1,[0,_2,[1,_4]]]},
           yyact=
            [0,
             function(param){return failwith(_axL_)},
             _axK_,
             _axI_,
             _axH_,
             _axG_,
             _axF_,
             _axE_,
             _axD_,
             _axC_,
             _axB_,
             _axA_,
             _axz_,
             _axy_,
             _axx_,
             _axw_,
             _axr_,
             _axq_,
             _axp_,
             _axo_,
             _axn_,
             _axm_,
             _axl_,
             _axk_,
             _axj_,
             _axi_,
             _axh_,
             _axg_,
             _axf_],
           yytables=
            [0,
             yyact,
             yytransl_const,
             yytransl_block,
             yylhs,
             yylen,
             yydefred,
             yydgoto,
             yysindex,
             yyrindex,
             yygindex,
             yytablesize,
             yytable,
             yycheck,
             parse_error,
             yynames_const,
             yynames_block],
           lexfun=
            function(lexbuf)
             {a:
              for(;;)
               {var ocaml_lex_state=0;
                for(;;)
                 {var
                   ocaml_lex_state$0=
                    engine(ocaml_lex_tables,ocaml_lex_state,lexbuf);
                  if(8 < ocaml_lex_state$0 >>> 0)
                   {caml_call1(lexbuf[1],lexbuf);
                    var ocaml_lex_state=ocaml_lex_state$0;
                    continue}
                  switch(ocaml_lex_state$0)
                   {case 0:return 0;
                    case 1:return 1;
                    case 2:return 2;
                    case 3:return 3;
                    case 4:return 4;
                    case 5:
                     var sl=0;
                     b:
                     for(;;)
                      {var ocaml_lex_state$1=10;
                       for(;;)
                        {var
                          ocaml_lex_state$2=
                           engine(ocaml_lex_tables,ocaml_lex_state$1,lexbuf);
                         if(2 < ocaml_lex_state$2 >>> 0)
                          {caml_call1(lexbuf[1],lexbuf);
                           var ocaml_lex_state$1=ocaml_lex_state$2;
                           continue}
                         switch(ocaml_lex_state$2)
                          {case 0:var sl$0=[0,_axN_,sl],sl=sl$0;continue b;
                           case 1:return [1,fold_right(symbol,sl,_axM_)];
                           default:
                            var
                             s=sub_lexeme(lexbuf,lexbuf[5],lexbuf[6]),
                             sl$1=[0,s,sl],
                             sl=sl$1;
                            continue b}}}
                    case 6:
                     var tok=sub_lexeme(lexbuf,lexbuf[5],lexbuf[6]);
                     return [0,tok];
                    case 7:continue a;
                    default:return 5}}}},
           string_of_pl=
            function(param)
             {if(param)
               {var _aYo_=param[1],_aYp_=_aYo_[2],_aYq_=_aYo_[1];
                if(0 === _aYp_[0])
                 {var r=param[2],v=_aYp_[1],_aYr_=string_of_pl(r);
                  return caml_call3(sprintf(_axP_),_aYq_,v,_aYr_)}
                var
                 r$0=param[2],
                 v$0=_aYp_[1],
                 len=caml_ml_string_length(v$0),
                 _aYs_=string_of_pl(r$0),
                 buf=create$1(2 * len | 0),
                 _aYj_=len - 1 | 0,
                 _aYi_=0;
                if(! (_aYj_ < 0))
                 {var i=_aYi_;
                  for(;;)
                   {var c=caml_string_get(v$0,i),_aYl_=c - 63 | 0,switch$0=0;
                    if(31 < _aYl_ >>> 0)
                     {var _aYm_=_aYl_ + 27 | 0;
                      if(! (10 < _aYm_ >>> 0))
                       switch(_aYm_)
                        {case 0:case 6:case 7:case 10:switch$0 = 1;break}}
                    else
                     if(26 < (_aYl_ - 1 | 0) >>> 0)switch$0 = 1;
                    if(switch$0)
                     {add_char(buf,92);add_char(buf,c)}
                    else
                     add_char(buf,c);
                    var _aYn_=i + 1 | 0;
                    if(_aYj_ !== i){var i=_aYn_;continue}
                    break}}
                var _aYk_=contents(buf);
                return caml_call3(sprintf(_axQ_),_aYq_,_aYk_,_aYs_)}
              return _axR_},
           accept_el=
            function(el,pl,q)
             {var
               _aYg_=string_of_pl(pl),
               _aYh_=
                0 <= q
                 ?num_1000$0 < q
                   ?invalid_arg(caml_call1(sprintf(_axS_),q))
                   :num_1000$0 === q?_axT_:caml_call1(sprintf(_axU_),q)
                 :invalid_arg(caml_call1(sprintf(_axV_),q));
              return caml_call3(sprintf(_axW_),el,_aYh_,_aYg_)},
           string_of_media_range=
            function(param)
             {var _aYa_=param[1];
              if(typeof _aYa_ === "number")
               {var pl=param[2];
                return function(_aYd_){return accept_el(_axX_,pl,_aYd_)}}
              else
               {if(0 === _aYa_[0])
                 {var
                   pl$0=param[2],
                   st=_aYa_[2],
                   t=_aYa_[1],
                   _aYb_=caml_call2(sprintf(_axY_),t,st);
                  return function(_aYf_){return accept_el(_aYb_,pl$0,_aYf_)}}
                var
                 pl$1=param[2],
                 t$0=_aYa_[1],
                 _aYc_=caml_call1(sprintf(_axZ_),t$0);
                return function(_aYe_){return accept_el(_aYc_,pl$1,_aYe_)}}},
           string_of_list=
            function(s_of_el)
             {return function(param$0)
               {var s=s$1,param=param$0;
                for(;;)
                 {if(param)
                   {var
                     _aX8_=param[2],
                     _aX9_=param[1],
                     _aX__=_aX9_[2],
                     _aX$_=_aX9_[1];
                    if(_aX8_)
                     {var
                       s$0=symbol(s,symbol(caml_call2(s_of_el,_aX__,_aX$_),_ax0_)),
                       s=s$0,
                       param=_aX8_;
                      continue}
                    return symbol(s,caml_call2(s_of_el,_aX__,_aX$_))}
                  return s}}},
           string_of_media_ranges=string_of_list(string_of_media_range),
           credential_of_string=
            function(buf)
             {try
               {var
                 _aX4_=function(b){return b},
                 b64=caml_call1(sscanf(buf,_ax3_),_aX4_),
                 match=split$0(_ax4_,decode_exn(0,0,0,0,b64),58),
                 switch$0=0;
                if(match)
                 {var _aX5_=match[2];
                  if(_aX5_ && ! _aX5_[2])
                   {var
                     pass=_aX5_[1],
                     user=match[1],
                     _aX6_=[0,-1058563442,[0,user,pass]];
                    switch$0 = 1}}
                if(! switch$0)var _aX6_=[0,num_912009552,buf];
                return _aX6_}
              catch(_aX7_){return [0,num_912009552,buf]}},
           version_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1];
                return caml_string_notequal(atom,_ax5_)
                        ?caml_string_notequal(atom,_ax6_)
                          ?caml_string_notequal(atom,_ax7_)
                            ?no_variant_match(0)
                            :ptag_takes_args(tp_loc$0,sexp)
                          :num_540315116
                        :num_540315115}
              var _aX2_=sexp[1];
              if(_aX2_)
               {var _aX3_=_aX2_[1];
                if(0 === _aX3_[0])
                 {var sexp_args=_aX2_[2],atom$0=_aX3_[1];
                  if(caml_string_notequal(atom$0,_ax8_))
                   {if(caml_string_notequal(atom$0,_ax9_))
                     {if(caml_string_notequal(atom$0,_ax__))
                       return no_variant_match(0);
                      if(sexp_args && ! sexp_args[2])
                       {var v0=sexp_args[1],v0$0=a_of_sexp(v0);
                        return [0,num_912009552,v0$0]}
                      return ptag_incorrect_n_args(tp_loc$0,atom$0,sexp)}
                    return ptag_no_args(tp_loc$0,sexp)}
                  return ptag_no_args(tp_loc$0,sexp)}
                return nested_list_invalid_poly_var(tp_loc$0,sexp)}
              return empty_list_invalid_poly_var(tp_loc$0,sexp)},
           version_of_sexp$0=
            function(sexp)
             {try
               {var _aX0_=version_of_sexp(sexp);return _aX0_}
              catch(_aX1_)
               {_aX1_ = caml_wrap_exception(_aX1_);
                if(_aX1_ === No_variant_match)
                 return no_matching_variant_found(tp_loc$1,sexp);
                throw _aX1_}},
           sexp_of_version=
            function(param)
             {if(typeof param === "number")
               return num_540315116 <= param?_ax$_:_aya_;
              var v0=param[2];
              return [1,[0,_ayb_,[0,[0,v0],0]]]},
           meth_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1],switch$0=caml_string_compare(atom,_ayc_);
                if(0 <= switch$0)
                 {if(! (0 < switch$0))return ptag_takes_args(tp_loc$2,sexp);
                  if(! caml_string_notequal(atom,_ayd_))return num_994393768;
                  if(! caml_string_notequal(atom,_aye_))return num_891112544;
                  if(! caml_string_notequal(atom,_ayf_))return num_3997359;
                  if(! caml_string_notequal(atom,_ayg_))return num_336447077}
                else
                 {if(! caml_string_notequal(atom,_ayh_))return num_357830602;
                  if(! caml_string_notequal(atom,_ayi_))return num_492530731;
                  if(! caml_string_notequal(atom,_ayj_))return num_3546230;
                  if(! caml_string_notequal(atom,_ayk_))return num_801894688;
                  if(! caml_string_notequal(atom,_ayl_))return -539883714}
                return no_variant_match(0)}
              var _aXY_=sexp[1];
              if(_aXY_)
               {var _aXZ_=_aXY_[1];
                if(0 === _aXZ_[0])
                 {var
                   sexp_args=_aXY_[2],
                   atom$0=_aXZ_[1],
                   switch$1=caml_string_compare(atom$0,_aym_);
                  if(0 <= switch$1)
                   {if(! (0 < switch$1))
                     {if(sexp_args && ! sexp_args[2])
                       {var v0=sexp_args[1],v0$0=a_of_sexp(v0);
                        return [0,num_912009552,v0$0]}
                      return ptag_incorrect_n_args(tp_loc$2,atom$0,sexp)}
                    if
                     (!
                      caml_string_notequal(atom$0,_ayn_)
                      ||
                      !
                      caml_string_notequal(atom$0,_ayo_)
                      ||
                      !
                      caml_string_notequal(atom$0,_ayp_)
                      ||
                      !
                      caml_string_notequal(atom$0,_ayq_))
                     return ptag_no_args(tp_loc$2,sexp)}
                  else
                   if
                    (!
                     caml_string_notequal(atom$0,_ayr_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ays_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ayt_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ayu_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ayv_))
                    return ptag_no_args(tp_loc$2,sexp);
                  return no_variant_match(0)}
                return nested_list_invalid_poly_var(tp_loc$2,sexp)}
              return empty_list_invalid_poly_var(tp_loc$2,sexp)},
           meth_of_sexp$0=
            function(sexp)
             {try
               {var _aXW_=meth_of_sexp(sexp);return _aXW_}
              catch(_aXX_)
               {_aXX_ = caml_wrap_exception(_aXX_);
                if(_aXX_ === No_variant_match)
                 return no_matching_variant_found(tp_loc$3,sexp);
                throw _aXX_}},
           informational_status_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1];
                return caml_string_notequal(atom,_ayG_)
                        ?caml_string_notequal(atom,_ayH_)
                          ?caml_string_notequal(atom,_ayI_)
                            ?caml_string_notequal(atom,_ayJ_)
                              ?no_variant_match(0)
                              :num_1021676630
                            :num_840540685
                          :num_192584839
                        :num_973294248}
              var _aXU_=sexp[1];
              if(_aXU_)
               {var _aXV_=_aXU_[1];
                if(0 === _aXV_[0])
                 {var atom$0=_aXV_[1];
                  return caml_string_notequal(atom$0,_ayK_)
                          ?caml_string_notequal(atom$0,_ayL_)
                            ?caml_string_notequal(atom$0,_ayM_)
                              ?caml_string_notequal(atom$0,_ayN_)
                                ?no_variant_match(0)
                                :ptag_no_args(tp_loc$4,sexp)
                              :ptag_no_args(tp_loc$4,sexp)
                            :ptag_no_args(tp_loc$4,sexp)
                          :ptag_no_args(tp_loc$4,sexp)}
                return nested_list_invalid_poly_var(tp_loc$4,sexp)}
              return empty_list_invalid_poly_var(tp_loc$4,sexp)},
           success_status_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1],switch$0=caml_string_compare(atom,_ayS_);
                if(0 <= switch$0)
                 {if(! (0 < switch$0))return num_527633381;
                  if(! caml_string_notequal(atom,_ayT_))return num_102779818;
                  if(! caml_string_notequal(atom,_ayU_))return num_17692;
                  if(! caml_string_notequal(atom,_ayV_))return num_893234971;
                  if(! caml_string_notequal(atom,_ayW_))return num_234002583}
                else
                 {if(! caml_string_notequal(atom,_ayX_))return num_566851975;
                  if(! caml_string_notequal(atom,_ayY_))return num_330714374;
                  if(! caml_string_notequal(atom,_ayZ_))return num_558113336;
                  if(! caml_string_notequal(atom,_ay0_))return num_247210088;
                  if(! caml_string_notequal(atom,_ay1_))return num_886248552}
                return no_variant_match(0)}
              var _aXS_=sexp[1];
              if(_aXS_)
               {var _aXT_=_aXS_[1];
                if(0 === _aXT_[0])
                 {var
                   atom$0=_aXT_[1],
                   switch$1=caml_string_compare(atom$0,_ay2_);
                  if(0 <= switch$1)
                   {if
                     (!
                      (0 < switch$1)
                      ||
                      !
                      caml_string_notequal(atom$0,_ay3_)
                      ||
                      !
                      caml_string_notequal(atom$0,_ay4_)
                      ||
                      !
                      caml_string_notequal(atom$0,_ay5_)
                      ||
                      !
                      caml_string_notequal(atom$0,_ay6_))
                     return ptag_no_args(tp_loc$5,sexp)}
                  else
                   if
                    (!
                     caml_string_notequal(atom$0,_ay7_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ay8_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ay9_)
                     ||
                     !
                     caml_string_notequal(atom$0,_ay__)
                     ||
                     !
                     caml_string_notequal(atom$0,_ay$_))
                    return ptag_no_args(tp_loc$5,sexp);
                  return no_variant_match(0)}
                return nested_list_invalid_poly_var(tp_loc$5,sexp)}
              return empty_list_invalid_poly_var(tp_loc$5,sexp)},
           redirection_status_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1];
                return caml_string_notequal(atom,_azk_)
                        ?caml_string_notequal(atom,_azl_)
                          ?caml_string_notequal(atom,_azm_)
                            ?caml_string_notequal(atom,_azn_)
                              ?caml_string_notequal(atom,_azo_)
                                ?caml_string_notequal(atom,_azp_)
                                  ?caml_string_notequal(atom,_azq_)
                                    ?caml_string_notequal(atom,_azr_)
                                      ?caml_string_notequal(atom,_azs_)
                                        ?no_variant_match(0)
                                        :num_398446314
                                      :num_1034456810
                                    :num_199968061
                                  :num_260151748
                                :num_429055472
                              :num_387970219
                            :num_18898339
                          :num_384167631
                        :num_398750242}
              var _aXQ_=sexp[1];
              if(_aXQ_)
               {var _aXR_=_aXQ_[1];
                if(0 === _aXR_[0])
                 {var atom$0=_aXR_[1];
                  return caml_string_notequal(atom$0,_azt_)
                          ?caml_string_notequal(atom$0,_azu_)
                            ?caml_string_notequal(atom$0,_azv_)
                              ?caml_string_notequal(atom$0,_azw_)
                                ?caml_string_notequal(atom$0,_azx_)
                                  ?caml_string_notequal(atom$0,_azy_)
                                    ?caml_string_notequal(atom$0,_azz_)
                                      ?caml_string_notequal(atom$0,_azA_)
                                        ?caml_string_notequal(atom$0,_azB_)
                                          ?no_variant_match(0)
                                          :ptag_no_args(tp_loc$6,sexp)
                                        :ptag_no_args(tp_loc$6,sexp)
                                      :ptag_no_args(tp_loc$6,sexp)
                                    :ptag_no_args(tp_loc$6,sexp)
                                  :ptag_no_args(tp_loc$6,sexp)
                                :ptag_no_args(tp_loc$6,sexp)
                              :ptag_no_args(tp_loc$6,sexp)
                            :ptag_no_args(tp_loc$6,sexp)
                          :ptag_no_args(tp_loc$6,sexp)}
                return nested_list_invalid_poly_var(tp_loc$6,sexp)}
              return empty_list_invalid_poly_var(tp_loc$6,sexp)},
           client_error_status_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1],switch$0=caml_string_compare(atom,_azL_);
                if(0 <= switch$0)
                 {if(! (0 < switch$0))return num_720017128;
                  var switch$1=caml_string_compare(atom,_azM_);
                  if(0 <= switch$1)
                   {if(! (0 < switch$1))return num_382669006;
                    if(! caml_string_notequal(atom,_azN_))return num_599500189;
                    if(! caml_string_notequal(atom,_azO_))return num_65414873;
                    if(! caml_string_notequal(atom,_azP_))return num_324098644;
                    if(! caml_string_notequal(atom,_azQ_))return num_578388242;
                    if(! caml_string_notequal(atom,_azR_))return num_459143713;
                    if(! caml_string_notequal(atom,_azS_))return num_867418942;
                    if(! caml_string_notequal(atom,_azT_))return num_626869805}
                  else
                   {if(! caml_string_notequal(atom,_azU_))return num_282375460;
                    if(! caml_string_notequal(atom,_azV_))return num_807430278;
                    if(! caml_string_notequal(atom,_azW_))return num_12825579;
                    if(! caml_string_notequal(atom,_azX_))return num_60220292;
                    if(! caml_string_notequal(atom,_azY_))return num_1051942420;
                    if(! caml_string_notequal(atom,_azZ_))return num_1052164689;
                    if(! caml_string_notequal(atom,_az0_))return num_1028883702}}
                else
                 {var switch$2=caml_string_compare(atom,_az1_);
                  if(0 <= switch$2)
                   {if(! (0 < switch$2))return num_792903807;
                    if(! caml_string_notequal(atom,_az2_))return num_491839979;
                    if(! caml_string_notequal(atom,_az3_))return num_221106440;
                    if(! caml_string_notequal(atom,_az4_))return num_240875818;
                    if(! caml_string_notequal(atom,_az5_))return num_13829438;
                    if(! caml_string_notequal(atom,_az6_))return num_229723487;
                    if(! caml_string_notequal(atom,_az7_))return num_176787538;
                    if(! caml_string_notequal(atom,_az8_))return num_358247754}
                  else
                   {if(! caml_string_notequal(atom,_az9_))return num_99004555;
                    if(! caml_string_notequal(atom,_az__))return num_1042139761;
                    if(! caml_string_notequal(atom,_az$_))return num_874866960;
                    if(! caml_string_notequal(atom,_aAa_))return num_36288910;
                    if(! caml_string_notequal(atom,_aAb_))return num_785212614;
                    if(! caml_string_notequal(atom,_aAc_))return num_897427648;
                    if(! caml_string_notequal(atom,_aAd_))return num_558492973;
                    if(! caml_string_notequal(atom,_aAe_))return num_438114087}}
                return no_variant_match(0)}
              var _aXO_=sexp[1];
              if(_aXO_)
               {var _aXP_=_aXO_[1];
                if(0 === _aXP_[0])
                 {var
                   atom$0=_aXP_[1],
                   switch$3=caml_string_compare(atom$0,_aAf_);
                  if(0 <= switch$3)
                   {if(! (0 < switch$3))return ptag_no_args(tp_loc$7,sexp);
                    var switch$4=caml_string_compare(atom$0,_aAg_);
                    if(0 <= switch$4)
                     {if
                       (!
                        (0 < switch$4)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAh_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAi_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAj_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAk_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAl_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAm_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAn_))
                       return ptag_no_args(tp_loc$7,sexp)}
                    else
                     if
                      (!
                       caml_string_notequal(atom$0,_aAo_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAp_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAq_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAr_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAs_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAt_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAu_))
                      return ptag_no_args(tp_loc$7,sexp)}
                  else
                   {var switch$5=caml_string_compare(atom$0,_aAv_);
                    if(0 <= switch$5)
                     {if
                       (!
                        (0 < switch$5)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAw_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAx_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAy_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAz_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAA_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAB_)
                        ||
                        !
                        caml_string_notequal(atom$0,_aAC_))
                       return ptag_no_args(tp_loc$7,sexp)}
                    else
                     if
                      (!
                       caml_string_notequal(atom$0,_aAD_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAE_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAF_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAG_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAH_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAI_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAJ_)
                       ||
                       !
                       caml_string_notequal(atom$0,_aAK_))
                      return ptag_no_args(tp_loc$7,sexp)}
                  return no_variant_match(0)}
                return nested_list_invalid_poly_var(tp_loc$7,sexp)}
              return empty_list_invalid_poly_var(tp_loc$7,sexp)},
           server_error_status_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var atom=sexp[1],switch$0=caml_string_compare(atom,_aBf_);
                if(0 <= switch$0)
                 {if(! (0 < switch$0))return num_15361451;
                  if(! caml_string_notequal(atom,_aBg_))return num_789753444;
                  if(! caml_string_notequal(atom,_aBh_))return num_43455790;
                  if(! caml_string_notequal(atom,_aBi_))return num_854525125;
                  if(! caml_string_notequal(atom,_aBj_))return num_498198474;
                  if(! caml_string_notequal(atom,_aBk_))return num_774758938;
                  if(! caml_string_notequal(atom,_aBl_))return num_598402413}
                else
                 {if(! caml_string_notequal(atom,_aBm_))return num_957501398;
                  if(! caml_string_notequal(atom,_aBn_))return num_806912325;
                  if(! caml_string_notequal(atom,_aBo_))return num_731537414;
                  if(! caml_string_notequal(atom,_aBp_))return num_1014316796;
                  if(! caml_string_notequal(atom,_aBq_))return num_161957855;
                  if(! caml_string_notequal(atom,_aBr_))return num_732353682;
                  if(! caml_string_notequal(atom,_aBs_))return num_169087453}
                return no_variant_match(0)}
              var _aXM_=sexp[1];
              if(_aXM_)
               {var _aXN_=_aXM_[1];
                if(0 === _aXN_[0])
                 {var
                   atom$0=_aXN_[1],
                   switch$1=caml_string_compare(atom$0,_aBt_);
                  if(0 <= switch$1)
                   {if
                     (!
                      (0 < switch$1)
                      ||
                      !
                      caml_string_notequal(atom$0,_aBu_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aBv_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aBw_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aBx_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aBy_)
                      ||
                      !
                      caml_string_notequal(atom$0,_aBz_))
                     return ptag_no_args(tp_loc$8,sexp)}
                  else
                   if
                    (!
                     caml_string_notequal(atom$0,_aBA_)
                     ||
                     !
                     caml_string_notequal(atom$0,_aBB_)
                     ||
                     !
                     caml_string_notequal(atom$0,_aBC_)
                     ||
                     !
                     caml_string_notequal(atom$0,_aBD_)
                     ||
                     !
                     caml_string_notequal(atom$0,_aBE_)
                     ||
                     !
                     caml_string_notequal(atom$0,_aBF_)
                     ||
                     !
                     caml_string_notequal(atom$0,_aBG_))
                    return ptag_no_args(tp_loc$8,sexp);
                  return no_variant_match(0)}
                return nested_list_invalid_poly_var(tp_loc$8,sexp)}
              return empty_list_invalid_poly_var(tp_loc$8,sexp)},
           status_of_sexp=
            function(sexp)
             {try
               {var _aXH_=informational_status_of_sexp(sexp);return _aXH_}
              catch(_aXI_)
               {_aXI_ = caml_wrap_exception(_aXI_);
                if(_aXI_ === No_variant_match)
                 try
                  {var _aXG_=success_status_of_sexp(sexp);return _aXG_}
                 catch(_aXJ_)
                  {_aXJ_ = caml_wrap_exception(_aXJ_);
                   if(_aXJ_ === No_variant_match)
                    try
                     {var _aXF_=redirection_status_of_sexp(sexp);return _aXF_}
                    catch(_aXK_)
                     {_aXK_ = caml_wrap_exception(_aXK_);
                      if(_aXK_ === No_variant_match)
                       try
                        {var _aXE_=client_error_status_of_sexp(sexp);return _aXE_}
                       catch(_aXL_)
                        {_aXL_ = caml_wrap_exception(_aXL_);
                         if(_aXL_ === No_variant_match)
                          return server_error_status_of_sexp(sexp);
                         throw _aXL_}
                      throw _aXK_}
                   throw _aXJ_}
                throw _aXI_}},
           status_code_of_sexp=
            function(sexp)
             {try
               {if(0 === sexp[0])
                 {var atom=sexp[1];
                  try
                   {var _aXw_=status_of_sexp(sexp),_aXA_=_aXw_}
                  catch(_aXC_)
                   {_aXC_ = caml_wrap_exception(_aXC_);
                    if(_aXC_ !== No_variant_match)throw _aXC_;
                    var
                     _aXA_=
                      caml_string_notequal(atom,_aBV_)
                       ?no_variant_match(0)
                       :ptag_takes_args(tp_loc$9,sexp)}}
                else
                 {var _aXx_=sexp[1];
                  if(_aXx_)
                   {var _aXy_=_aXx_[1];
                    if(0 === _aXy_[0])
                     {var sexp_args=_aXx_[2],atom$0=_aXy_[1];
                      if(caml_string_notequal(atom$0,_aBW_))
                       try
                        {var _aXz_=status_of_sexp(sexp),_aXA_=_aXz_}
                       catch(_aXD_)
                        {_aXD_ = caml_wrap_exception(_aXD_);
                         if(_aXD_ !== No_variant_match)throw _aXD_;
                         var _aXA_=no_variant_match(0)}
                      else
                       {var switch$0=0;
                        if(sexp_args && ! sexp_args[2])
                         {var v0=sexp_args[1];
                          if(0 === v0[0])
                           {var str=v0[1];
                            try
                             {var _aXv_=caml_int_of_string(str),v0$0=_aXv_}
                            catch(exc)
                             {exc = caml_wrap_exception(exc);
                              var v0$0=of_sexp_error(symbol(_qo_,exn_to_string(exc)),v0)}}
                          else
                           var v0$0=of_sexp_error(_qp_,v0);
                          var _aXA_=[0,num_748543309,v0$0]}
                        else
                         switch$0 = 1;
                        if(switch$0)
                         var _aXA_=ptag_incorrect_n_args(tp_loc$9,atom$0,sexp)}}
                    else
                     var _aXA_=nested_list_invalid_poly_var(tp_loc$9,sexp)}
                  else
                   var _aXA_=empty_list_invalid_poly_var(tp_loc$9,sexp)}
                return _aXA_}
              catch(_aXB_)
               {_aXB_ = caml_wrap_exception(_aXB_);
                if(_aXB_ === No_variant_match)
                 return no_matching_variant_found(tp_loc$10,sexp);
                throw _aXB_}},
           string_of_method=
            function(param)
             {if(typeof param === "number")
               return num_357830602 <= param
                       ?num_492530731 === param
                         ?_aBY_
                         :num_891112544 <= param
                           ?num_994393768 <= param?_aBZ_:_aB0_
                           :num_801894688 <= param?_aB1_:_aB2_
                       :num_3997359 <= param
                         ?num_336447077 <= param?_aB3_:_aB4_
                         :num_3546230 <= param?_aB5_:_aB6_;
              var s=param[2];
              return s},
           status_of_code=
            function(cod)
             {if(num_309 <= cod)
               {var switcher=cod - 598 | 0;
                if(! (1 < switcher >>> 0))
                 return 0 === switcher?num_43455790:num_789753444;
                var switcher$0=switcher + 198 | 0;
                if(! (num_111 < switcher$0 >>> 0))
                 switch(switcher$0)
                  {case 0:return num_99004555;
                   case 1:return num_324098644;
                   case 2:return num_720017128;
                   case 3:return num_438114087;
                   case 4:return num_358247754;
                   case 5:return num_13829438;
                   case 6:return num_176787538;
                   case 7:return num_12825579;
                   case 8:return num_1052164689;
                   case 9:return num_36288910;
                   case 10:return num_792903807;
                   case 11:return num_221106440;
                   case 12:return num_282375460;
                   case 13:return num_60220292;
                   case 14:return num_1028883702;
                   case 15:return num_459143713;
                   case 16:return num_382669006;
                   case 17:return num_897427648;
                   case 18:return num_491839979;
                   case 20:return num_785212614;
                   case 22:return num_578388242;
                   case 23:return num_240875818;
                   case 24:return num_558492973;
                   case 26:return num_867418942;
                   case 28:return num_807430278;
                   case 29:return num_65414873;
                   case 31:return num_1051942420;
                   case 44:return num_229723487;
                   case 49:return num_599500189;
                   case 50:return num_1042139761;
                   case 51:return num_626869805;
                   case 99:return num_874866960;
                   case 100:return num_732353682;
                   case 101:return num_498198474;
                   case 102:return num_957501398;
                   case 103:return num_774758938;
                   case 104:return num_731537414;
                   case 105:return num_1014316796;
                   case 106:return num_598402413;
                   case 107:return num_161957855;
                   case 108:return num_169087453;
                   case 109:return num_806912325;
                   case 110:return num_854525125;
                   case 111:return num_15361451
                   }}
              else
               if(num_200 <= cod)
                if(227 <= cod)
                 {if(num_300 <= cod)
                   {var switcher$1=cod - 300 | 0;
                    switch(switcher$1)
                     {case 0:return num_18898339;
                      case 1:return num_384167631;
                      case 2:return num_398750242;
                      case 3:return num_260151748;
                      case 4:return num_387970219;
                      case 5:return num_398446314;
                      case 6:return num_199968061;
                      case 7:return num_1034456810;
                      default:return num_429055472}}}
                else
                 {var switcher$2=cod - 200 | 0;
                  switch(switcher$2)
                   {case 0:return num_17692;
                    case 1:return num_558113336;
                    case 2:return num_566851975;
                    case 3:return num_102779818;
                    case 4:return num_527633381;
                    case 5:return num_234002583;
                    case 6:return num_893234971;
                    case 7:return num_886248552;
                    case 8:return num_330714374;
                    case 26:return num_247210088
                    }}
               else
                {var switcher$3=cod - 100 | 0;
                 if(! (3 < switcher$3 >>> 0))
                  switch(switcher$3)
                   {case 0:return num_192584839;
                    case 1:return num_1021676630;
                    case 2:return num_840540685;
                    default:return num_973294248}}
              return [0,num_748543309,cod]},
           code_of_status=
            function(param)
             {if(typeof param === "number")
               return num_17692 <= param
                       ?num_491839979 <= param
                         ?num_806912325 <= param
                           ?num_893234971 <= param
                             ?num_897427648 === param
                               ?417
                               :num_1034456810 <= param
                                 ?num_1052164689 <= param?num_408:num_307
                                 :num_973294248 <= param?num_103:206
                             :num_854525125 <= param
                               ?num_874866960 <= param?499:510
                               :num_807430278 <= param?428:509
                           :num_599500189 <= param
                             ?num_626869805 === param
                               ?num_451
                               :num_789753444 <= param
                                 ?num_792903807 <= param?410:599
                                 :num_731537414 <= param?504:449
                             :num_566851975 <= param
                               ?num_578388242 <= param?422:num_202
                               :num_558492973 <= param?num_424:418
                         :num_192584839 <= param
                           ?num_282375460 <= param
                             ?num_324098644 === param
                               ?401
                               :num_384167631 <= param
                                 ?num_398750242 <= param?num_302:num_301
                                 :num_382669006 <= param?416:412
                             :num_240875818 <= param
                               ?num_260151748 <= param?num_303:423
                               :num_229723487 <= param?num_444:num_100
                           :num_65414873 <= param
                             ?num_161957855 <= param
                               ?num_169087453 <= param?508:507
                               :num_102779818 <= param?203:num_429
                             :num_18898339 <= param
                               ?num_60220292 <= param?413:num_300
                               :num_13829438 <= param?405:num_200
                       :num_459143713 <= param
                         ?num_234002583 <= param
                           ?num_99004555 <= param
                             ?num_43455790 === param
                               ?598
                               :num_15361451 <= param
                                 ?num_12825579 <= param?407:num_511
                                 :num_36288910 <= param?num_409:num_400
                             :num_199968061 <= param
                               ?num_176787538 <= param?406:num_306
                               :num_221106440 <= param?411:num_205
                           :num_387970219 <= param
                             ?num_330714374 <= param
                               ?num_247210088 <= param?226:num_208
                               :num_358247754 <= param?num_404:num_304
                             :num_429055472 <= param
                               ?num_398446314 <= param?num_305:num_308
                               :num_438114087 <= param?403:415
                         :num_840540685 <= param
                           ?num_720017128 <= param
                             ?num_598402413 === param
                               ?506
                               :num_527633381 <= param
                                 ?num_498198474 <= param?501:204
                                 :num_558113336 <= param?201:402
                             :num_774758938 <= param
                               ?num_732353682 <= param?500:503
                               :num_785212614 <= param?420:num_102
                           :num_1014316796 <= param
                             ?num_886248552 <= param
                               ?num_867418942 <= param?426:207
                               :num_957501398 <= param?502:505
                             :num_1028883702 <= param
                               ?num_1021676630 <= param?num_101:num_414
                               :num_1042139761 <= param?num_450:431;
              var cod=param[2];
              return cod};
          of_string$0(_aDa_);
          of_string$0(_aDb_);
          var
           encoding_of_sexp=
            function(sexp)
             {if(0 === sexp[0])
               {var _aXr_=sexp[1],switch$0=0;
                if(caml_string_notequal(_aXr_,_aDc_))
                 {var switch$1=0;
                  if(caml_string_notequal(_aXr_,_aDd_))
                   {var switch$2=0;
                    if(caml_string_notequal(_aXr_,_aDe_))
                     if(caml_string_notequal(_aXr_,_aDf_))
                      if(caml_string_notequal(_aXr_,_aDg_))
                       {if(caml_string_notequal(_aXr_,_aDh_))
                         {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                      else
                       switch$2 = 1;
                     else
                      {switch$1 = 1;switch$2 = 1}
                    if(! switch$2)return 1}
                  if(! switch$1)return of_sexp_error(symbol(loc$0,_rw_),sexp)}
                if(! switch$0)return 0}
              else
               {var _aXs_=sexp[1];
                if(! _aXs_)return of_sexp_error(symbol(loc$0,_ry_),sexp);
                var _aXt_=_aXs_[1];
                if(0 !== _aXt_[0])
                 return of_sexp_error(symbol(loc$0,_rx_),sexp);
                var _aXu_=_aXt_[1],switch$3=0;
                if(caml_string_notequal(_aXu_,_aDi_))
                 {var switch$4=0;
                  if(caml_string_notequal(_aXu_,_aDj_))
                   {var switch$5=0;
                    if(caml_string_notequal(_aXu_,_aDk_))
                     if(caml_string_notequal(_aXu_,_aDl_))
                      if(caml_string_notequal(_aXu_,_aDm_))
                       {if(caml_string_notequal(_aXu_,_aDn_))
                         {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                      else
                       switch$5 = 1;
                     else
                      {switch$4 = 1;switch$5 = 1}
                    if(! switch$5)return stag_no_args(loc$0,sexp)}
                  if(! switch$4)
                   {var sexp_args=_aXs_[2];
                    if(sexp_args && ! sexp_args[2])
                     {var v0=sexp_args[1],v0$0=int64_of_sexp(v0);return [0,v0$0]}
                    var msg=caml_call2(sprintf(_rv_),loc$0,_aXu_);
                    return of_sexp_error(msg,sexp)}}
                if(! switch$3)return stag_no_args(loc$0,sexp)}
              return of_sexp_error(symbol(loc$0,_rz_),sexp)},
           sexp_of_encoding=
            function(param)
             {if(typeof param === "number")return 0 === param?_aDo_:_aDp_;
              var v0$0=param[1],v0=[0,of_int64(v0$0)];
              return [1,[0,_aDq_,[0,v0,0]]]},
           of_string$2=function(x){return f(x)},
           compare$23=caml_string_compare,
           StringMap$1=_au_([0,compare$23]),
           user_agent=caml_call1(sprintf(_aDr_),version$0);
          caml_call1(StringMap$1[10],caml_compare);
          var
           headers_with_list_values=map$3(of_string$2,_aDs_.slice()),
           tbl$0=create$2(0,headers_with_list_values.length - 1);
          iter$2
           (function(h){return add$0(tbl$0,h,0)},headers_with_list_values);
          var
           is_header_with_list_value=function(h){return mem$0(tbl$0,h)},
           init$5=function(param){return StringMap$1[1]},
           add$9=
            function(h,k,v)
             {var k$0=of_string$2(k);
              try
               {var
                 _aXo_=[0,v,caml_call2(StringMap$1[27],k$0,h)],
                 _aXp_=caml_call3(StringMap$1[4],k$0,_aXo_,h);
                return _aXp_}
              catch(_aXq_)
               {_aXq_ = caml_wrap_exception(_aXq_);
                if(_aXq_ === Not_found)
                 return caml_call3(StringMap$1[4],k$0,[0,v,0],h);
                throw _aXq_}},
           replace$0=
            function(h,k,v)
             {var k$0=of_string$2(k);
              return caml_call3(StringMap$1[4],k$0,[0,v,0],h)},
           get$1=
            function(h,k)
             {var k$0=of_string$2(k);
              try
               {var
                 v=caml_call2(StringMap$1[27],k$0,h),
                 _aXm_=
                  is_header_with_list_value(k$0)
                   ?[0,concat$0(_aDt_,v)]
                   :[0,hd(v)];
                return _aXm_}
              catch(_aXn_)
               {_aXn_ = caml_wrap_exception(_aXn_);
                if(_aXn_ !== Not_found && _aXn_[1] !== Failure)throw _aXn_;
                return 0}},
           mem$1=
            function(h,k)
             {var _aXl_=of_string$2(k);
              return caml_call2(StringMap$1[3],_aXl_,h)},
           add_unless_exists=function(h,k,v){return mem$1(h,k)?h:add$9(h,k,v)},
           get_multi=
            function(h,k)
             {var k$0=of_string$2(k);
              try
               {var _aXj_=caml_call2(StringMap$1[27],k$0,h);return _aXj_}
              catch(_aXk_)
               {_aXk_ = caml_wrap_exception(_aXk_);
                if(_aXk_ === Not_found)return 0;
                throw _aXk_}},
           map$5=
            function(fn,h)
             {function _aXi_(k,v){return caml_call2(fn,k,v)}
              return caml_call2(StringMap$1[34],_aXi_,h)},
           iter$7=function(fn,h){map$5(fn,h);return 0},
           get_content_range=
            function(headers)
             {var match$0=get$1(headers,_aDy_);
              if(match$0)
               {var clen=match$0[1];
                try
                 {var _aXf_=[0,caml_int64_of_string(clen)];return _aXf_}
                catch(_aXh_){return 0}}
              var match$1=get$1(headers,_aDz_);
              if(match$1)
               {var range_s=match$1[1];
                try
                 {var
                   _aXd_=
                    function(start,fini,total){return [0,start,fini,total]},
                   match=caml_call1(sscanf(range_s,_aDx_),_aXd_),
                   total=match[3],
                   fini=match[2],
                   start=match[1],
                   _aXe_=[0,[0,start,fini,total]],
                   match$2=_aXe_}
                catch(_aXg_)
                 {_aXg_ = caml_wrap_exception(_aXg_);
                  if(_aXg_[1] !== Scan_failure)throw _aXg_;
                  var match$2=0}
                if(match$2)
                 {var
                   match$3=match$2[1],
                   total$0=match$3[3],
                   fini$0=match$3[2],
                   start$0=match$3[1];
                  if
                   (caml_lessthan(fini$0,total$0)
                    &&
                    caml_lessequal(start$0,total$0)
                    &&
                    caml_lessequal(_aDA_,start$0)
                    &&
                    caml_lessequal(_aDB_,total$0))
                   {var
                     num_bytes_to_read=
                      caml_int64_add(caml_int64_sub(fini$0,start$0),_aDC_);
                    return [0,num_bytes_to_read]}
                  return 0}
                return 0}
              return 0},
           re$0=re(_aDE_,_aDD_),
           media_type_re=compile(seq$1([0,start,[0,re$0,0]])),
           get_first_match=
            function(re,s)
             {try
               {var
                 subs=exec(_aDF_,0,media_type_re,s),
                 match=get_ofs(subs,1),
                 stop=match[2],
                 start=match[1],
                 _aXb_=[0,sub$0(s,start,stop - start | 0)];
                return _aXb_}
              catch(_aXc_)
               {_aXc_ = caml_wrap_exception(_aXc_);
                if(_aXc_ === Not_found)return 0;
                throw _aXc_}},
           get_transfer_encoding=
            function(headers)
             {var match=get$1(headers,_aDH_);
              if(match && ! caml_string_notequal(match[1],_aDI_))return 0;
              var match$0=get_content_range(headers);
              if(match$0){var len=match$0[1];return [0,len]}
              return 1},
           sexp_of_t=
            function(t)
             {var acc=0;
              function _aXa_(k,v,acc)
               {return fold_left$0
                        (function(acc,v){return [0,[0,k,v],acc]},acc,v)}
              var lst=rev(caml_call3(StringMap$1[13],_aXa_,t,acc));
              function sexp_of_a(param)
               {var b=param[2],a=param[1];return [1,[0,[0,a],[0,[0,b],0]]]}
              return [1,rev(rev_map(sexp_of_a,lst))]},
           t_of_sexp=
            function(s)
             {function a_of_sexp$0(sexp)
               {if(0 === sexp[0])return of_sexp_error(_qs_,sexp);
                var _aW__=sexp[1];
                if(_aW__)
                 {var _aW$_=_aW__[2];
                  if(_aW$_ && ! _aW$_[2])
                   {var
                     b_sexp=_aW$_[1],
                     a_sexp=_aW__[1],
                     a=a_of_sexp(a_sexp),
                     b=a_of_sexp(b_sexp);
                    return [0,a,b]}}
                return of_sexp_error(_qt_,sexp)}
              if(0 === s[0])
               var _aW9_=of_sexp_error(_qu_,s);
              else
               var
                lst=s[1],
                rev_lst=rev_map(a_of_sexp$0,lst),
                _aW9_=rev(rev_lst);
              var _aW8_=init$5(0);
              return fold_left$0
                      (function(h,param)
                        {var v=param[2],k=param[1];return add$9(h,k,v)},
                       _aW8_,
                       _aW9_)},
           open_in=function(str){return [0,str,0,caml_ml_string_length(str)]},
           read_rest=
            function(x)
             {var s=sub$0(x[1],x[2],x[3] - x[2] | 0);x[2] = x[3];return s},
           read_line=
            function(x)
             {if(x[2] < x[3])
               {var start=x[2];
                try
                 {for(;;)
                   {if(10 === caml_string_get(x[1],x[2]))
                     {var switch$0=0;
                      if(0 < x[2] && 13 === caml_string_get(x[1],x[2] - 1 | 0))
                       {var l=(x[2] - start | 0) - 1 | 0;switch$0 = 1}
                      if(! switch$0)var l=x[2] - start | 0;
                      var s=sub$0(x[1],start,l);
                      x[2] = x[2] + 1 | 0;
                      var _aW6_=[0,s];
                      return _aW6_}
                    x[2] = x[2] + 1 | 0;
                    continue}}
                catch(_aW7_){return [0,read_rest(x)]}}
              return 0},
           _aDS_=
            function(IO)
             {function rev$0(k,v){return rev(v)}
              function parse(ic)
               {function parse_headers(headers)
                 {function _aWX_(param)
                   {if(param)
                     {var _aW3_=param[1];
                      if(caml_string_notequal(_aW3_,_aDR_))
                       {var x=split$0(_aDQ_,_aW3_,58),switch$0=0;
                        if(x)
                         {var _aW0_=x[2];
                          if(_aW0_ && ! _aW0_[2])
                           {var y=_aW0_[1],x$0=x[1],_aW1_=0;
                            if(caml_string_equal(y,_I_))
                             var _aW2_=y;
                            else
                             {var switch$1=0;
                              if
                               (is_space$0(caml_string_unsafe_get(y,0))
                                ||
                                is_space$0
                                 (caml_string_unsafe_get(y,caml_ml_string_length(y) - 1 | 0)))
                               switch$1 = 1;
                              else
                               var _aW2_=y;
                              if(switch$1)
                               {var
                                 s=caml_bytes_of_string(y),
                                 len=caml_ml_bytes_length(s),
                                 i=[0,0];
                                for(;;)
                                 {if(i[1] < len && is_space(caml_bytes_unsafe_get(s,i[1])))
                                   {i[1]++;continue}
                                  var j=[0,len - 1 | 0];
                                  for(;;)
                                   {if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s,j[1])))
                                     {j[1] += -1;continue}
                                    var
                                     _aWZ_=
                                      i[1] <= j[1]
                                       ?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0)
                                       :empty_return,
                                     _aW2_=caml_string_of_bytes(_aWZ_);
                                    break}
                                  break}}}
                            var match=[0,x$0,[0,_aW2_,_aW1_]];
                            switch$0 = 1}}
                        if(! switch$0)var match=x;
                        if(match)
                         {var _aW4_=match[2];
                          if(_aW4_ && ! _aW4_[2])
                           {var tl=_aW4_[1],hd=match[1],header=f(hd);
                            return parse_headers(add$9(headers,header,tl))}}
                        return caml_call1(IO[2],headers)}}
                    var _aW5_=map$5(rev$0,headers);
                    return caml_call1(IO[2],_aW5_)}
                  var _aWY_=caml_call1(IO[3],ic);
                  return caml_call2(IO[1],_aWY_,_aWX_)}
                return parse_headers(init$5(0))}
              function write(headers,oc)
               {var b=create$1(num_128);
                iter$7
                 (function(k,v)
                   {return iter$0
                            (function(v)
                              {add_string(b,k);
                               add_string(b,_aDu_);
                               add_string(b,v);
                               return add_string(b,_aDv_)},
                             v)},
                  headers);
                add_string(b,_aDw_);
                var _aWW_=contents(b);
                return caml_call2(IO[5],oc,_aWW_)}
              return [0,parse,write]},
           flush$0=function(r){return r[5]},
           status$0=function(r){return r[4]},
           version$1=function(r){return r[3]},
           headers=function(r){return r[2]},
           encoding$71=function(r){return r[1]},
           _aDT_=function(r,v){return [0,r[1],r[2],r[3],r[4],v]},
           _aDU_=0,
           flush$1=[0,function(param){return 0},_aDV_,_aDU_,flush$0,_aDT_],
           _aDW_=function(r,v){return [0,r[1],r[2],r[3],v,r[5]]},
           _aDX_=0,
           status$1=[0,function(param){return 0},_aDY_,_aDX_,status$0,_aDW_],
           _aDZ_=function(r,v){return [0,r[1],r[2],v,r[4],r[5]]},
           _aD0_=0,
           version$2=[0,function(param){return 0},_aD1_,_aD0_,version$1,_aDZ_],
           _aD2_=function(r,v){return [0,r[1],v,r[3],r[4],r[5]]},
           _aD3_=0,
           headers$0=[0,function(param){return 0},_aD4_,_aD3_,headers,_aD2_],
           _aD5_=function(r,v){return [0,v,r[2],r[3],r[4],r[5]]},
           _aD6_=0,
           encoding$72=
            [0,function(param){return 0},_aD7_,_aD6_,encoding$71,_aD5_],
           make_creator=
            function
             (encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun,
              compile_acc)
             {var
               match=caml_call2(encoding_fun,encoding$72,compile_acc),
               compile_acc$0=match[2],
               encoding_gen=match[1],
               match$0=caml_call2(headers_fun,headers$0,compile_acc$0),
               compile_acc$1=match$0[2],
               headers_gen=match$0[1],
               match$1=caml_call2(version_fun,version$2,compile_acc$1),
               compile_acc$2=match$1[2],
               version_gen=match$1[1],
               match$2=caml_call2(status_fun,status$1,compile_acc$2),
               compile_acc$3=match$2[2],
               status_gen=match$2[1],
               match$3=caml_call2(flush_fun,flush$1,compile_acc$3),
               compile_acc$4=match$3[2],
               flush_gen=match$3[1];
              return [0,
                      function(acc)
                       {var
                         encoding=caml_call1(encoding_gen,acc),
                         headers=caml_call1(headers_gen,acc),
                         version=caml_call1(version_gen,acc),
                         status=caml_call1(status_gen,acc),
                         flush=caml_call1(flush_gen,acc);
                        return [0,encoding,headers,version,status,flush]},
                      compile_acc$4]},
           create$16=
            function(encoding,headers,version,status,flush)
             {return [0,encoding,headers,version,status,flush]},
           map$6=
            function
             (encoding_fun,headers_fun,version_fun,status_fun,flush_fun)
             {var
               _aWS_=caml_call1(flush_fun,flush$1),
               _aWT_=caml_call1(status_fun,status$1),
               _aWU_=caml_call1(version_fun,version$2),
               _aWV_=caml_call1(headers_fun,headers$0);
              return [0,
                      caml_call1(encoding_fun,encoding$72),
                      _aWV_,
                      _aWU_,
                      _aWT_,
                      _aWS_]},
           iter$8=
            function
             (encoding_fun,headers_fun,version_fun,status_fun,flush_fun)
             {caml_call1(encoding_fun,encoding$72);
              caml_call1(headers_fun,headers$0);
              caml_call1(version_fun,version$2);
              caml_call1(status_fun,status$1);
              return caml_call1(flush_fun,flush$1)},
           fold$3=
            function
             (init,encoding_fun,headers_fun,version_fun,status_fun,flush_fun)
             {return caml_call2
                      (flush_fun,
                       caml_call2
                        (status_fun,
                         caml_call2
                          (version_fun,
                           caml_call2
                            (headers_fun,
                             caml_call2(encoding_fun,init,encoding$72),
                             headers$0),
                           version$2),
                         status$1),
                       flush$1)},
           map_poly=
            function(record)
             {var
               _aWO_=[0,caml_call1(record[1],flush$1),0],
               _aWP_=[0,caml_call1(record[1],status$1),_aWO_],
               _aWQ_=[0,caml_call1(record[1],version$2),_aWP_],
               _aWR_=[0,caml_call1(record[1],headers$0),_aWQ_];
              return [0,caml_call1(record[1],encoding$72),_aWR_]},
           for_all$0=
            function
             (encoding_fun,headers_fun,version_fun,status_fun,flush_fun)
             {var
               _aWK_=caml_call1(encoding_fun,encoding$72),
               _aWL_=_aWK_?caml_call1(headers_fun,headers$0):_aWK_,
               _aWM_=_aWL_?caml_call1(version_fun,version$2):_aWL_,
               _aWN_=_aWM_?caml_call1(status_fun,status$1):_aWM_;
              return _aWN_?caml_call1(flush_fun,flush$1):_aWN_},
           exists$0=
            function
             (encoding_fun,headers_fun,version_fun,status_fun,flush_fun)
             {var
               _aWJ_=caml_call1(encoding_fun,encoding$72),
               _aWG_=_aWJ_ || caml_call1(headers_fun,headers$0),
               _aWH_=_aWG_ || caml_call1(version_fun,version$2),
               _aWI_=_aWH_ || caml_call1(status_fun,status$1);
              return _aWI_?_aWI_:caml_call1(flush_fun,flush$1)},
           to_list$1=
            function
             (encoding_fun,headers_fun,version_fun,status_fun,flush_fun)
             {var
               _aWC_=[0,caml_call1(flush_fun,flush$1),0],
               _aWD_=[0,caml_call1(status_fun,status$1),_aWC_],
               _aWE_=[0,caml_call1(version_fun,version$2),_aWD_],
               _aWF_=[0,caml_call1(headers_fun,headers$0),_aWE_];
              return [0,caml_call1(encoding_fun,encoding$72),_aWF_]},
           iter$9=
            function
             (record,
              encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun)
             {caml_call3(encoding_fun,encoding$72,record,record[1]);
              caml_call3(headers_fun,headers$0,record,record[2]);
              caml_call3(version_fun,version$2,record,record[3]);
              caml_call3(status_fun,status$1,record,record[4]);
              return caml_call3(flush_fun,flush$1,record,record[5])},
           fold$4=
            function
             (record,
              init,
              encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun)
             {var
               _aWy_=record[5],
               _aWz_=record[4],
               _aWA_=record[3],
               _aWB_=record[2];
              return caml_call4
                      (flush_fun,
                       caml_call4
                        (status_fun,
                         caml_call4
                          (version_fun,
                           caml_call4
                            (headers_fun,
                             caml_call4(encoding_fun,init,encoding$72,record,record[1]),
                             headers$0,
                             record,
                             _aWB_),
                           version$2,
                           record,
                           _aWA_),
                         status$1,
                         record,
                         _aWz_),
                       flush$1,
                       record,
                       _aWy_)},
           for_all$1=
            function
             (record,
              encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun)
             {var
               _aWu_=caml_call3(encoding_fun,encoding$72,record,record[1]),
               _aWv_=
                _aWu_?caml_call3(headers_fun,headers$0,record,record[2]):_aWu_,
               _aWw_=
                _aWv_?caml_call3(version_fun,version$2,record,record[3]):_aWv_,
               _aWx_=
                _aWw_?caml_call3(status_fun,status$1,record,record[4]):_aWw_;
              return _aWx_
                      ?caml_call3(flush_fun,flush$1,record,record[5])
                      :_aWx_},
           exists$1=
            function
             (record,
              encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun)
             {var
               _aWt_=caml_call3(encoding_fun,encoding$72,record,record[1]),
               _aWq_=
                _aWt_
                ||
                caml_call3(headers_fun,headers$0,record,record[2]),
               _aWr_=
                _aWq_
                ||
                caml_call3(version_fun,version$2,record,record[3]),
               _aWs_=_aWr_ || caml_call3(status_fun,status$1,record,record[4]);
              return _aWs_
                      ?_aWs_
                      :caml_call3(flush_fun,flush$1,record,record[5])},
           to_list$2=
            function
             (record,
              encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun)
             {var
               _aWm_=[0,caml_call3(flush_fun,flush$1,record,record[5]),0],
               _aWn_=
                [0,caml_call3(status_fun,status$1,record,record[4]),_aWm_],
               _aWo_=
                [0,caml_call3(version_fun,version$2,record,record[3]),_aWn_],
               _aWp_=
                [0,caml_call3(headers_fun,headers$0,record,record[2]),_aWo_];
              return [0,
                      caml_call3(encoding_fun,encoding$72,record,record[1]),
                      _aWp_]},
           map$7=
            function
             (record,
              encoding_fun,
              headers_fun,
              version_fun,
              status_fun,
              flush_fun)
             {var
               _aWi_=caml_call3(flush_fun,flush$1,record,record[5]),
               _aWj_=caml_call3(status_fun,status$1,record,record[4]),
               _aWk_=caml_call3(version_fun,version$2,record,record[3]),
               _aWl_=caml_call3(headers_fun,headers$0,record,record[2]);
              return [0,
                      caml_call3(encoding_fun,encoding$72,record,record[1]),
                      _aWl_,
                      _aWk_,
                      _aWj_,
                      _aWi_]},
           set_all_mutable_fields=function(record){return 0},
           Direct=
            [0,
             iter$9,
             fold$4,
             for_all$1,
             exists$1,
             to_list$2,
             map$7,
             set_all_mutable_fields],
           t_of_sexp$0=
            function(sexp)
             {if(0 === sexp[0])
               return record_list_instead_atom(tp_loc$11,sexp);
              var
               field_sexps=sexp[1],
               encoding_field=[0,0],
               headers_field=[0,0],
               version_field=[0,0],
               status_field=[0,0],
               flush_field=[0,0],
               duplicates=[0,0],
               extra=[0,0],
               param=field_sexps;
              for(;;)
               {if(param)
                 {var _aV__=param[1];
                  if(1 === _aV__[0])
                   {var _aV$_=_aV__[1];
                    if(_aV$_)
                     {var _aWa_=_aV$_[1];
                      if(0 === _aWa_[0])
                       {var _aWb_=_aV$_[2],_aWc_=_aWa_[1];
                        if(! _aWb_)
                         {var tail$0=param[2];
                          extra[1] = [0,_aWc_,extra[1]];
                          var param=tail$0;
                          continue}
                        if(! _aWb_[2])
                         {var tail=param[2],field_sexp=_aWb_[1];
                          if(caml_string_notequal(_aWc_,_aD8_))
                           if(caml_string_notequal(_aWc_,_aD9_))
                            if(caml_string_notequal(_aWc_,_aD__))
                             if(caml_string_notequal(_aWc_,_aD$_))
                              if(caml_string_notequal(_aWc_,_aEa_))
                               extra[1] = [0,_aWc_,extra[1]];
                              else
                               if(version_field[1])
                                duplicates[1] = [0,_aWc_,duplicates[1]];
                               else
                                {var fvalue=version_of_sexp$0(field_sexp);
                                 version_field[1] = [0,fvalue]}
                             else
                              if(status_field[1])
                               duplicates[1] = [0,_aWc_,duplicates[1]];
                              else
                               {var fvalue$0=status_code_of_sexp(field_sexp);
                                status_field[1] = [0,fvalue$0]}
                            else
                             if(headers_field[1])
                              duplicates[1] = [0,_aWc_,duplicates[1]];
                             else
                              {var fvalue$1=t_of_sexp(field_sexp);
                               headers_field[1] = [0,fvalue$1]}
                           else
                            if(flush_field[1])
                             duplicates[1] = [0,_aWc_,duplicates[1]];
                            else
                             {if(0 === field_sexp[0])
                               {var _aV9_=field_sexp[1],switch$0=0;
                                if(caml_string_notequal(_aV9_,_qh_))
                                 {var switch$1=0;
                                  if(caml_string_notequal(_aV9_,_qi_))
                                   if(caml_string_notequal(_aV9_,_qj_))
                                    {if(caml_string_notequal(_aV9_,_qk_))
                                      {var fvalue$2=of_sexp_error(_ql_,field_sexp);switch$1 = 1}}
                                   else
                                    {switch$0 = 1;switch$1 = 1}
                                  if(! switch$1)var fvalue$2=1}
                                else
                                 switch$0 = 1;
                                if(switch$0)var fvalue$2=0}
                              else
                               var fvalue$2=of_sexp_error(_qm_,field_sexp);
                              flush_field[1] = [0,fvalue$2]}
                          else
                           if(encoding_field[1])
                            duplicates[1] = [0,_aWc_,duplicates[1]];
                           else
                            {var fvalue$3=encoding_of_sexp(field_sexp);
                             encoding_field[1] = [0,fvalue$3]}
                          var param=tail;
                          continue}}}}
                  record_only_pairs_expected(tp_loc$11,_aV__)}
                if(duplicates[1])
                 return record_duplicate_fields(tp_loc$11,duplicates[1],sexp);
                if(extra[1])
                 return record_extra_fields(tp_loc$11,extra[1],sexp);
                var
                 _aWd_=encoding_field[1],
                 _aWe_=headers_field[1],
                 _aWf_=version_field[1],
                 _aWg_=status_field[1],
                 _aWh_=flush_field[1];
                if(_aWd_ && _aWe_ && _aWf_ && _aWg_ && _aWh_)
                 {var
                   flush_value=_aWh_[1],
                   status_value=_aWg_[1],
                   version_value=_aWf_[1],
                   headers_value=_aWe_[1],
                   encoding_value=_aWd_[1];
                  return [0,
                          encoding_value,
                          headers_value,
                          version_value,
                          status_value,
                          flush_value]}
                return record_undefined_elements
                        (tp_loc$11,
                         sexp,
                         [0,
                          [0,0 === encoding_field[1]?1:0,_aEf_],
                          [0,
                           [0,0 === headers_field[1]?1:0,_aEe_],
                           [0,
                            [0,0 === version_field[1]?1:0,_aEd_],
                            [0,
                             [0,0 === status_field[1]?1:0,_aEc_],
                             [0,[0,0 === flush_field[1]?1:0,_aEb_],0]]]]])}},
           sexp_of_t$0=
            function(param)
             {var
               v_flush=param[5],
               v_status=param[4],
               v_version=param[3],
               v_headers=param[2],
               v_encoding=param[1],
               arg=[0,of_bool(v_flush)],
               bnds=[0,[1,[0,_aEg_,[0,arg,0]]],0];
              if(typeof v_status === "number")
               {var switch$0=0;
                if(num_13829438 <= v_status)
                 {if(num_578388242 <= v_status)
                   {if(num_874866960 <= v_status)
                     {if(num_893234971 === v_status)
                       switch$0 = 1;
                      else
                       if(num_973294248 === v_status)
                        switch$0 = 4;
                       else
                        if(num_1034456810 === v_status)switch$0 = 3}
                    else
                     if
                      (num_792903807
                       !==
                       v_status
                       &&
                       num_807430278
                       !==
                       v_status
                       &&
                       626869806
                       <=
                       v_status)
                      switch$0 = 2}
                  else
                   if(num_229723487 <= v_status)
                    {if(num_260151748 === v_status)
                      switch$0 = 3;
                     else
                      if(num_491839979 <= v_status)
                       {if(num_566851975 <= v_status)switch$0 = 1}
                      else
                       if(num_384167631 <= v_status)switch$0 = 3}
                   else
                    if(num_18898339 === v_status)
                     switch$0 = 3;
                    else
                     if(num_161957855 <= v_status)
                      if(num_192584839 <= v_status)switch$0 = 4;else switch$0 = 2;
                     else
                      if(num_102779818 <= v_status)switch$0 = 1}
                else
                 if(num_459143713 <= v_status)
                  {if(num_176787538 <= v_status)
                    {if(num_43455790 === v_status || num_15361451 === v_status)
                      switch$0 = 2;
                     else
                      if(num_17692 <= v_status)switch$0 = 1}
                   else
                    if(num_358247754 <= v_status)
                     {if(num_221106440 <= v_status)
                       {if(num_199968061 <= v_status)switch$0 = 3}
                      else
                       if(num_330714374 <= v_status)switch$0 = 1}
                    else
                     if(num_429055472 <= v_status)switch$0 = 3}
                 else
                  if(num_785212614 <= v_status)
                   {if(num_720017128 !== v_status)
                     if(num_558113336 <= v_status)
                      if(num_498198474 <= v_status)switch$0 = 2;else switch$0 = 1;
                     else
                      if(-785212613 <= v_status)switch$0 = 2}
                  else
                   if(num_1014316796 <= v_status)
                    if(num_867418942 <= v_status)
                     {if(num_840540685 <= v_status)switch$0 = 4}
                    else
                     if(num_886248552 <= v_status)switch$0 = 1;else switch$0 = 2;
                   else
                    if(num_1021676630 <= v_status)switch$0 = 4;
                switch(switch$0)
                 {case 4:
                   var
                    arg$0=
                     num_192584839 <= v_status
                      ?num_973294248 <= v_status?_ayO_:_ayP_
                      :num_840540685 <= v_status?_ayQ_:_ayR_;
                   break;
                  case 1:
                   var
                    arg$0=
                     num_234002583 <= v_status
                      ?num_17692 === v_status
                        ?_aza_
                        :num_566851975 <= v_status
                          ?num_893234971 <= v_status?_azb_:_azc_
                          :num_102779818 <= v_status?_azd_:_aze_
                      :num_558113336 === v_status
                        ?_azf_
                        :num_330714374 <= v_status
                          ?num_247210088 <= v_status?_azg_:_azh_
                          :num_527633381 <= v_status?_azi_:_azj_;
                   break;
                  case 3:
                   var
                    arg$0=
                     num_18898339 <= v_status
                      ?num_260151748 === v_status
                        ?_azC_
                        :num_398750242 <= v_status
                          ?num_1034456810 <= v_status?_azD_:_azE_
                          :num_384167631 <= v_status?_azF_:_azG_
                      :num_387970219 <= v_status
                        ?num_199968061 <= v_status?_azH_:_azI_
                        :num_398446314 <= v_status?_azJ_:_azK_;
                   break;
                  case 0:
                   var
                    arg$0=
                     num_65414873 <= v_status
                      ?num_578388242 <= v_status
                        ?num_807430278 <= v_status
                          ?num_897427648 <= v_status
                            ?num_1052164689 <= v_status?_aAL_:_aAM_
                            :num_874866960 <= v_status?_aAN_:_aAO_
                          :num_626869805 <= v_status
                            ?num_792903807 <= v_status?_aAP_:_aAQ_
                            :num_599500189 <= v_status?_aAR_:_aAS_
                        :num_324098644 <= v_status
                          ?num_491839979 <= v_status
                            ?num_558492973 <= v_status?_aAT_:_aAU_
                            :num_382669006 <= v_status?_aAV_:_aAW_
                          :num_240875818 <= v_status
                            ?num_282375460 <= v_status?_aAX_:_aAY_
                            :num_229723487 <= v_status?_aAZ_:_aA0_
                      :num_358247754 <= v_status
                        ?num_36288910 <= v_status
                          ?num_13829438 <= v_status
                            ?num_60220292 <= v_status?_aA1_:_aA2_
                            :num_12825579 <= v_status?_aA3_:_aA4_
                          :num_176787538 <= v_status
                            ?num_99004555 <= v_status?_aA5_:_aA6_
                            :num_221106440 <= v_status?_aA7_:_aA8_
                        :num_785212614 <= v_status
                          ?num_459143713 <= v_status
                            ?num_438114087 <= v_status?_aA9_:_aA__
                            :num_720017128 <= v_status?_aA$_:_aBa_
                          :num_1028883702 <= v_status
                            ?num_867418942 <= v_status?_aBb_:_aBc_
                            :num_1042139761 <= v_status?_aBd_:_aBe_;
                   break;
                  default:
                   var
                    arg$0=
                     num_15361451 <= v_status
                      ?num_731537414 <= v_status
                        ?num_806912325 <= v_status
                          ?num_854525125 <= v_status?_aBH_:_aBI_
                          :num_789753444 <= v_status?_aBJ_:_aBK_
                        :num_161957855 === v_status
                          ?_aBL_
                          :num_169087453 <= v_status?_aBM_:_aBN_
                      :num_732353682 <= v_status
                        ?num_498198474 <= v_status
                          ?num_43455790 <= v_status?_aBO_:_aBP_
                          :num_598402413 <= v_status?_aBQ_:_aBR_
                        :num_957501398 === v_status
                          ?_aBS_
                          :num_774758938 <= v_status?_aBT_:_aBU_}}
              else
               var
                v0=v_status[2],
                arg$0=
                 [1,[0,_aBX_,[0,[0,caml_string_of_jsbytes(str$59 + v0)],0]]];
              var
               bnds$0=[0,[1,[0,_aEh_,[0,arg$0,0]]],bnds],
               arg$1=sexp_of_version(v_version),
               bnds$1=[0,[1,[0,_aEi_,[0,arg$1,0]]],bnds$0],
               arg$2=sexp_of_t(v_headers),
               bnds$2=[0,[1,[0,_aEj_,[0,arg$2,0]]],bnds$1],
               arg$3=sexp_of_encoding(v_encoding),
               bnds$3=[0,[1,[0,_aEk_,[0,arg$3,0]]],bnds$2];
              return [1,bnds$3]},
           make$10=
            function(opt,_aV8_,_aV7_,_aV6_,_aV5_,param)
             {if(opt)
               var sth=opt[1],version=sth;
              else
               var version=num_540315116;
              if(_aV8_)
               var sth$0=_aV8_[1],status=sth$0;
              else
               var status=num_17692;
              if(_aV7_)var sth$1=_aV7_[1],flush=sth$1;else var flush=0;
              if(_aV6_)var sth$2=_aV6_[1],encoding=sth$2;else var encoding=0;
              if(_aV5_)
               var sth$3=_aV5_[1],headers=sth$3;
              else
               var headers=init$5(0);
              var enc=get_transfer_encoding(headers),switch$0=0;
              if(typeof enc === "number" && 0 !== enc)
               {var encoding$0=encoding;switch$0 = 1}
              if(! switch$0)var encoding$0=enc;
              return [0,encoding$0,headers,version,status,flush]},
           _aEl_=
            [0,
             names,
             flush$1,
             status$1,
             version$2,
             headers$0,
             encoding$72,
             fold$3,
             make_creator,
             create$16,
             map$6,
             iter$8,
             for_all$0,
             exists$0,
             to_list$1,
             map_poly,
             Direct],
           encoding$73=function(r){return r[5]},
           version$3=function(r){return r[4]},
           resource=function(r){return r[3]},
           meth=function(r){return r[2]},
           headers$1=function(r){return r[1]},
           _aEm_=function(r,v){return [0,r[1],r[2],r[3],r[4],v]},
           _aEn_=0,
           encoding$74=
            [0,function(param){return 0},_aEo_,_aEn_,encoding$73,_aEm_],
           _aEp_=function(r,v){return [0,r[1],r[2],r[3],v,r[5]]},
           _aEq_=0,
           version$4=[0,function(param){return 0},_aEr_,_aEq_,version$3,_aEp_],
           _aEs_=function(r,v){return [0,r[1],r[2],v,r[4],r[5]]},
           _aEt_=0,
           resource$0=[0,function(param){return 0},_aEu_,_aEt_,resource,_aEs_],
           _aEv_=function(r,v){return [0,r[1],v,r[3],r[4],r[5]]},
           _aEw_=0,
           meth$0=[0,function(param){return 0},_aEx_,_aEw_,meth,_aEv_],
           _aEy_=function(r,v){return [0,v,r[2],r[3],r[4],r[5]]},
           _aEz_=0,
           headers$2=[0,function(param){return 0},_aEA_,_aEz_,headers$1,_aEy_],
           make_creator$0=
            function
             (headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun,
              compile_acc)
             {var
               match=caml_call2(headers_fun,headers$2,compile_acc),
               compile_acc$0=match[2],
               headers_gen=match[1],
               match$0=caml_call2(meth_fun,meth$0,compile_acc$0),
               compile_acc$1=match$0[2],
               meth_gen=match$0[1],
               match$1=caml_call2(resource_fun,resource$0,compile_acc$1),
               compile_acc$2=match$1[2],
               resource_gen=match$1[1],
               match$2=caml_call2(version_fun,version$4,compile_acc$2),
               compile_acc$3=match$2[2],
               version_gen=match$2[1],
               match$3=caml_call2(encoding_fun,encoding$74,compile_acc$3),
               compile_acc$4=match$3[2],
               encoding_gen=match$3[1];
              return [0,
                      function(acc)
                       {var
                         headers=caml_call1(headers_gen,acc),
                         meth=caml_call1(meth_gen,acc),
                         resource=caml_call1(resource_gen,acc),
                         version=caml_call1(version_gen,acc),
                         encoding=caml_call1(encoding_gen,acc);
                        return [0,headers,meth,resource,version,encoding]},
                      compile_acc$4]},
           create$17=
            function(headers,meth,resource,version,encoding)
             {return [0,headers,meth,resource,version,encoding]},
           map$8=
            function
             (headers_fun,meth_fun,resource_fun,version_fun,encoding_fun)
             {var
               _aV1_=caml_call1(encoding_fun,encoding$74),
               _aV2_=caml_call1(version_fun,version$4),
               _aV3_=caml_call1(resource_fun,resource$0),
               _aV4_=caml_call1(meth_fun,meth$0);
              return [0,
                      caml_call1(headers_fun,headers$2),
                      _aV4_,
                      _aV3_,
                      _aV2_,
                      _aV1_]},
           iter$10=
            function
             (headers_fun,meth_fun,resource_fun,version_fun,encoding_fun)
             {caml_call1(headers_fun,headers$2);
              caml_call1(meth_fun,meth$0);
              caml_call1(resource_fun,resource$0);
              caml_call1(version_fun,version$4);
              return caml_call1(encoding_fun,encoding$74)},
           fold$5=
            function
             (init,headers_fun,meth_fun,resource_fun,version_fun,encoding_fun)
             {return caml_call2
                      (encoding_fun,
                       caml_call2
                        (version_fun,
                         caml_call2
                          (resource_fun,
                           caml_call2
                            (meth_fun,caml_call2(headers_fun,init,headers$2),meth$0),
                           resource$0),
                         version$4),
                       encoding$74)},
           map_poly$0=
            function(record)
             {var
               _aVX_=[0,caml_call1(record[1],encoding$74),0],
               _aVY_=[0,caml_call1(record[1],version$4),_aVX_],
               _aVZ_=[0,caml_call1(record[1],resource$0),_aVY_],
               _aV0_=[0,caml_call1(record[1],meth$0),_aVZ_];
              return [0,caml_call1(record[1],headers$2),_aV0_]},
           for_all$2=
            function
             (headers_fun,meth_fun,resource_fun,version_fun,encoding_fun)
             {var
               _aVT_=caml_call1(headers_fun,headers$2),
               _aVU_=_aVT_?caml_call1(meth_fun,meth$0):_aVT_,
               _aVV_=_aVU_?caml_call1(resource_fun,resource$0):_aVU_,
               _aVW_=_aVV_?caml_call1(version_fun,version$4):_aVV_;
              return _aVW_?caml_call1(encoding_fun,encoding$74):_aVW_},
           exists$2=
            function
             (headers_fun,meth_fun,resource_fun,version_fun,encoding_fun)
             {var
               _aVS_=caml_call1(headers_fun,headers$2),
               _aVP_=_aVS_ || caml_call1(meth_fun,meth$0),
               _aVQ_=_aVP_ || caml_call1(resource_fun,resource$0),
               _aVR_=_aVQ_ || caml_call1(version_fun,version$4);
              return _aVR_?_aVR_:caml_call1(encoding_fun,encoding$74)},
           to_list$3=
            function
             (headers_fun,meth_fun,resource_fun,version_fun,encoding_fun)
             {var
               _aVL_=[0,caml_call1(encoding_fun,encoding$74),0],
               _aVM_=[0,caml_call1(version_fun,version$4),_aVL_],
               _aVN_=[0,caml_call1(resource_fun,resource$0),_aVM_],
               _aVO_=[0,caml_call1(meth_fun,meth$0),_aVN_];
              return [0,caml_call1(headers_fun,headers$2),_aVO_]},
           iter$11=
            function
             (record,
              headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun)
             {caml_call3(headers_fun,headers$2,record,record[1]);
              caml_call3(meth_fun,meth$0,record,record[2]);
              caml_call3(resource_fun,resource$0,record,record[3]);
              caml_call3(version_fun,version$4,record,record[4]);
              return caml_call3(encoding_fun,encoding$74,record,record[5])},
           fold$6=
            function
             (record,
              init,
              headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun)
             {var
               _aVH_=record[5],
               _aVI_=record[4],
               _aVJ_=record[3],
               _aVK_=record[2];
              return caml_call4
                      (encoding_fun,
                       caml_call4
                        (version_fun,
                         caml_call4
                          (resource_fun,
                           caml_call4
                            (meth_fun,
                             caml_call4(headers_fun,init,headers$2,record,record[1]),
                             meth$0,
                             record,
                             _aVK_),
                           resource$0,
                           record,
                           _aVJ_),
                         version$4,
                         record,
                         _aVI_),
                       encoding$74,
                       record,
                       _aVH_)},
           for_all$3=
            function
             (record,
              headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun)
             {var
               _aVD_=caml_call3(headers_fun,headers$2,record,record[1]),
               _aVE_=_aVD_?caml_call3(meth_fun,meth$0,record,record[2]):_aVD_,
               _aVF_=
                _aVE_
                 ?caml_call3(resource_fun,resource$0,record,record[3])
                 :_aVE_,
               _aVG_=
                _aVF_?caml_call3(version_fun,version$4,record,record[4]):_aVF_;
              return _aVG_
                      ?caml_call3(encoding_fun,encoding$74,record,record[5])
                      :_aVG_},
           exists$3=
            function
             (record,
              headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun)
             {var
               _aVC_=caml_call3(headers_fun,headers$2,record,record[1]),
               _aVz_=_aVC_ || caml_call3(meth_fun,meth$0,record,record[2]),
               _aVA_=
                _aVz_
                ||
                caml_call3(resource_fun,resource$0,record,record[3]),
               _aVB_=
                _aVA_
                ||
                caml_call3(version_fun,version$4,record,record[4]);
              return _aVB_
                      ?_aVB_
                      :caml_call3(encoding_fun,encoding$74,record,record[5])},
           to_list$4=
            function
             (record,
              headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun)
             {var
               _aVv_=
                [0,caml_call3(encoding_fun,encoding$74,record,record[5]),0],
               _aVw_=
                [0,caml_call3(version_fun,version$4,record,record[4]),_aVv_],
               _aVx_=
                [0,caml_call3(resource_fun,resource$0,record,record[3]),_aVw_],
               _aVy_=[0,caml_call3(meth_fun,meth$0,record,record[2]),_aVx_];
              return [0,
                      caml_call3(headers_fun,headers$2,record,record[1]),
                      _aVy_]},
           map$9=
            function
             (record,
              headers_fun,
              meth_fun,
              resource_fun,
              version_fun,
              encoding_fun)
             {var
               _aVr_=caml_call3(encoding_fun,encoding$74,record,record[5]),
               _aVs_=caml_call3(version_fun,version$4,record,record[4]),
               _aVt_=caml_call3(resource_fun,resource$0,record,record[3]),
               _aVu_=caml_call3(meth_fun,meth$0,record,record[2]);
              return [0,
                      caml_call3(headers_fun,headers$2,record,record[1]),
                      _aVu_,
                      _aVt_,
                      _aVs_,
                      _aVr_]},
           set_all_mutable_fields$0=function(record){return 0},
           Direct$0=
            [0,
             iter$11,
             fold$6,
             for_all$3,
             exists$3,
             to_list$4,
             map$9,
             set_all_mutable_fields$0],
           t_of_sexp$1=
            function(sexp)
             {if(0 === sexp[0])
               return record_list_instead_atom(tp_loc$12,sexp);
              var
               field_sexps=sexp[1],
               headers_field=[0,0],
               meth_field=[0,0],
               resource_field=[0,0],
               version_field=[0,0],
               encoding_field=[0,0],
               duplicates=[0,0],
               extra=[0,0],
               param=field_sexps;
              for(;;)
               {if(param)
                 {var _aVh_=param[1];
                  if(1 === _aVh_[0])
                   {var _aVi_=_aVh_[1];
                    if(_aVi_)
                     {var _aVj_=_aVi_[1];
                      if(0 === _aVj_[0])
                       {var _aVk_=_aVi_[2],_aVl_=_aVj_[1];
                        if(! _aVk_)
                         {var tail$0=param[2];
                          extra[1] = [0,_aVl_,extra[1]];
                          var param=tail$0;
                          continue}
                        if(! _aVk_[2])
                         {var tail=param[2],field_sexp=_aVk_[1];
                          if(caml_string_notequal(_aVl_,_aEB_))
                           if(caml_string_notequal(_aVl_,_aEC_))
                            if(caml_string_notequal(_aVl_,_aED_))
                             if(caml_string_notequal(_aVl_,_aEE_))
                              if(caml_string_notequal(_aVl_,_aEF_))
                               extra[1] = [0,_aVl_,extra[1]];
                              else
                               if(version_field[1])
                                duplicates[1] = [0,_aVl_,duplicates[1]];
                               else
                                {var fvalue=version_of_sexp$0(field_sexp);
                                 version_field[1] = [0,fvalue]}
                             else
                              if(resource_field[1])
                               duplicates[1] = [0,_aVl_,duplicates[1]];
                              else
                               {var fvalue$0=a_of_sexp(field_sexp);
                                resource_field[1] = [0,fvalue$0]}
                            else
                             if(meth_field[1])
                              duplicates[1] = [0,_aVl_,duplicates[1]];
                             else
                              {var fvalue$1=meth_of_sexp$0(field_sexp);
                               meth_field[1] = [0,fvalue$1]}
                           else
                            if(headers_field[1])
                             duplicates[1] = [0,_aVl_,duplicates[1]];
                            else
                             {var fvalue$2=t_of_sexp(field_sexp);
                              headers_field[1] = [0,fvalue$2]}
                          else
                           if(encoding_field[1])
                            duplicates[1] = [0,_aVl_,duplicates[1]];
                           else
                            {var fvalue$3=encoding_of_sexp(field_sexp);
                             encoding_field[1] = [0,fvalue$3]}
                          var param=tail;
                          continue}}}}
                  record_only_pairs_expected(tp_loc$12,_aVh_)}
                if(duplicates[1])
                 return record_duplicate_fields(tp_loc$12,duplicates[1],sexp);
                if(extra[1])
                 return record_extra_fields(tp_loc$12,extra[1],sexp);
                var
                 _aVm_=headers_field[1],
                 _aVn_=meth_field[1],
                 _aVo_=resource_field[1],
                 _aVp_=version_field[1],
                 _aVq_=encoding_field[1];
                if(_aVm_ && _aVn_ && _aVo_ && _aVp_ && _aVq_)
                 {var
                   encoding_value=_aVq_[1],
                   version_value=_aVp_[1],
                   resource_value=_aVo_[1],
                   meth_value=_aVn_[1],
                   headers_value=_aVm_[1];
                  return [0,
                          headers_value,
                          meth_value,
                          resource_value,
                          version_value,
                          encoding_value]}
                return record_undefined_elements
                        (tp_loc$12,
                         sexp,
                         [0,
                          [0,0 === headers_field[1]?1:0,_aEK_],
                          [0,
                           [0,0 === meth_field[1]?1:0,_aEJ_],
                           [0,
                            [0,0 === resource_field[1]?1:0,_aEI_],
                            [0,
                             [0,0 === version_field[1]?1:0,_aEH_],
                             [0,[0,0 === encoding_field[1]?1:0,_aEG_],0]]]]])}},
           sexp_of_t$1=
            function(param)
             {var
               v_encoding=param[5],
               v_version=param[4],
               v_resource=param[3],
               v_meth=param[2],
               v_headers=param[1],
               arg=sexp_of_encoding(v_encoding),
               bnds=[0,[1,[0,_aEL_,[0,arg,0]]],0],
               arg$0=sexp_of_version(v_version),
               bnds$0=[0,[1,[0,_aEM_,[0,arg$0,0]]],bnds],
               arg$1=[0,v_resource],
               bnds$1=[0,[1,[0,_aEN_,[0,arg$1,0]]],bnds$0];
              if(typeof v_meth === "number")
               var
                arg$2=
                 num_357830602 <= v_meth
                  ?num_492530731 === v_meth
                    ?_ayw_
                    :num_891112544 <= v_meth
                      ?num_994393768 <= v_meth?_ayx_:_ayy_
                      :num_801894688 <= v_meth?_ayz_:_ayA_
                  :num_3997359 <= v_meth
                    ?num_336447077 <= v_meth?_ayB_:_ayC_
                    :num_3546230 <= v_meth?_ayD_:_ayE_;
              else
               var v0=v_meth[2],arg$2=[1,[0,_ayF_,[0,[0,v0],0]]];
              var
               bnds$2=[0,[1,[0,_aEO_,[0,arg$2,0]]],bnds$1],
               arg$3=sexp_of_t(v_headers),
               bnds$3=[0,[1,[0,_aEP_,[0,arg$3,0]]],bnds$2];
              return [1,bnds$3]},
           fixed_zero=[0,zero],
           make$11=
            function(opt,_aVb_,encoding$0,headers,uri)
             {if(opt)var sth$1=opt[1],meth=sth$1;else var meth=num_3546230;
              if(_aVb_)
               var sth$2=_aVb_[1],version=sth$2;
              else
               var version=num_540315116;
              if(headers)
               var h$0=headers[1],headers$0=h$0;
              else
               var headers$0=init$5(0);
              var match$4=scheme(uri),switch$0=0;
              if(match$4 && ! caml_string_notequal(match$4[1],_aEQ_))
               {var _aVe_=_aEV_;switch$0 = 1}
              if(! switch$0)
               {var match$5=uri[4];
                if(match$5)
                 var
                  p=match$5[1],
                  _aVc_=symbol(_aER_,caml_string_of_jsbytes(str$59 + p));
                else
                 var _aVc_=_aEU_;
                if(opt$6)
                 var sth=opt$6[1],default$0=sth;
                else
                 var default$0=_hw_;
                var match=host(uri);
                if(match)var h=match[1],_aVd_=h;else var _aVd_=default$0;
                var _aVe_=symbol(_aVd_,_aVc_)}
              var
               headers$1=add_unless_exists(headers$0,_aES_,_aVe_),
               headers$2=add_unless_exists(headers$1,_aET_,user_agent),
               match$3=get$1(headers$2,_aDK_);
              if(match$3)
               var v=match$3[1],match$6=[0,credential_of_string(v)];
              else
               var match$6=0;
              var _aU__=uri[2];
              if(_aU__)
               var match$0=_aU__[1],user=match$0[1],match$7=[0,user];
              else
               var match$7=0;
              var _aU$_=uri[2],switch$1=0;
              if(_aU$_)
               {var _aVa_=_aU$_[1][2];
                if(_aVa_){var pass=_aVa_[1],match$8=[0,pass];switch$1 = 1}}
              if(! switch$1)var match$8=0;
              var switch$2=0;
              if(! match$6 && match$7 && match$8)
               {var
                 pass$0=match$8[1],
                 user$0=match$7[1],
                 input=caml_call2(sprintf(_ax1_),user$0,pass$0),
                 emap=alphabet[1],
                 len=caml_ml_string_length(input) - 0 | 0,
                 switch$3=0;
                if
                 (0
                  <=
                  len
                  &&
                  !
                  ((caml_ml_string_length(input) - len | 0) < 0))
                 {var
                   n=symbol$23(len,3) * 4 | 0,
                   res=caml_create_bytes(n),
                   emap$0=function(i){return emap[1 + i]},
                   emit=
                    function(b1,b2,b3,i)
                     {var _aVf_=emap$0((b1 << 4 | b2 >>> 4 | 0) & 63);
                      unsafe_set_be_uint16
                       (res,i,emap$0((b1 >>> 2 | 0) & 63) << 8 | _aVf_);
                      var _aVg_=emap$0(b3 & 63);
                      return unsafe_set_be_uint16
                              (res,
                               i + 2 | 0,
                               emap$0((b2 << 2 | b3 >>> 6 | 0) & 63) << 8 | _aVg_)},
                   j=0,
                   i=0;
                  for(;;)
                   {if(i !== len)
                     if(i === (len - 1 | 0))
                      emit(caml_string_unsafe_get(input,i | 0),0,0,j);
                     else
                      {if(i !== (len - 2 | 0))
                        {emit
                          (caml_string_unsafe_get(input,i | 0),
                           caml_string_unsafe_get(input,(i | 0) + 1 | 0),
                           caml_string_unsafe_get(input,(i | 0) + 2 | 0),
                           j);
                         var i$0=i + 3 | 0,j$0=j + 4 | 0,j=j$0,i=i$0;
                         continue}
                       emit
                        (caml_string_unsafe_get(input,i | 0),
                         caml_string_unsafe_get(input,(i | 0) + 1 | 0),
                         0,
                         j)}
                    var i$3=(3 - (len % 3 | 0) | 0) % 3 | 0,i$1=i$3;
                    for(;;)
                     {if(0 !== i$1)
                       {unsafe_set_uint8(res,n - i$1 | 0,padding);
                        var i$2=i$1 - 1 | 0,i$1=i$2;
                        continue}
                      var err=[0,[0,caml_string_of_bytes(res),0,n]];
                      switch$3 = 1;
                      break}
                    break}}
                if(! switch$3)var err=error_msgf(_aw9_);
                if(0 === err[0])
                 var
                  match$1=err[1],
                  len$0=match$1[3],
                  off=match$1[2],
                  res$0=match$1[1],
                  match$2=[0,sub$0(res$0,off,len$0)];
                else
                 var match$2=err;
                if(0 !== match$2[0])throw [0,Assert_failure,_aw__];
                var
                 res$1=match$2[1],
                 headers$3=add$9(headers$2,_aDJ_,symbol(_ax2_,res$1));
                switch$2 = 1}
              if(! switch$2)var headers$3=headers$2;
              if(encoding$0)
               var sth$0=encoding$0[1],encoding=sth$0;
              else
               var encoding=fixed_zero;
              var enc=get_transfer_encoding(headers$3),switch$4=0;
              if(typeof enc === "number" && 0 !== enc)
               {var encoding$1=encoding;switch$4 = 1}
              if(! switch$4)var encoding$1=enc;
              return [0,headers$3,meth,path_and_query(uri),version,encoding$1]},
           is_keep_alive=
            function(param)
             {var
               version=param[4],
               headers=param[1],
               _aU7_=num_540315115 === version?1:0;
              if(_aU7_)
               var _aU8_=_aU7_;
              else
               {var match=get$1(headers,_aDL_);
                if(match)
                 var
                  v=match[1],
                  match$0=
                   caml_string_equal(v,_aDM_)
                    ?_aDN_
                    :caml_string_equal(v,_aDO_)?_aDP_:[0,[0,785140586,v]];
                else
                 var match$0=0;
                var switch$0=0;
                if(match$0 && num_611285096 === match$0[1])
                 {var _aU9_=1;switch$0 = 1}
                if(! switch$0)var _aU9_=0;
                var _aU8_=_aU9_}
              return 1 - _aU8_},
           make_for_client=
            function(headers,opt,_aU6_,meth,uri)
             {if(opt)var sth=opt[1],chunked=sth;else var chunked=1;
              if(_aU6_)
               var sth$0=_aU6_[1],body_length=sth$0;
              else
               var body_length=zero;
              var encoding=0 === chunked?[0,body_length]:0;
              return make$11([0,meth],0,[0,encoding],headers,uri)},
           uri=
            function(param)
             {var resource=param[3],meth=param[2],headers=param[1];
              if(caml_string_notequal(resource,_aEW_))
               {if(num_357830602 === meth)
                 return of_string$0(symbol(_aEX_,resource));
                var uri=of_string$0(resource),match=scheme(uri);
                if(match)
                 {var match$0=path(0,uri);
                  return caml_string_notequal(match$0,_aEY_)
                          ?uri
                          :with_path(uri,_aEZ_)}
                var
                 empty=of_string$0(_aE0_),
                 empty_base=of_string$0(_aE1_),
                 match$1=split$0(_aE2_,resource,63);
                if(match$1)
                 {var _aU2_=match$1[2],_aU3_=match$1[1];
                  if(_aU2_)
                   var
                    qs=_aU2_[1],
                    path_base=resolve$0(_aE3_,empty_base,with_path(empty,_aU3_)),
                    _aU4_=with_query(path_base,query_of_encoded(qs));
                  else
                   var
                    _aU4_=
                     resolve$0(_aE6_,empty_base,with_path(empty,_aU3_));
                  var pqs=_aU4_}
                else
                 var pqs=empty_base;
                var match$2=get$1(headers,_aE4_);
                if(match$2)
                 var
                  host$0=match$2[1],
                  host_uri=of_string$0(symbol(_aE5_,host$0)),
                  uri$0=with_host(pqs,host(host_uri)),
                  uri$1=with_port(uri$0,host_uri[4]);
                else
                 var
                  uri$2=with_host(pqs,0),
                  uri$1=
                   [0,0,uri$2[2],uri$2[3],uri$2[4],uri$2[5],uri$2[6],uri$2[7]];
                return uri$1}
              var match$3=get$1(headers,_aE7_);
              if(match$3)
               {var
                 host$1=match$3[1],
                 host_uri$0=of_string$0(symbol(_aE8_,host$1)),
                 _aU5_=host(host_uri$0),
                 uri$3=with_host(of_string$0(_aE9_),_aU5_);
                return with_port(uri$3,host_uri$0[4])}
              return of_string$0(_aE__)},
           _aE$_=
            [0,
             names$0,
             encoding$74,
             version$4,
             resource$0,
             meth$0,
             headers$2,
             fold$5,
             make_creator$0,
             create$17,
             map$8,
             iter$10,
             for_all$2,
             exists$2,
             to_list$3,
             map_poly$0,
             Direct$0],
           body=50834029,
           read_line$0=function(ic){return return$1(read_line(ic))},
           read$1=
            function(ic,n)
             {if((ic[3] - ic[2] | 0) < n)
               var match=0;
              else
               {var s=sub$0(ic[1],ic[2],n);
                ic[2] = ic[2] + n | 0;
                var match=[0,s]}
              if(match)
               var x=match[1],_aU1_=x;
              else
               {if(ic[3] <= ic[2])throw End_of_file;var _aU1_=read_rest(ic)}
              return return$1(_aU1_)},
           write$1=function(oc,str){add_string(oc,str);return return$1(0)},
           flush$2=function(oc){return return$1(0)},
           _aFe_=[0,symbol_bind,return$1,read_line$0,read$1,write$1,flush$2],
           create_stream=
            function(fn,arg)
             {var fin=[0,0];
              function f(param)
               {if(0 === fin[1])
                 {var
                   _aU0_=
                    function(param)
                     {if(typeof param === "number")
                       return return_none;
                      else
                       {if(0 === param[0]){var c=param[1];return return$1([0,c])}
                        var c$0=param[1];
                        fin[1] = 1;
                        return return$1([0,c$0])}};
                  return symbol_bind(caml_call1(fn,arg),_aU0_)}
                return return_none}
              return from_source([0,[0,f,return_unit]])},
           is_empty$0=
            function(body)
             {if(typeof body !== "number" && ! (num_976970511 <= body[1]))
               {var s=body[2];return is_empty(s)}
              var switch$0=0;
              if(typeof body !== "number")
               {var switch$1=0;
                if(num_968575390 <= body[1])
                 {if(! body[2])switch$1 = 1}
                else
                 if(! caml_string_notequal(body[2],_aFa_))switch$1 = 1;
                if(! switch$1){var _aUZ_=0;switch$0 = 1}}
              if(! switch$0)var _aUZ_=1;
              return return$1(_aUZ_)},
           to_string$17=
            function(body)
             {if(typeof body !== "number" && ! (num_976970511 <= body[1]))
               {var
                 s$0=body[2],
                 b=create$1(num_1024),
                 _aUX_=function(param){return return$1(contents(b))},
                 f=function(_aUY_){return add_string(b,_aUY_)};
                return symbol_bind(iter_rec(s$0[3],f,s$0),_aUX_)}
              if(typeof body === "number")
               var _aUW_=_aFb_;
              else
               if(num_968575390 <= body[1])
                var sl=body[2],_aUW_=concat$0(_aFc_,sl);
               else
                var s=body[2],_aUW_=s;
              return return$1(_aUW_)},
           of_string$3=function(s){return [0,num_976970511,s]},
           of_stream=function(s){return [0,num_977172320,s]},
           transfer_encoding=
            function(t)
             {if(typeof t !== "number" && ! (num_976970511 <= t[1]))return 0;
              if(typeof t === "number")return _aFd_;
              if(num_968575390 <= t[1])return 0;
              var s=t[2];
              return [0,caml_int64_of_int32(caml_ml_string_length(s))]},
           _aFj_=
            function(_aUF_)
             {function name_of_media_type(param)
               {if(typeof param === "number")
                 return _aFf_;
                else
                 {if(0 === param[0])
                   {var subtype=param[2],type=param[1];
                    return symbol(type,symbol(_aFg_,subtype))}
                  var type$0=param[1];
                  return symbol(type$0,_aFh_)}}
              function name(param)
               {var name=param[1];return name_of_media_type(name)}
              function has_complete_media(param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var _aUV_=param$0[1][1];
                    if(typeof _aUV_ !== "number" && 0 === _aUV_[0])return 1;
                    var param$1=param$0[2],param$0=param$1;
                    continue}
                  return 0}}
              function first_complete_media(param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var _aUT_=param$0[1],_aUU_=_aUT_[1];
                    if(typeof _aUU_ !== "number" && 0 === _aUU_[0])
                     {var r=_aUU_[2],l=_aUU_[1];return [0,[0,[0,l,r],_aUT_]]}
                    var param$1=param$0[2],param$0=param$1;
                    continue}
                  return 0}}
              function find_media(param$0,param)
               {var param$1=param;
                for(;;)
                 {if(param$1)
                   {var
                     mts=param$1[2],
                     media=param$1[1],
                     name=media[1],
                     _aUP_=param$0[1],
                     _aUO_=param$0[2];
                    if(typeof name === "number")
                     var _aUS_=1;
                    else
                     if(0 === name[0])
                      var
                       subtype=name[2],
                       type=name[1],
                       _aUQ_=caml_string_equal(type,_aUP_),
                       _aUR_=_aUQ_?caml_string_equal(subtype,_aUO_):_aUQ_,
                       _aUS_=_aUR_;
                     else
                      var type$0=name[1],_aUS_=caml_string_equal(type$0,_aUP_);
                    if(_aUS_)return [0,media];
                    var param$1=mts;
                    continue}
                  return 0}}
              function resolve_accept_header(provided,header)
               {if(header)
                 var
                  s=header[1],
                  lexbuf=from_string(0,s),
                  _aUH_=yyparse(yytables,1,lexfun,lexbuf);
                else
                 var _aUH_=_axO_;
                function compare(param,_aUN_)
                 {var i=_aUN_[1],i$0=param[1];return caml_int_compare(i,i$0)}
                var ranges=fast_sort(compare,_aUH_);
                function loop(param)
                 {var param$0=param;
                  for(;;)
                   {if(param$0)
                     {var rs=param$0[2],r=param$0[1];
                      try
                       {var
                         media=
                          find
                           (function(r)
                              {return function(media)
                                {var match=r[2],range=match[1],_aUK_=media[1];
                                 if(typeof _aUK_ !== "number" && 0 === _aUK_[0])
                                  {var subtype=_aUK_[2],type=_aUK_[1];
                                   if(typeof range === "number")
                                    return 1;
                                   else
                                    {if(0 === range[0])
                                      {var
                                        subtype$0=range[2],
                                        type$0=range[1],
                                        _aUL_=caml_string_equal(type$0,type),
                                        _aUM_=_aUL_?caml_string_equal(subtype$0,subtype):_aUL_;
                                       return _aUM_}
                                     var type$1=range[1];
                                     return caml_string_equal(type$1,type)}}
                                 return 0}}
                             (r),
                            provided),
                         _aUI_=[0,[0,name_of_media_type(media[1]),media]];
                        return _aUI_}
                      catch(_aUJ_)
                       {_aUJ_ = caml_wrap_exception(_aUJ_);
                        if(_aUJ_ === Not_found){var param$0=rs;continue}
                        throw _aUJ_}}
                    return 0}}
                return loop(ranges)}
              function accept_header(ranges)
               {var
                 ranges$0=
                  map$1
                   (function(r)
                     {var _aUG_=r[2];
                      if(_aUG_)var i=_aUG_[1],q=i;else var q=num_1000$0;
                      return [0,q,[0,r[1],0]]},
                    ranges);
                return caml_call1(string_of_media_ranges,ranges$0)}
              function acceptable_encoding(ranges)
               {return concat$0
                        (_aFi_,
                         map$1(function(f){return name_of_media_type(f[1])},ranges))}
              return [0,
                      name,
                      has_complete_media,
                      first_complete_media,
                      find_media,
                      resolve_accept_header,
                      accept_header,
                      acceptable_encoding]},
           Request_failed=[num_248,_aFK_,caml_fresh_oo_id(0)],
           _aFL_=0,
           _aFM_=function(param){var msg=param[2];return [8,msg]},
           _aFN_=
            function(param)
             {if(typeof param !== "number" && 8 === param[0])
               {var msg=param[1];return [0,[0,0,msg]]}
              return 0},
           _aFT_=
            [0,
             [0,
              _aFS_,
              0,
              obj2([0,_aFQ_,constant(_aFP_),0,0],[0,_aFO_,output,0,0]),
              _aFN_,
              _aFM_,
              _aFR_],
             _aFL_],
           _aFU_=
            function(param)
             {var error=param[4],media_type=param[3],content=param[2];
              return [7,content,media_type,error]},
           _aFV_=
            function(param)
             {if(typeof param !== "number" && 7 === param[0])
               {var error=param[3],media_type=param[2],content=param[1];
                return [0,[0,0,content,media_type,error]]}
              return 0},
           _aF3_=
            [0,
             [0,
              _aF2_,
              0,
              obj4
               ([0,_aF0_,constant(_aFZ_),0,0],
                [0,_aFY_,output,0,0],
                [0,_aFX_,output,0,0],
                [0,_aFW_,output,0,0]),
              _aFV_,
              _aFU_,
              _aF1_],
             _aFT_],
           _aF4_=
            function(param)
             {var body=param[4],acceptable=param[3],received=param[2];
              return [6,received,acceptable,body]},
           _aF5_=
            function(param)
             {if(typeof param !== "number" && 6 === param[0])
               {var body=param[3],acceptable=param[2],received=param[1];
                return [0,[0,0,received,acceptable,body]]}
              return 0},
           _aF8_=[0,_aF7_,list$1(0,output),0,0],
           _aGc_=
            [0,
             [0,
              _aGb_,
              0,
              obj4
               ([0,_aF$_,constant(_aF__),0,0],
                [0,_aF9_,output,0,0],
                _aF8_,
                [0,_aF6_,output,0,0]),
              _aF5_,
              _aF4_,
              _aGa_],
             _aF3_],
           _aGd_=
            function(param)
             {var
               media_type=param[4],
               content=param[3],
               code=param[2],
               code$0=status_of_code(code);
              return [5,code$0,content,media_type]},
           _aGe_=
            function(param)
             {if(typeof param !== "number" && 5 === param[0])
               {var media_type=param[3],content=param[2],code=param[1];
                return [0,[0,0,code_of_status(code),content,media_type]]}
              return 0},
           _aGg_=opt$2(0,0,_aGf_,output),
           _aGn_=
            [0,
             [0,
              _aGm_,
              0,
              obj4
               ([0,_aGk_,constant(_aGj_),0,0],
                [0,_aGi_,uint16$0,0,0],
                [0,_aGh_,output,0,0],
                _aGg_),
              _aGe_,
              _aGd_,
              _aGl_],
             _aGc_],
           _aGo_=
            function(param)
             {var acceptable=param[3],proposed=param[2];
              return [4,proposed,acceptable]},
           _aGp_=
            function(param)
             {if(typeof param !== "number" && 4 === param[0])
               {var acceptable=param[2],proposed=param[1];
                return [0,[0,0,proposed,acceptable]]}
              return 0},
           _aGw_=
            [0,
             [0,
              _aGv_,
              0,
              obj3
               ([0,_aGt_,constant(_aGs_),0,0],
                [0,_aGr_,output,0,0],
                [0,_aGq_,output,0,0]),
              _aGp_,
              _aGo_,
              _aGu_],
             _aGn_],
           _aGx_=function(param){var m=param[2];return [3,m]},
           _aGy_=
            function(param)
             {if(typeof param !== "number" && 3 === param[0])
               {var m=param[1];return [0,[0,0,m]]}
              return 0},
           _aGA_=opt$2(0,0,_aGz_,output),
           _aGF_=
            [0,
             [0,
              _aGE_,
              0,
              obj2([0,_aGC_,constant(_aGB_),0,0],_aGA_),
              _aGy_,
              _aGx_,
              _aGD_],
             _aGw_],
           _aGG_=function(param){var meths=param[2];return [2,meths]},
           _aGH_=
            function(param)
             {if(typeof param !== "number" && 2 === param[0])
               {var meths=param[1];return [0,[0,0,meths]]}
              return 0},
           _aGJ_=[0,_aGI_,list$1(0,meth_encoding$0),0,0],
           _aGO_=
            [0,
             [0,
              _aGN_,
              0,
              obj2([0,_aGL_,constant(_aGK_),0,0],_aGJ_),
              _aGH_,
              _aGG_,
              _aGM_],
             _aGF_],
           _aGP_=function(param){var msg=param[2];return [1,msg]},
           _aGQ_=
            function(param)
             {if(typeof param !== "number" && 1 === param[0])
               {var msg=param[1];return [0,[0,0,msg]]}
              return 0},
           _aGW_=
            [0,
             [0,
              _aGV_,
              0,
              obj2([0,_aGT_,constant(_aGS_),0,0],[0,_aGR_,output,0,0]),
              _aGQ_,
              _aGP_,
              _aGU_],
             _aGO_],
           _aGX_=function(param){var msg=param[2];return [0,msg]},
           _aGY_=
            function(param)
             {if(typeof param !== "number" && 0 === param[0])
               {var msg=param[1];return [0,[0,0,msg]]}
              return 0},
           _aG4_=
            [0,
             [0,
              _aG3_,
              0,
              obj2([0,_aG1_,constant(_aG0_),0,0],[0,_aGZ_,output,0,0]),
              _aGY_,
              _aGX_,
              _aG2_],
             _aGW_],
           _aG5_=function(param){return 0},
           _aG6_=function(param){return typeof param === "number"?_aG7_:0},
           rpc_error_encoding=
            union$0
             (0,
              [0,
               [0,
                _aG$_,
                0,
                obj1([0,_aG9_,constant(_aG8_),0,0]),
                _aG6_,
                _aG5_,
                _aG__],
               _aG4_]),
           pp_rpc_error=
            function(ppf,err)
             {if(typeof err === "number")
               return caml_call1(pf(ppf),_aHa_);
              else
               switch(err[0])
                {case 0:var msg=err[1];return caml_call2(pf(ppf),_aHb_,msg);
                 case 1:
                  var msg$0=err[1];return caml_call2(pf(ppf),_aHc_,msg$0);
                 case 2:
                  var
                   meths=err[1],
                   _aUx_=function(ppf,m){return pp(ppf,string_of_meth(m))},
                   _aUy_=0,
                   _aUz_=
                    function(_aUD_,_aUE_)
                     {return pp_print_list(_aUy_,_aUx_,_aUD_,_aUE_)};
                  return caml_call3(pf(ppf),_aHd_,_aUz_,meths);
                 case 3:
                  var _aUA_=err[1];
                  if(_aUA_)
                   {var media=_aUA_[1];return caml_call2(pf(ppf),_aHe_,media)}
                  return caml_call1(pf(ppf),_aHf_);
                 case 4:
                  var acceptable=err[2],proposed=err[1];
                  return caml_call3(pf(ppf),_aHg_,proposed,acceptable);
                 case 5:
                  var content=err[2],code=err[1],_aUB_=code_of_status(code);
                  return caml_call3(pf(ppf),_aHh_,_aUB_,content);
                 case 6:
                  var body=err[3],received=err[1];
                  return caml_call3(pf(ppf),_aHi_,received,body);
                 case 7:
                  var error=err[3],media_type=err[2],content$0=err[1];
                  return caml_call4(pf(ppf),_aHj_,media_type,error,content$0);
                 case 8:
                  var msg$1=err[1];return caml_call2(pf(ppf),_aHk_,msg$1);
                 default:
                  var host=err[1],_aUC_=value(host,_aHl_);
                  return caml_call2(pf(ppf),_aHm_,_aUC_)}},
           _aHn_=
            function(param)
             {var error=param[3],uri=param[2],meth=param[1];
              return [0,Request_failed,meth,uri,error]},
           _aHo_=
            function(param)
             {if(param[1] === Request_failed)
               {var error=param[4],uri=param[3],meth=param[2];
                return [0,[0,meth,uri,error]]}
              return 0},
           _aHs_=
            obj3
             ([0,_aHr_,meth_encoding$0,0,0],
              [0,_aHq_,uri_encoding,0,0],
              [0,_aHp_,rpc_error_encoding,0,0]);
          caml_call8
           (register_error_kind,
            num_950914574,
            _aHw_,
            _aHv_,
            _aHu_,
            [0,
             function(ppf,param)
              {var
                error=param[3],
                uri=param[2],
                meth=param[1],
                _aUv_=arg$1(0,uri),
                _aUw_=string_of_meth(meth);
               return caml_call5(pf(ppf),_aHt_,_aUw_,_aUv_,pp_rpc_error,error)}],
            _aHs_,
            _aHo_,
            _aHn_);
          var
           include$53=
            _aFj_
             ([0,
               encoding,
               untyped,
               conv$0,
               schema$2,
               description_request_encoding,
               directory_descr_encoding]),
           name$49=include$53[1],
           first_complete_media=include$53[3],
           accept_header=include$53[6],
           _aHx_=
            function(enc,body)
             {var err=from_string$1(body);
              if(0 === err[0])
               {var json=err[1];
                try
                 {var _aUr_=[0,destruct$0(enc,json)];return _aUr_}
                catch(_aUs_)
                 {_aUs_ = caml_wrap_exception(_aUs_);
                  if(_aUs_[1] === Cannot_destruct)
                   {var
                     match=_aUs_[2],
                     exn=match[2],
                     _aUq_=
                      function(fmt)
                       {var _aUt_=0;
                        return function(_aUu_)
                         {return print_error$0(_aUt_,fmt,_aUu_)}};
                    return [1,caml_call2(strf(_aHy_),_aUq_,exn)]}
                  throw _aUs_}}
              return err},
           _aHz_=function(enc,v){return arg$5(_aHB_,_aHA_,construct$1(enc,v))},
           media=
            [0,
             _aHE_,
             _aHD_,
             function(enc,ppf,raw)
              {var match=from_string$1(raw);
               if(0 === match[0]){var json=match[1];return pp$6(ppf,json)}
               var err=match[1];
               return caml_call3(pf(ppf),_aHC_,err,raw)},
             _aHz_,
             _aHx_],
           _aHF_=
            function(enc,body)
             {try
               {var bson=bytes_to_bson(_aHH_,0,0,0,caml_bytes_of_string(body))}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                if(exn[1] === Bson_decoding_error)
                 {var pos=exn[4],msg=exn[2];
                  return [1,caml_call2(strf(_aHG_),pos,msg)]}
                throw exn}
              try
               {var _aUm_=[0,destruct$1(enc,bson)];return _aUm_}
              catch(_aUn_)
               {_aUn_ = caml_wrap_exception(_aUn_);
                if(_aUn_[1] === Cannot_destruct)
                 {var
                   match=_aUn_[2],
                   exn=match[2],
                   _aUl_=
                    function(fmt)
                     {var _aUo_=0;
                      return function(_aUp_)
                       {return print_error$0(_aUo_,fmt,_aUp_)}};
                  return [1,caml_call2(strf(_aHI_),_aUl_,exn)]}
                throw _aUn_}},
           _aHJ_=
            function(enc,v)
             {var
               _aUk_=get_json(enc),
               eta=caml_call2(Json_encoding[1],_aUk_,v);
              return caml_string_of_bytes(arg$2(0,0,eta))},
           bson=
            [0,
             _aHN_,
             _aHM_,
             function(enc,ppf,raw)
              {try
                {var bson=bytes_to_bson(_aHL_,0,0,0,caml_bytes_of_string(raw))}
               catch(exn)
                {exn = caml_wrap_exception(exn);
                 if(exn[1] === Bson_decoding_error)
                  {var msg=exn[2];return caml_call2(pf(ppf),_aHK_,msg)}
                 throw exn}
               var json=convert(_o$_,Ezjsonm,bson);
               return pp$6(ppf,json)},
             _aHJ_,
             _aHF_],
           _aHO_=
            function(enc,s)
             {var match=of_bytes(enc,to_bytes(s));
              if(0 === match[0]){var data=match[1];return [0,data]}
              var re=match[1];
              return [1,caml_call2(strf(_aHP_),pp_read_error,re)]},
           _aHQ_=function(enc,v){return to_string(to_bytes_exn(0,enc,v))},
           octet_stream=
            [0,
             _aHU_,
             _aHT_,
             function(enc,ppf,raw)
              {var match=of_bytes(enc,to_bytes(raw));
               if(0 === match[0])
                {var v=match[1],_aUj_=construct$1(enc,v);
                 return caml_call3(pf(ppf),_aHR_,pp$6,_aUj_)}
               var re=match[1];
               return caml_call3(pf(ppf),_aHS_,pp_read_error,re)},
             _aHQ_,
             _aHO_],
           all_media_types=[0,media,[0,bson,[0,octet_stream,0]]],
           init_table=[0,0,0,0],
           _aIf_=
            function(Client)
             {var
               Encoding=
                [0,
                 encoding,
                 untyped,
                 conv$0,
                 schema$2,
                 description_request_encoding,
                 directory_descr_encoding],
               Media_type=_aFj_(Encoding),
               Service=_AT_(Encoding);
              function log_empty_request(param){return return_unit}
              function log_request(param,_aUi_,_aUh_,_aUg_)
               {return return_unit}
              function log_response(param,_aUf_,_aUe_,_aUd_,_aUc_)
               {return return_unit}
              var null_logger=[0,log_empty_request,log_request,log_response];
              function timings_logger(gettimeofday,ppf)
               {function log_empty_request(uri)
                 {var tzero=caml_call1(gettimeofday,0);
                  return return$1([0,arg$1(0,uri),tzero])}
                function log_request(param,enc,uri,body)
                 {return log_empty_request(uri)}
                function log_response(param,_aUb_,enc,code,body)
                 {var
                   tzero=param[2],
                   uri=param[1],
                   time=caml_call1(gettimeofday,0) - tzero;
                  caml_call3(pf(ppf),_aFk_,uri,time);
                  return return_unit}
                return [0,log_empty_request,log_request,log_response]}
              function _aSn_(param){throw [0,Assert_failure,_aFl_]}
              function _aSo_(param){throw [0,Assert_failure,_aFm_]}
              var
               faked_media=
                [0,
                 0,
                 0,
                 function(enc,ppf,s)
                  {return caml_call3(pf(ppf),_aFn_,pp_print_text,s)},
                 _aSo_,
                 _aSn_];
              function full_logger(ppf)
               {var cpt=[0,0];
                function log_empty_request(uri)
                 {var id=cpt[1],uri$0=arg$1(0,uri);
                  cpt[1]++;
                  caml_call3(pf(ppf),_aFo_,id,uri$0);
                  return return$1([0,id,uri$0])}
                function log_request(opt,enc,uri,body)
                 {if(opt)var sth=opt[1],media=sth;else var media=faked_media;
                  var id=cpt[1],uri$0=arg$1(0,uri);
                  cpt[1]++;
                  var _aUa_=caml_call1(media[3],enc);
                  caml_call5(pf(ppf),_aFp_,id,uri$0,_aUa_,body);
                  return return$1([0,id,uri$0])}
                function log_response(param,opt,enc,code,body)
                 {var id=param[1];
                  if(opt)var sth=opt[1],media=sth;else var media=faked_media;
                  function _aT7_(body)
                   {var _aT__=caml_call1(media[3],enc);
                    if(typeof code === "number")
                     var
                      _aT$_=
                       num_17692 <= code
                        ?num_491839979 <= code
                          ?num_806912325 <= code
                            ?num_893234971 <= code
                              ?num_897427648 === code
                                ?_aB7_
                                :num_1034456810 <= code
                                  ?num_1052164689 <= code?_aB8_:_aB9_
                                  :num_973294248 <= code?_aB__:_aB$_
                              :num_854525125 <= code
                                ?num_874866960 <= code?_aCa_:_aCb_
                                :num_807430278 <= code?_aCc_:_aCd_
                            :num_599500189 <= code
                              ?num_626869805 === code
                                ?_aCe_
                                :num_789753444 <= code
                                  ?num_792903807 <= code?_aCf_:_aCg_
                                  :num_731537414 <= code?_aCh_:_aCi_
                              :num_566851975 <= code
                                ?num_578388242 <= code?_aCj_:_aCk_
                                :num_558492973 <= code?_aCl_:_aCm_
                          :num_192584839 <= code
                            ?num_282375460 <= code
                              ?num_324098644 === code
                                ?_aCn_
                                :num_384167631 <= code
                                  ?num_398750242 <= code?_aCo_:_aCp_
                                  :num_382669006 <= code?_aCq_:_aCr_
                              :num_240875818 <= code
                                ?num_260151748 <= code?_aCs_:_aCt_
                                :num_229723487 <= code?_aCu_:_aCv_
                            :num_65414873 <= code
                              ?num_161957855 <= code
                                ?num_169087453 <= code?_aCw_:_aCx_
                                :num_102779818 <= code?_aCy_:_aCz_
                              :num_18898339 <= code
                                ?num_60220292 <= code?_aCA_:_aCB_
                                :num_13829438 <= code?_aCC_:_aCD_
                        :num_459143713 <= code
                          ?num_234002583 <= code
                            ?num_99004555 <= code
                              ?num_43455790 === code
                                ?_aCE_
                                :num_15361451 <= code
                                  ?num_12825579 <= code?_aCF_:_aCG_
                                  :num_36288910 <= code?_aCH_:_aCI_
                              :num_199968061 <= code
                                ?num_176787538 <= code?_aCJ_:_aCK_
                                :num_221106440 <= code?_aCL_:_aCM_
                            :num_387970219 <= code
                              ?num_330714374 <= code
                                ?num_247210088 <= code?_aCN_:_aCO_
                                :num_358247754 <= code?_aCP_:_aCQ_
                              :num_429055472 <= code
                                ?num_398446314 <= code?_aCR_:_aCS_
                                :num_438114087 <= code?_aCT_:_aCU_
                          :num_840540685 <= code
                            ?num_720017128 <= code
                              ?num_598402413 === code
                                ?_aCV_
                                :num_527633381 <= code
                                  ?num_498198474 <= code?_aCW_:_aCX_
                                  :num_558113336 <= code?_aCY_:_aCZ_
                              :num_774758938 <= code
                                ?num_732353682 <= code?_aC0_:_aC1_
                                :num_785212614 <= code?_aC2_:_aC3_
                            :num_1014316796 <= code
                              ?num_886248552 <= code
                                ?num_867418942 <= code?_aC4_:_aC5_
                                :num_957501398 <= code?_aC6_:_aC7_
                              :num_1028883702 <= code
                                ?num_1021676630 <= code?_aC8_:_aC9_
                                :num_1042139761 <= code?_aC__:_aC$_;
                    else
                     var cod=code[2],_aT$_=caml_string_of_jsbytes(str$59 + cod);
                    caml_call5(pf(ppf),_aFq_,id,_aT$_,_aT__,body);
                    return return_unit}
                  var
                   _aT8_=caml_obj_tag(body),
                   _aT9_=
                    num_250 === _aT8_
                     ?body[1]
                     :num_246 === _aT8_?force_lazy_block(body):body;
                  return symbol_bind(_aT9_,_aT7_)}
                return [0,log_empty_request,log_request,log_response]}
              function generic_call(meth,opt,accept,body$0,media,uri)
               {if(opt)var sth=opt[1],headers=sth;else var headers=0;
                var match=host(uri),match$0=uri[4];
                if(match)
                 {var _aTW_=match[1];
                  if(match$0)
                   var
                    port=match$0[1],
                    _aTX_=
                     [0,
                      symbol
                       (_aTW_,symbol(_aFr_,caml_string_of_jsbytes(str$59 + port)))];
                  else
                   var _aTX_=[0,_aTW_];
                  var host$0=_aTX_}
                else
                 var host$0=0;
                if(host$0)
                 var
                  host$1=host$0[1],
                  init_headers=replace$0(init$5(0),_aFs_,host$1);
                else
                 var init_headers=init$5(0);
                var
                 headers$0=
                  fold_left$0
                   (function(headers,param)
                     {var value=param[2],header=param[1],header$0=f(header);
                      if(caml_string_notequal(header$0,_aFt_))
                       {var switch$0=0;
                        if
                         (2
                          <=
                          caml_ml_string_length(header$0)
                          &&
                          !
                          caml_string_notequal(sub$0(header$0,0,2),_aFu_))
                         switch$0 = 1;
                        if(! switch$0)return invalid_arg(_aFv_)}
                      return replace$0(headers,header$0,value)},
                    init_headers,
                    headers);
                if(body$0)
                 {var _aTY_=body$0[1];
                  if(media)
                   var
                    media$0=media[1],
                    body$1=_aTY_,
                    headers$1=
                     add$9(headers$0,_aFw_,caml_call1(Media_type[1],media$0));
                  else
                   var body$1=_aTY_,headers$1=headers$0}
                else
                 var body$1=body,headers$1=headers$0;
                if(accept)
                 var
                  ranges=accept[1],
                  headers$2=
                   add$9(headers$1,_aFx_,caml_call1(Media_type[6],ranges));
                else
                 var headers$2=headers$1;
                function _aTZ_(exn)
                 {if(exn[1] === Failure)
                   var msg=exn[2],msg$0=msg;
                  else
                   {if(exn[1] === Invalid_argument)
                     var msg$1=exn[2],msg$2=msg$1;
                    else
                     var msg$2=to_string$0(exn);
                    var msg$0=msg$2}
                  return return$1([0,num_463055138,msg$0])}
                return catch$0
                        (function(param)
                          {function _aT0_(param)
                            {var
                              ansbody=param[2],
                              response=param[1],
                              headers=response[2],
                              match=get$1(headers,_aDG_);
                             if(match)
                              var s=match[1],match$1=get_first_match(media_type_re,s);
                             else
                              var match$1=0;
                             if(match$1)
                              {var s$0=match$1[1],l=caml_ml_string_length(s$0),acc=0,i=0;
                               a:
                               for(;;)
                                {if(l <= i)
                                  var match$0=rev(acc);
                                 else
                                  {if(47 === caml_string_get(s$0,i))
                                    {var i$0=i + 1 | 0,i=i$0;continue}
                                   var j=i;
                                   for(;;)
                                    {if(! (l <= j))
                                      {if(47 === caml_string_get(s$0,j))
                                        {var acc$0=[0,sub$0(s$0,i,j - i | 0),acc],acc=acc$0,i=j;
                                         continue a}
                                       var j$0=j + 1 | 0,j=j$0;
                                       continue}
                                     var
                                      match$0=
                                       i === j?rev(acc):rev([0,sub$0(s$0,i,j - i | 0),acc]);
                                     break}}
                                 var switch$0=0;
                                 if(match$0)
                                  {var _aT1_=match$0[2];
                                   if(_aT1_ && ! _aT1_[2])
                                    {var y=_aT1_[1],x=match$0[1],_aT2_=[0,[0,x,y]];switch$0 = 1}}
                                 if(! switch$0)var _aT2_=0;
                                 var media_name=_aT2_;
                                 break}}
                             else
                              var media_name=0;
                             if(accept)
                              {var media_types=accept[1];
                               if(media_name)
                                var
                                 received=media_name[1],
                                 _aT3_=caml_call2(Media_type[4],received,media_types);
                               else
                                if(media_types)
                                 var m=media_types[1],_aT3_=[0,m];
                                else
                                 var _aT3_=0;
                               var media=_aT3_}
                             else
                              var media=0;
                             var status=response[4];
                             if(num_176787538 <= status)
                              if(17693 <= status)
                               {if(num_13829438 === status)
                                 {var allowed=get_multi(headers,_aFy_);
                                  return return$1([0,num_13829438,allowed])}
                                if(num_324098644 === status)
                                 return return$1
                                         ([0,num_324098644,[0,ansbody,media_name,media]]);
                                if(num_792903807 === status)
                                 return return$1
                                         ([0,num_792903807,[0,ansbody,media_name,media]])}
                              else
                               if(-99004554 <= status)
                                {if(num_36288910 === status)
                                  return return$1
                                          ([0,num_36288910,[0,ansbody,media_name,media]]);
                                 if(num_17692 <= status)
                                  return return$1
                                          ([0,num_17724,[0,[0,ansbody,media_name,media]]])}
                               else
                                {if(! (-176787537 <= status))
                                  {var
                                    _aT5_=
                                     function(body){return return$1([0,num_176787538,body])};
                                   return symbol_bind(to_string$17(ansbody),_aT5_)}
                                 if(num_99004555 <= status)
                                  {var
                                    _aT4_=
                                     function(body){return return$1([0,num_99004555,body])};
                                   return symbol_bind(to_string$17(ansbody),_aT4_)}}
                             else
                              if(-527633380 <= status)
                               {if(num_459143713 === status)return return$1(num_459143713);
                                if(num_438114087 === status)
                                 return mem$1(headers,_aFz_)
                                         ?return$1([0,num_207183757,host$0])
                                         :return$1([0,num_438114087,[0,ansbody,media_name,media]]);
                                if(num_358247754 === status)
                                 return return$1
                                         ([0,num_358247754,[0,ansbody,media_name,media]])}
                              else
                               {if(num_732353682 === status)
                                 {if(caml_equal(media_name,_aFA_))
                                   {var
                                     _aT6_=
                                      function(msg){return return$1([0,num_595188612,msg])};
                                    return symbol_bind(to_string$17(ansbody),_aT6_)}
                                  return return$1
                                          ([0,num_106380200,[0,ansbody,media_name,media]])}
                                if(num_558113336 === status)return failwith(_aFB_);
                                if(num_527633381 <= status)return return$1(_aFC_)}
                             return return$1
                                     ([0,-875364852,[0,status,[0,ansbody,media_name,media]]])}
                           return symbol_bind
                                   (caml_call6(Client[3],0,[0,headers$2],[0,body$1],0,meth,uri),
                                    _aT0_)},
                         _aTZ_)}
              function handle_error(log,service,param,status,f)
               {var media=param[3],media_name=param[2],body=param[1];
                function _aTO_(empty)
                 {if(empty)
                   {var
                     _aTP_=function(param){return return$1(caml_call1(f,0))},
                     _aTQ_=[num_246,function(_aTV_){return return$1(_aFD_)}];
                    return symbol_bind
                            (caml_call4(log[1],0,Encoding[2],status,_aTQ_),_aTP_)}
                  if(media)
                   {var
                     media$0=media[1],
                     _aTR_=
                      function(body)
                       {var error=caml_call1(Service[5],service);
                        function _aTS_(param)
                         {var match=caml_call2(media$0[5],error,body);
                          if(0 === match[0])
                           {var body$0=match[1];
                            return return$1(caml_call1(f,[0,body$0]))}
                          var msg=match[1];
                          return return$1([0,num_392751220,[0,[0,body,media$0],msg]])}
                        var _aTT_=[num_246,function(_aTU_){return return$1(body)}];
                        return symbol_bind
                                (caml_call4(log[1],[0,media$0],error,status,_aTT_),_aTS_)};
                    return symbol_bind(to_string$17(body),_aTR_)}
                  return return$1([0,num_1020133797,[0,body,media_name]])}
                return symbol_bind(is_empty$0(body),_aTO_)}
              function prepare(media_types,opt,base,service,params,query,body)
               {if(opt)var sth=opt[1],logger=sth;else var logger=null_logger;
                var match=caml_call1(Media_type[3],media_types);
                if(match)
                 var match$0=match[1],m=match$0[2],media=m;
                else
                 var media=invalid_arg(_aFE_);
                var
                 match$1=caml_call4(Service[17],service,base,params,query),
                 input=match$1[3],
                 uri=match$1[2],
                 meth=match$1[1];
                function _aTK_(param)
                 {var
                   log_request=param[3],
                   media=param[2],
                   body=param[1],
                   log=
                    [0,
                     function(media)
                      {return caml_call2(logger[3],log_request,media)}];
                  return return$1([0,log,meth,uri,body,media])}
                if(input)
                 var
                  input$0=input[1],
                  body$0=caml_call2(media[4],input$0,body),
                  _aTL_=
                   function(log_request)
                    {return return$1
                             ([0,[0,of_string$3(body$0)],[0,media],log_request])},
                  _aTM_=
                   symbol_bind
                    (caml_call4(logger[2],[0,media],input$0,uri,body$0),_aTL_);
                else
                 var
                  _aTN_=
                   function(log_request){return return$1([0,0,0,log_request])},
                  _aTM_=symbol_bind(caml_call1(logger[1],uri),_aTN_);
                return symbol_bind(_aTM_,_aTK_)}
              function request_failed(meth,uri,error)
               {return caml_call1(fail$1,[0,Request_failed,meth,uri,error])}
              function generic_call$0(headers,accept,body,media,meth,uri)
               {function _aTF_(v)
                 {if(typeof v === "number")
                   {var media$0=map$0(name$49,media);
                    return request_failed(meth,uri,[3,media$0])}
                  var _aTG_=v[1];
                  if(num_176787538 <= _aTG_)
                   {if(num_17724 === _aTG_)
                     {var _aTH_=v[2];
                      if(_aTH_)
                       {var v$0=_aTH_[1];
                        return caml_call1(return$3,[0,num_17724,v$0])}
                      return request_failed(meth,uri,0)}
                    if(! (num_36288910 <= _aTG_))
                     {if(num_99004555 <= _aTG_)
                       {var msg=v[2];return request_failed(meth,uri,[1,msg])}
                      var
                       acceptable=v[2],
                       proposed=fold(_aHW_,accept_header,accept);
                      return request_failed(meth,uri,[4,proposed,acceptable])}
                    if(num_13829438 === _aTG_)
                     {var
                       allowed=v[2],
                       allowed$0=caml_call1(filter_map$0(meth_of_string),allowed);
                      return request_failed(meth,uri,[2,allowed$0])}}
                  else
                   {if(num_595188612 === _aTG_)
                     {var msg$0=v[2];return request_failed(meth,uri,[8,msg$0])}
                    if(! (num_438114087 <= _aTG_))
                     {if(num_463055138 <= _aTG_)
                       {var msg$1=v[2];return request_failed(meth,uri,[0,msg$1])}
                      var
                       _aTI_=v[2],
                       match=_aTI_[2],
                       media_type=match[3],
                       content=match[1],
                       code=_aTI_[1],
                       media_type$0=map$0(name$49,media_type),
                       _aTJ_=
                        function(content)
                         {return request_failed
                                  (meth,uri,[5,code,content,media_type$0])};
                      return caml_call2(symbol_bind$2,to_string$17(content),_aTJ_)}
                    if(num_207183757 <= _aTG_)
                     {var host=v[2];return request_failed(meth,uri,[9,host])}}
                  return caml_call1(return$3,v)}
                return caml_call2
                        (symbol_bind$2,
                         generic_call(meth,headers,accept,body,media,uri),
                         _aTF_)}
              function handle_error$0(meth,uri,param,f)
               {var media$0=param[2],body=param[1];
                function _aTz_(empty)
                 {if(empty)return caml_call1(return$3,caml_call1(f,0));
                  if(media$0)
                   {var _aTA_=media$0[1],_aTB_=_aTA_[1],switch$0=0;
                    if
                     (!
                      caml_string_notequal(_aTB_,_aHX_)
                      &&
                      !
                      caml_string_notequal(_aTA_[2],_aHZ_))
                     switch$0 = 1;
                    if(! switch$0)
                     {var
                       r=_aTA_[2],
                       _aTC_=
                        function(body)
                         {var _aTE_=[0,caml_call1(name$49,media),0];
                          return request_failed
                                  (meth,uri,[6,symbol(_aTB_,symbol(_aHY_,r)),_aTE_,body])};
                      return caml_call2(symbol_bind$2,to_string$17(body),_aTC_)}}
                  function _aTD_(body)
                   {var match=from_string$1(body);
                    if(0 === match[0])
                     {var body$0=match[1];
                      return caml_call1(return$3,caml_call1(f,[0,body$0]))}
                    var msg=match[1];
                    return request_failed
                            (meth,uri,[7,body,caml_call1(name$49,media),msg])}
                  return caml_call2(symbol_bind$2,to_string$17(body),_aTD_)}
                return caml_call2(symbol_bind$2,is_empty$0(body),_aTz_)}
              function generic_json_call(headers,body,meth,uri)
               {var
                 body$0=
                  map$0(function(b){return of_string$3(arg$5(0,0,b))},body);
                function _aTn_(param)
                 {var _aTo_=param[1];
                  if(num_17724 <= _aTo_)
                   {if(num_324098644 <= _aTo_)
                     {if(num_792903807 <= _aTo_)
                       {var body=param[2];
                        return handle_error$0
                                (meth,uri,body,function(v){return [0,num_792903807,v]})}
                      var body$0=param[2];
                      return handle_error$0
                              (meth,uri,body$0,function(v){return [0,num_324098644,v]})}
                    if(num_106380200 <= _aTo_)
                     {var body$1=param[2];
                      return handle_error$0
                              (meth,uri,body$1,function(v){return [0,num_106380200,v]})}
                    var _aTp_=param[2],_aTq_=_aTp_[2],_aTr_=_aTp_[1];
                    if(_aTq_)
                     {var _aTs_=_aTq_[1],_aTt_=_aTs_[1],switch$0=0;
                      if(! caml_string_notequal(_aTt_,_aH0_))
                       {var _aTv_=_aTs_[2];
                        if(! caml_string_notequal(_aTv_,_aH2_))
                         {var
                           _aTx_=
                            function(body)
                             {try
                               {var
                                 bson$0=
                                  bytes_to_bson(_aH5_,0,0,0,caml_bytes_of_string(body))}
                              catch(exn)
                               {exn = caml_wrap_exception(exn);
                                if(exn[1] === Bson_decoding_error)
                                 {var
                                   pos=exn[4],
                                   msg=exn[2],
                                   error=caml_call2(strf(_aH4_),pos,msg);
                                  return request_failed
                                          (meth,uri,[7,body,caml_call1(name$49,bson),error])}
                                throw exn}
                              return caml_call1
                                      (return$3,[0,num_17724,convert(_o$_,Ezjsonm,bson$0)])};
                          return caml_call2(symbol_bind$2,to_string$17(_aTr_),_aTx_)}
                        if(! caml_string_notequal(_aTv_,_aH3_))switch$0 = 1}
                      if(! switch$0)
                       {var
                         r=_aTs_[2],
                         _aTu_=
                          function(body)
                           {var _aTy_=[0,caml_call1(name$49,media),0];
                            return request_failed
                                    (meth,uri,[6,symbol(_aTt_,symbol(_aH1_,r)),_aTy_,body])};
                        return caml_call2(symbol_bind$2,to_string$17(_aTr_),_aTu_)}}
                    var
                     _aTw_=
                      function(body)
                       {var match=from_string$1(body);
                        if(0 === match[0])
                         {var json=match[1];
                          return caml_call1(return$3,[0,num_17724,json])}
                        var msg=match[1];
                        return request_failed
                                (meth,uri,[7,body,caml_call1(name$49,media),msg])};
                    return caml_call2(symbol_bind$2,to_string$17(_aTr_),_aTw_)}
                  if(num_358247754 === _aTo_)
                   {var body$2=param[2];
                    return handle_error$0
                            (meth,uri,body$2,function(v){return [0,num_358247754,v]})}
                  if(num_36288910 <= _aTo_)
                   {var body$3=param[2];
                    return handle_error$0
                            (meth,uri,body$3,function(v){return [0,num_36288910,v]})}
                  var body$4=param[2];
                  return handle_error$0
                          (meth,uri,body$4,function(v){return [0,num_438114087,v]})}
                return caml_call2
                        (symbol$13,
                         generic_call$0
                          (headers,[0,[0,bson,[0,media,0]]],body$0,[0,media],meth,uri),
                         _aTn_)}
              function handle(accept,param)
               {var ans=param[3],uri=param[2],meth=param[1];
                if(typeof ans === "number")
                 {var match=caml_call1(first_complete_media,accept);
                  if(match)
                   var
                    match$0=match[1][1],
                    r=match$0[2],
                    l=match$0[1],
                    name=[0,symbol(l,symbol(_aH6_,r))];
                  else
                   var name=0;
                  return request_failed(meth,uri,[3,name])}
                var _aTe_=ans[1],switch$0=0;
                if(num_176787538 <= _aTe_)
                 if(num_13829438 <= _aTe_)
                  {if(num_392751220 === _aTe_)
                    switch$0 = 2;
                   else
                    if(num_792903807 <= _aTe_)
                     if(num_1020133797 <= _aTe_)
                      switch$0 = 3;
                     else
                      {var _aTh_=ans[2];
                       if(! _aTh_)return caml_call1(fail$1,[0,Gone,meth,uri]);
                       var err=_aTh_[1];
                       switch$0 = 1}
                    else
                     if(! (num_106380200 <= _aTe_))
                      {var
                        allowed=ans[2],
                        allowed$0=caml_call1(filter_map$0(meth_of_string),allowed);
                       return request_failed(meth,uri,[2,allowed$0])}}
                 else
                  {if(! (num_36288910 <= _aTe_))
                    {if(num_99004555 <= _aTe_)
                      {var msg=ans[2];return request_failed(meth,uri,[1,msg])}
                     var
                      acceptable=ans[2],
                      proposed=caml_call1(accept_header,accept);
                     return request_failed(meth,uri,[4,proposed,acceptable])}
                   if(num_17724 <= _aTe_)
                    {var _aTj_=ans[2];
                     if(_aTj_){var v=_aTj_[1];return caml_call1(return$3,v)}
                     return request_failed(meth,uri,0)}}
                else
                 if(num_438114087 <= _aTe_)
                  {if(num_358247754 <= _aTe_)
                    {if(num_207183757 <= _aTe_)
                      {var host=ans[2];return request_failed(meth,uri,[9,host])}
                     var _aTk_=ans[2];
                     if(! _aTk_)
                      return caml_call1(fail$1,[0,Not_found$0,meth,uri]);
                     var err=_aTk_[1];
                     switch$0 = 1}
                   else
                    if(num_395032306 <= _aTe_)switch$0 = 3}
                 else
                  {if(! (num_463055138 <= _aTe_))
                    {if(num_595188612 <= _aTe_)
                      {var msg$1=ans[2];return request_failed(meth,uri,[8,msg$1])}
                     var
                      _aTl_=ans[2],
                      match$3=_aTl_[2],
                      media_type$1=match$3[3],
                      content$0=match$3[1],
                      code=_aTl_[1],
                      media_type$2=map$0(name$49,media_type$1),
                      _aTm_=
                       function(content)
                        {return request_failed
                                 (meth,uri,[5,code,content,media_type$2])};
                     return caml_call2
                             (symbol_bind$2,to_string$17(content$0),_aTm_)}
                   if(! (num_447096405 <= _aTe_))
                    {var msg$0=ans[2];return request_failed(meth,uri,[0,msg$0])}
                   switch$0 = 2}
                switch(switch$0)
                 {case 2:
                   var
                    _aTf_=ans[2],
                    error=_aTf_[2],
                    match$1=_aTf_[1],
                    media_type=match$1[2],
                    content=match$1[1],
                    media_type$0=caml_call1(name$49,media_type);
                   return request_failed
                           (meth,uri,[7,content,media_type$0,error]);
                  case 0:
                   var _aTi_=ans[2];
                   if(! _aTi_)
                    return caml_call1(fail$1,[0,Generic_error,meth,uri]);
                   var err=_aTi_[1];
                   break;
                  case 3:
                   var
                    match$2=ans[2],
                    media=match$2[2],
                    body=match$2[1],
                    _aTg_=
                     function(body)
                      {var
                        received=
                         fold
                          (_aH8_,
                           function(param)
                            {var r=param[2],l=param[1];return symbol(l,symbol(_aH7_,r))},
                           media);
                       return request_failed
                               (meth,uri,[6,received,map$1(name$49,accept),body])};
                   return caml_call2(symbol_bind$2,to_string$17(body),_aTg_)
                  }
                return return_error(err)}
              function call_streamed_service
               (media_types,
                logger,
                headers,
                base,
                service,
                on_chunk,
                on_close,
                params,
                query,
                body)
               {var base$0=[0,base];
                function _aS3_(ans){return handle(media_types,ans)}
                function _aS2_(param)
                 {var
                   media=param[5],
                   body=param[4],
                   uri=param[3],
                   meth=param[2],
                   log=param[1];
                  function _aS4_(ans){return return$1([0,meth,uri,ans])}
                  function _aS5_(err)
                   {if(typeof err !== "number")
                     {var _aS7_=err[1];
                      if(num_17724 <= _aS7_)
                       {if(num_13829438 !== _aS7_)
                         {if(num_324098644 <= _aS7_)
                           {if(num_792903807 <= _aS7_)
                             {var body=err[2];
                              return handle_error
                                      (log,
                                       service,
                                       body,
                                       num_792903807,
                                       function(v){return [0,num_792903807,v]})}
                            var body$0=err[2];
                            return handle_error
                                    (log,
                                     service,
                                     body$0,
                                     num_324098644,
                                     function(v){return [0,num_324098644,v]})}
                          if(num_106380200 <= _aS7_)
                           {var body$1=err[2];
                            return handle_error
                                    (log,
                                     service,
                                     body$1,
                                     num_732353682,
                                     function(v){return [0,num_106380200,v]})}
                          var _aS8_=err[2];
                          if(_aS8_)
                           {var
                             match=_aS8_[1],
                             media=match[3],
                             media_name=match[2],
                             body$2=match[1];
                            if(media)
                             {var media$0=media[1];
                              if(typeof body$2 === "number")
                               var stream=of_list$0(0);
                              else
                               {var _aS6_=body$2[1];
                                if(num_976970511 === _aS6_)
                                 var s=body$2[2],stream=of_list$0([0,s,0]);
                                else
                                 if(num_968575390 <= _aS6_)
                                  var sl=body$2[2],stream=of_list$0(sl);
                                 else
                                  var s$0=body$2[2],stream=s$0}
                              var
                               _aS9_=
                                function(param)
                                 {if(param)
                                   {var
                                     chunk=param[1],
                                     buffer=create$1(2048),
                                     output=caml_call1(Service[4],service),
                                     loop=
                                      function(param)
                                       {if(param)
                                         {var chunk=param[1];
                                          add_string(buffer,chunk);
                                          var
                                           data=contents(buffer),
                                           _aTb_=
                                            function(param)
                                             {var match=caml_call2(media$0[5],output,data);
                                              if(0 === match[0])
                                               {var body=match[1];
                                                reset(buffer);
                                                caml_call1(on_chunk,body);
                                                return symbol_bind(get$0(stream),loop)}
                                              return symbol_bind(get$0(stream),loop)},
                                           _aTc_=[num_246,function(_aTd_){return return$1(chunk)}];
                                          return symbol_bind
                                                  (caml_call4(log[1],[0,media$0],output,num_17692,_aTc_),
                                                   _aTb_)}
                                        caml_call1(on_close,0);
                                        return return_unit};
                                    loop([0,chunk]);
                                    return return$1
                                            ([0,
                                              num_17724,
                                              [0,
                                               function(param)
                                                {function f(param){return 1}
                                                 junk_while_rec(stream[3],f,stream);
                                                 return 0}]])}
                                  caml_call1(on_close,0);
                                  return return$1(_aFH_)};
                              return symbol_bind(get$0(stream),_aS9_)}
                            return return$1([0,num_395032306,[0,body$2,media_name]])}
                          caml_call1(on_close,0);
                          var
                           _aS__=function(param){return return$1(_aFI_)},
                           _aS$_=[num_246,function(_aTa_){return return$1(_aFJ_)}];
                          return symbol_bind
                                  (caml_call4(log[1],0,Encoding[2],num_527633381,_aS$_),_aS__)}}
                      else
                       {if(num_438114087 === _aS7_)
                         {var body$3=err[2];
                          return handle_error
                                  (log,
                                   service,
                                   body$3,
                                   num_438114087,
                                   function(v){return [0,num_438114087,v]})}
                        if(num_358247754 === _aS7_)
                         {var body$4=err[2];
                          return handle_error
                                  (log,
                                   service,
                                   body$4,
                                   num_358247754,
                                   function(v){return [0,num_358247754,v]})}
                        if(num_36288910 <= _aS7_)
                         {var body$5=err[2];
                          return handle_error
                                  (log,
                                   service,
                                   body$5,
                                   num_36288910,
                                   function(v){return [0,num_36288910,v]})}}}
                    return return$1(err)}
                  return symbol_bind
                          (symbol_bind
                            (generic_call(meth,headers,[0,media_types],body,media,uri),
                             _aS5_),
                           _aS4_)}
                return caml_call2
                        (symbol_bind$2,
                         symbol_bind
                          (prepare
                            (media_types,logger,base$0,service,params,query,body),
                           _aS2_),
                         _aS3_)}
              function call_service
               (media_types,logger,headers,base,service,params,query,body)
               {var base$0=[0,base];
                function _aSQ_(ans){return handle(media_types,ans)}
                function _aSP_(param)
                 {var
                   media=param[5],
                   body=param[4],
                   uri=param[3],
                   meth=param[2],
                   log=param[1];
                  function _aSR_(ans){return return$1([0,meth,uri,ans])}
                  function _aSS_(err)
                   {if(typeof err !== "number")
                     {var _aST_=err[1];
                      if(num_17724 <= _aST_)
                       {if(num_13829438 !== _aST_)
                         {if(num_324098644 <= _aST_)
                           {if(num_792903807 <= _aST_)
                             {var body=err[2];
                              return handle_error
                                      (log,
                                       service,
                                       body,
                                       num_792903807,
                                       function(v){return [0,num_792903807,v]})}
                            var body$0=err[2];
                            return handle_error
                                    (log,
                                     service,
                                     body$0,
                                     num_324098644,
                                     function(v){return [0,num_324098644,v]})}
                          if(num_106380200 <= _aST_)
                           {var body$1=err[2];
                            return handle_error
                                    (log,
                                     service,
                                     body$1,
                                     num_732353682,
                                     function(v){return [0,num_106380200,v]})}
                          var _aSU_=err[2];
                          if(_aSU_)
                           {var
                             match=_aSU_[1],
                             media=match[3],
                             media_name=match[2],
                             body$2=match[1];
                            if(media)
                             {var
                               media$0=media[1],
                               _aSV_=
                                function(body)
                                 {var output=caml_call1(Service[4],service);
                                  function _aSZ_(param)
                                   {var match=caml_call2(media$0[5],output,body);
                                    if(0 === match[0])
                                     {var body$0=match[1];
                                      return return$1([0,num_17724,[0,body$0]])}
                                    var msg=match[1];
                                    return return$1([0,num_447096405,[0,[0,body,media$0],msg]])}
                                  var _aS0_=[num_246,function(_aS1_){return return$1(body)}];
                                  return symbol_bind
                                          (caml_call4(log[1],[0,media$0],output,num_17692,_aS0_),
                                           _aSZ_)};
                              return symbol_bind(to_string$17(body$2),_aSV_)}
                            return return$1([0,num_395032306,[0,body$2,media_name]])}
                          var
                           _aSW_=function(param){return return$1(_aFF_)},
                           _aSX_=[num_246,function(_aSY_){return return$1(_aFG_)}];
                          return symbol_bind
                                  (caml_call4(log[1],0,Encoding[2],num_527633381,_aSX_),_aSW_)}}
                      else
                       {if(num_438114087 === _aST_)
                         {var body$3=err[2];
                          return handle_error
                                  (log,
                                   service,
                                   body$3,
                                   num_438114087,
                                   function(v){return [0,num_438114087,v]})}
                        if(num_358247754 === _aST_)
                         {var body$4=err[2];
                          return handle_error
                                  (log,
                                   service,
                                   body$4,
                                   num_358247754,
                                   function(v){return [0,num_358247754,v]})}
                        if(num_36288910 <= _aST_)
                         {var body$5=err[2];
                          return handle_error
                                  (log,
                                   service,
                                   body$5,
                                   num_36288910,
                                   function(v){return [0,num_36288910,v]})}}}
                    return return$1(err)}
                  return symbol_bind
                          (symbol_bind
                            (generic_call(meth,headers,[0,media_types],body,media,uri),
                             _aSS_),
                           _aSR_)}
                return caml_call2
                        (symbol_bind$2,
                         symbol_bind
                          (prepare
                            (media_types,logger,base$0,service,params,query,body),
                           _aSP_),
                         _aSQ_)}
              var _aSp_=obj1([0,_aH9_,uri_encoding,0,0]),_aSq_=0;
              function _aSr_(endpoint){return [0,endpoint,null_logger]}
              var
               config_encoding=
                conv
                 (function(param){var endpoint=param[1];return endpoint},
                  _aSr_,
                  _aSq_,
                  _aSp_),
               default_config=[0,of_string$0(_aH__),null_logger],
               http_ctxt=[];
              if(! init_table[1])
               {var
                 class_init=
                  function(_aSv_)
                   {var
                     _aSw_=new_variable(_aSv_,_aH$_),
                     _aSx_=new_variable(_aSv_,_aIa_),
                     _aSy_=new_variable(_aSv_,_aIb_),
                     _aSz_=new_variable(_aSv_,_aIc_),
                     _aSA_=get_method_labels(_aSv_,_aHV_),
                     _aSB_=_aSA_[1],
                     _aSC_=_aSA_[2],
                     _aSD_=_aSA_[3],
                     _aSE_=_aSA_[4];
                    function _aSF_(self_1){return self_1[1 + _aSy_]}
                    function _aSG_
                     (self_1,service,on_chunk,on_close,params,query,body)
                     {var env=self_1[1 + _aSw_];
                      return caml_call10
                              (env[1],
                               self_1[1 + _aSx_],
                               [0,self_1[1 + _aSz_]],
                               0,
                               self_1[1 + _aSy_],
                               service,
                               on_chunk,
                               on_close,
                               params,
                               query,
                               body)}
                    function _aSH_(self_1,service,params,query,body)
                     {var env=self_1[1 + _aSw_];
                      return caml_call8
                              (env[2],
                               self_1[1 + _aSx_],
                               [0,self_1[1 + _aSz_]],
                               0,
                               self_1[1 + _aSy_],
                               service,
                               params,
                               query,
                               body)}
                    set_methods
                     (_aSv_,
                      [0,
                       _aSB_,
                       function(self_1,meth,body,uri)
                        {var
                          env=self_1[1 + _aSw_],
                          path$0=path(0,uri),
                          query$0=query(uri),
                          prefix=path(0,self_1[1 + _aSy_]),
                          prefixed_path=
                           caml_string_equal(prefix,_aId_)
                            ?path$0
                            :symbol(prefix,symbol(_aIe_,path$0)),
                          uri$0=with_path(self_1[1 + _aSy_],prefixed_path),
                          uri$1=with_query(uri$0,query$0);
                         return caml_call4(env[3],0,body,meth,uri$1)},
                       _aSD_,
                       _aSH_,
                       _aSC_,
                       _aSG_,
                       _aSE_,
                       _aSF_]);
                    return function(_aSI_)
                     {return function(_aSL_,_aSK_,_aSJ_)
                       {var
                         _aSM_=_aSK_[1],
                         _aSN_=_aSK_[2],
                         _aSO_=create_object_opt(_aSL_,_aSv_);
                        _aSO_[1 + _aSz_] = _aSN_;
                        _aSO_[1 + _aSy_] = _aSM_;
                        _aSO_[1 + _aSx_] = _aSJ_;
                        _aSO_[1 + _aSw_] = _aSI_;
                        return _aSO_}}},
                 table=create_table(pub_meths),
                 env_init=class_init(table);
                init_class(table);
                init_table[2] = class_init;
                init_table[1] = env_init}
              var
               _aSs_=[0,call_streamed_service,call_service,generic_json_call],
               _aSt_=init_table[1],
               _aSu_=init_table[2];
              caml_update_dummy
               (http_ctxt,
                [0,caml_call1(init_table[1],_aSs_),_aSu_,_aSt_,_aSs_]);
              return [0,
                      null_logger,
                      timings_logger,
                      full_logger,
                      config_encoding,
                      default_config,
                      http_ctxt,
                      call_service,
                      call_streamed_service,
                      generic_json_call,
                      generic_call$0]},
           _aIi_=
            [1,_aIg_,_aIh_,rpc_arg$2,function(signature){return signature}],
           _aIj_=function(signature){return signature},
           _aIk_=function(_aSm_){return [0,_aIj_,_aSm_]},
           query$1=seal(function(_aSl_){return symbol$20(_aIk_,_aIi_,_aSl_)}),
           _aIm_=symbol$18(symbol$17(root$0,_aIl_),rpc_arg$1),
           _aIo_=obj1([0,_aIn_,encoding$16,0,0]);
          caml_call3(post_service$0(_aIp_,query$1),bytes$1,_aIo_,_aIm_);
          var
           _aIr_=symbol$18(symbol$17(root$0,_aIq_),rpc_arg$1),
           _aIt_=obj1([0,_aIs_,bytes$1,0,0]);
          caml_call3(post_service$0(_aIu_,query$1),bytes$1,_aIt_,_aIr_);
          var
           _aIw_=symbol$18(symbol$17(root$0,_aIv_),rpc_arg$1),
           _aIy_=obj1([0,_aIx_,bytes$1,0,0]);
          caml_call3(post_service$0(_aIz_,query$1),bytes$1,_aIy_,_aIw_);
          var
           _aIB_=symbol$18(symbol$17(root$0,_aIA_),rpc_arg$1),
           _aID_=obj1([0,_aIC_,bool$1,0,0]);
          caml_call2(get_service$0(_aIE_,empty$4),_aID_,_aIB_);
          var
           _aIG_=symbol$18(symbol$17(root$0,_aIF_),rpc_arg$1),
           _aII_=obj1([0,_aIH_,encoding$15,0,0]);
          caml_call2(get_service$0(_aIJ_,empty$4),_aII_,_aIG_);
          var
           _aIL_=symbol$17(root$0,_aIK_),
           _aIN_=obj1(opt$2(0,0,_aIM_,list$1(0,encoding$14)));
          caml_call2(get_service$0(_aIO_,empty$4),_aIN_,_aIL_);
          var
           Make_authenticated_request=
            function(T)
             {function to_sign(s,data)
               {var tag=make(1,48);
                caml_bytes_set(tag,0,T[1]);
                var
                 _aSj_=[0,tag,[0,to_bytes_exn(0,raw_encoding$9,s),[0,data,0]]],
                 _aSk_=[0,to_bytes(_aIP_),_aSj_];
                return concat(to_bytes(_aIQ_),_aSk_)}
              var
               _aSg_=
                obj3
                 ([0,_aIT_,encoding$14,0,0],
                  [0,_aIS_,bytes$1,0,0],
                  opt$2(0,0,_aIR_,encoding$16)),
               _aSh_=0;
              function _aSi_(param)
               {var signature=param[3],data=param[2],pkh=param[1];
                return [0,pkh,data,signature]}
              var
               encoding=
                conv
                 (function(param)
                   {var signature=param[3],data=param[2],pkh=param[1];
                    return [0,pkh,data,signature]},
                  _aSi_,
                  _aSh_,
                  _aSg_);
              return [0,to_sign,encoding]},
           Request=Make_authenticated_request([0,1]),
           _aIV_=obj1([0,_aIU_,encoding$16,0,0]),
           encoding$75=function(eta){return def$0(_aIW_,0,0,eta)}(_aIV_),
           Request$0=Make_authenticated_request([0,2]),
           _aIY_=obj1([0,_aIX_,bytes$1,0,0]),
           encoding$76=function(eta){return def$0(_aIZ_,0,0,eta)}(_aIY_),
           Request$1=Make_authenticated_request([0,3]),
           _aI1_=obj1([0,_aI0_,bytes$1,0,0]),
           encoding$77=function(eta){return def$0(_aI2_,0,0,eta)}(_aI1_),
           _aI4_=obj1([0,_aI3_,encoding$14,0,0]),
           encoding$78=function(eta){return def$0(_aI5_,0,0,eta)}(_aI4_),
           _aI7_=obj1([0,_aI6_,bool$1,0,0]),
           encoding$79=function(eta){return def$0(_aI8_,0,0,eta)}(_aI7_),
           _aI__=obj1([0,_aI9_,encoding$14,0,0]),
           encoding$80=function(eta){return def$0(_aI$_,0,0,eta)}(_aI__),
           _aJb_=obj1([0,_aJa_,encoding$15,0,0]),
           encoding$81=function(eta){return def$0(_aJc_,0,0,eta)}(_aJb_),
           _aJd_=0,
           _aJe_=function(l){return [0,l]},
           _aJf_=
            function(param){if(param){var l=param[1];return [0,l]}return 0},
           _aJi_=[0,[0,_aJh_,0,list$1(0,encoding$14),_aJf_,_aJe_,_aJg_],_aJd_],
           _aJj_=function(param){return 0},
           _aJk_=function(param){return param?0:_aJl_};
          union$0(0,[0,[0,_aJo_,0,constant(_aJm_),_aJk_,_aJj_,_aJn_],_aJi_]);
          var
           _aJp_=0,
           _aJq_=function(param){var req=param[2];return [4,req]},
           _aJr_=
            function(param)
             {if(typeof param !== "number" && 4 === param[0])
               {var req=param[1];return [0,[0,0,req]]}
              return 0},
           _aJw_=
            [0,
             [0,
              _aJv_,
              0,
              merge_objs(obj1([0,_aJt_,constant(_aJs_),0,0]),encoding$78),
              _aJr_,
              _aJq_,
              _aJu_],
             _aJp_],
           _aJx_=function(param){var req=param[2];return [3,req]},
           _aJy_=
            function(param)
             {if(typeof param !== "number" && 3 === param[0])
               {var req=param[1];return [0,[0,0,req]]}
              return 0},
           _aJz_=Request$1[2],
           _aJE_=
            [0,
             [0,
              _aJD_,
              0,
              merge_objs(obj1([0,_aJB_,constant(_aJA_),0,0]),_aJz_),
              _aJy_,
              _aJx_,
              _aJC_],
             _aJw_],
           _aJF_=function(param){var req=param[2];return [2,req]},
           _aJG_=
            function(param)
             {if(typeof param !== "number" && 2 === param[0])
               {var req=param[1];return [0,[0,0,req]]}
              return 0},
           _aJH_=Request$0[2],
           _aJM_=
            [0,
             [0,
              _aJL_,
              0,
              merge_objs(obj1([0,_aJJ_,constant(_aJI_),0,0]),_aJH_),
              _aJG_,
              _aJF_,
              _aJK_],
             _aJE_],
           _aJN_=function(param){return 0},
           _aJO_=function(param){return typeof param === "number"?_aJP_:0},
           _aJU_=
            [0,
             [0,_aJT_,0,obj1([0,_aJR_,constant(_aJQ_),0,0]),_aJO_,_aJN_,_aJS_],
             _aJM_],
           _aJV_=function(param){var req=param[2];return [1,req]},
           _aJW_=
            function(param)
             {if(typeof param !== "number" && 1 === param[0])
               {var req=param[1];return [0,[0,0,req]]}
              return 0},
           _aJ1_=
            [0,
             [0,
              _aJ0_,
              0,
              merge_objs(obj1([0,_aJY_,constant(_aJX_),0,0]),encoding$80),
              _aJW_,
              _aJV_,
              _aJZ_],
             _aJU_],
           _aJ2_=function(param){var req=param[2];return [0,req]},
           _aJ3_=
            function(param)
             {if(typeof param !== "number" && 0 === param[0])
               {var req=param[1];return [0,[0,0,req]]}
              return 0},
           _aJ4_=Request[2],
           _aJ9_=
            union$0
             (0,
              [0,
               [0,
                _aJ8_,
                0,
                merge_objs(obj1([0,_aJ6_,constant(_aJ5_),0,0]),_aJ4_),
                _aJ3_,
                _aJ2_,
                _aJ7_],
               _aJ1_]),
           encoding$82=function(eta){return def$0(_aJ__,0,0,eta)}(_aJ9_);
          register(0,encoding$82);
          register(0,encoding$75);
          register(0,encoding$76);
          register(0,encoding$77);
          register(0,encoding$79);
          register(0,encoding$81);
          var
           Encrypted_ed25519=[num_248,_aJ$_,caml_fresh_oo_id(0)],
           Encrypted_secp256k1=[num_248,_aKa_,caml_fresh_oo_id(0)],
           Encrypted_p256=[num_248,_aKb_,caml_fresh_oo_id(0)],
           salt_len=8,
           length$3=56,
           _aKc_=function(sk){return [0,Encrypted_ed25519,sk]},
           _aKd_=
            function(buf)
             {return caml_ml_string_length(buf) !== 56?0:[0,to_bytes(buf)]},
           ed25519=
            caml_call5
             (register_encoding,
              ed25519_encrypted_seed,
              length$3,
              function(sk){return to_string(sk)},
              _aKd_,
              _aKc_),
           length$4=56,
           _aKe_=function(sk){return [0,Encrypted_secp256k1,sk]},
           _aKf_=
            function(buf)
             {return caml_ml_string_length(buf) !== 56?0:[0,to_bytes(buf)]},
           secp256k1=
            caml_call5
             (register_encoding,
              secp256k1_encrypted_secret_key,
              length$4,
              function(sk){return to_string(sk)},
              _aKf_,
              _aKe_),
           length$5=56,
           _aKg_=function(sk){return [0,Encrypted_p256,sk]},
           _aKh_=
            function(buf)
             {return caml_ml_string_length(buf) !== 56?0:[0,to_bytes(buf)]},
           p256=
            caml_call5
             (register_encoding,
              p256_encrypted_secret_key,
              length$5,
              function(sk){return to_string(sk)},
              _aKh_,
              _aKg_);
          caml_call3(check_encoded_prefix,ed25519,_aKi_,88);
          caml_call3(check_encoded_prefix,secp256k1,_aKj_,88);
          caml_call3(check_encoded_prefix,p256,_aKk_,88);
          var
           generate_nonce_hash=
            function(name,data,cctxt)
             {var data$0=to_bytes(data);
              function _aSd_(sk_present)
               {function _aSe_(param)
                 {function _aSf_(sk_uri)
                   {return with_scheme_signer
                            (sk_uri,
                             function(Signer)
                              {return caml_call2(Signer[10],sk_uri,data$0)})}
                  return caml_call2
                          (symbol$13,caml_call2(Secret_key[4],cctxt,name),_aSf_)}
                return caml_call2
                        (symbol$13,
                         caml_call2
                          (fail_unless,sk_present,caml_call1(failure(_aKm_),name)),
                         _aSe_)}
              return caml_call2
                      (symbol$13,caml_call2(Secret_key[9],cctxt,name),_aSd_)},
           construct_error=
            function(payload_enc,payload,msg)
             {return construct$1
                      (obj3
                        ([0,_aKq_,constant(_aKp_),0,0],
                         [0,_aKo_,output,0,0],
                         [0,_aKn_,payload_enc,0,0]),
                       [0,0,msg,payload])},
           construct_ok=
            function(payload_enc,payload)
             {return construct$1
                      (obj2
                        ([0,_aKt_,constant(_aKs_),0,0],[0,_aKr_,payload_enc,0,0]),
                       [0,0,payload])},
           entrypoint=
            function(path,input,output,f)
             {return [0,input,output,f,function(x){return x},path]},
           gen_keys_encoding=
            obj4
             ([0,_aKx_,bool$1,0,0],
              [0,_aKw_,output,0,0],
              [0,_aKv_,output,0,0],
              [0,_aKu_,bytes$1,0,0]),
           force_switch=opt$2(0,0,_aKy_,bool$1),
           entrypoints=
            function(param)
             {var _aRp_=0;
              function _aRq_(param,cctxt)
               {var force=param[3],pkh=param[2],alias=param[1],switch$0=0;
                if(force && 0 !== force[1]){var force$0=1;switch$0 = 1}
                if(! switch$0)var force$0=0;
                function _aSa_(name)
                 {function _aSb_(hash)
                   {function _aSc_(name)
                     {return caml_call4(add$7,force$0,cctxt,name,hash)}
                    return caml_call2
                            (symbol$13,caml_call3(of_fresh,cctxt,force$0,name),_aSc_)}
                  return caml_call2
                          (symbol$13,return$1(caml_call1(of_b58check$9,pkh)),_aSb_)}
                return caml_call2(symbol$13,caml_call1(fresh,alias),_aSa_)}
              var
               _aRr_=
                [0,
                 entrypoint
                  (_aKB_,
                   obj3([0,_aKA_,output,0,0],[0,_aKz_,output,0,0],force_switch),
                   input$0,
                   _aRq_),
                 _aRp_];
              function _aRs_(param,cctxt)
               {function _aR__(l)
                 {return caml_call2
                          (map_s,
                           function(param)
                            {var
                              sk=param[4],
                              pk=param[3],
                              pkh=param[2],
                              name=param[1],
                              sk_known=symbol_map(sk,function(param){return 1}),
                              pk_known=symbol_map(pk,function(param){return 1});
                             return caml_call1(return$3,[0,name,pkh,sk_known,pk_known])},
                           l)}
                function _aR9_(l)
                 {return caml_call2
                          (map_s,
                           function(param)
                            {var pkh=param[2],name=param[1];
                             function _aR$_(param)
                              {if(0 === param[0])
                                {var match=param[1],sk_uri=match[3],pk=match[2];
                                 return caml_call1(return$3,[0,name,pkh,pk,sk_uri])}
                               return caml_call1(return$3,[0,name,pkh,0,0])}
                             return caml_call2
                                     (symbol_bind$2,raw_get_key(cctxt,pkh),_aR$_)},
                           l)}
                return caml_call2
                        (symbol$13,
                         caml_call2(symbol$13,caml_call1(load,cctxt),_aR9_),
                         _aR__)}
              var
               _aRt_=opt$2(0,0,_aKC_,bool$1),
               _aRu_=
                [0,
                 entrypoint
                  (_aKG_,
                   input$0,
                   list$1
                    (0,
                     obj4
                      ([0,_aKF_,output,0,0],
                       [0,_aKE_,encoding$14,0,0],
                       opt$2(0,0,_aKD_,bool$1),
                       _aRt_)),
                   _aRs_),
                 _aRr_];
              function _aRv_(param,cctxt)
               {var name=param[2],show_private=param[1];
                function _aR4_(param)
                 {if(param)
                   {var match=param[1],sk=match[3],pk=match[2],pkh=match[1];
                    if(show_private && 0 !== show_private[1])
                     return caml_call1(return$3,[0,pkh,pk,sk]);
                    return caml_call1(return$3,[0,pkh,pk,0])}
                  return caml_call1(failwith$0(_aKH_),name)}
                function _aR3_(key_info)
                 {if(key_info)
                   {var
                     match=key_info[1],
                     skloc=match[3],
                     pk=match[2],
                     pkh=match[1],
                     _aR6_=
                      function(sk){return caml_call1(return$3,[0,[0,pkh,pk,sk]])};
                    if(skloc)
                     var
                      sk=skloc[1],
                      _aR7_=function(sk){return caml_call1(return$3,[0,sk])},
                      _aR8_=
                       caml_call2(symbol$13,caml_call1(Secret_key[14],sk),_aR7_);
                    else
                     var _aR8_=caml_call1(return$3,0);
                    return caml_call2(symbol$13,_aR8_,_aR6_)}
                  return caml_call1(return$3,0)}
                function _aR2_(pkh)
                 {function _aR5_(param)
                   {if(0 === param[0])
                     {var match=param[1],sk_uri=match[3],pk=match[2];
                      return caml_call1(return_some$0,[0,pkh,pk,sk_uri])}
                    return return_none$0}
                  return caml_call2
                          (symbol_bind$2,raw_get_key(cctxt,pkh),_aR5_)}
                return caml_call2
                        (symbol$13,
                         caml_call2
                          (symbol$13,
                           caml_call2(symbol$13,caml_call2(find$3,cctxt,name),_aR2_),
                           _aR3_),
                         _aR4_)}
              var
               _aRw_=opt$2(0,0,_aKI_,output),
               _aRx_=
                obj3
                 ([0,_aKK_,encoding$14,0,0],
                  opt$2(0,0,_aKJ_,encoding$15),
                  _aRw_),
               _aRy_=
                [0,
                 entrypoint
                  (_aKN_,
                   obj2(opt$2(0,0,_aKM_,bool$1),[0,_aKL_,output,0,0]),
                   _aRx_,
                   _aRv_),
                 _aRu_];
              function _aRz_(param,cctxt)
               {var name=param[2],force=param[1];
                function _aRV_(has_secret_key)
                 {function _aRW_(has_public_key)
                   {function _aRX_(param)
                     {function _aR0_(param)
                       {function _aR1_(param){return caml_call2(del,cctxt,name)}
                        return caml_call2
                                (symbol$13,caml_call2(Public_key[11],cctxt,name),_aR1_)}
                      return caml_call2
                              (symbol$13,caml_call2(Secret_key[11],cctxt,name),_aR0_)}
                    var
                     _aRZ_=1 - force,
                     _aRY_=caml_call1(failure(_aKl_),name),
                     has_secret_key$0=
                      _aRZ_?has_secret_key || has_public_key:_aRZ_;
                    return caml_call2
                            (symbol$13,
                             caml_call2(fail_when,has_secret_key$0,_aRY_),
                             _aRX_)}
                  return caml_call2
                          (symbol$13,caml_call2(Public_key[9],cctxt,name),_aRW_)}
                return caml_call2
                        (symbol$13,caml_call2(Secret_key[9],cctxt,name),_aRV_)}
              var
               _aRA_=
                [0,
                 entrypoint
                  (_aKQ_,
                   obj2([0,_aKP_,bool$1,0,0],[0,_aKO_,output,0,0]),
                   input$0,
                   _aRz_),
                 _aRy_],
               _aRB_=
                [0,
                 entrypoint
                  (_aKR_,
                   input$0,
                   input$0,
                   function(param,cctxt)
                    {function _aRT_(param)
                      {function _aRU_(param){return caml_call2(set$1,cctxt,0)}
                       return caml_call2
                               (symbol$13,caml_call2(Secret_key[3],cctxt,0),_aRU_)}
                     return caml_call2
                             (symbol$13,caml_call2(Public_key[3],cctxt,0),_aRT_)}),
                 _aRA_];
              function _aRC_(param,cctxt)
               {var data=param[2],name=param[1];
                function _aRR_(nonce_hash)
                 {var _aRS_=arg$0(0,nonce_hash);
                  return caml_call1
                          (return$3,caml_call2(strf(_aKS_),pp$2,_aRS_))}
                return caml_call2
                        (symbol$13,generate_nonce_hash(name,data,cctxt),_aRR_)}
              var
               _aRD_=
                [0,
                 entrypoint
                  (_aKV_,
                   obj2([0,_aKU_,output,0,0],[0,_aKT_,output,0,0]),
                   output,
                   _aRC_),
                 _aRB_];
              function _aRE_(param,cctxt)
               {var data=param[2],name=param[1];
                function _aRP_(nonce_hash)
                 {var _aRQ_=arg$0(0,nonce_hash);
                  return caml_call1
                          (return$3,caml_call2(strf(_aKW_),pp$2,_aRQ_))}
                return caml_call2
                        (symbol$13,generate_nonce_hash(name,data,cctxt),_aRP_)}
              var
               _aRF_=
                [0,
                 entrypoint
                  (_aKZ_,
                   obj2([0,_aKY_,output,0,0],[0,_aKX_,output,0,0]),
                   output,
                   _aRE_),
                 _aRD_];
              return [0,
                      entrypoint
                       (_aK0_,
                        gen_keys_encoding,
                        input$0,
                        function(param,cctxt)
                         {var
                           password=param[4],
                           name=param[3],
                           algo=param[2],
                           sth=param[1];
                          function _aRG_(algo)
                           {function _aRI_(name)
                             {function _aRJ_(name)
                               {var opt=[0,algo],algo$0=opt?algo:0;
                                switch(algo$0)
                                 {case 0:
                                   var
                                    sk=[0,gen(size$3)],
                                    pk=to_public_key(sk),
                                    pkh=caml_call2(hash_bytes$0,0,[0,to_bytes$2(pk),0]),
                                    match$1=[0,[0,pkh],[0,pk],[0,sk]];
                                   break;
                                  case 1:
                                   var seed=gen(32),k=read_sk_exn(context,of_bytes$0(seed));
                                   if(0 === k[0])
                                    var
                                     sk$1=k[1],
                                     pk$1=create$11(public_bytes),
                                     match=
                                      caml_secp256k1_ec_pubkey_create(context,pk$1,sk$1)
                                       ?[0,[1,pk$1]]
                                       :0;
                                   else
                                    var pk$2=k[1],match=[0,[1,pk$2]];
                                   if(match)
                                    var pk$3=match[1],pk$5=pk$3;
                                   else
                                    var pk$5=invalid_arg(_E4_);
                                   var
                                    pkh$1=caml_call2(hash_bytes$2,0,[0,to_bytes$8(pk$5),0]),
                                    match$1=[0,[1,pkh$1],[1,pk$5],[1,k]];
                                   break;
                                  default:
                                   var pk$0=caml_create_bytes(64);
                                   for(;;)
                                    {var sk$0=gen(size$5);
                                     if(! Hacl_P256_is_more_than_zero_less_than_order(sk$0))
                                      continue;
                                     var
                                      match$0=
                                       Hacl_P256_ecp256dh_i(pk$0,sk$0)
                                        ?[0,[1,pk$0],[0,sk$0]]
                                        :failwith(_E0_),
                                      sk$2=match$0[2],
                                      pk$4=match$0[1],
                                      pkh$0=caml_call2(hash_bytes$1,0,[0,to_bytes$3(pk$4),0]),
                                      match$1=[0,[2,pkh$0],[2,pk$4],[2,sk$2]];
                                     break}}
                                var
                                 sk$3=match$1[3],
                                 pk$6=match$1[2],
                                 public_key_hash=match$1[1];
                                function _aRK_(pk_uri)
                                 {function _aRL_(sk_uri)
                                   {var opt=[0,sth],public_key=0,force=opt?sth:0;
                                    function _aRM_(param)
                                     {function _aRN_(param)
                                       {function _aRO_(param){return return_unit$0}
                                        return caml_call2
                                                (symbol$13,
                                                 caml_call4(add$7,force,cctxt,name,public_key_hash),
                                                 _aRO_)}
                                      return caml_call2
                                              (symbol$13,
                                               caml_call4(Secret_key[10],force,cctxt,name,sk_uri),
                                               _aRN_)}
                                    return caml_call2
                                            (symbol$13,
                                             caml_call4
                                              (Public_key[10],force,cctxt,name,[0,pk_uri,public_key]),
                                             _aRM_)}
                                  var
                                   salt=gen(salt_len),
                                   key=caml_call4(SHA512[1],password,salt,32768,32);
                                  if(caml_ml_bytes_length(key) !== 32)
                                   invalid_arg(caml_call1(sprintf(_EV_),keybytes));
                                  switch(sk$3[0])
                                   {case 0:
                                     var sk=sk$3[1],msg=to_bytes_exn(0,encoding$7,sk);break;
                                    case 1:
                                     var sk$0=sk$3[1],msg=to_bytes_exn(0,encoding$13,sk$0);break;
                                    default:
                                     var sk$1=sk$3[1],msg=to_bytes_exn(0,encoding$10,sk$1)}
                                  var
                                   msglen=caml_ml_bytes_length(msg),
                                   cmsg=caml_create_bytes(msglen + 16 | 0);
                                  if(! Hacl_NaCl_crypto_secretbox_easy(cmsg,msg,nonce,key))
                                   failwith(_EW_);
                                  var payload=cat(salt,cmsg);
                                  switch(sk$3[0])
                                   {case 0:var encoding=ed25519;break;
                                    case 1:var encoding=secp256k1;break;
                                    default:var encoding=p256}
                                  var path=simple_encode(0,encoding,payload);
                                  return caml_call2
                                          (symbol$13,
                                           make_sk_uri(make$1([0,scheme$2],0,0,0,[0,path],0,0,0)),
                                           _aRL_)}
                                return caml_call2
                                        (symbol$13,
                                         make_pk_uri
                                          (make$1([0,scheme$1],0,0,0,[0,to_b58check$14(pk$6)],0,0,0)),
                                         _aRK_)}
                              return caml_call2
                                      (symbol$13,caml_call3(Secret_key[19],cctxt,sth,name),_aRJ_)}
                            return caml_call2
                                    (symbol$13,caml_call1(Secret_key[20],name),_aRI_)}
                          var
                           _aRH_=
                            caml_string_notequal(algo,_avd_)
                             ?caml_string_notequal(algo,_ave_)
                               ?caml_string_notequal(algo,_avf_)
                                 ?caml_call1(failwith$0(_avg_),algo)
                                 :caml_call1(return$3,1)
                               :caml_call1(return$3,2)
                             :caml_call1(return$3,0);
                          return caml_call2(symbol$13,_aRH_,_aRG_)}),
                      _aRF_]};
          caml_call2(Table[2],0,1);
          caml_fresh_oo_id(0);
          var
           entrypoints$0=
            function(param)
             {var
               _aRg_=0,
               _aRh_=
                [0,
                 entrypoint
                  (_aK2_,
                   output,
                   output,
                   function(seed_str,param)
                    {var
                      l=[0,to_bytes(seed_str),0],
                      bh=caml_call2(hash_bytes,0,l),
                      chain_id=sub_string(caml_call1(to_bytes$5,bh),0,4);
                     return caml_call1
                             (return$3,caml_call2(strf(_aK1_),pp$9,chain_id))}),
                 _aRg_];
              function f(param,cctxt)
               {function _aRo_(password)
                 {return caml_call1(return$3,to_string(password))}
                return caml_call2
                        (symbol$13,
                         caml_call2
                          (caml_get_public_method(cctxt,num_800093270,75),cctxt,_aK3_),
                         _aRo_)}
              var
               _aRi_=
                [0,[1,input$0,output,f,function(x){return x},path$7],_aRh_],
               _aRj_=
                [0,
                 entrypoint
                  (_aK5_,
                   input$0,
                   input$0,
                   function(param,_aRn_){return failwith$0(_aK4_)}),
                 _aRi_];
              function _aRk_(param,_aRm_)
               {var b=param[2],a=param[1];
                return caml_call1(return$3,symbol(a,b))}
              var
               _aRl_=
                [0,
                 entrypoint
                  (_aK8_,
                   obj2([0,_aK7_,output,0,0],[0,_aK6_,output,0,0]),
                   output,
                   _aRk_),
                 _aRj_];
              return [0,
                      entrypoint
                       (_aK9_,
                        int32$1,
                        int32$1,
                        function(a,param){return caml_call1(return$3,a + 1 | 0)}),
                      _aRl_]},
           entrypoints$1=entrypoints$0(0),
           apply_entry=
            function(entry,input,cctxt)
             {if(0 === entry[0])
               {var
                 conv=entry[4],
                 f=entry[3],
                 output_enc=entry[2],
                 input_enc=entry[1],
                 input$0=destruct$0(input_enc,input),
                 _aRe_=
                  function(param)
                   {if(0 === param[0])
                     {var res=param[1];
                      return return$1(construct_ok(output_enc,res))}
                    var
                     err=param[1],
                     msg=caml_call2(strf(_aK__),pp_print_error,err);
                    return return$1(construct_error(trace_encoding,err,msg))};
                return caml_call2
                        (symbol_bind$2,
                         caml_call2(f,input$0,caml_call1(conv,cctxt)),
                         _aRe_)}
              var
               conv$0=entry[4],
               f$0=entry[3],
               output_enc$0=entry[2],
               input_enc$0=entry[1],
               input$1=destruct$0(input_enc$0,input);
              function _aRf_(param)
               {if(0 === param[0])
                 {var res=param[1];
                  return return$1(construct_ok(output_enc$0,res))}
                var
                 err=param[1],
                 msg=caml_call2(strf(_aK$_),pp_print_error,err);
                return return$1(construct_error(trace_encoding,err,msg))}
              return caml_call2
                      (symbol_bind$2,
                       caml_call2(f$0,input$1,caml_call1(conv$0,cctxt)),
                       _aRf_)},
           window=joo_global_object,
           no_handler=null,
           undefined$0=undefined,
           case$0=
            function(x,f,g)
             {return x == no_handler?caml_call1(f,0):caml_call1(g,x)},
           to_option=
            function(x)
             {function _aRd_(x){return [0,x]}
              return case$0(x,function(param){return 0},_aRd_)},
           true$0=true,
           false$0=false,
           object_constructor=window.Object,
           array_constructor=window.Array,
           Error$1=[num_248,_aLa_,caml_fresh_oo_id(0)];
          register_exception(_aLb_,[0,Error$1,{}]);
          (function(exn){throw exn});
          register_printer
           (function(param)
             {if(param[1] === Error$1)
               {var e=param[2];
                return [0,caml_string_of_jsstring(e.toString())]}
              return 0});
          register_printer
           (function(e)
             {return e instanceof array_constructor
                      ?0
                      :[0,caml_string_of_jsstring(e.toString())]});
          var
           export_all=
            function(obj)
             {var keys=object_constructor.keys(obj);
              return keys.forEach
                      (caml_js_wrap_callback
                        (function(key,param,_aRc_)
                          {var x=obj[key];return caml_js_export_var(0)[key] = x}))},
           arrayBuffer=window.ArrayBuffer,
           uint8Array=window.Uint8Array,
           arrayBuffer$0=
            function(e){return e instanceof arrayBuffer?e:no_handler};
          caml_fresh_oo_id(0);
          var html_element=window.HTMLElement;
          html_element === undefined$0;
          var
           console=caml_js_get_console(0),
           overflow_limit=num_2147483000,
           wakeup$0=
            function(param)
             {return 1 === param
                      ?(window.setTimeout(caml_js_wrap_callback(wakeup_paused),0.),
                        0)
                      :0};
          register_pause_notifier(wakeup$0);
          var
           prerr_string$0=
            function(s){return console.log(caml_jsstring_of_string(s))};
          async_exception_hook[1]
          =
          function(exn)
           {prerr_string$0(_aLc_);
            prerr_string$0(to_string$0(exn));
            return print_backtrace(stderr)};
          var
           xhr=caml_xmlhttprequest_create(0),
           rt=xhr.responseType,
           xhr_response_supported=
            caml_string_equal(caml_string_of_jsstring(typeof rt),_aLd_),
           binary_string=
            function(str)
             {var
               len=caml_ml_string_length(str),
               a=new uint8Array(len),
               _aRa_=len - 1 | 0,
               _aQ$_=0;
              if(! (_aRa_ < 0))
               {var i=_aQ$_;
                for(;;)
                 {a[i] = caml_string_get(str,i);
                  var _aRb_=i + 1 | 0;
                  if(_aRa_ !== i){var i=_aRb_;continue}
                  break}}
              return a},
           string_of_uint8array=
            function(u8a,offset,len)
             {return init$0(len,function(i){return chr(u8a[offset + i | 0])})},
           Body_builder=
            function(P)
             {function chunked_body_str(text)
               {var body_len=text.length,pos=[0,0];
                function chunkerizer(param)
                 {if(pos[1] === body_len)return return$1(0);
                  if(body_len <= (pos[1] + P[2] | 0))
                   {var str=text.substring(pos[1]);
                    pos[1] = body_len;
                    return return$1([1,caml_call1(P[3],str)])}
                  var str$0=text.substring(pos[1],pos[1] + P[2] | 0);
                  pos[1] = pos[1] + P[2] | 0;
                  return return$1([0,caml_call1(P[3],str$0)])}
                return 0 === body_len
                        ?body
                        :of_stream(create_stream(chunkerizer,0))}
              function chunked_body_binary(ab)
               {var body_len=ab.byteLength,u8a=new uint8Array(ab),pos=[0,0];
                function chunkerizer(param)
                 {if(pos[1] === body_len)return return$1(0);
                  if(body_len <= (pos[1] + P[2] | 0))
                   {var
                     str=
                      string_of_uint8array(u8a,pos[1],body_len - pos[1] | 0);
                    pos[1] = body_len;
                    return return$1([1,str])}
                  var str$0=string_of_uint8array(u8a,pos[1],P[2]);
                  pos[1] = pos[1] + P[2] | 0;
                  return return$1([0,str$0])}
                return 0 === body_len
                        ?body
                        :of_stream(create_stream(chunkerizer,0))}
              function get(param)
               {if(num_571404121 <= param[1])
                 {var ab=param[2];
                  if(P[1])return chunked_body_binary(ab);
                  var u8a=new uint8Array(ab);
                  return of_string$3
                          (string_of_uint8array(u8a,0,ab.byteLength))}
                var js_str=param[2];
                return P[1]
                        ?chunked_body_str(js_str)
                        :of_string$3(caml_call1(P[3],js_str))}
              return [0,chunked_body_str,chunked_body_binary,get]},
           Make_api=
            function(X)
             {var Request=X[1],Response=X[2],default_ctx=0;
              function sexp_of_ctx(param){return _aLe_}
              function call(param,headers,body,_aQ__,meth,uri)
               {return caml_call4(X[3],headers,body,meth,uri)}
              function head(ctx,headers,uri)
               {function _aQ8_(_aQ9_){return _aQ9_[1]}
                return symbol$2
                        (call(ctx,headers,0,_aLf_,num_801894688,uri),_aQ8_)}
              function get(ctx,headers,uri)
               {return call(ctx,headers,0,_aLg_,num_3546230,uri)}
              function delete$0(ctx,body,chunked,headers,uri)
               {return call(ctx,headers,body,chunked,num_492530731,uri)}
              function post(ctx,body,chunked,headers,uri)
               {return call(ctx,headers,body,chunked,num_891112544,uri)}
              function put(ctx,body,chunked,headers,uri)
               {return call(ctx,headers,body,chunked,num_3997359,uri)}
              function patch(ctx,body,chunked,headers,uri)
               {return call(ctx,headers,body,chunked,num_994393768,uri)}
              function post_form(ctx,headers,params,uri)
               {if(headers)
                 var h=headers[1],headers$0=add$9(h,k$2,v);
                else
                 var
                  _aQ7_=of_string$2(k$2),
                  headers$0=caml_call2(StringMap$1[6],_aQ7_,[0,v,0]);
                var
                 body=
                  of_string$3(caml_call2(encoded_of_query$0(0),0,params));
                return post(ctx,[0,body],_aLh_,[0,headers$0],uri)}
              var
               Cohttp_lwt_xhr_callv_not_imple=
                [num_248,_aLi_,caml_fresh_oo_id(0)];
              function callv(param,uri,reqs)
               {return fail(Cohttp_lwt_xhr_callv_not_imple)}
              return [0,
                      Request,
                      Response,
                      default_ctx,
                      sexp_of_ctx,
                      call,
                      head,
                      get,
                      delete$0,
                      post,
                      put,
                      patch,
                      post_form,
                      Cohttp_lwt_xhr_callv_not_imple,
                      callv]},
           Header_io=_aDS_(_aFe_),
           Make_client_async=
            function(P)
             {var Bb=Body_builder(P);
              function call(headers,body,meth,uri)
               {var xml=caml_xmlhttprequest_create(0);
                xml.withCredentials = ! ! P[4];
                if(xhr_response_supported)xml.responseType = str_arraybuffer;
                var
                 match=task(0),
                 wake=match[2],
                 res=match[1],
                 _aQX_=caml_jsstring_of_string(arg$1(0,uri));
                xml.open
                 (caml_jsstring_of_string(string_of_method(meth)),
                  _aQX_,
                  true$0);
                if(headers)
                 {var headers$0=headers[1];
                  iter$7
                   (function(k,v)
                     {return iter$0
                              (function(v)
                                {return xml.setRequestHeader
                                         (caml_jsstring_of_string(k),caml_jsstring_of_string(v))},
                               v)},
                    headers$0)}
                xml.onreadystatechange
                =
                caml_js_wrap_callback
                 (function(param)
                   {var match=xml.readyState;
                    if(4 <= match)
                     {var
                       respText=
                        function(param)
                         {function _aQ5_(s){return [0,num_976970511,s]}
                          function _aQ6_(param){return [0,num_976970511,str$59]}
                          return case$0(xml.responseText,_aQ6_,_aQ5_)};
                      if(xhr_response_supported)
                       var
                        _aQ1_=function(ab){return [0,num_571404121,ab]},
                        _aQ2_=
                         function(param)
                          {console.log(str_XHR_Response_is_abr);return respText(0)},
                        b=case$0(arrayBuffer$0(xml.response),_aQ2_,_aQ1_);
                      else
                       var b=respText(0);
                      var
                       body=caml_call1(Bb[3],b),
                       resp_headers=
                        caml_string_of_jsstring(xml.getAllResponseHeaders()),
                       channel=open_in(resp_headers),
                       _aQ3_=
                        function(resp_headers)
                         {var _aQ4_=[0,transfer_encoding(body)];
                          return make$10
                                  (_aLk_,
                                   [0,status_of_code(xml.status)],
                                   _aLj_,
                                   _aQ4_,
                                   [0,resp_headers],
                                   0)},
                       response=symbol$2(caml_call1(Header_io[1],channel),_aQ3_);
                      return wakeup(wake,[0,response,body])}
                    return 0});
                function _aQY_(param)
                 {on_cancel(res,function(param){return xml.abort()});
                  return symbol_bind
                          (res,
                           function(param)
                            {var b=param[2],r=param[1];
                             return symbol_bind(r,function(r){return return$1([0,r,b])})})}
                if(body)
                 var
                  body$0=body[1],
                  _aQZ_=
                   function(body)
                    {var bs=binary_string(body);return return$1(xml.send(bs))},
                  _aQ0_=symbol_bind(to_string$17(body$0),_aQZ_);
                else
                 var _aQ0_=return$1(xml.send(no_handler));
                return symbol_bind(_aQ0_,_aQY_)}
              return Make_api
                      ([0,
                        [0,
                         encoding$73,
                         version$3,
                         resource,
                         meth,
                         headers$1,
                         _aE$_,
                         t_of_sexp$1,
                         sexp_of_t$1,
                         make$11,
                         is_keep_alive,
                         uri,
                         make_for_client],
                        [0,
                         flush$0,
                         status$0,
                         version$1,
                         headers,
                         encoding$71,
                         _aEl_,
                         t_of_sexp$0,
                         sexp_of_t$0,
                         make$10],
                        call])},
           Make_client_sync=
            function(P)
             {var Bb=Body_builder(P);
              function call(headers,body,meth,uri)
               {var xml=caml_xmlhttprequest_create(0);
                xml.withCredentials = ! ! P[4];
                if(xhr_response_supported)xml.responseType = str_arraybuffer;
                var _aQM_=caml_jsstring_of_string(arg$1(0,uri));
                xml.open
                 (caml_jsstring_of_string(string_of_method(meth)),
                  _aQM_,
                  false$0);
                if(headers)
                 {var headers$0=headers[1];
                  iter$7
                   (function(k,v)
                     {return iter$0
                              (function(v)
                                {return xml.setRequestHeader
                                         (caml_jsstring_of_string(k),caml_jsstring_of_string(v))},
                               v)},
                    headers$0)}
                function _aQN_(body)
                 {function respText(param)
                   {function _aQV_(s){return [0,num_976970511,s]}
                    function _aQW_(param){return [0,num_976970511,str$59]}
                    return case$0(xml.responseText,_aQW_,_aQV_)}
                  if(xhr_response_supported)
                   var
                    _aQQ_=function(ab){return [0,num_571404121,ab]},
                    _aQR_=
                     function(param)
                      {console.log(str_XHR_Response_is_abr);return respText(0)},
                    b=case$0(arrayBuffer$0(xml.response),_aQR_,_aQQ_);
                  else
                   var b=respText(0);
                  var
                   body$0=caml_call1(Bb[3],b),
                   resp_headers=
                    caml_string_of_jsstring(xml.getAllResponseHeaders());
                  function _aQS_(resp_headers)
                   {var
                     _aQU_=[0,transfer_encoding(body$0)],
                     response=
                      make$10
                       (_aLm_,
                        [0,status_of_code(xml.status)],
                        _aLl_,
                        _aQU_,
                        [0,resp_headers],
                        0);
                    return return$1([0,response,body$0])}
                  var _aQT_=open_in(resp_headers);
                  return symbol_bind(caml_call1(Header_io[1],_aQT_),_aQS_)}
                if(body)
                 var
                  body$0=body[1],
                  _aQO_=
                   function(body)
                    {var bs=binary_string(body);return xml.send(bs)},
                  _aQP_=symbol$2(to_string$17(body$0),_aQO_);
                else
                 var _aQP_=return$1(xml.send(no_handler));
                return symbol_bind(_aQP_,_aQN_)}
              return Make_api
                      ([0,
                        [0,
                         encoding$73,
                         version$3,
                         resource,
                         meth,
                         headers$1,
                         _aE$_,
                         t_of_sexp$1,
                         sexp_of_t$1,
                         make$11,
                         is_keep_alive,
                         uri,
                         make_for_client],
                        [0,
                         flush$0,
                         status$0,
                         version$1,
                         headers,
                         encoding$71,
                         _aEl_,
                         t_of_sexp$0,
                         sexp_of_t$0,
                         make$10],
                        call])},
           convert_body_string=caml_string_of_jsbytes,
           Client=Make_client_async([0,1,131072,convert_body_string,0]),
           convert_body_string$0=caml_string_of_jsbytes;
          Make_client_sync([0,0,0,convert_body_string$0,0]);
          var
           callv=Client[14],
           post_form=Client[12],
           patch=Client[11],
           put=Client[10],
           post=Client[9],
           delete$0=Client[8],
           get$2=Client[7],
           head=Client[6],
           default_ctx=Client[3],
           sexp_of_ctx=Client[4],
           buffer_static=Buffer,
           _aLn_=Client[5],
           Buffer_not_init=[num_248,_aLp_,caml_fresh_oo_id(0)],
           buffer=
            make_class
             (shared$7,
              function(table)
               {var
                 _aQB_=new_variable(table,_aLq_),
                 _aQC_=new_variable(table,_aLr_),
                 _aQD_=new_methods_variables(table,shared$7,_aLo_),
                 _aQG_=_aQD_[3],
                 _aQH_=_aQD_[4],
                 _aQE_=_aQD_[1],
                 _aQF_=_aQD_[2];
                function _aQI_(self_1)
                 {if(self_1[1 + _aQH_])
                   {var b=self_1[1 + _aQG_];
                    if(b == no_handler)throw [0,Assert_failure,_aLs_];
                    return caml_string_of_jsstring(b.toString())}
                  throw Buffer_not_init}
                set_methods
                 (table,
                  [0,
                   _aQF_,
                   function(self_1,new_handle)
                    {self_1[1 + _aQG_] = new_handle;
                     self_1[1 + _aQH_] = 1;
                     return 0},
                   _aQE_,
                   _aQI_]);
                function f(self_1)
                 {if(self_1[1 + _aQC_])
                   self_1[1 + _aQG_] = buffer_static.alloc(self_1[1 + _aQB_]);
                  self_1[1 + _aQH_] = 1;
                  return 0}
                table[8] = [0,f,table[8]];
                return function(_aQJ_,self,opt)
                 {if(opt)var sth=opt[1],sth$0=sth;else var sth$0=num_1024;
                  return function(_aQK_)
                   {var _aQL_=create_object_opt(self,table);
                    _aQL_[1 + _aQC_] = _aQK_;
                    _aQL_[1 + _aQB_] = sth$0;
                    _aQL_[1 + _aQG_] = no_handler;
                    _aQL_[1 + _aQH_] = 0;
                    return run_initializers_opt(self,_aQL_,table)}}}),
           promise_to_lwt=
            function(error$0,p)
             {var
               match=task(0),
               w=match[2],
               t=match[1],
               _aQz_=
                caml_js_wrap_callback
                 (function(e)
                   {var _aQA_=caml_string_of_jsstring(e.message);
                    return wakeup
                            (w,
                             caml_call1
                              (error,
                               caml_call1
                                (error$0,[0,caml_string_of_jsstring(e.name),_aQA_])))});
              p.then
                (caml_js_wrap_callback
                  (function(v){return wakeup(w,caml_call1(ok,v))})).catch
               (_aQz_);
              return t},
           fs=require("fs"),
           fsprom=fs.promises,
           ReadFile=[num_248,_aLt_,caml_fresh_oo_id(0)],
           WriteFile=[num_248,_aLu_,caml_fresh_oo_id(0)],
           read_file=
            function(filename)
             {function _aQx_(v)
               {var b=caml_call3(buffer[1],0,0,0);
                caml_call2(caml_get_public_method(b,738365925,291),b,v);
                return caml_call1
                        (return$3,
                         caml_call1(caml_get_public_method(b,-504739243,292),b))}
              var _aQy_=fsprom.readFile(caml_jsstring_of_string(filename));
              return caml_call2
                      (symbol$13,
                       promise_to_lwt
                        (function(param)
                          {var msg=param[2],name=param[1];
                           return [0,ReadFile,name,msg]},
                         _aQy_),
                       _aQx_)},
           write_file=
            function(filename,content)
             {var
               _aQw_=
                fsprom.writeFile
                 (caml_jsstring_of_string(filename),
                  caml_jsstring_of_string(content));
              return promise_to_lwt
                      (function(param)
                        {var msg=param[2],name=param[1];
                         return [0,WriteFile,name,msg]},
                       _aQw_)},
           call=
            function(ctx,param,body,chunked,meth,uri)
             {function call_and_retry_on_502(attempt,delay)
               {function _aQq_(param)
                 {var ansbody=param[2],response=param[1],status=response[4];
                  if(num_957501398 === status)
                   {var switch$0=0;
                    if
                     (typeof ansbody
                      !==
                      "number"
                      &&
                      num_977172320
                      ===
                      ansbody[1])
                     {var s=ansbody[2];
                      if(3 === s[1][0])invalid_arg(_gd_);
                      var log_ansbody=[0,num_977172320,[0,s[1],s[2],s[3],s[4]]];
                      switch$0 = 1}
                    if(! switch$0)var log_ansbody=ansbody;
                    var
                     _aQr_=
                      function(text)
                       {if(10 <= attempt)return return$1([0,response,ansbody]);
                        function _aQs_(param)
                         {return call_and_retry_on_502(attempt + 1 | 0,delay + 0.1)}
                        var match=task(0),w=match[2],t=match[1],d=delay * num_1000;
                        function callback(_aQv_){return wakeup(w,_aQv_)}
                        var id=[0,0];
                        function loop(step,param)
                         {if(num_2147483000 < step)
                           var step$0=overflow_limit,remain=step - num_2147483000;
                          else
                           var step$0=step,remain=0.;
                          var
                           cb=
                            remain == 0.
                             ?callback
                             :function(_aQu_){return loop(remain,_aQu_)};
                          id[1]
                          =
                          [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
                          return 0}
                        loop(d,0);
                        on_cancel
                         (t,
                          function(param)
                           {var _aQt_=id[1];
                            if(_aQt_)
                             {var x=_aQt_[1];id[1] = 0;return window.clearTimeout(x)}
                            return 0});
                        return caml_call2(symbol_bind$2,t,_aQs_)};
                    return caml_call2
                            (symbol_bind$2,to_string$17(log_ansbody),_aQr_)}
                  return return$1([0,response,ansbody])}
                return caml_call2
                        (symbol_bind$2,
                         caml_call6(_aLn_,ctx,0,body,chunked,meth,uri),
                         _aQq_)}
              return call_and_retry_on_502(1,0.)},
           include$54=
            _aIf_
             ([0,
               sexp_of_ctx,
               default_ctx,
               call,
               head,
               get$2,
               delete$0,
               post,
               put,
               patch,
               post_form,
               callv]),
           null_logger=include$54[1],
           http_ctxt=include$54[6],
           js_wallet_node=
            make_class
             (_aLI_,
              function(_aPZ_)
               {var
                 _aP0_=new_variable(_aPZ_,_aLK_),
                 _aP1_=new_variable(_aPZ_,_aLL_),
                 _aP2_=get_method_labels(_aPZ_,_aLy_),
                 _aP5_=_aP2_[3],
                 _aP9_=_aP2_[7],
                 _aP3_=_aP2_[1],
                 _aP4_=_aP2_[2],
                 _aP6_=_aP2_[4],
                 _aP7_=_aP2_[5],
                 _aP8_=_aP2_[6];
                function _aP__(self_1,alias_name,list,encoding)
                 {var
                   filename=
                    caml_call2(self_1[1][1 + _aP9_],self_1,alias_name);
                  try
                   {var
                     _aQo_=construct$1(encoding,list),
                     s=function(eta){return arg$5(0,_aLN_,eta)}(_aQo_),
                     _aQp_=write_file(filename,s);
                    return _aQp_}
                  catch(e)
                   {e = caml_wrap_exception(e);
                    var _aQn_=return$1(error_exn(e));
                    return caml_call2(generic_trace(_aLM_),alias_name,_aQn_)}}
                function _aP$_(self_1,alias_name,default$0,encoding)
                 {var
                   filename=
                    caml_call2(self_1[1][1 + _aP9_],self_1,alias_name);
                  function _aQk_(e)
                   {if(0 === e[0])
                     {var json=e[1];
                      try
                       {var data=destruct$0(encoding,from_string$0(json))}
                      catch(e)
                       {e = caml_wrap_exception(e);
                        var _aQl_=to_string$0(e);
                        return caml_call3
                                (failwith$0(_aLO_),alias_name,filename,_aQl_)}
                      return caml_call1(return$3,data)}
                    var _aQm_=e[1];
                    if(_aQm_ && _aQm_[1][1] === ReadFile && ! _aQm_[2])
                     return caml_call1(return$3,default$0);
                    return return$1(e)}
                  return caml_call2
                          (symbol_bind$2,
                           caml_call2(self_1[1][1 + _aP5_],self_1,filename),
                           _aQk_)}
                function _aQa_(self_1,f){return caml_call1(f,0)}
                function _aQb_(self_1){return self_1[1 + _aP1_]}
                function _aQc_(self_1,alias_name)
                 {function f(c){return 32 === c?95:c}
                  var
                   filename=
                    symbol
                     (caml_string_of_bytes
                       (map$2(f,caml_bytes_of_string(alias_name))),
                      _aLP_),
                   dirname=self_1[1 + _aP1_],
                   l=caml_ml_string_length(dirname);
                  if(0 !== l && ! is_dir_sep$1(dirname,l - 1 | 0))
                   return symbol(dirname,symbol(dir_sep$2,filename));
                  return symbol(dirname,filename)}
                function _aQd_(self_1){return read_file}
                set_methods
                 (_aPZ_,
                  [0,
                   _aP6_,
                   function(self_1)
                    {var match=self_1[1 + _aP0_];
                     if(match)
                      {var
                        pf=match[1],
                        _aQj_=
                         function(param)
                          {if(0 === param[0])
                            {var b=param[1];
                             return return_some(of_list$0(split_on_char(10,b)))}
                           return return_none};
                       return caml_call2(symbol_bind$2,read_file(pf),_aQj_)}
                     return return_none},
                   _aP5_,
                   _aQd_,
                   _aP9_,
                   _aQc_,
                   _aP8_,
                   _aQb_,
                   _aP4_,
                   _aQa_,
                   _aP7_,
                   _aP$_,
                   _aP3_,
                   _aP__]);
                return function(_aQh_,_aQg_,_aQf_,_aQe_)
                 {var _aQi_=create_object_opt(_aQg_,_aPZ_);
                  _aQi_[1 + _aP1_] = _aQe_;
                  _aQi_[1 + _aP0_] = _aQf_;
                  return _aQi_}});
          make_class
           (_aLI_,
            function(_aPx_)
             {var
               _aPy_=new_variable(_aPx_,_aLQ_),
               _aPz_=new_variable(_aPx_,_aLR_),
               _aPA_=get_method_labels(_aPx_,_aLy_),
               _aPB_=_aPA_[1],
               _aPC_=_aPA_[2],
               _aPD_=_aPA_[3],
               _aPE_=_aPA_[4],
               _aPF_=_aPA_[5],
               _aPG_=_aPA_[6],
               _aPH_=_aPA_[7];
              function _aPI_(self_2,key,list,encoding)
               {try
                 {var
                   _aPY_=construct$1(encoding,list),
                   s=
                    caml_jsstring_of_string
                     (function(eta){return arg$5(0,_aLT_,eta)}(_aPY_));
                  self_2[1 + _aPz_].setItem(caml_jsstring_of_string(key),s);
                  return return_unit$0}
                catch(e)
                 {e = caml_wrap_exception(e);
                  var _aPX_=return$1(error_exn(e));
                  return caml_call2(generic_trace(_aLS_),key,_aPX_)}}
              function _aPJ_(self_2,key,default$0,encoding)
               {var
                 match=
                  map$0
                   (caml_string_of_jsstring,
                    to_option
                     (self_2[1 + _aPz_].getItem(caml_jsstring_of_string(key))));
                if(match)
                 {var data=match[1];
                  try
                   {var data$0=destruct$0(encoding,from_string$0(data))}
                  catch(e)
                   {e = caml_wrap_exception(e);
                    var _aPW_=to_string$0(e);
                    return caml_call2(failwith$0(_aLU_),key,_aPW_)}
                  return caml_call1(return$3,data$0)}
                return caml_call1(return$3,default$0)}
              function _aPK_(self_2,f){return caml_call1(f,0)}
              function _aPL_(self_2){return _aLV_}
              function _aPM_(self_2,fn){return fn}
              function _aPN_(self_2,fn)
               {var
                 match=
                  to_option
                   (self_2[1 + _aPz_].getItem
                     (caml_jsstring_of_string(self_2[1 + _aPy_])));
                if(match)
                 {var s=match[1];
                  return caml_call1(return$3,caml_string_of_jsstring(s))}
                return caml_call1(failwith$0(_aLW_),fn)}
              set_methods
               (_aPx_,
                [0,
                 _aPE_,
                 function(self_2)
                  {var
                    _aPT_=
                     map$0
                      (caml_string_of_jsstring,
                       to_option
                        (self_2[1 + _aPz_].getItem
                          (caml_jsstring_of_string(self_2[1 + _aPy_])))),
                    _aPU_=10;
                   return return$1
                           (map$0
                             (of_list$0,
                              map$0
                               (function(_aPV_){return split_on_char(_aPU_,_aPV_)},_aPT_)))},
                 _aPD_,
                 _aPN_,
                 _aPH_,
                 _aPM_,
                 _aPG_,
                 _aPL_,
                 _aPC_,
                 _aPK_,
                 _aPF_,
                 _aPJ_,
                 _aPB_,
                 _aPI_]);
              return function(_aPR_,_aPQ_,_aPP_,_aPO_)
               {var _aPS_=create_object_opt(_aPQ_,_aPx_);
                _aPS_[1 + _aPz_] = _aPO_;
                _aPS_[1 + _aPy_] = _aPP_;
                return _aPS_}});
          var
           js_prompter=
            make_class
             (_aLA_,
              function(_aPg_)
               {var
                 _aPh_=new_variable(_aPg_,_aLX_),
                 _aPi_=new_variable(_aPg_,_aLY_),
                 _aPj_=get_method_labels(_aPg_,_aLA_),
                 _aPk_=_aPj_[1],
                 _aPl_=_aPj_[2];
                function _aPm_(self_3)
                 {function _aPv_(param)
                   {var match=self_3[1 + _aPi_];
                    if(match){var f=match[1];return caml_call1(f,0)}
                    return failwith$0(_aLZ_)}
                  return function(_aPw_){return kstr(_aPv_,_aPw_)}}
                set_methods
                 (_aPg_,
                  [0,
                   _aPl_,
                   function(self_3)
                    {function _aPt_(param)
                      {var match=self_3[1 + _aPh_];
                       if(match){var f=match[1];return caml_call1(f,0)}
                       return caml_call1(return$3,_aL0_)}
                     return function(_aPu_){return kstr(_aPt_,_aPu_)}},
                   _aPk_,
                   _aPm_]);
                return function(_aPr_,_aPq_,_aPp_,_aPo_,_aPn_)
                 {var _aPs_=create_object_opt(_aPq_,_aPg_);
                  _aPs_[1 + _aPi_] = _aPo_;
                  _aPs_[1 + _aPh_] = _aPp_;
                  return _aPs_}}),
           js_logger=
            make_class
             (_aLx_,
              function(_aO__)
               {var _aO$_=inherits(_aO__,0,0,_aLD_,simple_printer,1)[1];
                return function(_aPc_,_aPb_,client_log,_aPa_)
                 {function _aPd_(channel,msg)
                   {if(caml_string_notequal(channel,_aL1_))
                     {if(caml_string_notequal(channel,_aL2_))
                       {if(client_log)
                         {var cl=client_log[1];
                          return caml_call2
                                  (cl,function(_aPf_){return Math.log(_aPf_)},msg)}
                        return return_unit}
                      console.log(msg);
                      return return_unit}
                    console.error(msg);
                    return return_unit}
                  var _aPe_=create_object_opt(_aPb_,_aO__);
                  caml_call2(_aO$_,_aPe_,_aPd_);
                  return run_initializers_opt(_aPb_,_aPe_,_aO__)}}),
           js_ui=
            make_class
             (_aLJ_,
              function(_aO1_)
               {var
                 _aO2_=get_method_labels(_aO1_,_aLC_),
                 _aO3_=_aO2_[1],
                 _aO4_=_aO2_[2],
                 _aO5_=_aO2_[3];
                function _aO6_(self_5,param){throw [0,Assert_failure,_aL3_]}
                function _aO7_(self_5,param){throw [0,Assert_failure,_aL4_]}
                set_methods
                 (_aO1_,
                  [0,
                   _aO3_,
                   function(self_5,param){throw [0,Assert_failure,_aL5_]},
                   _aO5_,
                   _aO7_,
                   _aO4_,
                   _aO6_]);
                return function(_aO9_,_aO8_)
                 {return create_object_opt(_aO8_,_aO1_)}}),
           js_full=
            make_class
             (_aLE_,
              function(_aOz_)
               {var
                 _aOA_=new_variable(_aOz_,_aL6_),
                 _aOB_=new_variable(_aOz_,_aL7_),
                 _aOC_=new_variable(_aOz_,_aL8_),
                 _aOD_=get_method_labels(_aOz_,_aLv_),
                 _aOE_=_aOD_[1],
                 _aOF_=_aOD_[2],
                 _aOG_=_aOD_[3],
                 _aOH_=inherits(_aOz_,0,0,_aLD_,js_logger,1)[1],
                 _aOI_=inherits(_aOz_,0,0,_aLB_,js_prompter,1)[1],
                 _aOJ_=inherits(_aOz_,0,0,_aLG_,js_wallet_node,1)[1],
                 _aOK_=inherits(_aOz_,0,0,_aLH_,js_ui,1)[1],
                 _aOL_=inherits(_aOz_,0,0,_aLz_,http_ctxt,1)[1];
                function _aOM_(self_6){return self_6[1 + _aOC_]}
                function _aON_(self_6){return self_6[1 + _aOB_]}
                set_methods
                 (_aOz_,
                  [0,
                   _aOF_,
                   function(self_6){return self_6[1 + _aOA_]},
                   _aOG_,
                   _aON_,
                   _aOE_,
                   _aOM_]);
                return function
                 (_aOZ_,
                  _aOY_,
                  _aOX_,
                  _aOW_,
                  _aOV_,
                  _aOU_,
                  _aOT_,
                  _aOS_,
                  _aOR_,
                  _aOQ_,
                  _aOP_,
                  _aOO_)
                 {var _aO0_=create_object_opt(_aOY_,_aOz_);
                  _aO0_[1 + _aOC_] = _aOQ_;
                  _aO0_[1 + _aOB_] = _aOR_;
                  _aO0_[1 + _aOA_] = _aOS_;
                  caml_call3(_aOH_,_aO0_,_aOV_,0);
                  caml_call4(_aOI_,_aO0_,_aOX_,_aOW_,0);
                  caml_call3(_aOJ_,_aO0_,_aOU_,_aOT_);
                  caml_call1(_aOK_,_aO0_);
                  caml_call3(_aOL_,_aO0_,_aOP_,all_media_types);
                  return run_initializers_opt(_aOY_,_aO0_,_aOz_)}}),
           update_prompt_password=
            make_class
             (_aLE_,
              function(_aNn_)
               {var
                 _aNo_=new_variable(_aNn_,_aL9_),
                 _aNp_=new_variable(_aNn_,_aL__),
                 _aNq_=get_method_labels(_aNn_,_aLF_),
                 _aNr_=_aNq_[1],
                 _aNs_=_aNq_[2],
                 _aNt_=_aNq_[3],
                 _aNu_=_aNq_[4],
                 _aNv_=_aNq_[5],
                 _aNw_=_aNq_[6],
                 _aNx_=_aNq_[7],
                 _aNy_=_aNq_[8],
                 _aNz_=_aNq_[9],
                 _aNA_=_aNq_[10],
                 _aNB_=_aNq_[11],
                 _aNC_=_aNq_[12],
                 _aND_=_aNq_[13],
                 _aNE_=_aNq_[14],
                 _aNF_=_aNq_[15],
                 _aNG_=_aNq_[16],
                 _aNH_=_aNq_[17],
                 _aNI_=_aNq_[18],
                 _aNJ_=_aNq_[19],
                 _aNK_=_aNq_[20],
                 _aNL_=_aNq_[21],
                 _aNM_=_aNq_[22],
                 _aNN_=_aNq_[23];
                function _aNO_(self_7){return self_7[1 + _aNp_][1]}
                function _aNP_(self_7)
                 {var _aOy_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOy_,num_164354652,num_301),_aOy_)}
                function _aNQ_(self_7)
                 {var _aOx_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOx_,num_20660969,num_302),_aOx_)}
                function _aNR_(self_7)
                 {var _aOw_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOw_,num_894980516,num_303),_aOw_)}
                function _aNS_(self_7)
                 {var _aOv_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOv_,num_5495062,num_304),_aOv_)}
                function _aNT_(self_7)
                 {var _aOu_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOu_,num_437335495,num_305),_aOu_)}
                function _aNU_(self_7)
                 {var _aOt_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOt_,num_5395588,num_306),_aOt_)}
                function _aNV_(self_7)
                 {var _aOs_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOs_,num_755617299,num_307),_aOs_)}
                function _aNW_(self_7)
                 {var _aOr_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOr_,num_1021446370,num_308),_aOr_)}
                function _aNX_(self_7)
                 {var _aOq_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOq_,num_215364664,num_309),_aOq_)}
                function _aNY_(self_7)
                 {var _aOp_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOp_,num_60991774,310),_aOp_)}
                function _aNZ_(self_7)
                 {var _aOo_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOo_,num_978086655,311),_aOo_)}
                function _aN0_(self_7)
                 {var _aOn_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOn_,num_131416682,312),_aOn_)}
                function _aN1_(self_7)
                 {var _aOm_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOm_,num_443964500,313),_aOm_)}
                function _aN2_(self_7)
                 {var _aOl_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOl_,num_888960333,num_314),_aOl_)}
                function _aN3_(self_7)
                 {var _aOk_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOk_,num_1055856623,315),_aOk_)}
                function _aN4_(self_7)
                 {var _aOj_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOj_,num_351273602,316),_aOj_)}
                function _aN5_(self_7)
                 {var _aOi_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOi_,num_799445793,317),_aOi_)}
                function _aN6_(self_7)
                 {var _aOh_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOh_,num_343364604,318),_aOh_)}
                function _aN7_(self_7)
                 {var _aOg_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOg_,num_881248069,num_319),_aOg_)}
                function _aN8_(self_7)
                 {var _aOf_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOf_,num_386853281,num_320),_aOf_)}
                function _aN9_(self_7)
                 {var _aOe_=self_7[1 + _aNo_];
                  return caml_call1
                          (caml_get_public_method(_aOe_,num_944268762,321),_aOe_)}
                set_methods
                 (_aNn_,
                  [0,
                   _aND_,
                   function(self_7)
                    {var _aOd_=self_7[1 + _aNo_];
                     return caml_call1
                             (caml_get_public_method(_aOd_,num_1034287848,322),_aOd_)},
                   _aNC_,
                   _aN9_,
                   _aNB_,
                   _aN8_,
                   _aNv_,
                   _aN7_,
                   _aNs_,
                   _aN6_,
                   _aNr_,
                   _aN5_,
                   _aNN_,
                   _aN4_,
                   _aNM_,
                   _aN3_,
                   _aNL_,
                   _aN2_,
                   _aNK_,
                   _aN1_,
                   _aNJ_,
                   _aN0_,
                   _aNI_,
                   _aNZ_,
                   _aNH_,
                   _aNY_,
                   _aNG_,
                   _aNX_,
                   _aNF_,
                   _aNW_,
                   _aNE_,
                   _aNV_,
                   _aNA_,
                   _aNU_,
                   _aNz_,
                   _aNT_,
                   _aNy_,
                   _aNS_,
                   _aNx_,
                   _aNR_,
                   _aNu_,
                   _aNQ_,
                   _aNt_,
                   _aNP_,
                   _aNw_,
                   _aNO_]);
                return function(_aOb_,_aOa_,_aN$_,_aN__)
                 {var _aOc_=create_object_opt(_aOa_,_aNn_);
                  _aOc_[1 + _aNp_] = _aN__;
                  _aOc_[1 + _aNo_] = _aN$_;
                  return _aOc_}});
          make_class
           (shared$8,
            function(_aNa_)
             {var
               _aNb_=new_variable(_aNa_,_aL$_),
               _aNc_=new_variable(_aNa_,_aMa_),
               _aNd_=get_method_labels(_aNa_,_aLw_),
               _aNe_=_aNd_[1],
               _aNf_=_aNd_[2];
              function _aNg_(self_8){return self_8[1 + _aNc_][1]}
              set_methods
               (_aNa_,
                [0,
                 _aNf_,
                 function(self_8)
                  {var _aNm_=self_8[1 + _aNb_];
                   return caml_call1
                           (caml_get_public_method(_aNm_,-818969533,323),_aNm_)},
                 _aNe_,
                 _aNg_]);
              return function(_aNk_,_aNj_,_aNi_,_aNh_)
               {var _aNl_=create_object_opt(_aNj_,_aNa_);
                _aNl_[1 + _aNc_] = _aNh_;
                _aNl_[1 + _aNb_] = _aNi_;
                return _aNl_}});
          var
           to_promise=
            function(lwt_val)
             {var promise_glob=window.Promise;
              function f(resolve,param)
               {return async
                        (function(param)
                          {return caml_call2
                                   (symbol$10,
                                    lwt_val,
                                    function(res){return caml_call1(resolve,res)})})}
              return new promise_glob(f)},
           entrypoints_obj={},
           _aMd_=[0,of_string$0(_aMc_),null_logger],
           cctxt=
            caml_call11
             (js_full[1],
              0,
              0,
              0,
              0,
              password_file,
              base_dir,
              num_858743897,
              _aMe_,
              0,
              _aMd_,
              0),
           f_of_entry=
            function(entry,cctxt,input)
             {var
               json_glob=window.JSON,
               input$0=caml_string_of_jsstring(json_glob.stringify(input)),
               match=from_string$1(input$0);
              if(0 === match[0])
               var
                json=match[1],
                _aM__=
                 function(json)
                  {var
                    json$0=caml_jsstring_of_string(arg$5(0,0,json)),
                    json_glob=window.JSON;
                   return json_glob.parse(json$0)},
                _aM$_=
                 caml_call2(symbol$10,apply_entry(entry,json,cctxt),_aM__);
              else
               var _aM$_=return$1("This is not valid json.");
              return to_promise(_aM$_)},
           chain_id_test=
            entrypoint
             (_aMh_,
              input$0,
              output,
              function(param,cctxt)
               {var switch$0=0;
                function _aM8_(param)
                 {if(0 === param[0])
                   {var v=param[1],eta=construct$1(encoding$4,v);
                    return caml_call1(return$3,arg$5(0,0,eta))}
                  var e=param[1],s=caml_call2(strf(_aMf_),pp_print_error,e);
                  output_string(stdout,s);
                  caml_ml_output_char(stdout,10);
                  caml_ml_flush(stdout);
                  return failwith$0(_aMg_)}
                var chain=num_858743897;
                if
                 (typeof 858743897 !== "number" && num_803298286 === chain[1])
                 {var h=chain[2],_aM9_=caml_call1(return$3,h);switch$0 = 1}
                if(! switch$0)
                 var
                  s=caml_call2(prefix$0,path$1,s$0),
                  _aM9_=caml_call2(make_call1(s,cctxt,chain),0,0);
                return caml_call2(symbol_bind$2,_aM9_,_aM8_)}),
           _aMi_=
            function(param,cctxt)
             {var content=param[2],fn=param[1];
              function _aM7_(param){return read_file(fn)}
              return caml_call2(symbol$13,write_file(fn,content),_aM7_)},
           read_write_test=
            entrypoint
             (_aMl_,
              obj2([0,_aMk_,output,0,0],[0,_aMj_,output,0,0]),
              output,
              _aMi_),
           _aMm_=
            function(fn,cctxt)
             {function _aM6_(param)
               {return 0 === param[0]
                        ?caml_call1(return$3,0)
                        :caml_call1(return$3,1)}
              return caml_call2(symbol_bind$2,read_file(fn),_aM6_)},
           read_fail_test=
            entrypoint(_aMo_,obj1([0,_aMn_,output,0,0]),bool$1,_aMm_),
           test_entrypoints=
            [0,read_write_test,[0,read_fail_test,[0,chain_id_test,0]]],
           entrypoints$2=
            append(test_entrypoints,append(entrypoints(0),entrypoints$1)),
           f$0=
            function(entry)
             {if(0 === entry[0])
               {var
                 path=entry[5],
                 _aM3_=function(_aM5_){return f_of_entry(entry,cctxt,_aM5_)};
                return entrypoints_obj
                        [caml_jsstring_of_string
                          (global_replace(regexp(_aMq_),_aMp_,path))]
                       =
                       _aM3_}
              var path$0=entry[5];
              function _aM4_(input,prompt_pwd_clbk)
               {var
                 prompt_password=
                  [0,
                   function(x)
                    {return kstr
                             (function(msg)
                               {output_string(stdout,msg);
                                var line=caml_string_of_jsstring(prompt_pwd_clbk());
                                return caml_call1(return$3,to_bytes(line))},
                              x)}],
                 cctxt$0=
                  caml_call3
                   (update_prompt_password[1],0,cctxt,prompt_password);
                return f_of_entry(entry,cctxt$0,input)}
              return entrypoints_obj
                      [caml_jsstring_of_string
                        (global_replace(regexp(_aMs_),_aMr_,path$0))]
                     =
                     _aM4_};
          iter$0(f$0,entrypoints$2);
          var
           _aMt_=[0,0,0,0],
           _aMu_=
            function(self,pbkdf2sha256,pbkdf2sha512,incdirect)
             {if(! _aMt_[1])
               {var
                 _aMS_=create_table(shared$9),
                 _aMT_=new_variable(_aMS_,_aMv_),
                 _aMU_=get_method_labels(_aMS_,_aMb_),
                 _aMV_=_aMU_[1],
                 _aMW_=_aMU_[2],
                 _aMX_=_aMU_[3],
                 _aMY_=
                  function(self_2)
                   {var env=self_2[1 + _aMT_];return caml_call1(env[2],env[1])},
                 _aMZ_=
                  function(self_2)
                   {var env=self_2[1 + _aMT_];return caml_call1(env[3],env[1])};
                set_methods
                 (_aMS_,
                  [0,
                   _aMW_,
                   function(self_2)
                    {var env=self_2[1 + _aMT_];return caml_call1(env[4],env[1])},
                   _aMV_,
                   _aMZ_,
                   _aMX_,
                   _aMY_]);
                var
                 _aM0_=
                  function(_aM1_)
                   {var _aM2_=create_object_opt(0,_aMS_);
                    _aM2_[1 + _aMT_] = _aM1_;
                    return _aM2_};
                init_class(_aMS_);
                _aMt_[1] = _aM0_}
              return caml_call1
                      (_aMt_[1],[0,self,incdirect,pbkdf2sha512,pbkdf2sha256])},
           _aMw_=
            function(param,input)
             {var
               input$0=caml_string_of_jsstring(input),
               match=from_string$1(input$0);
              if(0 === match[0])
               var
                n=match[1],
                _aMQ_=
                 function(json)
                  {return caml_jsstring_of_string(arg$5(0,0,json))},
                entrypoints=append(entrypoints$1,0),
                find_f=
                 function(param)
                  {if(0 === param[0])
                    {var path=param[5];return caml_string_equal(path,req_path)}
                   var path$0=param[5];
                   return caml_string_equal(path$0,req_path)},
                entry=find(find_f,entrypoints),
                _aMR_=caml_call2(symbol$10,apply_entry(entry,n,cctxt),_aMQ_);
              else
               var _aMR_=return$1("error woops");
              return to_promise(_aMR_)},
           _aMx_=
            function(param,password,salt,count,dk_len)
             {var
               password$0=to_bytes(caml_string_of_jsstring(password)),
               salt$0=to_bytes(caml_string_of_jsstring(salt)),
               count$0=count | 0,
               dk_len$0=dk_len | 0,
               result=caml_call4(SHA512[1],password$0,salt$0,count$0,dk_len$0),
               eta=to_string(result),
               match=arg(0,eta),
               hexresult=match[2];
              return caml_jsstring_of_string(hexresult)},
           _aMy_=
            function(param,password,salt,count,dk_len)
             {var
               password$0=to_bytes(caml_string_of_jsstring(password)),
               salt$0=to_bytes(caml_string_of_jsstring(salt)),
               count$0=count | 0,
               dk_len$0=dk_len | 0,
               result=caml_call4(SHA256[1],password$0,salt$0,count$0,dk_len$0),
               eta=to_string(result),
               match=arg(0,eta),
               hexresult=match[2];
              return caml_jsstring_of_string(hexresult)};
          export_all
           (function(t14,t15,t16,param)
              {return {"pbkdf2sha256":caml_js_wrap_meth_callback(t14),
                       "pbkdf2sha512":caml_js_wrap_meth_callback(t15),
                       "incdirect":caml_js_wrap_meth_callback(t16)}}
             (_aMy_,_aMx_,_aMw_,_aMu_));
          export_all(entrypoints_obj);
          do_at_exit(0);
          return}}
      throw [0,Assert_failure,_aMC_]}
    throw [0,Assert_failure,_aMD_]}}
